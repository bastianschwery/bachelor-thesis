
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	10 3b 01 20 ed db 00 00 3d bb 01 00 1d dc 00 00     .;. ....=.......
    8010:	1d dc 00 00 1d dc 00 00 1d dc 00 00 1d dc 00 00     ................
	...
    802c:	b5 d9 00 00 1d dc 00 00 00 00 00 00 59 d9 00 00     ............Y...
    803c:	99 c2 00 00                                         ....

00008040 <_irq_vector_table>:
    8040:	ad db 00 00 ad db 00 00 ad db 00 00 ad db 00 00     ................
    8050:	ad db 00 00 ad db 00 00 ad db 00 00 ad db 00 00     ................
    8060:	ad db 00 00 ad db 00 00 ad db 00 00 ad db 00 00     ................
    8070:	ad db 00 00 ad db 00 00 ad db 00 00 ad db 00 00     ................
    8080:	ad db 00 00 ad db 00 00 ad db 00 00 ad db 00 00     ................
    8090:	ad db 00 00 ad db 00 00 ad db 00 00 ad db 00 00     ................
    80a0:	ad db 00 00 ad db 00 00 ad db 00 00 ad db 00 00     ................
    80b0:	ad db 00 00 ad db 00 00 ad db 00 00 ad db 00 00     ................
    80c0:	ad db 00 00 ad db 00 00 ad db 00 00 ad db 00 00     ................
    80d0:	ad db 00 00 ad db 00 00 ad db 00 00 ad db 00 00     ................
    80e0:	ad db 00 00 ad db 00 00 ad db 00 00 ad db 00 00     ................
    80f0:	ad db 00 00 ad db 00 00 ad db 00 00 ad db 00 00     ................
    8100:	ad db 00 00 ad db 00 00 ad db 00 00 ad db 00 00     ................
    8110:	ad db 00 00 ad db 00 00 ad db 00 00 ad db 00 00     ................
    8120:	ad db 00 00 ad db 00 00 ad db 00 00 ad db 00 00     ................
    8130:	ad db 00 00 ad db 00 00 ad db 00 00 ad db 00 00     ................
    8140:	ad db 00 00 ad db 00 00 ad db 00 00 ad db 00 00     ................
    8150:	ad db 00 00                                         ....

00008154 <_vector_end>:
	...

00008200 <m_firmware_info>:
    8200:	de e6 1e 28 4c bb ce 8f 02 35 00 00 3c 00 00 00     ...(L....5..<...
    8210:	9c b5 01 00 01 00 00 00 00 80 00 00 00 80 00 00     ................
    8220:	ff ff 02 91 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

00008240 <__aeabi_drsub>:
    8240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    8244:	e002      	b.n	824c <__adddf3>
    8246:	bf00      	nop

00008248 <__aeabi_dsub>:
    8248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000824c <__adddf3>:
    824c:	b530      	push	{r4, r5, lr}
    824e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    8252:	ea4f 0543 	mov.w	r5, r3, lsl #1
    8256:	ea94 0f05 	teq	r4, r5
    825a:	bf08      	it	eq
    825c:	ea90 0f02 	teqeq	r0, r2
    8260:	bf1f      	itttt	ne
    8262:	ea54 0c00 	orrsne.w	ip, r4, r0
    8266:	ea55 0c02 	orrsne.w	ip, r5, r2
    826a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    826e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    8272:	f000 80e2 	beq.w	843a <__adddf3+0x1ee>
    8276:	ea4f 5454 	mov.w	r4, r4, lsr #21
    827a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    827e:	bfb8      	it	lt
    8280:	426d      	neglt	r5, r5
    8282:	dd0c      	ble.n	829e <__adddf3+0x52>
    8284:	442c      	add	r4, r5
    8286:	ea80 0202 	eor.w	r2, r0, r2
    828a:	ea81 0303 	eor.w	r3, r1, r3
    828e:	ea82 0000 	eor.w	r0, r2, r0
    8292:	ea83 0101 	eor.w	r1, r3, r1
    8296:	ea80 0202 	eor.w	r2, r0, r2
    829a:	ea81 0303 	eor.w	r3, r1, r3
    829e:	2d36      	cmp	r5, #54	; 0x36
    82a0:	bf88      	it	hi
    82a2:	bd30      	pophi	{r4, r5, pc}
    82a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    82a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    82ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    82b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    82b4:	d002      	beq.n	82bc <__adddf3+0x70>
    82b6:	4240      	negs	r0, r0
    82b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    82bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    82c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    82c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    82c8:	d002      	beq.n	82d0 <__adddf3+0x84>
    82ca:	4252      	negs	r2, r2
    82cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    82d0:	ea94 0f05 	teq	r4, r5
    82d4:	f000 80a7 	beq.w	8426 <__adddf3+0x1da>
    82d8:	f1a4 0401 	sub.w	r4, r4, #1
    82dc:	f1d5 0e20 	rsbs	lr, r5, #32
    82e0:	db0d      	blt.n	82fe <__adddf3+0xb2>
    82e2:	fa02 fc0e 	lsl.w	ip, r2, lr
    82e6:	fa22 f205 	lsr.w	r2, r2, r5
    82ea:	1880      	adds	r0, r0, r2
    82ec:	f141 0100 	adc.w	r1, r1, #0
    82f0:	fa03 f20e 	lsl.w	r2, r3, lr
    82f4:	1880      	adds	r0, r0, r2
    82f6:	fa43 f305 	asr.w	r3, r3, r5
    82fa:	4159      	adcs	r1, r3
    82fc:	e00e      	b.n	831c <__adddf3+0xd0>
    82fe:	f1a5 0520 	sub.w	r5, r5, #32
    8302:	f10e 0e20 	add.w	lr, lr, #32
    8306:	2a01      	cmp	r2, #1
    8308:	fa03 fc0e 	lsl.w	ip, r3, lr
    830c:	bf28      	it	cs
    830e:	f04c 0c02 	orrcs.w	ip, ip, #2
    8312:	fa43 f305 	asr.w	r3, r3, r5
    8316:	18c0      	adds	r0, r0, r3
    8318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    831c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8320:	d507      	bpl.n	8332 <__adddf3+0xe6>
    8322:	f04f 0e00 	mov.w	lr, #0
    8326:	f1dc 0c00 	rsbs	ip, ip, #0
    832a:	eb7e 0000 	sbcs.w	r0, lr, r0
    832e:	eb6e 0101 	sbc.w	r1, lr, r1
    8332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    8336:	d31b      	bcc.n	8370 <__adddf3+0x124>
    8338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    833c:	d30c      	bcc.n	8358 <__adddf3+0x10c>
    833e:	0849      	lsrs	r1, r1, #1
    8340:	ea5f 0030 	movs.w	r0, r0, rrx
    8344:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8348:	f104 0401 	add.w	r4, r4, #1
    834c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    8354:	f080 809a 	bcs.w	848c <__adddf3+0x240>
    8358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    835c:	bf08      	it	eq
    835e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    8362:	f150 0000 	adcs.w	r0, r0, #0
    8366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    836a:	ea41 0105 	orr.w	r1, r1, r5
    836e:	bd30      	pop	{r4, r5, pc}
    8370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    8374:	4140      	adcs	r0, r0
    8376:	eb41 0101 	adc.w	r1, r1, r1
    837a:	3c01      	subs	r4, #1
    837c:	bf28      	it	cs
    837e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    8382:	d2e9      	bcs.n	8358 <__adddf3+0x10c>
    8384:	f091 0f00 	teq	r1, #0
    8388:	bf04      	itt	eq
    838a:	4601      	moveq	r1, r0
    838c:	2000      	moveq	r0, #0
    838e:	fab1 f381 	clz	r3, r1
    8392:	bf08      	it	eq
    8394:	3320      	addeq	r3, #32
    8396:	f1a3 030b 	sub.w	r3, r3, #11
    839a:	f1b3 0220 	subs.w	r2, r3, #32
    839e:	da0c      	bge.n	83ba <__adddf3+0x16e>
    83a0:	320c      	adds	r2, #12
    83a2:	dd08      	ble.n	83b6 <__adddf3+0x16a>
    83a4:	f102 0c14 	add.w	ip, r2, #20
    83a8:	f1c2 020c 	rsb	r2, r2, #12
    83ac:	fa01 f00c 	lsl.w	r0, r1, ip
    83b0:	fa21 f102 	lsr.w	r1, r1, r2
    83b4:	e00c      	b.n	83d0 <__adddf3+0x184>
    83b6:	f102 0214 	add.w	r2, r2, #20
    83ba:	bfd8      	it	le
    83bc:	f1c2 0c20 	rsble	ip, r2, #32
    83c0:	fa01 f102 	lsl.w	r1, r1, r2
    83c4:	fa20 fc0c 	lsr.w	ip, r0, ip
    83c8:	bfdc      	itt	le
    83ca:	ea41 010c 	orrle.w	r1, r1, ip
    83ce:	4090      	lslle	r0, r2
    83d0:	1ae4      	subs	r4, r4, r3
    83d2:	bfa2      	ittt	ge
    83d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    83d8:	4329      	orrge	r1, r5
    83da:	bd30      	popge	{r4, r5, pc}
    83dc:	ea6f 0404 	mvn.w	r4, r4
    83e0:	3c1f      	subs	r4, #31
    83e2:	da1c      	bge.n	841e <__adddf3+0x1d2>
    83e4:	340c      	adds	r4, #12
    83e6:	dc0e      	bgt.n	8406 <__adddf3+0x1ba>
    83e8:	f104 0414 	add.w	r4, r4, #20
    83ec:	f1c4 0220 	rsb	r2, r4, #32
    83f0:	fa20 f004 	lsr.w	r0, r0, r4
    83f4:	fa01 f302 	lsl.w	r3, r1, r2
    83f8:	ea40 0003 	orr.w	r0, r0, r3
    83fc:	fa21 f304 	lsr.w	r3, r1, r4
    8400:	ea45 0103 	orr.w	r1, r5, r3
    8404:	bd30      	pop	{r4, r5, pc}
    8406:	f1c4 040c 	rsb	r4, r4, #12
    840a:	f1c4 0220 	rsb	r2, r4, #32
    840e:	fa20 f002 	lsr.w	r0, r0, r2
    8412:	fa01 f304 	lsl.w	r3, r1, r4
    8416:	ea40 0003 	orr.w	r0, r0, r3
    841a:	4629      	mov	r1, r5
    841c:	bd30      	pop	{r4, r5, pc}
    841e:	fa21 f004 	lsr.w	r0, r1, r4
    8422:	4629      	mov	r1, r5
    8424:	bd30      	pop	{r4, r5, pc}
    8426:	f094 0f00 	teq	r4, #0
    842a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    842e:	bf06      	itte	eq
    8430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    8434:	3401      	addeq	r4, #1
    8436:	3d01      	subne	r5, #1
    8438:	e74e      	b.n	82d8 <__adddf3+0x8c>
    843a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    843e:	bf18      	it	ne
    8440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    8444:	d029      	beq.n	849a <__adddf3+0x24e>
    8446:	ea94 0f05 	teq	r4, r5
    844a:	bf08      	it	eq
    844c:	ea90 0f02 	teqeq	r0, r2
    8450:	d005      	beq.n	845e <__adddf3+0x212>
    8452:	ea54 0c00 	orrs.w	ip, r4, r0
    8456:	bf04      	itt	eq
    8458:	4619      	moveq	r1, r3
    845a:	4610      	moveq	r0, r2
    845c:	bd30      	pop	{r4, r5, pc}
    845e:	ea91 0f03 	teq	r1, r3
    8462:	bf1e      	ittt	ne
    8464:	2100      	movne	r1, #0
    8466:	2000      	movne	r0, #0
    8468:	bd30      	popne	{r4, r5, pc}
    846a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    846e:	d105      	bne.n	847c <__adddf3+0x230>
    8470:	0040      	lsls	r0, r0, #1
    8472:	4149      	adcs	r1, r1
    8474:	bf28      	it	cs
    8476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    847a:	bd30      	pop	{r4, r5, pc}
    847c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8480:	bf3c      	itt	cc
    8482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    8486:	bd30      	popcc	{r4, r5, pc}
    8488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    848c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    8490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8494:	f04f 0000 	mov.w	r0, #0
    8498:	bd30      	pop	{r4, r5, pc}
    849a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    849e:	bf1a      	itte	ne
    84a0:	4619      	movne	r1, r3
    84a2:	4610      	movne	r0, r2
    84a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    84a8:	bf1c      	itt	ne
    84aa:	460b      	movne	r3, r1
    84ac:	4602      	movne	r2, r0
    84ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    84b2:	bf06      	itte	eq
    84b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    84b8:	ea91 0f03 	teqeq	r1, r3
    84bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    84c0:	bd30      	pop	{r4, r5, pc}
    84c2:	bf00      	nop

000084c4 <__aeabi_ui2d>:
    84c4:	f090 0f00 	teq	r0, #0
    84c8:	bf04      	itt	eq
    84ca:	2100      	moveq	r1, #0
    84cc:	4770      	bxeq	lr
    84ce:	b530      	push	{r4, r5, lr}
    84d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    84d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    84d8:	f04f 0500 	mov.w	r5, #0
    84dc:	f04f 0100 	mov.w	r1, #0
    84e0:	e750      	b.n	8384 <__adddf3+0x138>
    84e2:	bf00      	nop

000084e4 <__aeabi_i2d>:
    84e4:	f090 0f00 	teq	r0, #0
    84e8:	bf04      	itt	eq
    84ea:	2100      	moveq	r1, #0
    84ec:	4770      	bxeq	lr
    84ee:	b530      	push	{r4, r5, lr}
    84f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    84f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    84f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    84fc:	bf48      	it	mi
    84fe:	4240      	negmi	r0, r0
    8500:	f04f 0100 	mov.w	r1, #0
    8504:	e73e      	b.n	8384 <__adddf3+0x138>
    8506:	bf00      	nop

00008508 <__aeabi_f2d>:
    8508:	0042      	lsls	r2, r0, #1
    850a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    850e:	ea4f 0131 	mov.w	r1, r1, rrx
    8512:	ea4f 7002 	mov.w	r0, r2, lsl #28
    8516:	bf1f      	itttt	ne
    8518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    851c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    8524:	4770      	bxne	lr
    8526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    852a:	bf08      	it	eq
    852c:	4770      	bxeq	lr
    852e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    8532:	bf04      	itt	eq
    8534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8538:	4770      	bxeq	lr
    853a:	b530      	push	{r4, r5, lr}
    853c:	f44f 7460 	mov.w	r4, #896	; 0x380
    8540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8548:	e71c      	b.n	8384 <__adddf3+0x138>
    854a:	bf00      	nop

0000854c <__aeabi_ul2d>:
    854c:	ea50 0201 	orrs.w	r2, r0, r1
    8550:	bf08      	it	eq
    8552:	4770      	bxeq	lr
    8554:	b530      	push	{r4, r5, lr}
    8556:	f04f 0500 	mov.w	r5, #0
    855a:	e00a      	b.n	8572 <__aeabi_l2d+0x16>

0000855c <__aeabi_l2d>:
    855c:	ea50 0201 	orrs.w	r2, r0, r1
    8560:	bf08      	it	eq
    8562:	4770      	bxeq	lr
    8564:	b530      	push	{r4, r5, lr}
    8566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    856a:	d502      	bpl.n	8572 <__aeabi_l2d+0x16>
    856c:	4240      	negs	r0, r0
    856e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8572:	f44f 6480 	mov.w	r4, #1024	; 0x400
    8576:	f104 0432 	add.w	r4, r4, #50	; 0x32
    857a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    857e:	f43f aed8 	beq.w	8332 <__adddf3+0xe6>
    8582:	f04f 0203 	mov.w	r2, #3
    8586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    858a:	bf18      	it	ne
    858c:	3203      	addne	r2, #3
    858e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    8592:	bf18      	it	ne
    8594:	3203      	addne	r2, #3
    8596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    859a:	f1c2 0320 	rsb	r3, r2, #32
    859e:	fa00 fc03 	lsl.w	ip, r0, r3
    85a2:	fa20 f002 	lsr.w	r0, r0, r2
    85a6:	fa01 fe03 	lsl.w	lr, r1, r3
    85aa:	ea40 000e 	orr.w	r0, r0, lr
    85ae:	fa21 f102 	lsr.w	r1, r1, r2
    85b2:	4414      	add	r4, r2
    85b4:	e6bd      	b.n	8332 <__adddf3+0xe6>
    85b6:	bf00      	nop

000085b8 <__aeabi_dmul>:
    85b8:	b570      	push	{r4, r5, r6, lr}
    85ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
    85be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    85c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    85c6:	bf1d      	ittte	ne
    85c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    85cc:	ea94 0f0c 	teqne	r4, ip
    85d0:	ea95 0f0c 	teqne	r5, ip
    85d4:	f000 f8de 	bleq	8794 <__aeabi_dmul+0x1dc>
    85d8:	442c      	add	r4, r5
    85da:	ea81 0603 	eor.w	r6, r1, r3
    85de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    85e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    85e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    85ea:	bf18      	it	ne
    85ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    85f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    85f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    85f8:	d038      	beq.n	866c <__aeabi_dmul+0xb4>
    85fa:	fba0 ce02 	umull	ip, lr, r0, r2
    85fe:	f04f 0500 	mov.w	r5, #0
    8602:	fbe1 e502 	umlal	lr, r5, r1, r2
    8606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    860a:	fbe0 e503 	umlal	lr, r5, r0, r3
    860e:	f04f 0600 	mov.w	r6, #0
    8612:	fbe1 5603 	umlal	r5, r6, r1, r3
    8616:	f09c 0f00 	teq	ip, #0
    861a:	bf18      	it	ne
    861c:	f04e 0e01 	orrne.w	lr, lr, #1
    8620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    8624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    862c:	d204      	bcs.n	8638 <__aeabi_dmul+0x80>
    862e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    8632:	416d      	adcs	r5, r5
    8634:	eb46 0606 	adc.w	r6, r6, r6
    8638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    863c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    8644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    864c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8650:	bf88      	it	hi
    8652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    8656:	d81e      	bhi.n	8696 <__aeabi_dmul+0xde>
    8658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    865c:	bf08      	it	eq
    865e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    8662:	f150 0000 	adcs.w	r0, r0, #0
    8666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    866a:	bd70      	pop	{r4, r5, r6, pc}
    866c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8670:	ea46 0101 	orr.w	r1, r6, r1
    8674:	ea40 0002 	orr.w	r0, r0, r2
    8678:	ea81 0103 	eor.w	r1, r1, r3
    867c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8680:	bfc2      	ittt	gt
    8682:	ebd4 050c 	rsbsgt	r5, r4, ip
    8686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    868a:	bd70      	popgt	{r4, r5, r6, pc}
    868c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8690:	f04f 0e00 	mov.w	lr, #0
    8694:	3c01      	subs	r4, #1
    8696:	f300 80ab 	bgt.w	87f0 <__aeabi_dmul+0x238>
    869a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    869e:	bfde      	ittt	le
    86a0:	2000      	movle	r0, #0
    86a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    86a6:	bd70      	pople	{r4, r5, r6, pc}
    86a8:	f1c4 0400 	rsb	r4, r4, #0
    86ac:	3c20      	subs	r4, #32
    86ae:	da35      	bge.n	871c <__aeabi_dmul+0x164>
    86b0:	340c      	adds	r4, #12
    86b2:	dc1b      	bgt.n	86ec <__aeabi_dmul+0x134>
    86b4:	f104 0414 	add.w	r4, r4, #20
    86b8:	f1c4 0520 	rsb	r5, r4, #32
    86bc:	fa00 f305 	lsl.w	r3, r0, r5
    86c0:	fa20 f004 	lsr.w	r0, r0, r4
    86c4:	fa01 f205 	lsl.w	r2, r1, r5
    86c8:	ea40 0002 	orr.w	r0, r0, r2
    86cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    86d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    86d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    86d8:	fa21 f604 	lsr.w	r6, r1, r4
    86dc:	eb42 0106 	adc.w	r1, r2, r6
    86e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    86e4:	bf08      	it	eq
    86e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    86ea:	bd70      	pop	{r4, r5, r6, pc}
    86ec:	f1c4 040c 	rsb	r4, r4, #12
    86f0:	f1c4 0520 	rsb	r5, r4, #32
    86f4:	fa00 f304 	lsl.w	r3, r0, r4
    86f8:	fa20 f005 	lsr.w	r0, r0, r5
    86fc:	fa01 f204 	lsl.w	r2, r1, r4
    8700:	ea40 0002 	orr.w	r0, r0, r2
    8704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    870c:	f141 0100 	adc.w	r1, r1, #0
    8710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8714:	bf08      	it	eq
    8716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    871a:	bd70      	pop	{r4, r5, r6, pc}
    871c:	f1c4 0520 	rsb	r5, r4, #32
    8720:	fa00 f205 	lsl.w	r2, r0, r5
    8724:	ea4e 0e02 	orr.w	lr, lr, r2
    8728:	fa20 f304 	lsr.w	r3, r0, r4
    872c:	fa01 f205 	lsl.w	r2, r1, r5
    8730:	ea43 0302 	orr.w	r3, r3, r2
    8734:	fa21 f004 	lsr.w	r0, r1, r4
    8738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    873c:	fa21 f204 	lsr.w	r2, r1, r4
    8740:	ea20 0002 	bic.w	r0, r0, r2
    8744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    874c:	bf08      	it	eq
    874e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8752:	bd70      	pop	{r4, r5, r6, pc}
    8754:	f094 0f00 	teq	r4, #0
    8758:	d10f      	bne.n	877a <__aeabi_dmul+0x1c2>
    875a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    875e:	0040      	lsls	r0, r0, #1
    8760:	eb41 0101 	adc.w	r1, r1, r1
    8764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8768:	bf08      	it	eq
    876a:	3c01      	subeq	r4, #1
    876c:	d0f7      	beq.n	875e <__aeabi_dmul+0x1a6>
    876e:	ea41 0106 	orr.w	r1, r1, r6
    8772:	f095 0f00 	teq	r5, #0
    8776:	bf18      	it	ne
    8778:	4770      	bxne	lr
    877a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    877e:	0052      	lsls	r2, r2, #1
    8780:	eb43 0303 	adc.w	r3, r3, r3
    8784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    8788:	bf08      	it	eq
    878a:	3d01      	subeq	r5, #1
    878c:	d0f7      	beq.n	877e <__aeabi_dmul+0x1c6>
    878e:	ea43 0306 	orr.w	r3, r3, r6
    8792:	4770      	bx	lr
    8794:	ea94 0f0c 	teq	r4, ip
    8798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    879c:	bf18      	it	ne
    879e:	ea95 0f0c 	teqne	r5, ip
    87a2:	d00c      	beq.n	87be <__aeabi_dmul+0x206>
    87a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    87a8:	bf18      	it	ne
    87aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    87ae:	d1d1      	bne.n	8754 <__aeabi_dmul+0x19c>
    87b0:	ea81 0103 	eor.w	r1, r1, r3
    87b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    87b8:	f04f 0000 	mov.w	r0, #0
    87bc:	bd70      	pop	{r4, r5, r6, pc}
    87be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    87c2:	bf06      	itte	eq
    87c4:	4610      	moveq	r0, r2
    87c6:	4619      	moveq	r1, r3
    87c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    87cc:	d019      	beq.n	8802 <__aeabi_dmul+0x24a>
    87ce:	ea94 0f0c 	teq	r4, ip
    87d2:	d102      	bne.n	87da <__aeabi_dmul+0x222>
    87d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    87d8:	d113      	bne.n	8802 <__aeabi_dmul+0x24a>
    87da:	ea95 0f0c 	teq	r5, ip
    87de:	d105      	bne.n	87ec <__aeabi_dmul+0x234>
    87e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    87e4:	bf1c      	itt	ne
    87e6:	4610      	movne	r0, r2
    87e8:	4619      	movne	r1, r3
    87ea:	d10a      	bne.n	8802 <__aeabi_dmul+0x24a>
    87ec:	ea81 0103 	eor.w	r1, r1, r3
    87f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    87f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    87f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    87fc:	f04f 0000 	mov.w	r0, #0
    8800:	bd70      	pop	{r4, r5, r6, pc}
    8802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    880a:	bd70      	pop	{r4, r5, r6, pc}

0000880c <__aeabi_ddiv>:
    880c:	b570      	push	{r4, r5, r6, lr}
    880e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    8816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    881a:	bf1d      	ittte	ne
    881c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8820:	ea94 0f0c 	teqne	r4, ip
    8824:	ea95 0f0c 	teqne	r5, ip
    8828:	f000 f8a7 	bleq	897a <__aeabi_ddiv+0x16e>
    882c:	eba4 0405 	sub.w	r4, r4, r5
    8830:	ea81 0e03 	eor.w	lr, r1, r3
    8834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8838:	ea4f 3101 	mov.w	r1, r1, lsl #12
    883c:	f000 8088 	beq.w	8950 <__aeabi_ddiv+0x144>
    8840:	ea4f 3303 	mov.w	r3, r3, lsl #12
    8844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    884c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8850:	ea4f 2202 	mov.w	r2, r2, lsl #8
    8854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    885c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    8864:	429d      	cmp	r5, r3
    8866:	bf08      	it	eq
    8868:	4296      	cmpeq	r6, r2
    886a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    886e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    8872:	d202      	bcs.n	887a <__aeabi_ddiv+0x6e>
    8874:	085b      	lsrs	r3, r3, #1
    8876:	ea4f 0232 	mov.w	r2, r2, rrx
    887a:	1ab6      	subs	r6, r6, r2
    887c:	eb65 0503 	sbc.w	r5, r5, r3
    8880:	085b      	lsrs	r3, r3, #1
    8882:	ea4f 0232 	mov.w	r2, r2, rrx
    8886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    888a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    888e:	ebb6 0e02 	subs.w	lr, r6, r2
    8892:	eb75 0e03 	sbcs.w	lr, r5, r3
    8896:	bf22      	ittt	cs
    8898:	1ab6      	subcs	r6, r6, r2
    889a:	4675      	movcs	r5, lr
    889c:	ea40 000c 	orrcs.w	r0, r0, ip
    88a0:	085b      	lsrs	r3, r3, #1
    88a2:	ea4f 0232 	mov.w	r2, r2, rrx
    88a6:	ebb6 0e02 	subs.w	lr, r6, r2
    88aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    88ae:	bf22      	ittt	cs
    88b0:	1ab6      	subcs	r6, r6, r2
    88b2:	4675      	movcs	r5, lr
    88b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    88b8:	085b      	lsrs	r3, r3, #1
    88ba:	ea4f 0232 	mov.w	r2, r2, rrx
    88be:	ebb6 0e02 	subs.w	lr, r6, r2
    88c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    88c6:	bf22      	ittt	cs
    88c8:	1ab6      	subcs	r6, r6, r2
    88ca:	4675      	movcs	r5, lr
    88cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    88d0:	085b      	lsrs	r3, r3, #1
    88d2:	ea4f 0232 	mov.w	r2, r2, rrx
    88d6:	ebb6 0e02 	subs.w	lr, r6, r2
    88da:	eb75 0e03 	sbcs.w	lr, r5, r3
    88de:	bf22      	ittt	cs
    88e0:	1ab6      	subcs	r6, r6, r2
    88e2:	4675      	movcs	r5, lr
    88e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    88e8:	ea55 0e06 	orrs.w	lr, r5, r6
    88ec:	d018      	beq.n	8920 <__aeabi_ddiv+0x114>
    88ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
    88f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    88f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
    88fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    88fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    8902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    8906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    890a:	d1c0      	bne.n	888e <__aeabi_ddiv+0x82>
    890c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8910:	d10b      	bne.n	892a <__aeabi_ddiv+0x11e>
    8912:	ea41 0100 	orr.w	r1, r1, r0
    8916:	f04f 0000 	mov.w	r0, #0
    891a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    891e:	e7b6      	b.n	888e <__aeabi_ddiv+0x82>
    8920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8924:	bf04      	itt	eq
    8926:	4301      	orreq	r1, r0
    8928:	2000      	moveq	r0, #0
    892a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    892e:	bf88      	it	hi
    8930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    8934:	f63f aeaf 	bhi.w	8696 <__aeabi_dmul+0xde>
    8938:	ebb5 0c03 	subs.w	ip, r5, r3
    893c:	bf04      	itt	eq
    893e:	ebb6 0c02 	subseq.w	ip, r6, r2
    8942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    8946:	f150 0000 	adcs.w	r0, r0, #0
    894a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    894e:	bd70      	pop	{r4, r5, r6, pc}
    8950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    8954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    895c:	bfc2      	ittt	gt
    895e:	ebd4 050c 	rsbsgt	r5, r4, ip
    8962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    8966:	bd70      	popgt	{r4, r5, r6, pc}
    8968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    896c:	f04f 0e00 	mov.w	lr, #0
    8970:	3c01      	subs	r4, #1
    8972:	e690      	b.n	8696 <__aeabi_dmul+0xde>
    8974:	ea45 0e06 	orr.w	lr, r5, r6
    8978:	e68d      	b.n	8696 <__aeabi_dmul+0xde>
    897a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    897e:	ea94 0f0c 	teq	r4, ip
    8982:	bf08      	it	eq
    8984:	ea95 0f0c 	teqeq	r5, ip
    8988:	f43f af3b 	beq.w	8802 <__aeabi_dmul+0x24a>
    898c:	ea94 0f0c 	teq	r4, ip
    8990:	d10a      	bne.n	89a8 <__aeabi_ddiv+0x19c>
    8992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    8996:	f47f af34 	bne.w	8802 <__aeabi_dmul+0x24a>
    899a:	ea95 0f0c 	teq	r5, ip
    899e:	f47f af25 	bne.w	87ec <__aeabi_dmul+0x234>
    89a2:	4610      	mov	r0, r2
    89a4:	4619      	mov	r1, r3
    89a6:	e72c      	b.n	8802 <__aeabi_dmul+0x24a>
    89a8:	ea95 0f0c 	teq	r5, ip
    89ac:	d106      	bne.n	89bc <__aeabi_ddiv+0x1b0>
    89ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    89b2:	f43f aefd 	beq.w	87b0 <__aeabi_dmul+0x1f8>
    89b6:	4610      	mov	r0, r2
    89b8:	4619      	mov	r1, r3
    89ba:	e722      	b.n	8802 <__aeabi_dmul+0x24a>
    89bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    89c0:	bf18      	it	ne
    89c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    89c6:	f47f aec5 	bne.w	8754 <__aeabi_dmul+0x19c>
    89ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    89ce:	f47f af0d 	bne.w	87ec <__aeabi_dmul+0x234>
    89d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    89d6:	f47f aeeb 	bne.w	87b0 <__aeabi_dmul+0x1f8>
    89da:	e712      	b.n	8802 <__aeabi_dmul+0x24a>

000089dc <__gedf2>:
    89dc:	f04f 3cff 	mov.w	ip, #4294967295
    89e0:	e006      	b.n	89f0 <__cmpdf2+0x4>
    89e2:	bf00      	nop

000089e4 <__ledf2>:
    89e4:	f04f 0c01 	mov.w	ip, #1
    89e8:	e002      	b.n	89f0 <__cmpdf2+0x4>
    89ea:	bf00      	nop

000089ec <__cmpdf2>:
    89ec:	f04f 0c01 	mov.w	ip, #1
    89f0:	f84d cd04 	str.w	ip, [sp, #-4]!
    89f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    89f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    89fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8a00:	bf18      	it	ne
    8a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    8a06:	d01b      	beq.n	8a40 <__cmpdf2+0x54>
    8a08:	b001      	add	sp, #4
    8a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8a0e:	bf0c      	ite	eq
    8a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    8a14:	ea91 0f03 	teqne	r1, r3
    8a18:	bf02      	ittt	eq
    8a1a:	ea90 0f02 	teqeq	r0, r2
    8a1e:	2000      	moveq	r0, #0
    8a20:	4770      	bxeq	lr
    8a22:	f110 0f00 	cmn.w	r0, #0
    8a26:	ea91 0f03 	teq	r1, r3
    8a2a:	bf58      	it	pl
    8a2c:	4299      	cmppl	r1, r3
    8a2e:	bf08      	it	eq
    8a30:	4290      	cmpeq	r0, r2
    8a32:	bf2c      	ite	cs
    8a34:	17d8      	asrcs	r0, r3, #31
    8a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    8a3a:	f040 0001 	orr.w	r0, r0, #1
    8a3e:	4770      	bx	lr
    8a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8a48:	d102      	bne.n	8a50 <__cmpdf2+0x64>
    8a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8a4e:	d107      	bne.n	8a60 <__cmpdf2+0x74>
    8a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8a58:	d1d6      	bne.n	8a08 <__cmpdf2+0x1c>
    8a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8a5e:	d0d3      	beq.n	8a08 <__cmpdf2+0x1c>
    8a60:	f85d 0b04 	ldr.w	r0, [sp], #4
    8a64:	4770      	bx	lr
    8a66:	bf00      	nop

00008a68 <__aeabi_cdrcmple>:
    8a68:	4684      	mov	ip, r0
    8a6a:	4610      	mov	r0, r2
    8a6c:	4662      	mov	r2, ip
    8a6e:	468c      	mov	ip, r1
    8a70:	4619      	mov	r1, r3
    8a72:	4663      	mov	r3, ip
    8a74:	e000      	b.n	8a78 <__aeabi_cdcmpeq>
    8a76:	bf00      	nop

00008a78 <__aeabi_cdcmpeq>:
    8a78:	b501      	push	{r0, lr}
    8a7a:	f7ff ffb7 	bl	89ec <__cmpdf2>
    8a7e:	2800      	cmp	r0, #0
    8a80:	bf48      	it	mi
    8a82:	f110 0f00 	cmnmi.w	r0, #0
    8a86:	bd01      	pop	{r0, pc}

00008a88 <__aeabi_dcmpeq>:
    8a88:	f84d ed08 	str.w	lr, [sp, #-8]!
    8a8c:	f7ff fff4 	bl	8a78 <__aeabi_cdcmpeq>
    8a90:	bf0c      	ite	eq
    8a92:	2001      	moveq	r0, #1
    8a94:	2000      	movne	r0, #0
    8a96:	f85d fb08 	ldr.w	pc, [sp], #8
    8a9a:	bf00      	nop

00008a9c <__aeabi_dcmplt>:
    8a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
    8aa0:	f7ff ffea 	bl	8a78 <__aeabi_cdcmpeq>
    8aa4:	bf34      	ite	cc
    8aa6:	2001      	movcc	r0, #1
    8aa8:	2000      	movcs	r0, #0
    8aaa:	f85d fb08 	ldr.w	pc, [sp], #8
    8aae:	bf00      	nop

00008ab0 <__aeabi_dcmple>:
    8ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ab4:	f7ff ffe0 	bl	8a78 <__aeabi_cdcmpeq>
    8ab8:	bf94      	ite	ls
    8aba:	2001      	movls	r0, #1
    8abc:	2000      	movhi	r0, #0
    8abe:	f85d fb08 	ldr.w	pc, [sp], #8
    8ac2:	bf00      	nop

00008ac4 <__aeabi_dcmpge>:
    8ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ac8:	f7ff ffce 	bl	8a68 <__aeabi_cdrcmple>
    8acc:	bf94      	ite	ls
    8ace:	2001      	movls	r0, #1
    8ad0:	2000      	movhi	r0, #0
    8ad2:	f85d fb08 	ldr.w	pc, [sp], #8
    8ad6:	bf00      	nop

00008ad8 <__aeabi_dcmpgt>:
    8ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
    8adc:	f7ff ffc4 	bl	8a68 <__aeabi_cdrcmple>
    8ae0:	bf34      	ite	cc
    8ae2:	2001      	movcc	r0, #1
    8ae4:	2000      	movcs	r0, #0
    8ae6:	f85d fb08 	ldr.w	pc, [sp], #8
    8aea:	bf00      	nop

00008aec <__aeabi_d2uiz>:
    8aec:	004a      	lsls	r2, r1, #1
    8aee:	d211      	bcs.n	8b14 <__aeabi_d2uiz+0x28>
    8af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    8af4:	d211      	bcs.n	8b1a <__aeabi_d2uiz+0x2e>
    8af6:	d50d      	bpl.n	8b14 <__aeabi_d2uiz+0x28>
    8af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    8afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    8b00:	d40e      	bmi.n	8b20 <__aeabi_d2uiz+0x34>
    8b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    8b0e:	fa23 f002 	lsr.w	r0, r3, r2
    8b12:	4770      	bx	lr
    8b14:	f04f 0000 	mov.w	r0, #0
    8b18:	4770      	bx	lr
    8b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    8b1e:	d102      	bne.n	8b26 <__aeabi_d2uiz+0x3a>
    8b20:	f04f 30ff 	mov.w	r0, #4294967295
    8b24:	4770      	bx	lr
    8b26:	f04f 0000 	mov.w	r0, #0
    8b2a:	4770      	bx	lr

00008b2c <__aeabi_uldivmod>:
    8b2c:	b953      	cbnz	r3, 8b44 <__aeabi_uldivmod+0x18>
    8b2e:	b94a      	cbnz	r2, 8b44 <__aeabi_uldivmod+0x18>
    8b30:	2900      	cmp	r1, #0
    8b32:	bf08      	it	eq
    8b34:	2800      	cmpeq	r0, #0
    8b36:	bf1c      	itt	ne
    8b38:	f04f 31ff 	movne.w	r1, #4294967295
    8b3c:	f04f 30ff 	movne.w	r0, #4294967295
    8b40:	f000 b980 	b.w	8e44 <__aeabi_idiv0>
    8b44:	f1ad 0c08 	sub.w	ip, sp, #8
    8b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8b4c:	f000 f806 	bl	8b5c <__udivmoddi4>
    8b50:	f8dd e004 	ldr.w	lr, [sp, #4]
    8b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8b58:	b004      	add	sp, #16
    8b5a:	4770      	bx	lr

00008b5c <__udivmoddi4>:
    8b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b60:	9e09      	ldr	r6, [sp, #36]	; 0x24
    8b62:	460d      	mov	r5, r1
    8b64:	4604      	mov	r4, r0
    8b66:	460f      	mov	r7, r1
    8b68:	2b00      	cmp	r3, #0
    8b6a:	d147      	bne.n	8bfc <__udivmoddi4+0xa0>
    8b6c:	428a      	cmp	r2, r1
    8b6e:	4694      	mov	ip, r2
    8b70:	d95f      	bls.n	8c32 <__udivmoddi4+0xd6>
    8b72:	fab2 f382 	clz	r3, r2
    8b76:	b143      	cbz	r3, 8b8a <__udivmoddi4+0x2e>
    8b78:	f1c3 0120 	rsb	r1, r3, #32
    8b7c:	409f      	lsls	r7, r3
    8b7e:	fa02 fc03 	lsl.w	ip, r2, r3
    8b82:	409c      	lsls	r4, r3
    8b84:	fa20 f101 	lsr.w	r1, r0, r1
    8b88:	430f      	orrs	r7, r1
    8b8a:	ea4f 451c 	mov.w	r5, ip, lsr #16
    8b8e:	fa1f fe8c 	uxth.w	lr, ip
    8b92:	0c22      	lsrs	r2, r4, #16
    8b94:	fbb7 f1f5 	udiv	r1, r7, r5
    8b98:	fb05 7711 	mls	r7, r5, r1, r7
    8b9c:	fb01 f00e 	mul.w	r0, r1, lr
    8ba0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    8ba4:	4290      	cmp	r0, r2
    8ba6:	d908      	bls.n	8bba <__udivmoddi4+0x5e>
    8ba8:	eb1c 0202 	adds.w	r2, ip, r2
    8bac:	f101 37ff 	add.w	r7, r1, #4294967295
    8bb0:	d202      	bcs.n	8bb8 <__udivmoddi4+0x5c>
    8bb2:	4290      	cmp	r0, r2
    8bb4:	f200 8134 	bhi.w	8e20 <__udivmoddi4+0x2c4>
    8bb8:	4639      	mov	r1, r7
    8bba:	1a12      	subs	r2, r2, r0
    8bbc:	b2a4      	uxth	r4, r4
    8bbe:	fbb2 f0f5 	udiv	r0, r2, r5
    8bc2:	fb05 2210 	mls	r2, r5, r0, r2
    8bc6:	fb00 fe0e 	mul.w	lr, r0, lr
    8bca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    8bce:	45a6      	cmp	lr, r4
    8bd0:	d908      	bls.n	8be4 <__udivmoddi4+0x88>
    8bd2:	eb1c 0404 	adds.w	r4, ip, r4
    8bd6:	f100 32ff 	add.w	r2, r0, #4294967295
    8bda:	d202      	bcs.n	8be2 <__udivmoddi4+0x86>
    8bdc:	45a6      	cmp	lr, r4
    8bde:	f200 8119 	bhi.w	8e14 <__udivmoddi4+0x2b8>
    8be2:	4610      	mov	r0, r2
    8be4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    8be8:	eba4 040e 	sub.w	r4, r4, lr
    8bec:	2100      	movs	r1, #0
    8bee:	b11e      	cbz	r6, 8bf8 <__udivmoddi4+0x9c>
    8bf0:	40dc      	lsrs	r4, r3
    8bf2:	2300      	movs	r3, #0
    8bf4:	e9c6 4300 	strd	r4, r3, [r6]
    8bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8bfc:	428b      	cmp	r3, r1
    8bfe:	d908      	bls.n	8c12 <__udivmoddi4+0xb6>
    8c00:	2e00      	cmp	r6, #0
    8c02:	f000 80fb 	beq.w	8dfc <__udivmoddi4+0x2a0>
    8c06:	2100      	movs	r1, #0
    8c08:	e9c6 0500 	strd	r0, r5, [r6]
    8c0c:	4608      	mov	r0, r1
    8c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c12:	fab3 f183 	clz	r1, r3
    8c16:	2900      	cmp	r1, #0
    8c18:	d14b      	bne.n	8cb2 <__udivmoddi4+0x156>
    8c1a:	42ab      	cmp	r3, r5
    8c1c:	f0c0 80f1 	bcc.w	8e02 <__udivmoddi4+0x2a6>
    8c20:	4282      	cmp	r2, r0
    8c22:	f240 80ee 	bls.w	8e02 <__udivmoddi4+0x2a6>
    8c26:	4608      	mov	r0, r1
    8c28:	2e00      	cmp	r6, #0
    8c2a:	d0e5      	beq.n	8bf8 <__udivmoddi4+0x9c>
    8c2c:	e9c6 4700 	strd	r4, r7, [r6]
    8c30:	e7e2      	b.n	8bf8 <__udivmoddi4+0x9c>
    8c32:	b902      	cbnz	r2, 8c36 <__udivmoddi4+0xda>
    8c34:	deff      	udf	#255	; 0xff
    8c36:	fab2 f382 	clz	r3, r2
    8c3a:	2b00      	cmp	r3, #0
    8c3c:	f040 809d 	bne.w	8d7a <__udivmoddi4+0x21e>
    8c40:	1a8d      	subs	r5, r1, r2
    8c42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    8c46:	b297      	uxth	r7, r2
    8c48:	2101      	movs	r1, #1
    8c4a:	fbb5 f2fe 	udiv	r2, r5, lr
    8c4e:	fb0e 5012 	mls	r0, lr, r2, r5
    8c52:	0c25      	lsrs	r5, r4, #16
    8c54:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
    8c58:	fb07 f002 	mul.w	r0, r7, r2
    8c5c:	42a8      	cmp	r0, r5
    8c5e:	d90f      	bls.n	8c80 <__udivmoddi4+0x124>
    8c60:	eb1c 0505 	adds.w	r5, ip, r5
    8c64:	f102 38ff 	add.w	r8, r2, #4294967295
    8c68:	bf2c      	ite	cs
    8c6a:	f04f 0901 	movcs.w	r9, #1
    8c6e:	f04f 0900 	movcc.w	r9, #0
    8c72:	42a8      	cmp	r0, r5
    8c74:	d903      	bls.n	8c7e <__udivmoddi4+0x122>
    8c76:	f1b9 0f00 	cmp.w	r9, #0
    8c7a:	f000 80ce 	beq.w	8e1a <__udivmoddi4+0x2be>
    8c7e:	4642      	mov	r2, r8
    8c80:	1a2d      	subs	r5, r5, r0
    8c82:	b2a4      	uxth	r4, r4
    8c84:	fbb5 f0fe 	udiv	r0, r5, lr
    8c88:	fb0e 5510 	mls	r5, lr, r0, r5
    8c8c:	fb00 f707 	mul.w	r7, r0, r7
    8c90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    8c94:	42a7      	cmp	r7, r4
    8c96:	d908      	bls.n	8caa <__udivmoddi4+0x14e>
    8c98:	eb1c 0404 	adds.w	r4, ip, r4
    8c9c:	f100 35ff 	add.w	r5, r0, #4294967295
    8ca0:	d202      	bcs.n	8ca8 <__udivmoddi4+0x14c>
    8ca2:	42a7      	cmp	r7, r4
    8ca4:	f200 80b3 	bhi.w	8e0e <__udivmoddi4+0x2b2>
    8ca8:	4628      	mov	r0, r5
    8caa:	1be4      	subs	r4, r4, r7
    8cac:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    8cb0:	e79d      	b.n	8bee <__udivmoddi4+0x92>
    8cb2:	f1c1 0720 	rsb	r7, r1, #32
    8cb6:	408b      	lsls	r3, r1
    8cb8:	fa05 f401 	lsl.w	r4, r5, r1
    8cbc:	fa22 fc07 	lsr.w	ip, r2, r7
    8cc0:	40fd      	lsrs	r5, r7
    8cc2:	408a      	lsls	r2, r1
    8cc4:	ea4c 0c03 	orr.w	ip, ip, r3
    8cc8:	fa20 f307 	lsr.w	r3, r0, r7
    8ccc:	ea4f 491c 	mov.w	r9, ip, lsr #16
    8cd0:	431c      	orrs	r4, r3
    8cd2:	fa1f fe8c 	uxth.w	lr, ip
    8cd6:	fa00 f301 	lsl.w	r3, r0, r1
    8cda:	0c20      	lsrs	r0, r4, #16
    8cdc:	fbb5 f8f9 	udiv	r8, r5, r9
    8ce0:	fb09 5518 	mls	r5, r9, r8, r5
    8ce4:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
    8ce8:	fb08 f00e 	mul.w	r0, r8, lr
    8cec:	42a8      	cmp	r0, r5
    8cee:	d90f      	bls.n	8d10 <__udivmoddi4+0x1b4>
    8cf0:	eb1c 0505 	adds.w	r5, ip, r5
    8cf4:	f108 3aff 	add.w	sl, r8, #4294967295
    8cf8:	bf2c      	ite	cs
    8cfa:	f04f 0b01 	movcs.w	fp, #1
    8cfe:	f04f 0b00 	movcc.w	fp, #0
    8d02:	42a8      	cmp	r0, r5
    8d04:	d903      	bls.n	8d0e <__udivmoddi4+0x1b2>
    8d06:	f1bb 0f00 	cmp.w	fp, #0
    8d0a:	f000 808c 	beq.w	8e26 <__udivmoddi4+0x2ca>
    8d0e:	46d0      	mov	r8, sl
    8d10:	1a2d      	subs	r5, r5, r0
    8d12:	b2a4      	uxth	r4, r4
    8d14:	fbb5 f0f9 	udiv	r0, r5, r9
    8d18:	fb09 5510 	mls	r5, r9, r0, r5
    8d1c:	fb00 fe0e 	mul.w	lr, r0, lr
    8d20:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    8d24:	45ae      	cmp	lr, r5
    8d26:	d907      	bls.n	8d38 <__udivmoddi4+0x1dc>
    8d28:	eb1c 0505 	adds.w	r5, ip, r5
    8d2c:	f100 34ff 	add.w	r4, r0, #4294967295
    8d30:	d201      	bcs.n	8d36 <__udivmoddi4+0x1da>
    8d32:	45ae      	cmp	lr, r5
    8d34:	d87e      	bhi.n	8e34 <__udivmoddi4+0x2d8>
    8d36:	4620      	mov	r0, r4
    8d38:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    8d3c:	eba5 050e 	sub.w	r5, r5, lr
    8d40:	fba0 9802 	umull	r9, r8, r0, r2
    8d44:	4545      	cmp	r5, r8
    8d46:	464c      	mov	r4, r9
    8d48:	46c6      	mov	lr, r8
    8d4a:	d302      	bcc.n	8d52 <__udivmoddi4+0x1f6>
    8d4c:	d106      	bne.n	8d5c <__udivmoddi4+0x200>
    8d4e:	454b      	cmp	r3, r9
    8d50:	d204      	bcs.n	8d5c <__udivmoddi4+0x200>
    8d52:	3801      	subs	r0, #1
    8d54:	ebb9 0402 	subs.w	r4, r9, r2
    8d58:	eb68 0e0c 	sbc.w	lr, r8, ip
    8d5c:	2e00      	cmp	r6, #0
    8d5e:	d06f      	beq.n	8e40 <__udivmoddi4+0x2e4>
    8d60:	1b1a      	subs	r2, r3, r4
    8d62:	eb65 050e 	sbc.w	r5, r5, lr
    8d66:	fa22 f301 	lsr.w	r3, r2, r1
    8d6a:	fa05 f707 	lsl.w	r7, r5, r7
    8d6e:	40cd      	lsrs	r5, r1
    8d70:	2100      	movs	r1, #0
    8d72:	431f      	orrs	r7, r3
    8d74:	e9c6 7500 	strd	r7, r5, [r6]
    8d78:	e73e      	b.n	8bf8 <__udivmoddi4+0x9c>
    8d7a:	fa02 fc03 	lsl.w	ip, r2, r3
    8d7e:	f1c3 0020 	rsb	r0, r3, #32
    8d82:	fa01 f203 	lsl.w	r2, r1, r3
    8d86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    8d8a:	40c1      	lsrs	r1, r0
    8d8c:	fa24 f500 	lsr.w	r5, r4, r0
    8d90:	fa1f f78c 	uxth.w	r7, ip
    8d94:	409c      	lsls	r4, r3
    8d96:	4315      	orrs	r5, r2
    8d98:	fbb1 f0fe 	udiv	r0, r1, lr
    8d9c:	0c2a      	lsrs	r2, r5, #16
    8d9e:	fb0e 1110 	mls	r1, lr, r0, r1
    8da2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    8da6:	fb00 f107 	mul.w	r1, r0, r7
    8daa:	4291      	cmp	r1, r2
    8dac:	d90e      	bls.n	8dcc <__udivmoddi4+0x270>
    8dae:	eb1c 0202 	adds.w	r2, ip, r2
    8db2:	f100 38ff 	add.w	r8, r0, #4294967295
    8db6:	bf2c      	ite	cs
    8db8:	f04f 0901 	movcs.w	r9, #1
    8dbc:	f04f 0900 	movcc.w	r9, #0
    8dc0:	4291      	cmp	r1, r2
    8dc2:	d902      	bls.n	8dca <__udivmoddi4+0x26e>
    8dc4:	f1b9 0f00 	cmp.w	r9, #0
    8dc8:	d031      	beq.n	8e2e <__udivmoddi4+0x2d2>
    8dca:	4640      	mov	r0, r8
    8dcc:	1a52      	subs	r2, r2, r1
    8dce:	b2ad      	uxth	r5, r5
    8dd0:	fbb2 f1fe 	udiv	r1, r2, lr
    8dd4:	fb0e 2211 	mls	r2, lr, r1, r2
    8dd8:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
    8ddc:	fb01 f207 	mul.w	r2, r1, r7
    8de0:	42aa      	cmp	r2, r5
    8de2:	d907      	bls.n	8df4 <__udivmoddi4+0x298>
    8de4:	eb1c 0505 	adds.w	r5, ip, r5
    8de8:	f101 38ff 	add.w	r8, r1, #4294967295
    8dec:	d201      	bcs.n	8df2 <__udivmoddi4+0x296>
    8dee:	42aa      	cmp	r2, r5
    8df0:	d823      	bhi.n	8e3a <__udivmoddi4+0x2de>
    8df2:	4641      	mov	r1, r8
    8df4:	1aad      	subs	r5, r5, r2
    8df6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8dfa:	e726      	b.n	8c4a <__udivmoddi4+0xee>
    8dfc:	4631      	mov	r1, r6
    8dfe:	4630      	mov	r0, r6
    8e00:	e6fa      	b.n	8bf8 <__udivmoddi4+0x9c>
    8e02:	1a84      	subs	r4, r0, r2
    8e04:	eb65 0303 	sbc.w	r3, r5, r3
    8e08:	2001      	movs	r0, #1
    8e0a:	461f      	mov	r7, r3
    8e0c:	e70c      	b.n	8c28 <__udivmoddi4+0xcc>
    8e0e:	4464      	add	r4, ip
    8e10:	3802      	subs	r0, #2
    8e12:	e74a      	b.n	8caa <__udivmoddi4+0x14e>
    8e14:	4464      	add	r4, ip
    8e16:	3802      	subs	r0, #2
    8e18:	e6e4      	b.n	8be4 <__udivmoddi4+0x88>
    8e1a:	3a02      	subs	r2, #2
    8e1c:	4465      	add	r5, ip
    8e1e:	e72f      	b.n	8c80 <__udivmoddi4+0x124>
    8e20:	3902      	subs	r1, #2
    8e22:	4462      	add	r2, ip
    8e24:	e6c9      	b.n	8bba <__udivmoddi4+0x5e>
    8e26:	f1a8 0802 	sub.w	r8, r8, #2
    8e2a:	4465      	add	r5, ip
    8e2c:	e770      	b.n	8d10 <__udivmoddi4+0x1b4>
    8e2e:	3802      	subs	r0, #2
    8e30:	4462      	add	r2, ip
    8e32:	e7cb      	b.n	8dcc <__udivmoddi4+0x270>
    8e34:	3802      	subs	r0, #2
    8e36:	4465      	add	r5, ip
    8e38:	e77e      	b.n	8d38 <__udivmoddi4+0x1dc>
    8e3a:	3902      	subs	r1, #2
    8e3c:	4465      	add	r5, ip
    8e3e:	e7d9      	b.n	8df4 <__udivmoddi4+0x298>
    8e40:	4631      	mov	r1, r6
    8e42:	e6d9      	b.n	8bf8 <__udivmoddi4+0x9c>

00008e44 <__aeabi_idiv0>:
    8e44:	4770      	bx	lr
    8e46:	bf00      	nop

00008e48 <_ZN7dataCSC9calcSpeedEv>:
    }

    return retVal;
}

uint16_t dataCSC::calcSpeed() {
    8e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8e4c:	4605      	mov	r5, r0
    if (nbrRevSpeed < 0)
    {
        nbrRevSpeed = maxVal - oldSumRevSpeed + sumRevSpeed;
    }

    if ((lastEventSpeed != oldLastEventSpeed) && nbrRevSpeed > 0)
    8e4e:	8900      	ldrh	r0, [r0, #8]
    8e50:	896b      	ldrh	r3, [r5, #10]
    8e52:	4298      	cmp	r0, r3
    8e54:	d047      	beq.n	8ee6 <_ZN7dataCSC9calcSpeedEv+0x9e>
    uint16_t nbrRevSpeed = sumRevSpeed - oldSumRevSpeed;
    8e56:	f8b5 a000 	ldrh.w	sl, [r5]
    8e5a:	f8b5 9002 	ldrh.w	r9, [r5, #2]
    8e5e:	ebaa 0409 	sub.w	r4, sl, r9
    8e62:	b2a4      	uxth	r4, r4
    if ((lastEventSpeed != oldLastEventSpeed) && nbrRevSpeed > 0)
    8e64:	b1f4      	cbz	r4, 8ea4 <_ZN7dataCSC9calcSpeedEv+0x5c>
    {
        wheelCircumference = wheelDiameter;
        wheelCircumference = (wheelDiameter) * 3.1415;
        double time = (lastEventSpeed - oldLastEventSpeed)/1024.0;
    8e66:	eba0 0803 	sub.w	r8, r0, r3
    8e6a:	4640      	mov	r0, r8
    8e6c:	f7ff fb3a 	bl	84e4 <__aeabi_i2d>
    8e70:	2200      	movs	r2, #0
    8e72:	4b21      	ldr	r3, [pc, #132]	; (8ef8 <_ZN7dataCSC9calcSpeedEv+0xb0>)
    8e74:	f7ff fba0 	bl	85b8 <__aeabi_dmul>
        double oldSpeed = speed;

        if (time < 0)
    8e78:	2200      	movs	r2, #0
    8e7a:	2300      	movs	r3, #0
        double time = (lastEventSpeed - oldLastEventSpeed)/1024.0;
    8e7c:	4606      	mov	r6, r0
    8e7e:	460f      	mov	r7, r1
        if (time < 0)
    8e80:	f7ff fe0c 	bl	8a9c <__aeabi_dcmplt>
    8e84:	b138      	cbz	r0, 8e96 <_ZN7dataCSC9calcSpeedEv+0x4e>
        {
            time = (0xffff - oldLastEventSpeed + lastEventSpeed)/1024;
    8e86:	f508 407f 	add.w	r0, r8, #65280	; 0xff00
    8e8a:	30ff      	adds	r0, #255	; 0xff
    8e8c:	1280      	asrs	r0, r0, #10
    8e8e:	f7ff fb29 	bl	84e4 <__aeabi_i2d>
    8e92:	4606      	mov	r6, r0
    8e94:	460f      	mov	r7, r1
        }
        if (sumRevSpeed == oldSumRevSpeed)
    8e96:	45ca      	cmp	sl, r9
    8e98:	d107      	bne.n	8eaa <_ZN7dataCSC9calcSpeedEv+0x62>
        {
            return (uint16_t) oldSpeed;
    8e9a:	e9d5 010a 	ldrd	r0, r1, [r5, #40]	; 0x28
            //rpm_speed = time/nbrRevSpeed *60;
            //printk("rpm1%d\n",rpm_speed);
            rpm_speed = (nbrRevSpeed) * 60 / time;
            //printk("rpm2%d\n",rpm_speed);
            speed = rpm_speed * wheelCircumference;
            retVal = (uint16_t) (speed);
    8e9e:	f7ff fe25 	bl	8aec <__aeabi_d2uiz>
    8ea2:	b284      	uxth	r4, r0
            return retVal;
        }  
    }
    return 0;
    8ea4:	4620      	mov	r0, r4
    8ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8eaa:	203c      	movs	r0, #60	; 0x3c
        wheelCircumference = wheelDiameter;
    8eac:	e9d5 8906 	ldrd	r8, r9, [r5, #24]
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8eb0:	4360      	muls	r0, r4
    8eb2:	f7ff fb17 	bl	84e4 <__aeabi_i2d>
    8eb6:	4632      	mov	r2, r6
    8eb8:	463b      	mov	r3, r7
    8eba:	f7ff fca7 	bl	880c <__aeabi_ddiv>
        wheelCircumference = (wheelDiameter) * 3.1415;
    8ebe:	a30c      	add	r3, pc, #48	; (adr r3, 8ef0 <_ZN7dataCSC9calcSpeedEv+0xa8>)
    8ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8ec4:	4606      	mov	r6, r0
    8ec6:	460f      	mov	r7, r1
        wheelCircumference = (wheelDiameter) * 3.1415;
    8ec8:	4640      	mov	r0, r8
    8eca:	4649      	mov	r1, r9
    8ecc:	f7ff fb74 	bl	85b8 <__aeabi_dmul>
    8ed0:	4602      	mov	r2, r0
    8ed2:	460b      	mov	r3, r1
            speed = rpm_speed * wheelCircumference;
    8ed4:	4630      	mov	r0, r6
    8ed6:	4639      	mov	r1, r7
    8ed8:	f7ff fb6e 	bl	85b8 <__aeabi_dmul>
    8edc:	4602      	mov	r2, r0
    8ede:	460b      	mov	r3, r1
    8ee0:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
    8ee4:	e7db      	b.n	8e9e <_ZN7dataCSC9calcSpeedEv+0x56>
    return 0;
    8ee6:	2400      	movs	r4, #0
    8ee8:	e7dc      	b.n	8ea4 <_ZN7dataCSC9calcSpeedEv+0x5c>
    8eea:	bf00      	nop
    8eec:	f3af 8000 	nop.w
    8ef0:	c083126f 	.word	0xc083126f
    8ef4:	400921ca 	.word	0x400921ca
    8ef8:	3f500000 	.word	0x3f500000
    8efc:	00000000 	.word	0x00000000

00008f00 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth>:
{

    const uint8_t * buffer = (uint8_t *) buf;
    
    // len = 1 -> new diameter received - or diameter reset (when 0)
    if (len == 1)
    8f00:	2b01      	cmp	r3, #1
{
    8f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f06:	4607      	mov	r7, r0
    8f08:	4688      	mov	r8, r1
    8f0a:	4614      	mov	r4, r2
    8f0c:	461e      	mov	r6, r3
    if (len == 1)
    8f0e:	d125      	bne.n	8f5c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x5c>
    {
        diameter = (uint8_t ) *buffer;
    8f10:	7815      	ldrb	r5, [r2, #0]
    8f12:	4b4b      	ldr	r3, [pc, #300]	; (9040 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x140>)

        // check if last bit is '1', then add 0.5 to dia and convert it to cm
        if ((diameter & 0b10000000) == 0b10000000)
        {
            dia = (diameter + 0.5) * 2.54;
    8f14:	4628      	mov	r0, r5
        diameter = (uint8_t ) *buffer;
    8f16:	701d      	strb	r5, [r3, #0]
            dia = (diameter + 0.5) * 2.54;
    8f18:	f7ff fae4 	bl	84e4 <__aeabi_i2d>
        if ((diameter & 0b10000000) == 0b10000000)
    8f1c:	062b      	lsls	r3, r5, #24
    8f1e:	d503      	bpl.n	8f28 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x28>
            dia = (diameter + 0.5) * 2.54;
    8f20:	2200      	movs	r2, #0
    8f22:	4b48      	ldr	r3, [pc, #288]	; (9044 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x144>)
    8f24:	f7ff f992 	bl	824c <__adddf3>
        }
        else {
            dia = diameter * 2.54;
    8f28:	a343      	add	r3, pc, #268	; (adr r3, 9038 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x138>)
    8f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
    8f2e:	f7ff fb43 	bl	85b8 <__aeabi_dmul>
    8f32:	4b45      	ldr	r3, [pc, #276]	; (9048 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x148>)
    8f34:	e9c3 0100 	strd	r0, r1, [r3]
        default:
            break;
        }
    }
    
	printk("Received data, handle %d, conn %p, data: 0x", attr->handle, conn);
    8f38:	463a      	mov	r2, r7
    8f3a:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    8f3e:	4843      	ldr	r0, [pc, #268]	; (904c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x14c>)
    8f40:	f011 fc96 	bl	1a870 <printk>
    8f44:	2300      	movs	r3, #0
 
    for(uint8_t i = 0; i < len; i++){
        printk("%02X", buffer[i]);
    8f46:	4f42      	ldr	r7, [pc, #264]	; (9050 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x150>)
    for(uint8_t i = 0; i < len; i++){
    8f48:	1c5d      	adds	r5, r3, #1
    8f4a:	b2db      	uxtb	r3, r3
    8f4c:	42b3      	cmp	r3, r6
    8f4e:	da6c      	bge.n	902a <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x12a>
        printk("%02X", buffer[i]);
    8f50:	5ce1      	ldrb	r1, [r4, r3]
    8f52:	4638      	mov	r0, r7
    8f54:	f011 fc8c 	bl	1a870 <printk>
    for(uint8_t i = 0; i < len; i++){
    8f58:	462b      	mov	r3, r5
    8f5a:	e7f5      	b.n	8f48 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x48>
    if (len == 19)
    8f5c:	2b13      	cmp	r3, #19
    8f5e:	d1eb      	bne.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
        nbrAddresses = (uint8_t) buffer[17];
    8f60:	7c53      	ldrb	r3, [r2, #17]
    8f62:	4a3c      	ldr	r2, [pc, #240]	; (9054 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x154>)
        infoSensors = (uint8_t) buffer[18];
    8f64:	7ca1      	ldrb	r1, [r4, #18]
        nbrAddresses = (uint8_t) buffer[17];
    8f66:	7013      	strb	r3, [r2, #0]
        infoSensors = (uint8_t) buffer[18];
    8f68:	4a3b      	ldr	r2, [pc, #236]	; (9058 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x158>)
        switch (nbrAddresses)
    8f6a:	2b02      	cmp	r3, #2
        infoSensors = (uint8_t) buffer[18];
    8f6c:	7011      	strb	r1, [r2, #0]
        switch (nbrAddresses)
    8f6e:	d00e      	beq.n	8f8e <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x8e>
    8f70:	2b03      	cmp	r3, #3
    8f72:	d02e      	beq.n	8fd2 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xd2>
    8f74:	2b01      	cmp	r3, #1
    8f76:	d1df      	bne.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
    8f78:	4a38      	ldr	r2, [pc, #224]	; (905c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x15c>)
    8f7a:	1e63      	subs	r3, r4, #1
    8f7c:	f104 0110 	add.w	r1, r4, #16
                uint8_t val = (uint8_t) buffer[i];
    8f80:	f813 0f01 	ldrb.w	r0, [r3, #1]!
            for (uint8_t i=0; i<17; i++)
    8f84:	4299      	cmp	r1, r3
                address1[i] = charToSave;
    8f86:	f802 0b01 	strb.w	r0, [r2], #1
            for (uint8_t i=0; i<17; i++)
    8f8a:	d1f9      	bne.n	8f80 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x80>
    8f8c:	e7d4      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            cntAddresses++;
    8f8e:	4b34      	ldr	r3, [pc, #208]	; (9060 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x160>)
    8f90:	781d      	ldrb	r5, [r3, #0]
    8f92:	3501      	adds	r5, #1
    8f94:	b2ed      	uxtb	r5, r5
            if (cntAddresses == 1)
    8f96:	2d01      	cmp	r5, #1
            cntAddresses++;
    8f98:	701d      	strb	r5, [r3, #0]
            if (cntAddresses == 1)
    8f9a:	d10a      	bne.n	8fb2 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xb2>
    8f9c:	4a2f      	ldr	r2, [pc, #188]	; (905c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x15c>)
    8f9e:	1e63      	subs	r3, r4, #1
    8fa0:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    8fa4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    8fa8:	428b      	cmp	r3, r1
                    address1[i] = charToSave;
    8faa:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    8fae:	d1f9      	bne.n	8fa4 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xa4>
    8fb0:	e7c2      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            else if (cntAddresses == 2)
    8fb2:	2d02      	cmp	r5, #2
    8fb4:	d1c0      	bne.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
    8fb6:	4a2b      	ldr	r2, [pc, #172]	; (9064 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x164>)
    8fb8:	1e63      	subs	r3, r4, #1
    8fba:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    8fbe:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    8fc2:	428b      	cmp	r3, r1
                    address2[i] = charToSave;
    8fc4:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    8fc8:	d1f9      	bne.n	8fbe <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xbe>
                cntAddresses = 0;
    8fca:	2200      	movs	r2, #0
    8fcc:	4b24      	ldr	r3, [pc, #144]	; (9060 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x160>)
    8fce:	701a      	strb	r2, [r3, #0]
    8fd0:	e7b2      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            cntAddresses++;
    8fd2:	4b23      	ldr	r3, [pc, #140]	; (9060 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x160>)
    8fd4:	781d      	ldrb	r5, [r3, #0]
    8fd6:	3501      	adds	r5, #1
    8fd8:	b2ed      	uxtb	r5, r5
            if (cntAddresses == 1)
    8fda:	2d01      	cmp	r5, #1
            cntAddresses++;
    8fdc:	701d      	strb	r5, [r3, #0]
            if (cntAddresses == 1)
    8fde:	d10a      	bne.n	8ff6 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xf6>
    8fe0:	4a1e      	ldr	r2, [pc, #120]	; (905c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x15c>)
    8fe2:	1e63      	subs	r3, r4, #1
    8fe4:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    8fe8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    8fec:	428b      	cmp	r3, r1
                    address1[i] = charToSave;
    8fee:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    8ff2:	d1f9      	bne.n	8fe8 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xe8>
    8ff4:	e7a0      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            else if (cntAddresses == 2)
    8ff6:	2d02      	cmp	r5, #2
    8ff8:	d10a      	bne.n	9010 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x110>
    8ffa:	4a1a      	ldr	r2, [pc, #104]	; (9064 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x164>)
    8ffc:	1e63      	subs	r3, r4, #1
    8ffe:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    9002:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    9006:	428b      	cmp	r3, r1
                    address2[i] = charToSave;
    9008:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    900c:	d1f9      	bne.n	9002 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x102>
    900e:	e793      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            } else if (cntAddresses == 3)
    9010:	2d03      	cmp	r5, #3
    9012:	d191      	bne.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
    9014:	4a14      	ldr	r2, [pc, #80]	; (9068 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x168>)
    9016:	1e63      	subs	r3, r4, #1
    9018:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    901c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    9020:	428b      	cmp	r3, r1
                    address3[i] = charToSave;
    9022:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    9026:	d1f9      	bne.n	901c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x11c>
    9028:	e7cf      	b.n	8fca <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xca>
    }
    printk("\n");
    902a:	4810      	ldr	r0, [pc, #64]	; (906c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x16c>)
    902c:	f011 fc20 	bl	1a870 <printk>
 	return len;
}
    9030:	4630      	mov	r0, r6
    9032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9036:	bf00      	nop
    9038:	851eb852 	.word	0x851eb852
    903c:	400451eb 	.word	0x400451eb
    9040:	2000f4f5 	.word	0x2000f4f5
    9044:	3fe00000 	.word	0x3fe00000
    9048:	20008810 	.word	0x20008810
    904c:	0001f913 	.word	0x0001f913
    9050:	0001f93f 	.word	0x0001f93f
    9054:	2000f4f7 	.word	0x2000f4f7
    9058:	2000f4f6 	.word	0x2000f4f6
    905c:	2000f2e1 	.word	0x2000f2e1
    9060:	2000f314 	.word	0x2000f314
    9064:	2000f2f2 	.word	0x2000f2f2
    9068:	2000f303 	.word	0x2000f303
    906c:	00022b58 	.word	0x00022b58

00009070 <main>:
 */

#include "deviceManager.h"

void main(void)
{
    9070:	b500      	push	{lr}

	printk("Application start\n");
    9072:	4807      	ldr	r0, [pc, #28]	; (9090 <main+0x20>)
{
    9074:	b091      	sub	sp, #68	; 0x44
	printk("Application start\n");
    9076:	f011 fbfb 	bl	1a870 <printk>

	// create a new device manager
	deviceManager dManager;
    907a:	4668      	mov	r0, sp
    907c:	f000 fabc 	bl	95f8 <_ZN13deviceManagerC1Ev>
	// start application as peripheral and central
	dManager.setDevice(true,true);
    9080:	2201      	movs	r2, #1
    9082:	4668      	mov	r0, sp
    9084:	4611      	mov	r1, r2
    9086:	f000 fd3f 	bl	9b08 <_ZN13deviceManager9setDeviceEbb>
    908a:	b011      	add	sp, #68	; 0x44
    908c:	f85d fb04 	ldr.w	pc, [sp], #4
    9090:	0001f200 	.word	0x0001f200

00009094 <_ZN13deviceManager13app_button_cbEv>:
    dk_set_led(USER_LED,led_state);
}

bool deviceManager::app_button_cb(void){
    return app_button_state;
}
    9094:	4b01      	ldr	r3, [pc, #4]	; (909c <_ZN13deviceManager13app_button_cbEv+0x8>)
    9096:	7818      	ldrb	r0, [r3, #0]
    9098:	4770      	bx	lr
    909a:	bf00      	nop
    909c:	2000f2d4 	.word	0x2000f2d4

000090a0 <_ZN13deviceManager21discovery_error_foundEP7bt_conniPv>:
}


void deviceManager::discovery_error_found(struct bt_conn *conn, int err, void *ctx)
{
	printk("The discovery procedure failed, err %d\n", err);
    90a0:	4801      	ldr	r0, [pc, #4]	; (90a8 <_ZN13deviceManager21discovery_error_foundEP7bt_conniPv+0x8>)
    90a2:	f011 bbe5 	b.w	1a870 <printk>
    90a6:	bf00      	nop
    90a8:	0001f213 	.word	0x0001f213

000090ac <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv>:
void deviceManager::discovery_service_not_found(struct bt_conn *conn, void *ctx) {
    90ac:	b513      	push	{r0, r1, r4, lr}
    90ae:	4604      	mov	r4, r0
	printk("Service not found!\n");
    90b0:	4808      	ldr	r0, [pc, #32]	; (90d4 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x28>)
    90b2:	f011 fbdd 	bl	1a870 <printk>
	error[0] = 10;
    90b6:	230a      	movs	r3, #10
    90b8:	f88d 3004 	strb.w	r3, [sp, #4]
	data_service_send(peripheralConn,error, sizeof(error));
    90bc:	4b06      	ldr	r3, [pc, #24]	; (90d8 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x2c>)
    90be:	2201      	movs	r2, #1
    90c0:	6818      	ldr	r0, [r3, #0]
    90c2:	a901      	add	r1, sp, #4
    90c4:	f001 f816 	bl	a0f4 <_Z17data_service_sendP7bt_connPKht>
	bt_conn_disconnect(conn,-5);
    90c8:	21fb      	movs	r1, #251	; 0xfb
    90ca:	4620      	mov	r0, r4
    90cc:	f008 fc82 	bl	119d4 <bt_conn_disconnect>
}
    90d0:	b002      	add	sp, #8
    90d2:	bd10      	pop	{r4, pc}
    90d4:	0001f23b 	.word	0x0001f23b
    90d8:	2000a670 	.word	0x2000a670

000090dc <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv>:
}


void deviceManager::discoveryCompletedHR(struct bt_gatt_dm *dm, void *ctx) 
{
    90dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    90e0:	4604      	mov	r4, r0
	const struct bt_gatt_dm_attr *gatt_desc;

	// subscribe CSC characteristic
	//struct bt_gatt_subscribe_params paramHR = subscribe_params[nbrConnectionsCentral-1];

	struct bt_conn *conn = bt_gatt_dm_conn_get(dm);
    90e2:	f012 f801 	bl	1b0e8 <bt_gatt_dm_conn_get>
    90e6:	4607      	mov	r7, r0

	printk("The discovery procedure succeeded\n");
    90e8:	4840      	ldr	r0, [pc, #256]	; (91ec <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x110>)
    90ea:	f011 fbc1 	bl	1a870 <printk>

	bt_gatt_dm_data_print(dm);

	/* Heart rate characteristic */
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_HRS_MEASUREMENT);
    90ee:	4620      	mov	r0, r4
    90f0:	493f      	ldr	r1, [pc, #252]	; (91f0 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x114>)
    90f2:	f003 fbdd 	bl	c8b0 <bt_gatt_dm_char_by_uuid>
	if (!gatt_chrc) {
    90f6:	4605      	mov	r5, r0
    90f8:	b928      	cbnz	r0, 9106 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x2a>
		printk("No heart rate measurement characteristic found\n");
    90fa:	483e      	ldr	r0, [pc, #248]	; (91f4 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x118>)
	default:
		break;
	}
	dk_set_led_on(CON_STATUS_LED_CENTRAL);
	connectedC = true;
}
    90fc:	b003      	add	sp, #12
    90fe:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		printk("No heart rate CCC descriptor found. "
    9102:	f011 bbb5 	b.w	1a870 <printk>
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    9106:	4601      	mov	r1, r0
    9108:	4a3b      	ldr	r2, [pc, #236]	; (91f8 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x11c>)
    910a:	4620      	mov	r0, r4
    910c:	f012 f83b 	bl	1b186 <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
    9110:	b908      	cbnz	r0, 9116 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x3a>
		printk("No heat rate measurement characteristic value found\n");
    9112:	483a      	ldr	r0, [pc, #232]	; (91fc <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x120>)
    9114:	e7f2      	b.n	90fc <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x20>
	subscribe_params[nbrConnectionsCentral-1].value_handle = gatt_desc->handle;
    9116:	f04f 0918 	mov.w	r9, #24
    911a:	4e39      	ldr	r6, [pc, #228]	; (9200 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x124>)
    911c:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 9204 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x128>
    9120:	7832      	ldrb	r2, [r6, #0]
    9122:	8883      	ldrh	r3, [r0, #4]
    9124:	3a01      	subs	r2, #1
    9126:	fb09 8202 	mla	r2, r9, r2, r8
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    912a:	4629      	mov	r1, r5
	subscribe_params[nbrConnectionsCentral-1].value_handle = gatt_desc->handle;
    912c:	8113      	strh	r3, [r2, #8]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    912e:	4620      	mov	r0, r4
    9130:	4a35      	ldr	r2, [pc, #212]	; (9208 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x12c>)
    9132:	f012 f828 	bl	1b186 <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
    9136:	b908      	cbnz	r0, 913c <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x60>
		printk("No heart rate CCC descriptor found. "
    9138:	4834      	ldr	r0, [pc, #208]	; (920c <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x130>)
    913a:	e7df      	b.n	90fc <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x20>
	subscribe_params[nbrConnectionsCentral-1].notify = notify_HR;
    913c:	7833      	ldrb	r3, [r6, #0]
    913e:	4a34      	ldr	r2, [pc, #208]	; (9210 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x134>)
    9140:	3b01      	subs	r3, #1
    9142:	fb09 f303 	mul.w	r3, r9, r3
    9146:	eb08 0103 	add.w	r1, r8, r3
    914a:	f848 2003 	str.w	r2, [r8, r3]
	subscribe_params[nbrConnectionsCentral-1].value = BT_GATT_CCC_NOTIFY;
    914e:	2301      	movs	r3, #1
    9150:	818b      	strh	r3, [r1, #12]
	subscribe_params[nbrConnectionsCentral-1].ccc_handle = gatt_desc->handle;
    9152:	8883      	ldrh	r3, [r0, #4]
	err = bt_gatt_subscribe(conn, &subscribe_params[nbrConnectionsCentral-1]);
    9154:	4638      	mov	r0, r7
	subscribe_params[nbrConnectionsCentral-1].ccc_handle = gatt_desc->handle;
    9156:	814b      	strh	r3, [r1, #10]
	err = bt_gatt_subscribe(conn, &subscribe_params[nbrConnectionsCentral-1]);
    9158:	f00b fe92 	bl	14e80 <bt_gatt_subscribe>
	if (err && err != -EALREADY) {
    915c:	4601      	mov	r1, r0
    915e:	b360      	cbz	r0, 91ba <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xde>
    9160:	f110 0f45 	cmn.w	r0, #69	; 0x45
    9164:	d029      	beq.n	91ba <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xde>
		printk("Subscribe failed (err %d)\n", err);
    9166:	482b      	ldr	r0, [pc, #172]	; (9214 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x138>)
    9168:	f011 fb82 	bl	1a870 <printk>
	err = bt_gatt_dm_data_release(dm);
    916c:	4620      	mov	r0, r4
    916e:	f012 f81c 	bl	1b1aa <bt_gatt_dm_data_release>
	if (err) {
    9172:	4601      	mov	r1, r0
    9174:	b110      	cbz	r0, 917c <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xa0>
		printk("Could not release the discovery data (err %d)\n", err);
    9176:	4828      	ldr	r0, [pc, #160]	; (9218 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x13c>)
    9178:	f011 fb7a 	bl	1a870 <printk>
	subscriptionDone = true;
    917c:	2201      	movs	r2, #1
    917e:	4b27      	ldr	r3, [pc, #156]	; (921c <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x140>)
    9180:	701a      	strb	r2, [r3, #0]
	switch (nbrConnectionsCentral)
    9182:	7833      	ldrb	r3, [r6, #0]
    9184:	2b02      	cmp	r3, #2
    9186:	d01c      	beq.n	91c2 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xe6>
    9188:	2b03      	cmp	r3, #3
    918a:	d024      	beq.n	91d6 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xfa>
    918c:	4293      	cmp	r3, r2
    918e:	d10b      	bne.n	91a8 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xcc>
		connectedCode[0] = 22;
    9190:	2216      	movs	r2, #22
    9192:	f88d 2004 	strb.w	r2, [sp, #4]
		data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9196:	461a      	mov	r2, r3
    9198:	4b21      	ldr	r3, [pc, #132]	; (9220 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x144>)
    919a:	a901      	add	r1, sp, #4
    919c:	6818      	ldr	r0, [r3, #0]
    919e:	f000 ffa9 	bl	a0f4 <_Z17data_service_sendP7bt_connPKht>
		printk("Discovery completed\n");
    91a2:	4820      	ldr	r0, [pc, #128]	; (9224 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x148>)
		printk("Third discovery completed\n");
    91a4:	f011 fb64 	bl	1a870 <printk>
	dk_set_led_on(CON_STATUS_LED_CENTRAL);
    91a8:	2001      	movs	r0, #1
    91aa:	f014 fad2 	bl	1d752 <dk_set_led_on>
	connectedC = true;
    91ae:	2201      	movs	r2, #1
    91b0:	4b1d      	ldr	r3, [pc, #116]	; (9228 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x14c>)
    91b2:	701a      	strb	r2, [r3, #0]
}
    91b4:	b003      	add	sp, #12
    91b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printk("[SUBSCRIBED]\n");
    91ba:	481c      	ldr	r0, [pc, #112]	; (922c <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x150>)
    91bc:	f011 fb58 	bl	1a870 <printk>
    91c0:	e7d4      	b.n	916c <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x90>
		connectedCode[0] = 16;
    91c2:	2310      	movs	r3, #16
    91c4:	f88d 3004 	strb.w	r3, [sp, #4]
		data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    91c8:	4b15      	ldr	r3, [pc, #84]	; (9220 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x144>)
    91ca:	a901      	add	r1, sp, #4
    91cc:	6818      	ldr	r0, [r3, #0]
    91ce:	f000 ff91 	bl	a0f4 <_Z17data_service_sendP7bt_connPKht>
		printk("Seconde discovery completed\n");
    91d2:	4817      	ldr	r0, [pc, #92]	; (9230 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x154>)
    91d4:	e7e6      	b.n	91a4 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xc8>
		connectedCode[0] = 18;
    91d6:	2312      	movs	r3, #18
    91d8:	f88d 3004 	strb.w	r3, [sp, #4]
		data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    91dc:	4b10      	ldr	r3, [pc, #64]	; (9220 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x144>)
    91de:	a901      	add	r1, sp, #4
    91e0:	6818      	ldr	r0, [r3, #0]
    91e2:	f000 ff87 	bl	a0f4 <_Z17data_service_sendP7bt_connPKht>
		printk("Third discovery completed\n");
    91e6:	4813      	ldr	r0, [pc, #76]	; (9234 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x158>)
    91e8:	e7dc      	b.n	91a4 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xc8>
    91ea:	bf00      	nop
    91ec:	0001f24f 	.word	0x0001f24f
    91f0:	0001f158 	.word	0x0001f158
    91f4:	0001f272 	.word	0x0001f272
    91f8:	0001f15c 	.word	0x0001f15c
    91fc:	0001f2a2 	.word	0x0001f2a2
    9200:	2000f2d6 	.word	0x2000f2d6
    9204:	2000a5f8 	.word	0x2000a5f8
    9208:	0001f160 	.word	0x0001f160
    920c:	0001f2d7 	.word	0x0001f2d7
    9210:	00009239 	.word	0x00009239
    9214:	0001f330 	.word	0x0001f330
    9218:	0001f359 	.word	0x0001f359
    921c:	2000f2d5 	.word	0x2000f2d5
    9220:	2000a670 	.word	0x2000a670
    9224:	0001f388 	.word	0x0001f388
    9228:	2000f2cd 	.word	0x2000f2cd
    922c:	0001f34b 	.word	0x0001f34b
    9230:	0001f39d 	.word	0x0001f39d
    9234:	0001f3ba 	.word	0x0001f3ba

00009238 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt>:
	return BT_GATT_ITER_CONTINUE;
}

uint8_t deviceManager::notify_HR(struct bt_conn *conn,
		struct bt_gatt_subscribe_params *params,
		const void *data, uint16_t length) {
    9238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    923a:	461d      	mov	r5, r3
	static bool onceBatt = true;
	static uint16_t cntNbrReceived = 0;		
	static uint16_t cntFirst = 0;	
	uint8_t dataToSend[2];
	uint8_t batteryLevelToSend[4];
	dataToSend[0] = TYPE_HEARTRATE;
    923c:	2303      	movs	r3, #3
    923e:	f88d 3000 	strb.w	r3, [sp]
	uint8_t err = 0;

	if (onceHeartRate)
    9242:	4b3c      	ldr	r3, [pc, #240]	; (9334 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xfc>)
		const void *data, uint16_t length) {
    9244:	4614      	mov	r4, r2
	if (onceHeartRate)
    9246:	781a      	ldrb	r2, [r3, #0]
		const void *data, uint16_t length) {
    9248:	460f      	mov	r7, r1
    924a:	4e3b      	ldr	r6, [pc, #236]	; (9338 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x100>)
	if (onceHeartRate)
    924c:	b34a      	cbz	r2, 92a2 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x6a>
	{
		if (isFree)
		{
			onceHeartRate = false;
    924e:	2200      	movs	r2, #0
    9250:	701a      	strb	r2, [r3, #0]
			initBatteryManager(sensorInfos);
    9252:	4b3a      	ldr	r3, [pc, #232]	; (933c <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x104>)
    9254:	7818      	ldrb	r0, [r3, #0]
    9256:	f001 f925 	bl	a4a4 <initBatteryManager>
			err = gatt_discover_battery_service(centralConnections[0]);	
    925a:	4b39      	ldr	r3, [pc, #228]	; (9340 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x108>)
    925c:	6818      	ldr	r0, [r3, #0]
    925e:	f001 f8f9 	bl	a454 <gatt_discover_battery_service>
			if (err)
    9262:	b110      	cbz	r0, 926a <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x32>
			{
				printk("Cannot discover battery service\n");
    9264:	4837      	ldr	r0, [pc, #220]	; (9344 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x10c>)
    9266:	f011 fb03 	bl	1a870 <printk>
			}
			if (cntBatterySubscriptions == nbrConnectionsCentral)
    926a:	4b37      	ldr	r3, [pc, #220]	; (9348 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x110>)
    926c:	781a      	ldrb	r2, [r3, #0]
    926e:	4b37      	ldr	r3, [pc, #220]	; (934c <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x114>)
    9270:	781b      	ldrb	r3, [r3, #0]
    9272:	429a      	cmp	r2, r3
    9274:	d115      	bne.n	92a2 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x6a>
			{
				batterySubscriptionDone = true;
    9276:	2301      	movs	r3, #1
    9278:	7033      	strb	r3, [r6, #0]
	}

	if (batterySubscriptionDone)
	{
		// get battery level every few minutes
		if (cntFirst == 2 || cntNbrReceived == 300)
    927a:	4935      	ldr	r1, [pc, #212]	; (9350 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x118>)
    927c:	4a35      	ldr	r2, [pc, #212]	; (9354 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x11c>)
    927e:	f8b1 c000 	ldrh.w	ip, [r1]
    9282:	8810      	ldrh	r0, [r2, #0]
			batteryLevelToSend[2] = deviceManager::data.battValue_heartRate;
			data_service_send(peripheralConn,batteryLevelToSend,sizeof(batteryLevelToSend));
		}
		else
		{
			cntFirst++;
    9284:	f10c 0301 	add.w	r3, ip, #1
		if (cntFirst == 2 || cntNbrReceived == 300)
    9288:	f1bc 0f02 	cmp.w	ip, #2
			cntFirst++;
    928c:	b29b      	uxth	r3, r3
		if (cntFirst == 2 || cntNbrReceived == 300)
    928e:	d002      	beq.n	9296 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x5e>
    9290:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
    9294:	d110      	bne.n	92b8 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x80>
			cntNbrReceived++;
    9296:	3001      	adds	r0, #1
			cntFirst++;
    9298:	800b      	strh	r3, [r1, #0]
			cntNbrReceived++;
    929a:	8010      	strh	r0, [r2, #0]
			askForBatteryLevelHeartRate();
    929c:	f001 f9d4 	bl	a648 <askForBatteryLevelHeartRate>
    92a0:	e002      	b.n	92a8 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x70>
	if (batterySubscriptionDone)
    92a2:	7833      	ldrb	r3, [r6, #0]
    92a4:	2b00      	cmp	r3, #0
    92a6:	d1e8      	bne.n	927a <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x42>
			cntNbrReceived++;
		}	
	}
	
	if (!data) {
    92a8:	bb4c      	cbnz	r4, 92fe <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xc6>
		printk("[UNSUBSCRIBED]\n");
    92aa:	482b      	ldr	r0, [pc, #172]	; (9358 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x120>)
    92ac:	f011 fae0 	bl	1a870 <printk>
		params->value_handle = 0U;
		return BT_GATT_ITER_STOP;
    92b0:	4620      	mov	r0, r4
		params->value_handle = 0U;
    92b2:	813c      	strh	r4, [r7, #8]
	{
		printk("[NOTIFICATION] data %p length %u\n", data, length);
	}

	return BT_GATT_ITER_CONTINUE;
}
    92b4:	b003      	add	sp, #12
    92b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if (cntFirst == 4 || cntNbrReceived == 305)
    92b8:	f1bc 0f04 	cmp.w	ip, #4
    92bc:	d003      	beq.n	92c6 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x8e>
    92be:	f240 1c31 	movw	ip, #305	; 0x131
    92c2:	4560      	cmp	r0, ip
    92c4:	d117      	bne.n	92f6 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xbe>
			cntNbrReceived = 0;
    92c6:	2000      	movs	r0, #0
    92c8:	8010      	strh	r0, [r2, #0]
			deviceManager::data.battValue_heartRate = getBatteryLevel(TYPE_HEARTRATE);
    92ca:	2003      	movs	r0, #3
			cntFirst++;
    92cc:	800b      	strh	r3, [r1, #0]
			deviceManager::data.battValue_heartRate = getBatteryLevel(TYPE_HEARTRATE);
    92ce:	f001 f927 	bl	a520 <getBatteryLevel>
    92d2:	4b22      	ldr	r3, [pc, #136]	; (935c <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x124>)
			batteryLevelToSend[0] = TYPE_BATTERY;
    92d4:	2204      	movs	r2, #4
			deviceManager::data.battValue_heartRate = getBatteryLevel(TYPE_HEARTRATE);
    92d6:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
			batteryLevelToSend[1] = TYPE_HEARTRATE;
    92da:	2303      	movs	r3, #3
    92dc:	f88d 3005 	strb.w	r3, [sp, #5]
			data_service_send(peripheralConn,batteryLevelToSend,sizeof(batteryLevelToSend));
    92e0:	4b1f      	ldr	r3, [pc, #124]	; (9360 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x128>)
			batteryLevelToSend[2] = deviceManager::data.battValue_heartRate;
    92e2:	f88d 0006 	strb.w	r0, [sp, #6]
			data_service_send(peripheralConn,batteryLevelToSend,sizeof(batteryLevelToSend));
    92e6:	eb0d 0102 	add.w	r1, sp, r2
    92ea:	6818      	ldr	r0, [r3, #0]
			batteryLevelToSend[0] = TYPE_BATTERY;
    92ec:	f88d 2004 	strb.w	r2, [sp, #4]
			data_service_send(peripheralConn,batteryLevelToSend,sizeof(batteryLevelToSend));
    92f0:	f000 ff00 	bl	a0f4 <_Z17data_service_sendP7bt_connPKht>
    92f4:	e7d8      	b.n	92a8 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x70>
			cntNbrReceived++;
    92f6:	3001      	adds	r0, #1
			cntFirst++;
    92f8:	800b      	strh	r3, [r1, #0]
			cntNbrReceived++;
    92fa:	8010      	strh	r0, [r2, #0]
    92fc:	e7d4      	b.n	92a8 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x70>
	if (length == 2) {
    92fe:	2d02      	cmp	r5, #2
    9300:	d111      	bne.n	9326 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xee>
		if (batterySubscriptionDone)
    9302:	7833      	ldrb	r3, [r6, #0]
    9304:	b16b      	cbz	r3, 9322 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xea>
			uint8_t hr_bpm = ((uint8_t *)data)[1];
    9306:	7861      	ldrb	r1, [r4, #1]
			deviceManager::data.heartRate = hr_bpm;
    9308:	4b14      	ldr	r3, [pc, #80]	; (935c <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x124>)
			printk("[NOTIFICATION] Heart Rate %u bpm\n", hr_bpm);
    930a:	4816      	ldr	r0, [pc, #88]	; (9364 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x12c>)
			deviceManager::data.heartRate = hr_bpm;
    930c:	7459      	strb	r1, [r3, #17]
			dataToSend[1] = hr_bpm;
    930e:	f88d 1001 	strb.w	r1, [sp, #1]
			printk("[NOTIFICATION] Heart Rate %u bpm\n", hr_bpm);
    9312:	f011 faad 	bl	1a870 <printk>
			data_service_send(peripheralConn,dataToSend,sizeof(dataToSend));
    9316:	4b12      	ldr	r3, [pc, #72]	; (9360 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x128>)
    9318:	462a      	mov	r2, r5
    931a:	4669      	mov	r1, sp
    931c:	6818      	ldr	r0, [r3, #0]
    931e:	f000 fee9 	bl	a0f4 <_Z17data_service_sendP7bt_connPKht>
	return BT_GATT_ITER_CONTINUE;
    9322:	2001      	movs	r0, #1
    9324:	e7c6      	b.n	92b4 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7c>
		printk("[NOTIFICATION] data %p length %u\n", data, length);
    9326:	462a      	mov	r2, r5
    9328:	4621      	mov	r1, r4
    932a:	480f      	ldr	r0, [pc, #60]	; (9368 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x130>)
    932c:	f011 faa0 	bl	1a870 <printk>
    9330:	e7f7      	b.n	9322 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xea>
    9332:	bf00      	nop
    9334:	20008569 	.word	0x20008569
    9338:	2000f2d7 	.word	0x2000f2d7
    933c:	2000f2d0 	.word	0x2000f2d0
    9340:	2000a674 	.word	0x2000a674
    9344:	0001f3d5 	.word	0x0001f3d5
    9348:	2000f2d8 	.word	0x2000f2d8
    934c:	2000f2d6 	.word	0x2000f2d6
    9350:	2000f1a6 	.word	0x2000f1a6
    9354:	2000f1a4 	.word	0x2000f1a4
    9358:	0001f3f6 	.word	0x0001f3f6
    935c:	200087d8 	.word	0x200087d8
    9360:	2000a670 	.word	0x2000a670
    9364:	0001f406 	.word	0x0001f406
    9368:	0001f428 	.word	0x0001f428

0000936c <_ZN13deviceManager13buttonChangedEjj>:
   	if (has_changed & USER_BUTTON) {
    936c:	07cb      	lsls	r3, r1, #31
void deviceManager::buttonChanged(uint32_t button_state, uint32_t has_changed){
    936e:	b510      	push	{r4, lr}
   	if (has_changed & USER_BUTTON) {
    9370:	d507      	bpl.n	9382 <_ZN13deviceManager13buttonChangedEjj+0x16>
		bt_lbs_send_button_state(button_state);
    9372:	1e04      	subs	r4, r0, #0
    9374:	bf18      	it	ne
    9376:	2401      	movne	r4, #1
    9378:	4620      	mov	r0, r4
    937a:	f004 f8db 	bl	d534 <bt_lbs_send_button_state>
		app_button_state = button_state ? true : false;
    937e:	4b01      	ldr	r3, [pc, #4]	; (9384 <_ZN13deviceManager13buttonChangedEjj+0x18>)
    9380:	701c      	strb	r4, [r3, #0]
}
    9382:	bd10      	pop	{r4, pc}
    9384:	2000f2d4 	.word	0x2000f2d4

00009388 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt>:
			const void *data, uint16_t length) {
    9388:	b573      	push	{r0, r1, r4, r5, r6, lr}
    938a:	4611      	mov	r1, r2
	if (subscriptionDone)
    938c:	4a6b      	ldr	r2, [pc, #428]	; (953c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1b4>)
    938e:	7812      	ldrb	r2, [r2, #0]
    9390:	b152      	cbz	r2, 93a8 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x20>
		if (!batterySubscriptionDone)
    9392:	4a6b      	ldr	r2, [pc, #428]	; (9540 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1b8>)
    9394:	7810      	ldrb	r0, [r2, #0]
    9396:	bb48      	cbnz	r0, 93ec <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x64>
			if (cntBatterySubscriptions == nbrConnectionsCentral)
    9398:	4c6a      	ldr	r4, [pc, #424]	; (9544 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1bc>)
    939a:	4b6b      	ldr	r3, [pc, #428]	; (9548 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1c0>)
    939c:	7821      	ldrb	r1, [r4, #0]
    939e:	781b      	ldrb	r3, [r3, #0]
    93a0:	4299      	cmp	r1, r3
    93a2:	d104      	bne.n	93ae <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x26>
				batterySubscriptionDone = true;
    93a4:	2301      	movs	r3, #1
    93a6:	7013      	strb	r3, [r2, #0]
}
    93a8:	2001      	movs	r0, #1
    93aa:	b002      	add	sp, #8
    93ac:	bd70      	pop	{r4, r5, r6, pc}
				if (isFree())
    93ae:	f001 f945 	bl	a63c <isFree>
    93b2:	2800      	cmp	r0, #0
    93b4:	d0f8      	beq.n	93a8 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x20>
					if (cnt2 == 0 || cnt2 == 7 || cnt2 == 14) 
    93b6:	4d65      	ldr	r5, [pc, #404]	; (954c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1c4>)
    93b8:	782a      	ldrb	r2, [r5, #0]
    93ba:	2a0e      	cmp	r2, #14
    93bc:	d812      	bhi.n	93e4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x5c>
    93be:	f244 0381 	movw	r3, #16513	; 0x4081
    93c2:	40d3      	lsrs	r3, r2
    93c4:	07db      	lsls	r3, r3, #31
    93c6:	d50d      	bpl.n	93e4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x5c>
						initBatteryManager(sensorInfos);
    93c8:	4b61      	ldr	r3, [pc, #388]	; (9550 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1c8>)
    93ca:	7818      	ldrb	r0, [r3, #0]
    93cc:	f001 f86a 	bl	a4a4 <initBatteryManager>
						err = gatt_discover_battery_service(centralConnections[cntBatterySubscriptions]);	
    93d0:	7822      	ldrb	r2, [r4, #0]
    93d2:	4b60      	ldr	r3, [pc, #384]	; (9554 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1cc>)
    93d4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    93d8:	f001 f83c 	bl	a454 <gatt_discover_battery_service>
						if (err == 0)
    93dc:	b910      	cbnz	r0, 93e4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x5c>
							cntBatterySubscriptions++;
    93de:	7823      	ldrb	r3, [r4, #0]
    93e0:	3301      	adds	r3, #1
    93e2:	7023      	strb	r3, [r4, #0]
					cnt2++;
    93e4:	782b      	ldrb	r3, [r5, #0]
    93e6:	3301      	adds	r3, #1
    93e8:	702b      	strb	r3, [r5, #0]
    93ea:	e7dd      	b.n	93a8 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x20>
			if (length > 0)
    93ec:	2b00      	cmp	r3, #0
    93ee:	d0db      	beq.n	93a8 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x20>
				deviceManager::data.saveData(data);
    93f0:	4c59      	ldr	r4, [pc, #356]	; (9558 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1d0>)
    93f2:	4620      	mov	r0, r4
    93f4:	f000 fdf8 	bl	9fe8 <_ZN7dataCSC8saveDataEPKv>
				if (getDiameter() != 0 && diameterSet == false)
    93f8:	f000 fea6 	bl	a148 <_Z11getDiameterv>
    93fc:	2200      	movs	r2, #0
    93fe:	2300      	movs	r3, #0
    9400:	f7ff fb42 	bl	8a88 <__aeabi_dcmpeq>
    9404:	2800      	cmp	r0, #0
    9406:	d146      	bne.n	9496 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x10e>
    9408:	4b54      	ldr	r3, [pc, #336]	; (955c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1d4>)
    940a:	781a      	ldrb	r2, [r3, #0]
    940c:	2a00      	cmp	r2, #0
    940e:	d142      	bne.n	9496 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x10e>
					diameterSet = true;
    9410:	2201      	movs	r2, #1
    9412:	701a      	strb	r2, [r3, #0]
					deviceManager::data.wheelDiameter = getDiameter();
    9414:	f000 fe98 	bl	a148 <_Z11getDiameterv>
    9418:	e9c4 0106 	strd	r0, r1, [r4, #24]
				if (deviceManager::data.type == TYPE_CSC_SPEED)
    941c:	7c25      	ldrb	r5, [r4, #16]
    941e:	2d01      	cmp	r5, #1
    9420:	d155      	bne.n	94ce <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x146>
					if (diameterSet)
    9422:	4b4e      	ldr	r3, [pc, #312]	; (955c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1d4>)
    9424:	781b      	ldrb	r3, [r3, #0]
    9426:	b1c3      	cbz	r3, 945a <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd2>
						uint16_t speed = deviceManager::data.calcSpeed();
    9428:	484b      	ldr	r0, [pc, #300]	; (9558 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1d0>)
    942a:	f7ff fd0d 	bl	8e48 <_ZN7dataCSC9calcSpeedEv>
						if (speed > 0)
    942e:	b1a0      	cbz	r0, 945a <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd2>
							dataToSend[1] = (uint8_t) (speed/100);	
    9430:	2164      	movs	r1, #100	; 0x64
    9432:	fbb0 f1f1 	udiv	r1, r0, r1
							dataToSend[0] = TYPE_CSC_SPEED;
    9436:	f88d 5000 	strb.w	r5, [sp]
							if (peripheralConn != nullptr)
    943a:	4d49      	ldr	r5, [pc, #292]	; (9560 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1d8>)
							dataToSend[1] = (uint8_t) (speed/100);	
    943c:	b289      	uxth	r1, r1
							if (peripheralConn != nullptr)
    943e:	682b      	ldr	r3, [r5, #0]
							dataToSend[1] = (uint8_t) (speed/100);	
    9440:	f88d 1001 	strb.w	r1, [sp, #1]
							val_after_comma = (uint8_t) (speed);
    9444:	f88d 0002 	strb.w	r0, [sp, #2]
							if (peripheralConn != nullptr)
    9448:	b13b      	cbz	r3, 945a <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd2>
								printk("Speed: %d\n",speed/100);
    944a:	4846      	ldr	r0, [pc, #280]	; (9564 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1dc>)
    944c:	f011 fa10 	bl	1a870 <printk>
								data_service_send(peripheralConn,dataToSend, sizeof(dataToSend));
    9450:	2203      	movs	r2, #3
    9452:	4669      	mov	r1, sp
    9454:	6828      	ldr	r0, [r5, #0]
    9456:	f000 fe4d 	bl	a0f4 <_Z17data_service_sendP7bt_connPKht>
					if (cntFirstSpeed == 5 || cntNbrReceived1 == 50)
    945a:	4e43      	ldr	r6, [pc, #268]	; (9568 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1e0>)
    945c:	4d43      	ldr	r5, [pc, #268]	; (956c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1e4>)
    945e:	7832      	ldrb	r2, [r6, #0]
    9460:	2a05      	cmp	r2, #5
    9462:	d002      	beq.n	946a <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xe2>
    9464:	7829      	ldrb	r1, [r5, #0]
    9466:	2932      	cmp	r1, #50	; 0x32
    9468:	d124      	bne.n	94b4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x12c>
						cntNbrReceived1 = 0;
    946a:	2300      	movs	r3, #0
						deviceManager::data.battValue_speed = getBatteryLevel(TYPE_CSC_SPEED);
    946c:	2001      	movs	r0, #1
						cntNbrReceived1 = 0;
    946e:	702b      	strb	r3, [r5, #0]
						deviceManager::data.battValue_speed = getBatteryLevel(TYPE_CSC_SPEED);
    9470:	f001 f856 	bl	a520 <getBatteryLevel>
						batteryLevelToSend[0] = TYPE_BATTERY;
    9474:	2204      	movs	r2, #4
						batteryLevelToSend[1] = TYPE_CSC_SPEED;
    9476:	2301      	movs	r3, #1
						deviceManager::data.battValue_speed = getBatteryLevel(TYPE_CSC_SPEED);
    9478:	f884 0020 	strb.w	r0, [r4, #32]
						batteryLevelToSend[0] = TYPE_BATTERY;
    947c:	f88d 2004 	strb.w	r2, [sp, #4]
						batteryLevelToSend[1] = TYPE_CSC_CADENCE;
    9480:	f88d 3005 	strb.w	r3, [sp, #5]
						data_service_send(peripheralConn,batteryLevelToSend,sizeof(batteryLevelToSend));
    9484:	4b36      	ldr	r3, [pc, #216]	; (9560 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1d8>)
						batteryLevelToSend[2] = deviceManager::data.battValue_cadence;
    9486:	f88d 0006 	strb.w	r0, [sp, #6]
						data_service_send(peripheralConn,batteryLevelToSend,sizeof(batteryLevelToSend));
    948a:	eb0d 0102 	add.w	r1, sp, r2
    948e:	6818      	ldr	r0, [r3, #0]
    9490:	f000 fe30 	bl	a0f4 <_Z17data_service_sendP7bt_connPKht>
    9494:	e788      	b.n	93a8 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x20>
				else if (getDiameter() == 0 && diameterSet == true)
    9496:	f000 fe57 	bl	a148 <_Z11getDiameterv>
    949a:	2200      	movs	r2, #0
    949c:	2300      	movs	r3, #0
    949e:	f7ff faf3 	bl	8a88 <__aeabi_dcmpeq>
    94a2:	2800      	cmp	r0, #0
    94a4:	d0ba      	beq.n	941c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x94>
    94a6:	4b2d      	ldr	r3, [pc, #180]	; (955c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1d4>)
    94a8:	781a      	ldrb	r2, [r3, #0]
    94aa:	2a00      	cmp	r2, #0
    94ac:	d0b6      	beq.n	941c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x94>
					diameterSet = false;
    94ae:	2200      	movs	r2, #0
    94b0:	701a      	strb	r2, [r3, #0]
    94b2:	e7b3      	b.n	941c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x94>
					else if (waitCnt == 5)
    94b4:	482e      	ldr	r0, [pc, #184]	; (9570 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1e8>)
    94b6:	7803      	ldrb	r3, [r0, #0]
    94b8:	2b05      	cmp	r3, #5
						waitCnt++;
    94ba:	bf0f      	iteee	eq
    94bc:	2306      	moveq	r3, #6
						cntNbrReceived1++;
    94be:	3101      	addne	r1, #1
						cntFirstSpeed++;
    94c0:	3201      	addne	r2, #1
						waitCnt++;
    94c2:	3301      	addne	r3, #1
						cntNbrReceived1++;
    94c4:	bf1c      	itt	ne
    94c6:	7029      	strbne	r1, [r5, #0]
						cntFirstSpeed++;
    94c8:	7032      	strbne	r2, [r6, #0]
						waitCnt++;
    94ca:	7003      	strb	r3, [r0, #0]
    94cc:	e76c      	b.n	93a8 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x20>
				else if (deviceManager::data.type == TYPE_CSC_CADENCE)
    94ce:	2d02      	cmp	r5, #2
    94d0:	f47f af6a 	bne.w	93a8 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x20>
					if (diameterSet)
    94d4:	4b21      	ldr	r3, [pc, #132]	; (955c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1d4>)
    94d6:	781b      	ldrb	r3, [r3, #0]
    94d8:	b1b3      	cbz	r3, 9508 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x180>
						uint16_t rpm = deviceManager::data.calcRPM();
    94da:	481f      	ldr	r0, [pc, #124]	; (9558 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1d0>)
    94dc:	f000 fda6 	bl	a02c <_ZN7dataCSC7calcRPMEv>
						if (rpm > 0)
    94e0:	4601      	mov	r1, r0
    94e2:	b188      	cbz	r0, 9508 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x180>
							dataToSend[0] = TYPE_CSC_CADENCE;	
    94e4:	f88d 5000 	strb.w	r5, [sp]
							if (peripheralConn != nullptr)
    94e8:	4d1d      	ldr	r5, [pc, #116]	; (9560 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1d8>)
							dataToSend[2] = (uint8_t) (rpm >> 8);	
    94ea:	0a03      	lsrs	r3, r0, #8
    94ec:	f88d 3002 	strb.w	r3, [sp, #2]
							if (peripheralConn != nullptr)
    94f0:	682b      	ldr	r3, [r5, #0]
							dataToSend[1] = (uint8_t) rpm;
    94f2:	f88d 0001 	strb.w	r0, [sp, #1]
							if (peripheralConn != nullptr)
    94f6:	b13b      	cbz	r3, 9508 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x180>
								printk("Cadence rpm: %d\n",rpm);
    94f8:	481e      	ldr	r0, [pc, #120]	; (9574 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1ec>)
    94fa:	f011 f9b9 	bl	1a870 <printk>
								data_service_send(peripheralConn,dataToSend, sizeof(dataToSend));
    94fe:	2203      	movs	r2, #3
    9500:	4669      	mov	r1, sp
    9502:	6828      	ldr	r0, [r5, #0]
    9504:	f000 fdf6 	bl	a0f4 <_Z17data_service_sendP7bt_connPKht>
					if (cntFirstCadence == 5 || cntNbrReceived2 == 100)
    9508:	481b      	ldr	r0, [pc, #108]	; (9578 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1f0>)
    950a:	491c      	ldr	r1, [pc, #112]	; (957c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1f4>)
    950c:	7802      	ldrb	r2, [r0, #0]
    950e:	2a05      	cmp	r2, #5
    9510:	d002      	beq.n	9518 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x190>
    9512:	780b      	ldrb	r3, [r1, #0]
    9514:	2b64      	cmp	r3, #100	; 0x64
    9516:	d10c      	bne.n	9532 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1aa>
						cntNbrReceived2 = 0;
    9518:	2300      	movs	r3, #0
						cntFirstCadence = 0;
    951a:	7003      	strb	r3, [r0, #0]
						deviceManager::data.battValue_cadence = getBatteryLevel(TYPE_CSC_CADENCE);
    951c:	2002      	movs	r0, #2
						cntNbrReceived2 = 0;
    951e:	700b      	strb	r3, [r1, #0]
						deviceManager::data.battValue_cadence = getBatteryLevel(TYPE_CSC_CADENCE);
    9520:	f000 fffe 	bl	a520 <getBatteryLevel>
						batteryLevelToSend[0] = TYPE_BATTERY;
    9524:	2204      	movs	r2, #4
						batteryLevelToSend[1] = TYPE_CSC_CADENCE;
    9526:	2302      	movs	r3, #2
						deviceManager::data.battValue_cadence = getBatteryLevel(TYPE_CSC_CADENCE);
    9528:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
						batteryLevelToSend[0] = TYPE_BATTERY;
    952c:	f88d 2004 	strb.w	r2, [sp, #4]
						batteryLevelToSend[1] = TYPE_CSC_CADENCE;
    9530:	e7a6      	b.n	9480 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xf8>
						cntFirstCadence++;
    9532:	3201      	adds	r2, #1
						cntNbrReceived2++;
    9534:	3301      	adds	r3, #1
						cntFirstCadence++;
    9536:	7002      	strb	r2, [r0, #0]
						cntNbrReceived2++;
    9538:	700b      	strb	r3, [r1, #0]
    953a:	e735      	b.n	93a8 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x20>
    953c:	2000f2d5 	.word	0x2000f2d5
    9540:	2000f2d7 	.word	0x2000f2d7
    9544:	2000f2d8 	.word	0x2000f2d8
    9548:	2000f2d6 	.word	0x2000f2d6
    954c:	2000f2de 	.word	0x2000f2de
    9550:	2000f2d0 	.word	0x2000f2d0
    9554:	2000a674 	.word	0x2000a674
    9558:	200087d8 	.word	0x200087d8
    955c:	2000f2cf 	.word	0x2000f2cf
    9560:	2000a670 	.word	0x2000a670
    9564:	0001f44a 	.word	0x0001f44a
    9568:	2000f2da 	.word	0x2000f2da
    956c:	2000f2dc 	.word	0x2000f2dc
    9570:	2000f2df 	.word	0x2000f2df
    9574:	0001f455 	.word	0x0001f455
    9578:	2000f2db 	.word	0x2000f2db
    957c:	2000f2dd 	.word	0x2000f2dd

00009580 <bt_addr_le_to_str.isra.0>:
 * @param len Length of data to be copied to user string buffer. Refer to
 * BT_ADDR_LE_STR_LEN about recommended value.
 *
 * @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    9580:	b5f0      	push	{r4, r5, r6, r7, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    9582:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    9584:	b08b      	sub	sp, #44	; 0x2c
    9586:	4604      	mov	r4, r0
    9588:	460e      	mov	r6, r1
    958a:	4617      	mov	r7, r2
    958c:	ad07      	add	r5, sp, #28
    958e:	2b03      	cmp	r3, #3
    9590:	d820      	bhi.n	95d4 <bt_addr_le_to_str.isra.0+0x54>
    9592:	e8df f003 	tbb	[pc, r3]
    9596:	1902      	.short	0x1902
    9598:	1d1b      	.short	0x1d1b
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    959a:	4911      	ldr	r1, [pc, #68]	; (95e0 <bt_addr_le_to_str.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    959c:	4628      	mov	r0, r5
    959e:	f012 fb51 	bl	1bc44 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    95a2:	7863      	ldrb	r3, [r4, #1]
    95a4:	4639      	mov	r1, r7
    95a6:	9304      	str	r3, [sp, #16]
    95a8:	78a3      	ldrb	r3, [r4, #2]
    95aa:	4630      	mov	r0, r6
    95ac:	9303      	str	r3, [sp, #12]
    95ae:	78e3      	ldrb	r3, [r4, #3]
    95b0:	4a0c      	ldr	r2, [pc, #48]	; (95e4 <bt_addr_le_to_str.isra.0+0x64>)
    95b2:	9302      	str	r3, [sp, #8]
    95b4:	7923      	ldrb	r3, [r4, #4]
    95b6:	9505      	str	r5, [sp, #20]
    95b8:	9301      	str	r3, [sp, #4]
    95ba:	7963      	ldrb	r3, [r4, #5]
    95bc:	9300      	str	r3, [sp, #0]
    95be:	79a3      	ldrb	r3, [r4, #6]
    95c0:	f011 f963 	bl	1a88a <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    95c4:	b00b      	add	sp, #44	; 0x2c
    95c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
    95c8:	4907      	ldr	r1, [pc, #28]	; (95e8 <bt_addr_le_to_str.isra.0+0x68>)
    95ca:	e7e7      	b.n	959c <bt_addr_le_to_str.isra.0+0x1c>
		strcpy(type, "public-id");
    95cc:	4907      	ldr	r1, [pc, #28]	; (95ec <bt_addr_le_to_str.isra.0+0x6c>)
    95ce:	e7e5      	b.n	959c <bt_addr_le_to_str.isra.0+0x1c>
		strcpy(type, "random-id");
    95d0:	4907      	ldr	r1, [pc, #28]	; (95f0 <bt_addr_le_to_str.isra.0+0x70>)
    95d2:	e7e3      	b.n	959c <bt_addr_le_to_str.isra.0+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    95d4:	210a      	movs	r1, #10
    95d6:	4628      	mov	r0, r5
    95d8:	4a06      	ldr	r2, [pc, #24]	; (95f4 <bt_addr_le_to_str.isra.0+0x74>)
    95da:	f011 f956 	bl	1a88a <snprintk>
		break;
    95de:	e7e0      	b.n	95a2 <bt_addr_le_to_str.isra.0+0x22>
    95e0:	0001f466 	.word	0x0001f466
    95e4:	0001f48f 	.word	0x0001f48f
    95e8:	0001f46d 	.word	0x0001f46d
    95ec:	0001f474 	.word	0x0001f474
    95f0:	0001f47e 	.word	0x0001f47e
    95f4:	0001f488 	.word	0x0001f488

000095f8 <_ZN13deviceManagerC1Ev>:
deviceManager::deviceManager(){
    95f8:	b510      	push	{r4, lr}
    95fa:	4604      	mov	r4, r0
    95fc:	2214      	movs	r2, #20
    95fe:	2100      	movs	r1, #0
    9600:	f012 fba5 	bl	1bd4e <memset>
    9604:	4b10      	ldr	r3, [pc, #64]	; (9648 <_ZN13deviceManagerC1Ev+0x50>)
    9606:	4a11      	ldr	r2, [pc, #68]	; (964c <_ZN13deviceManagerC1Ev+0x54>)
    9608:	6023      	str	r3, [r4, #0]
    960a:	4b11      	ldr	r3, [pc, #68]	; (9650 <_ZN13deviceManagerC1Ev+0x58>)
    960c:	e892 0003 	ldmia.w	r2, {r0, r1}
    9610:	6063      	str	r3, [r4, #4]
    9612:	4b10      	ldr	r3, [pc, #64]	; (9654 <_ZN13deviceManagerC1Ev+0x5c>)
    9614:	2224      	movs	r2, #36	; 0x24
    9616:	60a3      	str	r3, [r4, #8]
    9618:	4b0f      	ldr	r3, [pc, #60]	; (9658 <_ZN13deviceManagerC1Ev+0x60>)
    961a:	60e3      	str	r3, [r4, #12]
    961c:	f104 0314 	add.w	r3, r4, #20
    9620:	e883 0003 	stmia.w	r3, {r0, r1}
    9624:	2100      	movs	r1, #0
    9626:	f104 001c 	add.w	r0, r4, #28
    962a:	f012 fb90 	bl	1bd4e <memset>
		centralConnections[i] = nullptr;
    962e:	2300      	movs	r3, #0
    9630:	4a0a      	ldr	r2, [pc, #40]	; (965c <_ZN13deviceManagerC1Ev+0x64>)
}
    9632:	4620      	mov	r0, r4
		centralConnections[i] = nullptr;
    9634:	e9c2 3300 	strd	r3, r3, [r2]
    9638:	e9c2 3302 	strd	r3, r3, [r2, #8]
	connectedP = false;
    963c:	4a08      	ldr	r2, [pc, #32]	; (9660 <_ZN13deviceManagerC1Ev+0x68>)
    963e:	7013      	strb	r3, [r2, #0]
	connectedC = false;
    9640:	4a08      	ldr	r2, [pc, #32]	; (9664 <_ZN13deviceManagerC1Ev+0x6c>)
    9642:	7013      	strb	r3, [r2, #0]
}
    9644:	bd10      	pop	{r4, pc}
    9646:	bf00      	nop
    9648:	00009bd9 	.word	0x00009bd9
    964c:	0001e760 	.word	0x0001e760
    9650:	00009e41 	.word	0x00009e41
    9654:	0001a701 	.word	0x0001a701
    9658:	0001a705 	.word	0x0001a705
    965c:	2000a674 	.word	0x2000a674
    9660:	2000f2ce 	.word	0x2000f2ce
    9664:	2000f2cd 	.word	0x2000f2cd

00009668 <_ZN13deviceManager9getDeviceEv>:
    if(isCentral && isPeripheral){
    9668:	4a07      	ldr	r2, [pc, #28]	; (9688 <_ZN13deviceManager9getDeviceEv+0x20>)
    966a:	4b08      	ldr	r3, [pc, #32]	; (968c <_ZN13deviceManager9getDeviceEv+0x24>)
    966c:	7812      	ldrb	r2, [r2, #0]
    966e:	781b      	ldrb	r3, [r3, #0]
    9670:	b122      	cbz	r2, 967c <_ZN13deviceManager9getDeviceEv+0x14>
        return 1;
    9672:	2b00      	cmp	r3, #0
    9674:	bf14      	ite	ne
    9676:	2003      	movne	r0, #3
    9678:	2001      	moveq	r0, #1
    967a:	4770      	bx	lr
        return 0;
    967c:	2b00      	cmp	r3, #0
    967e:	bf14      	ite	ne
    9680:	2002      	movne	r0, #2
    9682:	2000      	moveq	r0, #0
}
    9684:	4770      	bx	lr
    9686:	bf00      	nop
    9688:	2000f2d9 	.word	0x2000f2d9
    968c:	2000f2d1 	.word	0x2000f2d1

00009690 <_ZN13deviceManager10initButtonEv>:
int deviceManager::initButton(){
    9690:	b510      	push	{r4, lr}
    err = dk_buttons_init(buttonChanged);
    9692:	4805      	ldr	r0, [pc, #20]	; (96a8 <_ZN13deviceManager10initButtonEv+0x18>)
    9694:	f00d f964 	bl	16960 <dk_buttons_init>
	if (err) {
    9698:	4604      	mov	r4, r0
    969a:	b118      	cbz	r0, 96a4 <_ZN13deviceManager10initButtonEv+0x14>
		printk("Cannot init buttons (err: %d)\n", err);
    969c:	4601      	mov	r1, r0
    969e:	4803      	ldr	r0, [pc, #12]	; (96ac <_ZN13deviceManager10initButtonEv+0x1c>)
    96a0:	f011 f8e6 	bl	1a870 <printk>
}
    96a4:	4620      	mov	r0, r4
    96a6:	bd10      	pop	{r4, pc}
    96a8:	0000936d 	.word	0x0000936d
    96ac:	0001f4b2 	.word	0x0001f4b2

000096b0 <_ZN13deviceManager16startAdvertisingEv>:
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
    96b0:	2301      	movs	r3, #1
void deviceManager::startAdvertising() {
    96b2:	b507      	push	{r0, r1, r2, lr}
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
    96b4:	490b      	ldr	r1, [pc, #44]	; (96e4 <_ZN13deviceManager16startAdvertisingEv+0x34>)
    96b6:	9300      	str	r3, [sp, #0]
    96b8:	2202      	movs	r2, #2
    96ba:	4b0b      	ldr	r3, [pc, #44]	; (96e8 <_ZN13deviceManager16startAdvertisingEv+0x38>)
    96bc:	480b      	ldr	r0, [pc, #44]	; (96ec <_ZN13deviceManager16startAdvertisingEv+0x3c>)
    96be:	f007 f99b 	bl	109f8 <bt_le_adv_start>
	if (err) {
    96c2:	4601      	mov	r1, r0
    96c4:	b128      	cbz	r0, 96d2 <_ZN13deviceManager16startAdvertisingEv+0x22>
		printk("Advertising failed to start (err %d)\n", err);
    96c6:	480a      	ldr	r0, [pc, #40]	; (96f0 <_ZN13deviceManager16startAdvertisingEv+0x40>)
}
    96c8:	b003      	add	sp, #12
    96ca:	f85d eb04 	ldr.w	lr, [sp], #4
		printk("Advertising failed to start (err %d)\n", err);
    96ce:	f011 b8cf 	b.w	1a870 <printk>
	printk("Advertising successfully started\n");
    96d2:	4808      	ldr	r0, [pc, #32]	; (96f4 <_ZN13deviceManager16startAdvertisingEv+0x44>)
    96d4:	f011 f8cc 	bl	1a870 <printk>
	printk("Waiting for connection...\n");
    96d8:	4807      	ldr	r0, [pc, #28]	; (96f8 <_ZN13deviceManager16startAdvertisingEv+0x48>)
}
    96da:	b003      	add	sp, #12
    96dc:	f85d eb04 	ldr.w	lr, [sp], #4
	printk("Waiting for connection...\n");
    96e0:	f011 b8c6 	b.w	1a870 <printk>
    96e4:	0001e878 	.word	0x0001e878
    96e8:	0001e888 	.word	0x0001e888
    96ec:	0001e7f8 	.word	0x0001e7f8
    96f0:	0001f4d1 	.word	0x0001f4d1
    96f4:	0001f4f7 	.word	0x0001f4f7
    96f8:	0001f519 	.word	0x0001f519

000096fc <_ZN13deviceManager14initPeripheralEv>:
void deviceManager::initPeripheral(){
    96fc:	b510      	push	{r4, lr}
    96fe:	4604      	mov	r4, r0
    if(getDevice() == 3 || getDevice() == 2){
    9700:	f7ff ffb2 	bl	9668 <_ZN13deviceManager9getDeviceEv>
    9704:	1e83      	subs	r3, r0, #2
    9706:	b2db      	uxtb	r3, r3
    9708:	2b01      	cmp	r3, #1
    970a:	d82d      	bhi.n	9768 <_ZN13deviceManager14initPeripheralEv+0x6c>
        err = dk_leds_init();
    970c:	f00d f8c2 	bl	16894 <dk_leds_init>
        if (err) {
    9710:	4601      	mov	r1, r0
    9712:	b120      	cbz	r0, 971e <_ZN13deviceManager14initPeripheralEv+0x22>
            printk("LEDs init failed (err %d)\n", err);
    9714:	4815      	ldr	r0, [pc, #84]	; (976c <_ZN13deviceManager14initPeripheralEv+0x70>)
}
    9716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            printk("Button init failed (err %d)\n", err);
    971a:	f011 b8a9 	b.w	1a870 <printk>
        err = initButton();
    971e:	f7ff ffb7 	bl	9690 <_ZN13deviceManager10initButtonEv>
    9722:	4601      	mov	r1, r0
        if (err) {
    9724:	b108      	cbz	r0, 972a <_ZN13deviceManager14initPeripheralEv+0x2e>
            printk("Button init failed (err %d)\n", err);
    9726:	4812      	ldr	r0, [pc, #72]	; (9770 <_ZN13deviceManager14initPeripheralEv+0x74>)
    9728:	e7f5      	b.n	9716 <_ZN13deviceManager14initPeripheralEv+0x1a>
        err = bt_enable(NULL);
    972a:	f006 fecb 	bl	104c4 <bt_enable>
        if (err) {
    972e:	4601      	mov	r1, r0
    9730:	b108      	cbz	r0, 9736 <_ZN13deviceManager14initPeripheralEv+0x3a>
            printk("Bluetooth init failed (err %d)\n", err);
    9732:	4810      	ldr	r0, [pc, #64]	; (9774 <_ZN13deviceManager14initPeripheralEv+0x78>)
    9734:	e7ef      	b.n	9716 <_ZN13deviceManager14initPeripheralEv+0x1a>
        printk("Bluetooth initialized\n");
    9736:	4810      	ldr	r0, [pc, #64]	; (9778 <_ZN13deviceManager14initPeripheralEv+0x7c>)
    9738:	f011 f89a 	bl	1a870 <printk>
		bt_conn_cb_register(&conn_callbacks);
    973c:	4620      	mov	r0, r4
    973e:	f007 fd1f 	bl	11180 <bt_conn_cb_register>
            settings_load();
    9742:	f011 fb8a 	bl	1ae5a <settings_load>
        err = bt_lbs_init(&lbs_callbacs);
    9746:	f104 0014 	add.w	r0, r4, #20
    974a:	f003 fee9 	bl	d520 <bt_lbs_init>
        if (err) {
    974e:	4601      	mov	r1, r0
    9750:	b108      	cbz	r0, 9756 <_ZN13deviceManager14initPeripheralEv+0x5a>
			printk("Failed to init LBS (err:%d)\n", err);
    9752:	480a      	ldr	r0, [pc, #40]	; (977c <_ZN13deviceManager14initPeripheralEv+0x80>)
    9754:	e7df      	b.n	9716 <_ZN13deviceManager14initPeripheralEv+0x1a>
		err = data_service_init();
    9756:	f000 fcbb 	bl	a0d0 <_Z17data_service_initv>
		if (err) 
    975a:	4601      	mov	r1, r0
    975c:	2800      	cmp	r0, #0
    975e:	d1f8      	bne.n	9752 <_ZN13deviceManager14initPeripheralEv+0x56>
}
    9760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		startAdvertising();
    9764:	f7ff bfa4 	b.w	96b0 <_ZN13deviceManager16startAdvertisingEv>
}
    9768:	bd10      	pop	{r4, pc}
    976a:	bf00      	nop
    976c:	0001f534 	.word	0x0001f534
    9770:	0001f54f 	.word	0x0001f54f
    9774:	0001f56c 	.word	0x0001f56c
    9778:	0001f58c 	.word	0x0001f58c
    977c:	0001f5a3 	.word	0x0001f5a3

00009780 <_ZN13deviceManager9startScanEv>:
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    9780:	2001      	movs	r0, #1
void deviceManager::startScan(){
    9782:	b508      	push	{r3, lr}
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    9784:	f003 fc6a 	bl	d05c <bt_scan_start>
	if (err) {
    9788:	4601      	mov	r1, r0
    978a:	b110      	cbz	r0, 9792 <_ZN13deviceManager9startScanEv+0x12>
		printk("Scanning failed to start, err %d\n", err);
    978c:	4803      	ldr	r0, [pc, #12]	; (979c <_ZN13deviceManager9startScanEv+0x1c>)
    978e:	f011 f86f 	bl	1a870 <printk>
}
    9792:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("Scanning...\n");
    9796:	4802      	ldr	r0, [pc, #8]	; (97a0 <_ZN13deviceManager9startScanEv+0x20>)
    9798:	f011 b86a 	b.w	1a870 <printk>
    979c:	0001f5c0 	.word	0x0001f5c0
    97a0:	0001f5e2 	.word	0x0001f5e2

000097a4 <_ZN13deviceManager8initScanEv>:
void deviceManager::initScan() {
    97a4:	b530      	push	{r4, r5, lr}
    97a6:	b089      	sub	sp, #36	; 0x24
	sensorInfos = getSensorInfos();
    97a8:	f000 fd04 	bl	a1b4 <_Z14getSensorInfosv>
    97ac:	4d34      	ldr	r5, [pc, #208]	; (9880 <_ZN13deviceManager8initScanEv+0xdc>)
	struct bt_le_scan_param scanParam = {
    97ae:	ab03      	add	r3, sp, #12
    97b0:	2214      	movs	r2, #20
    97b2:	2100      	movs	r1, #0
	sensorInfos = getSensorInfos();
    97b4:	7028      	strb	r0, [r5, #0]
    97b6:	4604      	mov	r4, r0
	struct bt_le_scan_param scanParam = {
    97b8:	4618      	mov	r0, r3
    97ba:	f012 fac8 	bl	1bd4e <memset>
    97be:	2201      	movs	r2, #1
    97c0:	f88d 200c 	strb.w	r2, [sp, #12]
    97c4:	9204      	str	r2, [sp, #16]
    97c6:	4a2f      	ldr	r2, [pc, #188]	; (9884 <_ZN13deviceManager8initScanEv+0xe0>)
	struct bt_scan_init_param scanInit = {
    97c8:	492f      	ldr	r1, [pc, #188]	; (9888 <_ZN13deviceManager8initScanEv+0xe4>)
	struct bt_le_scan_param scanParam = {
    97ca:	9205      	str	r2, [sp, #20]
	struct bt_scan_init_param scanInit = {
    97cc:	2200      	movs	r2, #0
    97ce:	9102      	str	r1, [sp, #8]
    97d0:	9201      	str	r2, [sp, #4]
	};
    97d2:	9000      	str	r0, [sp, #0]
	if (sensorInfos != 0)
    97d4:	2c00      	cmp	r4, #0
    97d6:	d04e      	beq.n	9876 <_ZN13deviceManager8initScanEv+0xd2>
		if (once)
    97d8:	4b2c      	ldr	r3, [pc, #176]	; (988c <_ZN13deviceManager8initScanEv+0xe8>)
    97da:	7819      	ldrb	r1, [r3, #0]
    97dc:	b141      	cbz	r1, 97f0 <_ZN13deviceManager8initScanEv+0x4c>
			once = false;
    97de:	701a      	strb	r2, [r3, #0]
			bt_le_scan_stop();
    97e0:	f007 fb0c 	bl	10dfc <bt_le_scan_stop>
			bt_scan_init(&scanInit);
    97e4:	4668      	mov	r0, sp
    97e6:	f003 fc07 	bl	cff8 <bt_scan_init>
			bt_scan_cb_register(&scan_cb);			
    97ea:	4829      	ldr	r0, [pc, #164]	; (9890 <_ZN13deviceManager8initScanEv+0xec>)
    97ec:	f003 fa2c 	bl	cc48 <bt_scan_cb_register>
		bt_scan_filter_remove_all();
    97f0:	f003 fab4 	bl	cd5c <bt_scan_filter_remove_all>
		switch (sensorInfos)
    97f4:	782b      	ldrb	r3, [r5, #0]
    97f6:	3b01      	subs	r3, #1
    97f8:	2b06      	cmp	r3, #6
    97fa:	d831      	bhi.n	9860 <_ZN13deviceManager8initScanEv+0xbc>
    97fc:	e8df f003 	tbb	[pc, r3]
    9800:	12100e04 	.word	0x12100e04
    9804:	251c      	.short	0x251c
    9806:	2e          	.byte	0x2e
    9807:	00          	.byte	0x00
				err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    9808:	4922      	ldr	r1, [pc, #136]	; (9894 <_ZN13deviceManager8initScanEv+0xf0>)
    980a:	2003      	movs	r0, #3
    980c:	f003 fa2c 	bl	cc68 <bt_scan_filter_add>
				if (err) {
    9810:	b330      	cbz	r0, 9860 <_ZN13deviceManager8initScanEv+0xbc>
					printk("Scanning filters cannot be set\n");
    9812:	4821      	ldr	r0, [pc, #132]	; (9898 <_ZN13deviceManager8initScanEv+0xf4>)
    9814:	f011 f82c 	bl	1a870 <printk>
}
    9818:	b009      	add	sp, #36	; 0x24
    981a:	bd30      	pop	{r4, r5, pc}
				err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    981c:	491f      	ldr	r1, [pc, #124]	; (989c <_ZN13deviceManager8initScanEv+0xf8>)
    981e:	e7f4      	b.n	980a <_ZN13deviceManager8initScanEv+0x66>
				err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    9820:	491f      	ldr	r1, [pc, #124]	; (98a0 <_ZN13deviceManager8initScanEv+0xfc>)
    9822:	e7f2      	b.n	980a <_ZN13deviceManager8initScanEv+0x66>
				if (nbrConnectionsCentral == 0 || nbrConnectionsCentral == 1)
    9824:	4b1f      	ldr	r3, [pc, #124]	; (98a4 <_ZN13deviceManager8initScanEv+0x100>)
    9826:	781b      	ldrb	r3, [r3, #0]
    9828:	2b01      	cmp	r3, #1
    982a:	d801      	bhi.n	9830 <_ZN13deviceManager8initScanEv+0x8c>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    982c:	491e      	ldr	r1, [pc, #120]	; (98a8 <_ZN13deviceManager8initScanEv+0x104>)
    982e:	e7ec      	b.n	980a <_ZN13deviceManager8initScanEv+0x66>
				else if (nbrConnectionsCentral == 2)
    9830:	2b02      	cmp	r3, #2
    9832:	d115      	bne.n	9860 <_ZN13deviceManager8initScanEv+0xbc>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_HRS);
    9834:	491d      	ldr	r1, [pc, #116]	; (98ac <_ZN13deviceManager8initScanEv+0x108>)
    9836:	e7e8      	b.n	980a <_ZN13deviceManager8initScanEv+0x66>
				if (nbrConnectionsCentral == 0)
    9838:	4b1a      	ldr	r3, [pc, #104]	; (98a4 <_ZN13deviceManager8initScanEv+0x100>)
    983a:	781b      	ldrb	r3, [r3, #0]
    983c:	b90b      	cbnz	r3, 9842 <_ZN13deviceManager8initScanEv+0x9e>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    983e:	491c      	ldr	r1, [pc, #112]	; (98b0 <_ZN13deviceManager8initScanEv+0x10c>)
    9840:	e7e3      	b.n	980a <_ZN13deviceManager8initScanEv+0x66>
				else if (nbrConnectionsCentral == 1)
    9842:	2b01      	cmp	r3, #1
    9844:	d10c      	bne.n	9860 <_ZN13deviceManager8initScanEv+0xbc>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_HRS);
    9846:	491b      	ldr	r1, [pc, #108]	; (98b4 <_ZN13deviceManager8initScanEv+0x110>)
    9848:	e7df      	b.n	980a <_ZN13deviceManager8initScanEv+0x66>
				if (nbrConnectionsCentral == 0)
    984a:	4b16      	ldr	r3, [pc, #88]	; (98a4 <_ZN13deviceManager8initScanEv+0x100>)
    984c:	781b      	ldrb	r3, [r3, #0]
    984e:	b90b      	cbnz	r3, 9854 <_ZN13deviceManager8initScanEv+0xb0>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    9850:	4919      	ldr	r1, [pc, #100]	; (98b8 <_ZN13deviceManager8initScanEv+0x114>)
    9852:	e7da      	b.n	980a <_ZN13deviceManager8initScanEv+0x66>
				else if (nbrConnectionsCentral == 1)
    9854:	2b01      	cmp	r3, #1
    9856:	d103      	bne.n	9860 <_ZN13deviceManager8initScanEv+0xbc>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_HRS);
    9858:	4918      	ldr	r1, [pc, #96]	; (98bc <_ZN13deviceManager8initScanEv+0x118>)
    985a:	e7d6      	b.n	980a <_ZN13deviceManager8initScanEv+0x66>
				err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_HRS);
    985c:	4918      	ldr	r1, [pc, #96]	; (98c0 <_ZN13deviceManager8initScanEv+0x11c>)
    985e:	e7d4      	b.n	980a <_ZN13deviceManager8initScanEv+0x66>
		err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
    9860:	2100      	movs	r1, #0
    9862:	2004      	movs	r0, #4
    9864:	f003 faa6 	bl	cdb4 <bt_scan_filter_enable>
		if (err) {
    9868:	b110      	cbz	r0, 9870 <_ZN13deviceManager8initScanEv+0xcc>
			printk("Filters cannot be turned on\n");
    986a:	4816      	ldr	r0, [pc, #88]	; (98c4 <_ZN13deviceManager8initScanEv+0x120>)
    986c:	f011 f800 	bl	1a870 <printk>
		startScan();
    9870:	f7ff ff86 	bl	9780 <_ZN13deviceManager9startScanEv>
    9874:	e7d0      	b.n	9818 <_ZN13deviceManager8initScanEv+0x74>
		err = bt_le_scan_start(&scanParam, deviceFound);
    9876:	4914      	ldr	r1, [pc, #80]	; (98c8 <_ZN13deviceManager8initScanEv+0x124>)
    9878:	f007 fa5c 	bl	10d34 <bt_le_scan_start>
		if (err) {
    987c:	e7cc      	b.n	9818 <_ZN13deviceManager8initScanEv+0x74>
    987e:	bf00      	nop
    9880:	2000f2d0 	.word	0x2000f2d0
    9884:	00300060 	.word	0x00300060
    9888:	0001f114 	.word	0x0001f114
    988c:	20008568 	.word	0x20008568
    9890:	20008158 	.word	0x20008158
    9894:	0001f11c 	.word	0x0001f11c
    9898:	0001f5ef 	.word	0x0001f5ef
    989c:	0001f120 	.word	0x0001f120
    98a0:	0001f124 	.word	0x0001f124
    98a4:	2000f2d6 	.word	0x2000f2d6
    98a8:	0001f128 	.word	0x0001f128
    98ac:	0001f12c 	.word	0x0001f12c
    98b0:	0001f130 	.word	0x0001f130
    98b4:	0001f134 	.word	0x0001f134
    98b8:	0001f138 	.word	0x0001f138
    98bc:	0001f13c 	.word	0x0001f13c
    98c0:	0001f140 	.word	0x0001f140
    98c4:	0001f60f 	.word	0x0001f60f
    98c8:	0001a70f 	.word	0x0001a70f

000098cc <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv>:
void deviceManager::discoveryCompletedCSC(struct bt_gatt_dm *dm, void *ctx) {
    98cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (!subscriptionDone)
    98d0:	4f57      	ldr	r7, [pc, #348]	; (9a30 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x164>)
void deviceManager::discoveryCompletedCSC(struct bt_gatt_dm *dm, void *ctx) {
    98d2:	4604      	mov	r4, r0
	if (!subscriptionDone)
    98d4:	783b      	ldrb	r3, [r7, #0]
    98d6:	4d57      	ldr	r5, [pc, #348]	; (9a34 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x168>)
    98d8:	2b00      	cmp	r3, #0
    98da:	d14b      	bne.n	9974 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xa8>
		subscribe_params[nbrConnectionsCentral-1].value = BT_GATT_CCC_NOTIFY;
    98dc:	f04f 0818 	mov.w	r8, #24
    98e0:	2101      	movs	r1, #1
    98e2:	782b      	ldrb	r3, [r5, #0]
    98e4:	4e54      	ldr	r6, [pc, #336]	; (9a38 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x16c>)
    98e6:	3b01      	subs	r3, #1
    98e8:	fb08 f303 	mul.w	r3, r8, r3
    98ec:	18f2      	adds	r2, r6, r3
    98ee:	8191      	strh	r1, [r2, #12]
		subscribe_params[nbrConnectionsCentral-1].notify = onReceived;
    98f0:	4a52      	ldr	r2, [pc, #328]	; (9a3c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x170>)
		chrc = bt_gatt_dm_char_by_uuid(dm,BT_UUID_CSC_MEASUREMENT);
    98f2:	4953      	ldr	r1, [pc, #332]	; (9a40 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x174>)
		subscribe_params[nbrConnectionsCentral-1].notify = onReceived;
    98f4:	50f2      	str	r2, [r6, r3]
		chrc = bt_gatt_dm_char_by_uuid(dm,BT_UUID_CSC_MEASUREMENT);
    98f6:	f002 ffdb 	bl	c8b0 <bt_gatt_dm_char_by_uuid>
		if (!chrc) {
    98fa:	4681      	mov	r9, r0
    98fc:	b970      	cbnz	r0, 991c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x50>
			printk("Missing CSC measurement characteristic\n");
    98fe:	4851      	ldr	r0, [pc, #324]	; (9a44 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x178>)
			printk("Missing CSC measurement char CCC descriptor\n");
    9900:	f010 ffb6 	bl	1a870 <printk>
			err = bt_gatt_dm_data_release(dm);
    9904:	4620      	mov	r0, r4
    9906:	f011 fc50 	bl	1b1aa <bt_gatt_dm_data_release>
			if (err) {
    990a:	4601      	mov	r1, r0
    990c:	2800      	cmp	r0, #0
    990e:	d036      	beq.n	997e <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb2>
				printk("Could not release discovery data, err: %d\n", err);
    9910:	484d      	ldr	r0, [pc, #308]	; (9a48 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x17c>)
}
    9912:	b003      	add	sp, #12
    9914:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
				printk("Could not release discovery data, err: %d\n", err);
    9918:	f010 bfaa 	b.w	1a870 <printk>
		desc = bt_gatt_dm_desc_by_uuid(dm, chrc, BT_UUID_CSC_MEASUREMENT);
    991c:	4601      	mov	r1, r0
    991e:	4a4b      	ldr	r2, [pc, #300]	; (9a4c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x180>)
    9920:	4620      	mov	r0, r4
    9922:	f011 fc30 	bl	1b186 <bt_gatt_dm_desc_by_uuid>
		if (!desc) {
    9926:	b908      	cbnz	r0, 992c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x60>
			printk("Missing CSC measurement char CCC descriptor\n");
    9928:	4849      	ldr	r0, [pc, #292]	; (9a50 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x184>)
    992a:	e7e9      	b.n	9900 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x34>
		subscribe_params[nbrConnectionsCentral-1].value_handle = desc->handle;
    992c:	782b      	ldrb	r3, [r5, #0]
    992e:	8882      	ldrh	r2, [r0, #4]
    9930:	3b01      	subs	r3, #1
    9932:	fb08 6303 	mla	r3, r8, r3, r6
		desc = bt_gatt_dm_desc_by_uuid(dm, chrc, BT_UUID_GATT_CCC);
    9936:	4649      	mov	r1, r9
		subscribe_params[nbrConnectionsCentral-1].value_handle = desc->handle;
    9938:	811a      	strh	r2, [r3, #8]
		desc = bt_gatt_dm_desc_by_uuid(dm, chrc, BT_UUID_GATT_CCC);
    993a:	4620      	mov	r0, r4
    993c:	4a45      	ldr	r2, [pc, #276]	; (9a54 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x188>)
    993e:	f011 fc22 	bl	1b186 <bt_gatt_dm_desc_by_uuid>
		if (!desc) {
    9942:	2800      	cmp	r0, #0
    9944:	d0f0      	beq.n	9928 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x5c>
		subscribe_params[nbrConnectionsCentral-1].ccc_handle = desc->handle;
    9946:	782b      	ldrb	r3, [r5, #0]
    9948:	8882      	ldrh	r2, [r0, #4]
    994a:	3b01      	subs	r3, #1
    994c:	fb08 6303 	mla	r3, r8, r3, r6
		err = bt_gatt_subscribe(bt_gatt_dm_conn_get(dm), &subscribe_params[nbrConnectionsCentral-1]);
    9950:	4620      	mov	r0, r4
		subscribe_params[nbrConnectionsCentral-1].ccc_handle = desc->handle;
    9952:	815a      	strh	r2, [r3, #10]
		err = bt_gatt_subscribe(bt_gatt_dm_conn_get(dm), &subscribe_params[nbrConnectionsCentral-1]);
    9954:	f011 fbc8 	bl	1b0e8 <bt_gatt_dm_conn_get>
    9958:	7829      	ldrb	r1, [r5, #0]
    995a:	3901      	subs	r1, #1
    995c:	fb08 6101 	mla	r1, r8, r1, r6
    9960:	f00b fa8e 	bl	14e80 <bt_gatt_subscribe>
		if (err) {
    9964:	4601      	mov	r1, r0
    9966:	b110      	cbz	r0, 996e <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xa2>
			printk("Subscribtion failed (err %d)\n", err);
    9968:	483b      	ldr	r0, [pc, #236]	; (9a58 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x18c>)
    996a:	f010 ff81 	bl	1a870 <printk>
		bt_gatt_dm_data_release(dm);
    996e:	4620      	mov	r0, r4
    9970:	f011 fc1b 	bl	1b1aa <bt_gatt_dm_data_release>
	switch (nbrConnectionsCentral)
    9974:	782a      	ldrb	r2, [r5, #0]
    9976:	2a01      	cmp	r2, #1
    9978:	d004      	beq.n	9984 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb8>
    997a:	2a02      	cmp	r2, #2
    997c:	d02e      	beq.n	99dc <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x110>
}
    997e:	b003      	add	sp, #12
    9980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (nbrAddresses == 1)
    9984:	4b35      	ldr	r3, [pc, #212]	; (9a5c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x190>)
    9986:	781c      	ldrb	r4, [r3, #0]
    9988:	2c01      	cmp	r4, #1
    998a:	d10d      	bne.n	99a8 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xdc>
			connectedCode[0] = 14;
    998c:	230e      	movs	r3, #14
    998e:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9992:	4b33      	ldr	r3, [pc, #204]	; (9a60 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x194>)
    9994:	4622      	mov	r2, r4
    9996:	6818      	ldr	r0, [r3, #0]
    9998:	a901      	add	r1, sp, #4
    999a:	f000 fbab 	bl	a0f4 <_Z17data_service_sendP7bt_connPKht>
			printk("Discovery completed\n");
    999e:	4831      	ldr	r0, [pc, #196]	; (9a64 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x198>)
    99a0:	f010 ff66 	bl	1a870 <printk>
			subscriptionDone = true;
    99a4:	703c      	strb	r4, [r7, #0]
    99a6:	e7ea      	b.n	997e <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb2>
		else if (nbrAddresses == 2)	
    99a8:	2c02      	cmp	r4, #2
    99aa:	d10d      	bne.n	99c8 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xfc>
			connectedCode[0] = 15;
    99ac:	230f      	movs	r3, #15
    99ae:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    99b2:	4b2b      	ldr	r3, [pc, #172]	; (9a60 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x194>)
    99b4:	a901      	add	r1, sp, #4
    99b6:	6818      	ldr	r0, [r3, #0]
    99b8:	f000 fb9c 	bl	a0f4 <_Z17data_service_sendP7bt_connPKht>
			initScan();
    99bc:	f7ff fef2 	bl	97a4 <_ZN13deviceManager8initScanEv>
			printk("First discovery completed\n");			
    99c0:	4829      	ldr	r0, [pc, #164]	; (9a68 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x19c>)
    99c2:	f010 ff55 	bl	1a870 <printk>
    99c6:	e7da      	b.n	997e <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb2>
		else if (nbrAddresses == 3)
    99c8:	2c03      	cmp	r4, #3
    99ca:	d1d8      	bne.n	997e <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb2>
			initScan();
    99cc:	f7ff feea 	bl	97a4 <_ZN13deviceManager8initScanEv>
			printk("First discovery completed\n");	
    99d0:	4825      	ldr	r0, [pc, #148]	; (9a68 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x19c>)
}
    99d2:	b003      	add	sp, #12
    99d4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			printk("First discovery completed\n");	
    99d8:	f010 bf4a 	b.w	1a870 <printk>
		if (nbrAddresses == 2)
    99dc:	4b1f      	ldr	r3, [pc, #124]	; (9a5c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x190>)
    99de:	781b      	ldrb	r3, [r3, #0]
    99e0:	2b02      	cmp	r3, #2
    99e2:	d113      	bne.n	9a0c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x140>
			connectedCode[0] = 16;
    99e4:	2310      	movs	r3, #16
    99e6:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn, connectedCode, sizeof(connectedCode));
    99ea:	4b1d      	ldr	r3, [pc, #116]	; (9a60 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x194>)
    99ec:	2201      	movs	r2, #1
    99ee:	6818      	ldr	r0, [r3, #0]
    99f0:	a901      	add	r1, sp, #4
    99f2:	f000 fb7f 	bl	a0f4 <_Z17data_service_sendP7bt_connPKht>
			printk("Second discovery completed\n");
    99f6:	481d      	ldr	r0, [pc, #116]	; (9a6c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1a0>)
    99f8:	f010 ff3a 	bl	1a870 <printk>
			dk_set_led_on(CON_STATUS_LED_CENTRAL);
    99fc:	2001      	movs	r0, #1
    99fe:	f013 fea8 	bl	1d752 <dk_set_led_on>
			connectedC = true;	
    9a02:	2301      	movs	r3, #1
    9a04:	4a1a      	ldr	r2, [pc, #104]	; (9a70 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1a4>)
			subscriptionDone = true;
    9a06:	703b      	strb	r3, [r7, #0]
			connectedC = true;	
    9a08:	7013      	strb	r3, [r2, #0]
			subscriptionDone = true;
    9a0a:	e7b8      	b.n	997e <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb2>
		else if (nbrAddresses == 3) 
    9a0c:	2b03      	cmp	r3, #3
    9a0e:	d1b6      	bne.n	997e <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb2>
			connectedCode[0] = 17;
    9a10:	2311      	movs	r3, #17
    9a12:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9a16:	4b12      	ldr	r3, [pc, #72]	; (9a60 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x194>)
    9a18:	2201      	movs	r2, #1
    9a1a:	6818      	ldr	r0, [r3, #0]
    9a1c:	a901      	add	r1, sp, #4
    9a1e:	f000 fb69 	bl	a0f4 <_Z17data_service_sendP7bt_connPKht>
			printk("Second discovery completed\n");		
    9a22:	4812      	ldr	r0, [pc, #72]	; (9a6c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1a0>)
    9a24:	f010 ff24 	bl	1a870 <printk>
			initScan();
    9a28:	f7ff febc 	bl	97a4 <_ZN13deviceManager8initScanEv>
    9a2c:	e7a7      	b.n	997e <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb2>
    9a2e:	bf00      	nop
    9a30:	2000f2d5 	.word	0x2000f2d5
    9a34:	2000f2d6 	.word	0x2000f2d6
    9a38:	2000a5f8 	.word	0x2000a5f8
    9a3c:	00009389 	.word	0x00009389
    9a40:	0001f14c 	.word	0x0001f14c
    9a44:	0001f62c 	.word	0x0001f62c
    9a48:	0001f654 	.word	0x0001f654
    9a4c:	0001f150 	.word	0x0001f150
    9a50:	0001f67f 	.word	0x0001f67f
    9a54:	0001f154 	.word	0x0001f154
    9a58:	0001f6ac 	.word	0x0001f6ac
    9a5c:	2000f2d2 	.word	0x2000f2d2
    9a60:	2000a670 	.word	0x2000a670
    9a64:	0001f388 	.word	0x0001f388
    9a68:	0001f6ca 	.word	0x0001f6ca
    9a6c:	0001f6e5 	.word	0x0001f6e5
    9a70:	2000f2cd 	.word	0x2000f2cd

00009a74 <_ZN13deviceManager11initCentralEv>:
void deviceManager::initCentral(){
    9a74:	b510      	push	{r4, lr}
    9a76:	4604      	mov	r4, r0
	printk("Init Central\n");
    9a78:	481c      	ldr	r0, [pc, #112]	; (9aec <_ZN13deviceManager11initCentralEv+0x78>)
    9a7a:	f010 fef9 	bl	1a870 <printk>
	if (getDevice() == 1 || getDevice() == 3)
    9a7e:	f7ff fdf3 	bl	9668 <_ZN13deviceManager9getDeviceEv>
    9a82:	2801      	cmp	r0, #1
    9a84:	d00a      	beq.n	9a9c <_ZN13deviceManager11initCentralEv+0x28>
    9a86:	2803      	cmp	r0, #3
    9a88:	d12f      	bne.n	9aea <_ZN13deviceManager11initCentralEv+0x76>
		bt_conn_cb_register(&conn_callbacks);
    9a8a:	4620      	mov	r0, r4
    9a8c:	f007 fb78 	bl	11180 <bt_conn_cb_register>
		initScan();
    9a90:	f7ff fe88 	bl	97a4 <_ZN13deviceManager8initScanEv>
}
    9a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		startScan();	
    9a98:	f7ff be72 	b.w	9780 <_ZN13deviceManager9startScanEv>
			err = bt_enable(nullptr);
    9a9c:	2000      	movs	r0, #0
    9a9e:	f006 fd11 	bl	104c4 <bt_enable>
			if (err) {
    9aa2:	4601      	mov	r1, r0
    9aa4:	b120      	cbz	r0, 9ab0 <_ZN13deviceManager11initCentralEv+0x3c>
				printk("Bluetooth init failed (err %d)\n", err);
    9aa6:	4812      	ldr	r0, [pc, #72]	; (9af0 <_ZN13deviceManager11initCentralEv+0x7c>)
}
    9aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				printk("LEDs init failed (err %d)\n", err);
    9aac:	f010 bee0 	b.w	1a870 <printk>
			printk("Bluetooth ready\n");
    9ab0:	4810      	ldr	r0, [pc, #64]	; (9af4 <_ZN13deviceManager11initCentralEv+0x80>)
    9ab2:	f010 fedd 	bl	1a870 <printk>
			err = dk_leds_init();
    9ab6:	f00c feed 	bl	16894 <dk_leds_init>
			if (err) {
    9aba:	4601      	mov	r1, r0
    9abc:	b108      	cbz	r0, 9ac2 <_ZN13deviceManager11initCentralEv+0x4e>
				printk("LEDs init failed (err %d)\n", err);
    9abe:	480e      	ldr	r0, [pc, #56]	; (9af8 <_ZN13deviceManager11initCentralEv+0x84>)
    9ac0:	e7f2      	b.n	9aa8 <_ZN13deviceManager11initCentralEv+0x34>
			err = initButton();
    9ac2:	f7ff fde5 	bl	9690 <_ZN13deviceManager10initButtonEv>
			if (err) {
    9ac6:	4601      	mov	r1, r0
    9ac8:	b108      	cbz	r0, 9ace <_ZN13deviceManager11initCentralEv+0x5a>
				printk("Button init failed (err %d)\n", err);
    9aca:	480c      	ldr	r0, [pc, #48]	; (9afc <_ZN13deviceManager11initCentralEv+0x88>)
    9acc:	e7ec      	b.n	9aa8 <_ZN13deviceManager11initCentralEv+0x34>
			err = bt_lbs_init(&lbs_callbacs);
    9ace:	f104 0014 	add.w	r0, r4, #20
    9ad2:	f003 fd25 	bl	d520 <bt_lbs_init>
			if (err) {
    9ad6:	4601      	mov	r1, r0
    9ad8:	b108      	cbz	r0, 9ade <_ZN13deviceManager11initCentralEv+0x6a>
				printk("Failed to init LBS (err:%d)\n", err);
    9ada:	4809      	ldr	r0, [pc, #36]	; (9b00 <_ZN13deviceManager11initCentralEv+0x8c>)
    9adc:	e7e4      	b.n	9aa8 <_ZN13deviceManager11initCentralEv+0x34>
				settings_load();
    9ade:	f011 f9bc 	bl	1ae5a <settings_load>
				printk("Settings loaded\n");
    9ae2:	4808      	ldr	r0, [pc, #32]	; (9b04 <_ZN13deviceManager11initCentralEv+0x90>)
    9ae4:	f010 fec4 	bl	1a870 <printk>
    9ae8:	e7cf      	b.n	9a8a <_ZN13deviceManager11initCentralEv+0x16>
}
    9aea:	bd10      	pop	{r4, pc}
    9aec:	0001f701 	.word	0x0001f701
    9af0:	0001f56c 	.word	0x0001f56c
    9af4:	0001f70f 	.word	0x0001f70f
    9af8:	0001f534 	.word	0x0001f534
    9afc:	0001f54f 	.word	0x0001f54f
    9b00:	0001f5a3 	.word	0x0001f5a3
    9b04:	0001f720 	.word	0x0001f720

00009b08 <_ZN13deviceManager9setDeviceEbb>:
void deviceManager::setDevice(bool c, bool p){
    9b08:	b410      	push	{r4}
    isPeripheral = p;
    9b0a:	4c09      	ldr	r4, [pc, #36]	; (9b30 <_ZN13deviceManager9setDeviceEbb+0x28>)
void deviceManager::setDevice(bool c, bool p){
    9b0c:	4603      	mov	r3, r0
    isPeripheral = p;
    9b0e:	7022      	strb	r2, [r4, #0]
    isCentral = c;  
    9b10:	4c08      	ldr	r4, [pc, #32]	; (9b34 <_ZN13deviceManager9setDeviceEbb+0x2c>)
    9b12:	7021      	strb	r1, [r4, #0]
	if (isCentral == true && isPeripheral == true)
    9b14:	b139      	cbz	r1, 9b26 <_ZN13deviceManager9setDeviceEbb+0x1e>
    9b16:	b11a      	cbz	r2, 9b20 <_ZN13deviceManager9setDeviceEbb+0x18>
		initPeripheral();
    9b18:	4618      	mov	r0, r3
}
    9b1a:	bc10      	pop	{r4}
		initPeripheral();
    9b1c:	f7ff bdee 	b.w	96fc <_ZN13deviceManager14initPeripheralEv>
}
    9b20:	bc10      	pop	{r4}
		initCentral();
    9b22:	f7ff bfa7 	b.w	9a74 <_ZN13deviceManager11initCentralEv>
	else if (isCentral == false && isPeripheral == true)
    9b26:	2a00      	cmp	r2, #0
    9b28:	d1f6      	bne.n	9b18 <_ZN13deviceManager9setDeviceEbb+0x10>
}
    9b2a:	bc10      	pop	{r4}
    9b2c:	4770      	bx	lr
    9b2e:	bf00      	nop
    9b30:	2000f2d1 	.word	0x2000f2d1
    9b34:	2000f2d9 	.word	0x2000f2d9

00009b38 <_ZN13deviceManager19scanConnectionErrorEP19bt_scan_device_info>:
void deviceManager::scanConnectionError(struct bt_scan_device_info *device_info) {
    9b38:	b508      	push	{r3, lr}
    printk("Connecting failed\n");
    9b3a:	4803      	ldr	r0, [pc, #12]	; (9b48 <_ZN13deviceManager19scanConnectionErrorEP19bt_scan_device_info+0x10>)
    9b3c:	f010 fe98 	bl	1a870 <printk>
}
    9b40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	startScan();
    9b44:	f7ff be1c 	b.w	9780 <_ZN13deviceManager9startScanEv>
    9b48:	0001f731 	.word	0x0001f731

00009b4c <_ZN13deviceManager11discoverCSCEv>:
{
    9b4c:	b510      	push	{r4, lr}
	printk("nbr connection: %d\n",nbrConnectionsCentral);
    9b4e:	4c0c      	ldr	r4, [pc, #48]	; (9b80 <_ZN13deviceManager11discoverCSCEv+0x34>)
    9b50:	480c      	ldr	r0, [pc, #48]	; (9b84 <_ZN13deviceManager11discoverCSCEv+0x38>)
    9b52:	7821      	ldrb	r1, [r4, #0]
    9b54:	f010 fe8c 	bl	1a870 <printk>
	uint8_t err = bt_gatt_dm_start(centralConnections[nbrConnectionsCentral-1], BT_UUID_CSC, &discovery_cb, NULL);
    9b58:	7820      	ldrb	r0, [r4, #0]
    9b5a:	4c0b      	ldr	r4, [pc, #44]	; (9b88 <_ZN13deviceManager11discoverCSCEv+0x3c>)
    9b5c:	3801      	subs	r0, #1
    9b5e:	490b      	ldr	r1, [pc, #44]	; (9b8c <_ZN13deviceManager11discoverCSCEv+0x40>)
    9b60:	2300      	movs	r3, #0
    9b62:	4a0b      	ldr	r2, [pc, #44]	; (9b90 <_ZN13deviceManager11discoverCSCEv+0x44>)
    9b64:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    9b68:	f002 fece 	bl	c908 <bt_gatt_dm_start>
	if (err) 
    9b6c:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9b70:	d004      	beq.n	9b7c <_ZN13deviceManager11discoverCSCEv+0x30>
}
    9b72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Could not start service discovery, err %d\n", err);
    9b76:	4807      	ldr	r0, [pc, #28]	; (9b94 <_ZN13deviceManager11discoverCSCEv+0x48>)
    9b78:	f010 be7a 	b.w	1a870 <printk>
}
    9b7c:	bd10      	pop	{r4, pc}
    9b7e:	bf00      	nop
    9b80:	2000f2d6 	.word	0x2000f2d6
    9b84:	0001f744 	.word	0x0001f744
    9b88:	2000a674 	.word	0x2000a674
    9b8c:	0001f144 	.word	0x0001f144
    9b90:	20008140 	.word	0x20008140
    9b94:	0001f758 	.word	0x0001f758

00009b98 <_ZN13deviceManager10discoverHREv>:
{
    9b98:	b510      	push	{r4, lr}
	uint8_t err = bt_gatt_dm_start(centralConnections[nbrConnectionsCentral-1], BT_UUID_HRS, &discovery_cb_HR, NULL);
    9b9a:	4b0a      	ldr	r3, [pc, #40]	; (9bc4 <_ZN13deviceManager10discoverHREv+0x2c>)
    9b9c:	4c0a      	ldr	r4, [pc, #40]	; (9bc8 <_ZN13deviceManager10discoverHREv+0x30>)
    9b9e:	7818      	ldrb	r0, [r3, #0]
    9ba0:	490a      	ldr	r1, [pc, #40]	; (9bcc <_ZN13deviceManager10discoverHREv+0x34>)
    9ba2:	3801      	subs	r0, #1
    9ba4:	2300      	movs	r3, #0
    9ba6:	4a0a      	ldr	r2, [pc, #40]	; (9bd0 <_ZN13deviceManager10discoverHREv+0x38>)
    9ba8:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    9bac:	f002 feac 	bl	c908 <bt_gatt_dm_start>
	if (err) 
    9bb0:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9bb4:	d004      	beq.n	9bc0 <_ZN13deviceManager10discoverHREv+0x28>
}
    9bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Could not start service discovery, err %d\n", err);
    9bba:	4806      	ldr	r0, [pc, #24]	; (9bd4 <_ZN13deviceManager10discoverHREv+0x3c>)
    9bbc:	f010 be58 	b.w	1a870 <printk>
}
    9bc0:	bd10      	pop	{r4, pc}
    9bc2:	bf00      	nop
    9bc4:	2000f2d6 	.word	0x2000f2d6
    9bc8:	2000a674 	.word	0x2000a674
    9bcc:	0001f148 	.word	0x0001f148
    9bd0:	2000814c 	.word	0x2000814c
    9bd4:	0001f758 	.word	0x0001f758

00009bd8 <_ZN13deviceManager9connectedEP7bt_connh>:
void deviceManager::connected(struct bt_conn *conn, uint8_t err) {
    9bd8:	b570      	push	{r4, r5, r6, lr}
    9bda:	b090      	sub	sp, #64	; 0x40
    9bdc:	460c      	mov	r4, r1
	int error = bt_conn_get_info(conn,&info);
    9bde:	a901      	add	r1, sp, #4
void deviceManager::connected(struct bt_conn *conn, uint8_t err) {
    9be0:	4605      	mov	r5, r0
	int error = bt_conn_get_info(conn,&info);
    9be2:	f007 fdcd 	bl	11780 <bt_conn_get_info>
	if (error)
    9be6:	b120      	cbz	r0, 9bf2 <_ZN13deviceManager9connectedEP7bt_connh+0x1a>
		printk("Cannot get info of connection object\n");
    9be8:	4837      	ldr	r0, [pc, #220]	; (9cc8 <_ZN13deviceManager9connectedEP7bt_connh+0xf0>)
    9bea:	f010 fe41 	bl	1a870 <printk>
}
    9bee:	b010      	add	sp, #64	; 0x40
    9bf0:	bd70      	pop	{r4, r5, r6, pc}
	if (info.role == BT_CONN_ROLE_MASTER)	// master -> central role
    9bf2:	f89d 6005 	ldrb.w	r6, [sp, #5]
    9bf6:	2e00      	cmp	r6, #0
    9bf8:	d143      	bne.n	9c82 <_ZN13deviceManager9connectedEP7bt_connh+0xaa>
		bt_conn_disconnect(peripheralConn,5);
    9bfa:	4b34      	ldr	r3, [pc, #208]	; (9ccc <_ZN13deviceManager9connectedEP7bt_connh+0xf4>)
    9bfc:	2105      	movs	r1, #5
    9bfe:	6818      	ldr	r0, [r3, #0]
    9c00:	f007 fee8 	bl	119d4 <bt_conn_disconnect>
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    9c04:	4628      	mov	r0, r5
    9c06:	f012 fb2b 	bl	1c260 <bt_conn_get_dst>
    9c0a:	221e      	movs	r2, #30
    9c0c:	a908      	add	r1, sp, #32
    9c0e:	f7ff fcb7 	bl	9580 <bt_addr_le_to_str.isra.0>
		if (err) {
    9c12:	b13c      	cbz	r4, 9c24 <_ZN13deviceManager9connectedEP7bt_connh+0x4c>
			printk("Failed to connect to %s (%u)\n", addr, err);
    9c14:	4622      	mov	r2, r4
    9c16:	482e      	ldr	r0, [pc, #184]	; (9cd0 <_ZN13deviceManager9connectedEP7bt_connh+0xf8>)
    9c18:	a908      	add	r1, sp, #32
    9c1a:	f010 fe29 	bl	1a870 <printk>
			startScan();
    9c1e:	f7ff fdaf 	bl	9780 <_ZN13deviceManager9startScanEv>
			return;
    9c22:	e7e4      	b.n	9bee <_ZN13deviceManager9connectedEP7bt_connh+0x16>
		centralConnections[nbrConnectionsCentral] = bt_conn_ref(conn);;
    9c24:	4c2b      	ldr	r4, [pc, #172]	; (9cd4 <_ZN13deviceManager9connectedEP7bt_connh+0xfc>)
		printk("Connected: %s\n", addr);
    9c26:	a908      	add	r1, sp, #32
    9c28:	482b      	ldr	r0, [pc, #172]	; (9cd8 <_ZN13deviceManager9connectedEP7bt_connh+0x100>)
    9c2a:	f010 fe21 	bl	1a870 <printk>
		centralConnections[nbrConnectionsCentral] = bt_conn_ref(conn);;
    9c2e:	4628      	mov	r0, r5
    9c30:	7826      	ldrb	r6, [r4, #0]
    9c32:	f012 fadc 	bl	1c1ee <bt_conn_ref>
    9c36:	4b29      	ldr	r3, [pc, #164]	; (9cdc <_ZN13deviceManager9connectedEP7bt_connh+0x104>)
    9c38:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
		bt_conn_unref(conn);
    9c3c:	4628      	mov	r0, r5
    9c3e:	f007 fc0d 	bl	1145c <bt_conn_unref>
		nbrConnectionsCentral++;
    9c42:	7823      	ldrb	r3, [r4, #0]
		if (!wasDisconnected)
    9c44:	4a26      	ldr	r2, [pc, #152]	; (9ce0 <_ZN13deviceManager9connectedEP7bt_connh+0x108>)
		nbrConnectionsCentral++;
    9c46:	3301      	adds	r3, #1
		if (!wasDisconnected)
    9c48:	7812      	ldrb	r2, [r2, #0]
		nbrConnectionsCentral++;
    9c4a:	b2db      	uxtb	r3, r3
    9c4c:	7023      	strb	r3, [r4, #0]
		if (!wasDisconnected)
    9c4e:	b9a2      	cbnz	r2, 9c7a <_ZN13deviceManager9connectedEP7bt_connh+0xa2>
			switch (sensorInfos)
    9c50:	4a24      	ldr	r2, [pc, #144]	; (9ce4 <_ZN13deviceManager9connectedEP7bt_connh+0x10c>)
    9c52:	7812      	ldrb	r2, [r2, #0]
    9c54:	3a01      	subs	r2, #1
    9c56:	2a06      	cmp	r2, #6
    9c58:	d8c9      	bhi.n	9bee <_ZN13deviceManager9connectedEP7bt_connh+0x16>
    9c5a:	e8df f002 	tbb	[pc, r2]
    9c5e:	0606      	.short	0x0606
    9c60:	09090406 	.word	0x09090406
    9c64:	0b          	.byte	0x0b
    9c65:	00          	.byte	0x00
				if (nbrConnectionsCentral <= 2)
    9c66:	2b02      	cmp	r3, #2
    9c68:	d804      	bhi.n	9c74 <_ZN13deviceManager9connectedEP7bt_connh+0x9c>
					discoverCSC();
    9c6a:	f7ff ff6f 	bl	9b4c <_ZN13deviceManager11discoverCSCEv>
    9c6e:	e7be      	b.n	9bee <_ZN13deviceManager9connectedEP7bt_connh+0x16>
				if (nbrConnectionsCentral == 1)
    9c70:	2b01      	cmp	r3, #1
    9c72:	d0fa      	beq.n	9c6a <_ZN13deviceManager9connectedEP7bt_connh+0x92>
				discoverHR();
    9c74:	f7ff ff90 	bl	9b98 <_ZN13deviceManager10discoverHREv>
				break;
    9c78:	e7b9      	b.n	9bee <_ZN13deviceManager9connectedEP7bt_connh+0x16>
			subscriptionDone = true;
    9c7a:	2201      	movs	r2, #1
    9c7c:	4b1a      	ldr	r3, [pc, #104]	; (9ce8 <_ZN13deviceManager9connectedEP7bt_connh+0x110>)
    9c7e:	701a      	strb	r2, [r3, #0]
    9c80:	e7b5      	b.n	9bee <_ZN13deviceManager9connectedEP7bt_connh+0x16>
	else if (info.role == BT_CONN_ROLE_SLAVE)	// slave -> peripheral role
    9c82:	2e01      	cmp	r6, #1
    9c84:	d1b3      	bne.n	9bee <_ZN13deviceManager9connectedEP7bt_connh+0x16>
		if (err) {
    9c86:	b124      	cbz	r4, 9c92 <_ZN13deviceManager9connectedEP7bt_connh+0xba>
			printk("Connection failed (err %u)\n", err);
    9c88:	4621      	mov	r1, r4
    9c8a:	4818      	ldr	r0, [pc, #96]	; (9cec <_ZN13deviceManager9connectedEP7bt_connh+0x114>)
    9c8c:	f010 fdf0 	bl	1a870 <printk>
			return;
    9c90:	e7ad      	b.n	9bee <_ZN13deviceManager9connectedEP7bt_connh+0x16>
		printk("Connected with application\n");
    9c92:	4817      	ldr	r0, [pc, #92]	; (9cf0 <_ZN13deviceManager9connectedEP7bt_connh+0x118>)
    9c94:	f010 fdec 	bl	1a870 <printk>
		connectedP = true;
    9c98:	4b16      	ldr	r3, [pc, #88]	; (9cf4 <_ZN13deviceManager9connectedEP7bt_connh+0x11c>)
		peripheralConn = bt_conn_ref(conn);
    9c9a:	4628      	mov	r0, r5
		connectedP = true;
    9c9c:	701e      	strb	r6, [r3, #0]
		peripheralConn = bt_conn_ref(conn);
    9c9e:	f012 faa6 	bl	1c1ee <bt_conn_ref>
    9ca2:	4b0a      	ldr	r3, [pc, #40]	; (9ccc <_ZN13deviceManager9connectedEP7bt_connh+0xf4>)
    9ca4:	6018      	str	r0, [r3, #0]
		bt_conn_unref(conn);
    9ca6:	4628      	mov	r0, r5
    9ca8:	f007 fbd8 	bl	1145c <bt_conn_unref>
		dk_set_led_on(CON_STATUS_LED_PERIPHERAL);			
    9cac:	4620      	mov	r0, r4
    9cae:	f013 fd50 	bl	1d752 <dk_set_led_on>
		if (getDevice() == 3 && nbrConnectionsCentral == 0) 
    9cb2:	f7ff fcd9 	bl	9668 <_ZN13deviceManager9getDeviceEv>
    9cb6:	2803      	cmp	r0, #3
    9cb8:	d199      	bne.n	9bee <_ZN13deviceManager9connectedEP7bt_connh+0x16>
    9cba:	4b06      	ldr	r3, [pc, #24]	; (9cd4 <_ZN13deviceManager9connectedEP7bt_connh+0xfc>)
    9cbc:	781b      	ldrb	r3, [r3, #0]
    9cbe:	2b00      	cmp	r3, #0
    9cc0:	d195      	bne.n	9bee <_ZN13deviceManager9connectedEP7bt_connh+0x16>
			initScan();
    9cc2:	f7ff fd6f 	bl	97a4 <_ZN13deviceManager8initScanEv>
    9cc6:	e792      	b.n	9bee <_ZN13deviceManager9connectedEP7bt_connh+0x16>
    9cc8:	0001f783 	.word	0x0001f783
    9ccc:	2000a670 	.word	0x2000a670
    9cd0:	0001f7a9 	.word	0x0001f7a9
    9cd4:	2000f2d6 	.word	0x2000f2d6
    9cd8:	0001f7c7 	.word	0x0001f7c7
    9cdc:	2000a674 	.word	0x2000a674
    9ce0:	2000f2d3 	.word	0x2000f2d3
    9ce4:	2000f2d0 	.word	0x2000f2d0
    9ce8:	2000f2d5 	.word	0x2000f2d5
    9cec:	0001f7d6 	.word	0x0001f7d6
    9cf0:	0001f7f2 	.word	0x0001f7f2
    9cf4:	2000f2ce 	.word	0x2000f2ce

00009cf8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb>:
			      bool connectable) {
    9cf8:	b570      	push	{r4, r5, r6, lr}
    9cfa:	b08e      	sub	sp, #56	; 0x38
    9cfc:	4605      	mov	r5, r0
	nbrAddresses = getNbrOfAddresses();
    9cfe:	f000 fa29 	bl	a154 <_Z17getNbrOfAddressesv>
    9d02:	4b41      	ldr	r3, [pc, #260]	; (9e08 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x110>)
    9d04:	4604      	mov	r4, r0
    9d06:	4e41      	ldr	r6, [pc, #260]	; (9e0c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x114>)
    9d08:	7018      	strb	r0, [r3, #0]
	if (nbrAddresses != 0)
    9d0a:	2800      	cmp	r0, #0
    9d0c:	d045      	beq.n	9d9a <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xa2>
		ready = true;
    9d0e:	2101      	movs	r1, #1
		switch (nbrAddresses)
    9d10:	2802      	cmp	r0, #2
		ready = true;
    9d12:	7031      	strb	r1, [r6, #0]
		switch (nbrAddresses)
    9d14:	d031      	beq.n	9d7a <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x82>
    9d16:	2803      	cmp	r0, #3
    9d18:	d035      	beq.n	9d86 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x8e>
    9d1a:	4288      	cmp	r0, r1
    9d1c:	d103      	bne.n	9d26 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2e>
			getAddress(sensor1,1);
    9d1e:	4601      	mov	r1, r0
    9d20:	483b      	ldr	r0, [pc, #236]	; (9e10 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x118>)
			getAddress(sensor2,2);
    9d22:	f000 fa1d 	bl	a160 <_Z10getAddressPch>
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
    9d26:	682b      	ldr	r3, [r5, #0]
    9d28:	221e      	movs	r2, #30
    9d2a:	6818      	ldr	r0, [r3, #0]
    9d2c:	a906      	add	r1, sp, #24
    9d2e:	f7ff fc27 	bl	9580 <bt_addr_le_to_str.isra.0>
	bt_addr_le_to_str(device_info->recv_info->addr, addrShort, sizeof(addrShort));
    9d32:	682b      	ldr	r3, [r5, #0]
    9d34:	2212      	movs	r2, #18
    9d36:	6818      	ldr	r0, [r3, #0]
    9d38:	a901      	add	r1, sp, #4
    9d3a:	f7ff fc21 	bl	9580 <bt_addr_le_to_str.isra.0>
	if (ready)
    9d3e:	7833      	ldrb	r3, [r6, #0]
    9d40:	2b00      	cmp	r3, #0
    9d42:	d03d      	beq.n	9dc0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xc8>
		bt_scan_stop();
    9d44:	f011 fa49 	bl	1b1da <bt_scan_stop>
		if (checkAddresses(addrShort,sensor1) && once_sensor1)
    9d48:	4931      	ldr	r1, [pc, #196]	; (9e10 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x118>)
    9d4a:	a801      	add	r0, sp, #4
    9d4c:	f010 fce1 	bl	1a712 <_ZN13deviceManager14checkAddressesEPcS0_>
    9d50:	b338      	cbz	r0, 9da2 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xaa>
    9d52:	4c30      	ldr	r4, [pc, #192]	; (9e14 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x11c>)
    9d54:	7823      	ldrb	r3, [r4, #0]
    9d56:	b323      	cbz	r3, 9da2 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xaa>
			printk("Correct sensor found\n");
    9d58:	482f      	ldr	r0, [pc, #188]	; (9e18 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x120>)
    9d5a:	f010 fd89 	bl	1a870 <printk>
			once_sensor1 = false;
    9d5e:	2300      	movs	r3, #0
    9d60:	7023      	strb	r3, [r4, #0]
			err = bt_conn_le_create(device_info->recv_info->addr,
    9d62:	4b2e      	ldr	r3, [pc, #184]	; (9e1c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x124>)
    9d64:	6828      	ldr	r0, [r5, #0]
    9d66:	781a      	ldrb	r2, [r3, #0]
    9d68:	4b2d      	ldr	r3, [pc, #180]	; (9e20 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x128>)
    9d6a:	492e      	ldr	r1, [pc, #184]	; (9e24 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x12c>)
    9d6c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9d70:	686a      	ldr	r2, [r5, #4]
			err = bt_conn_le_create(device_info->recv_info->addr,
    9d72:	6800      	ldr	r0, [r0, #0]
    9d74:	f007 fd30 	bl	117d8 <bt_conn_le_create>
}
    9d78:	e022      	b.n	9dc0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xc8>
			getAddress(sensor1,1);
    9d7a:	4825      	ldr	r0, [pc, #148]	; (9e10 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x118>)
    9d7c:	f000 f9f0 	bl	a160 <_Z10getAddressPch>
			getAddress(sensor2,2);
    9d80:	4621      	mov	r1, r4
    9d82:	4829      	ldr	r0, [pc, #164]	; (9e28 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x130>)
    9d84:	e7cd      	b.n	9d22 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2a>
			getAddress(sensor1,1);
    9d86:	4822      	ldr	r0, [pc, #136]	; (9e10 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x118>)
    9d88:	f000 f9ea 	bl	a160 <_Z10getAddressPch>
			getAddress(sensor2,2);
    9d8c:	2102      	movs	r1, #2
    9d8e:	4826      	ldr	r0, [pc, #152]	; (9e28 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x130>)
    9d90:	f000 f9e6 	bl	a160 <_Z10getAddressPch>
			getAddress(sensor3,3);
    9d94:	4621      	mov	r1, r4
    9d96:	4825      	ldr	r0, [pc, #148]	; (9e2c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x134>)
    9d98:	e7c3      	b.n	9d22 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2a>
		initScan();
    9d9a:	f7ff fd03 	bl	97a4 <_ZN13deviceManager8initScanEv>
		ready = false;
    9d9e:	7034      	strb	r4, [r6, #0]
    9da0:	e7c1      	b.n	9d26 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2e>
		else if (checkAddresses(addrShort,sensor2) && once_sensor2)
    9da2:	4921      	ldr	r1, [pc, #132]	; (9e28 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x130>)
    9da4:	a801      	add	r0, sp, #4
    9da6:	f010 fcb4 	bl	1a712 <_ZN13deviceManager14checkAddressesEPcS0_>
    9daa:	b110      	cbz	r0, 9db2 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xba>
    9dac:	4c20      	ldr	r4, [pc, #128]	; (9e30 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x138>)
    9dae:	7823      	ldrb	r3, [r4, #0]
    9db0:	b943      	cbnz	r3, 9dc4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xcc>
		else if (checkAddresses(addrShort,sensor3) && once_sensor3)
    9db2:	491e      	ldr	r1, [pc, #120]	; (9e2c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x134>)
    9db4:	a801      	add	r0, sp, #4
    9db6:	f010 fcac 	bl	1a712 <_ZN13deviceManager14checkAddressesEPcS0_>
    9dba:	b988      	cbnz	r0, 9de0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xe8>
			startScan();
    9dbc:	f7ff fce0 	bl	9780 <_ZN13deviceManager9startScanEv>
}
    9dc0:	b00e      	add	sp, #56	; 0x38
    9dc2:	bd70      	pop	{r4, r5, r6, pc}
			printk("Correct sensor found\n");
    9dc4:	4814      	ldr	r0, [pc, #80]	; (9e18 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x120>)
    9dc6:	f010 fd53 	bl	1a870 <printk>
			once_sensor2 = false;
    9dca:	2300      	movs	r3, #0
    9dcc:	7023      	strb	r3, [r4, #0]
			err = bt_conn_le_create(device_info->recv_info->addr,
    9dce:	4b13      	ldr	r3, [pc, #76]	; (9e1c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x124>)
    9dd0:	6828      	ldr	r0, [r5, #0]
    9dd2:	781a      	ldrb	r2, [r3, #0]
    9dd4:	4b12      	ldr	r3, [pc, #72]	; (9e20 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x128>)
    9dd6:	4917      	ldr	r1, [pc, #92]	; (9e34 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x13c>)
    9dd8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9ddc:	686a      	ldr	r2, [r5, #4]
    9dde:	e7c8      	b.n	9d72 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x7a>
		else if (checkAddresses(addrShort,sensor3) && once_sensor3)
    9de0:	4c15      	ldr	r4, [pc, #84]	; (9e38 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x140>)
    9de2:	7823      	ldrb	r3, [r4, #0]
    9de4:	2b00      	cmp	r3, #0
    9de6:	d0e9      	beq.n	9dbc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xc4>
			printk("Correct sensor found\n");
    9de8:	480b      	ldr	r0, [pc, #44]	; (9e18 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x120>)
    9dea:	f010 fd41 	bl	1a870 <printk>
			once_sensor3 = false;
    9dee:	2300      	movs	r3, #0
    9df0:	7023      	strb	r3, [r4, #0]
			bt_scan_stop();
    9df2:	f011 f9f2 	bl	1b1da <bt_scan_stop>
			err = bt_conn_le_create(device_info->recv_info->addr,
    9df6:	4b09      	ldr	r3, [pc, #36]	; (9e1c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x124>)
    9df8:	6828      	ldr	r0, [r5, #0]
    9dfa:	781a      	ldrb	r2, [r3, #0]
    9dfc:	4b08      	ldr	r3, [pc, #32]	; (9e20 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x128>)
    9dfe:	490f      	ldr	r1, [pc, #60]	; (9e3c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x144>)
    9e00:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9e04:	686a      	ldr	r2, [r5, #4]
    9e06:	e7b4      	b.n	9d72 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x7a>
    9e08:	2000f2d2 	.word	0x2000f2d2
    9e0c:	2000f2e0 	.word	0x2000f2e0
    9e10:	2000f29a 	.word	0x2000f29a
    9e14:	20008565 	.word	0x20008565
    9e18:	0001f80e 	.word	0x0001f80e
    9e1c:	2000f2d6 	.word	0x2000f2d6
    9e20:	2000a674 	.word	0x2000a674
    9e24:	0001e80c 	.word	0x0001e80c
    9e28:	2000f2ab 	.word	0x2000f2ab
    9e2c:	2000f2bc 	.word	0x2000f2bc
    9e30:	20008566 	.word	0x20008566
    9e34:	0001e81c 	.word	0x0001e81c
    9e38:	20008567 	.word	0x20008567
    9e3c:	0001e82c 	.word	0x0001e82c

00009e40 <_ZN13deviceManager12disconnectedEP7bt_connh>:
void deviceManager::disconnected(struct bt_conn *conn, uint8_t reason) {
    9e40:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e42:	b097      	sub	sp, #92	; 0x5c
    9e44:	460d      	mov	r5, r1
	int error = bt_conn_get_info(conn,&info);
    9e46:	a907      	add	r1, sp, #28
void deviceManager::disconnected(struct bt_conn *conn, uint8_t reason) {
    9e48:	4606      	mov	r6, r0
	int error = bt_conn_get_info(conn,&info);
    9e4a:	f007 fc99 	bl	11780 <bt_conn_get_info>
	if (error)
    9e4e:	4604      	mov	r4, r0
    9e50:	b120      	cbz	r0, 9e5c <_ZN13deviceManager12disconnectedEP7bt_connh+0x1c>
		printk("Cannot get info of connection object\n");
    9e52:	4854      	ldr	r0, [pc, #336]	; (9fa4 <_ZN13deviceManager12disconnectedEP7bt_connh+0x164>)
    9e54:	f010 fd0c 	bl	1a870 <printk>
}
    9e58:	b017      	add	sp, #92	; 0x5c
    9e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (info.role == BT_CONN_ROLE_SLAVE)	// slave -> peripheral role
    9e5c:	f89d 301d 	ldrb.w	r3, [sp, #29]
    9e60:	2b01      	cmp	r3, #1
    9e62:	d10b      	bne.n	9e7c <_ZN13deviceManager12disconnectedEP7bt_connh+0x3c>
		printk("Disconnected from Application (reason %u)\n", reason);
    9e64:	4629      	mov	r1, r5
    9e66:	4850      	ldr	r0, [pc, #320]	; (9fa8 <_ZN13deviceManager12disconnectedEP7bt_connh+0x168>)
    9e68:	f010 fd02 	bl	1a870 <printk>
		connectedP = false;
    9e6c:	4b4f      	ldr	r3, [pc, #316]	; (9fac <_ZN13deviceManager12disconnectedEP7bt_connh+0x16c>)
		dk_set_led_off(CON_STATUS_LED_PERIPHERAL);
    9e6e:	4620      	mov	r0, r4
		connectedP = false;
    9e70:	701c      	strb	r4, [r3, #0]
		dk_set_led_off(CON_STATUS_LED_PERIPHERAL);
    9e72:	f013 fc71 	bl	1d758 <dk_set_led_off>
		startAdvertising();
    9e76:	f7ff fc1b 	bl	96b0 <_ZN13deviceManager16startAdvertisingEv>
    9e7a:	e7ed      	b.n	9e58 <_ZN13deviceManager12disconnectedEP7bt_connh+0x18>
	else if (info.role == BT_CONN_ROLE_MASTER)	// master -> central role
    9e7c:	2b00      	cmp	r3, #0
    9e7e:	d1eb      	bne.n	9e58 <_ZN13deviceManager12disconnectedEP7bt_connh+0x18>
		cntBatterySubscriptions--;
    9e80:	4a4b      	ldr	r2, [pc, #300]	; (9fb0 <_ZN13deviceManager12disconnectedEP7bt_connh+0x170>)
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    9e82:	4630      	mov	r0, r6
		cntBatterySubscriptions--;
    9e84:	7813      	ldrb	r3, [r2, #0]
		if (nbrConnectionsCentral == 0)
    9e86:	4c4b      	ldr	r4, [pc, #300]	; (9fb4 <_ZN13deviceManager12disconnectedEP7bt_connh+0x174>)
		cntBatterySubscriptions--;
    9e88:	3b01      	subs	r3, #1
    9e8a:	7013      	strb	r3, [r2, #0]
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    9e8c:	f012 f9e8 	bl	1c260 <bt_conn_get_dst>
    9e90:	221e      	movs	r2, #30
    9e92:	a90e      	add	r1, sp, #56	; 0x38
    9e94:	f7ff fb74 	bl	9580 <bt_addr_le_to_str.isra.0>
		printk("Disconnected from Sensor: %s (reason 0x%02x)\n", addr, reason);
    9e98:	462a      	mov	r2, r5
    9e9a:	4847      	ldr	r0, [pc, #284]	; (9fb8 <_ZN13deviceManager12disconnectedEP7bt_connh+0x178>)
    9e9c:	a90e      	add	r1, sp, #56	; 0x38
    9e9e:	f010 fce7 	bl	1a870 <printk>
		if (nbrConnectionsCentral == 0)
    9ea2:	7825      	ldrb	r5, [r4, #0]
    9ea4:	b965      	cbnz	r5, 9ec0 <_ZN13deviceManager12disconnectedEP7bt_connh+0x80>
			connectedC = false;
    9ea6:	4b45      	ldr	r3, [pc, #276]	; (9fbc <_ZN13deviceManager12disconnectedEP7bt_connh+0x17c>)
			data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9ea8:	2201      	movs	r2, #1
			connectedC = false;
    9eaa:	701d      	strb	r5, [r3, #0]
			disconnectedCode[0] = 13;
    9eac:	230d      	movs	r3, #13
    9eae:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9eb2:	4b43      	ldr	r3, [pc, #268]	; (9fc0 <_ZN13deviceManager12disconnectedEP7bt_connh+0x180>)
    9eb4:	a901      	add	r1, sp, #4
    9eb6:	6818      	ldr	r0, [r3, #0]
    9eb8:	f000 f91c 	bl	a0f4 <_Z17data_service_sendP7bt_connPKht>
			subscriptionDone = false;
    9ebc:	4b41      	ldr	r3, [pc, #260]	; (9fc4 <_ZN13deviceManager12disconnectedEP7bt_connh+0x184>)
    9ebe:	701d      	strb	r5, [r3, #0]
		if (checkAddresses(addr,sensor1))
    9ec0:	4941      	ldr	r1, [pc, #260]	; (9fc8 <_ZN13deviceManager12disconnectedEP7bt_connh+0x188>)
    9ec2:	a80e      	add	r0, sp, #56	; 0x38
    9ec4:	f010 fc25 	bl	1a712 <_ZN13deviceManager14checkAddressesEPcS0_>
    9ec8:	b1b0      	cbz	r0, 9ef8 <_ZN13deviceManager12disconnectedEP7bt_connh+0xb8>
			once_sensor1 = true;
    9eca:	2501      	movs	r5, #1
			subscriptionDone = false;
    9ecc:	2200      	movs	r2, #0
			once_sensor1 = true;
    9ece:	4b3f      	ldr	r3, [pc, #252]	; (9fcc <_ZN13deviceManager12disconnectedEP7bt_connh+0x18c>)
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    9ed0:	4628      	mov	r0, r5
			once_sensor1 = true;
    9ed2:	701d      	strb	r5, [r3, #0]
			subscriptionDone = false;
    9ed4:	4b3b      	ldr	r3, [pc, #236]	; (9fc4 <_ZN13deviceManager12disconnectedEP7bt_connh+0x184>)
    9ed6:	701a      	strb	r2, [r3, #0]
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    9ed8:	f013 fc3e 	bl	1d758 <dk_set_led_off>
			if (sensorInfos == 7)
    9edc:	4b3c      	ldr	r3, [pc, #240]	; (9fd0 <_ZN13deviceManager12disconnectedEP7bt_connh+0x190>)
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9ede:	a901      	add	r1, sp, #4
			if (sensorInfos == 7)
    9ee0:	781b      	ldrb	r3, [r3, #0]
    9ee2:	2b07      	cmp	r3, #7
				disconnectedCode[0] = 12;
    9ee4:	bf0c      	ite	eq
    9ee6:	220c      	moveq	r2, #12
				disconnectedCode[0] = 11;
    9ee8:	220b      	movne	r2, #11
    9eea:	4b35      	ldr	r3, [pc, #212]	; (9fc0 <_ZN13deviceManager12disconnectedEP7bt_connh+0x180>)
    9eec:	f88d 2004 	strb.w	r2, [sp, #4]
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9ef0:	6818      	ldr	r0, [r3, #0]
    9ef2:	462a      	mov	r2, r5
    9ef4:	f000 f8fe 	bl	a0f4 <_Z17data_service_sendP7bt_connPKht>
		if (checkAddresses(addr,sensor2))
    9ef8:	4936      	ldr	r1, [pc, #216]	; (9fd4 <_ZN13deviceManager12disconnectedEP7bt_connh+0x194>)
    9efa:	a80e      	add	r0, sp, #56	; 0x38
    9efc:	f010 fc09 	bl	1a712 <_ZN13deviceManager14checkAddressesEPcS0_>
    9f00:	b1b0      	cbz	r0, 9f30 <_ZN13deviceManager12disconnectedEP7bt_connh+0xf0>
			once_sensor2 = true;
    9f02:	2501      	movs	r5, #1
			subscriptionDone = false;
    9f04:	2200      	movs	r2, #0
			once_sensor2 = true;
    9f06:	4b34      	ldr	r3, [pc, #208]	; (9fd8 <_ZN13deviceManager12disconnectedEP7bt_connh+0x198>)
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    9f08:	4628      	mov	r0, r5
			once_sensor2 = true;
    9f0a:	701d      	strb	r5, [r3, #0]
			subscriptionDone = false;
    9f0c:	4b2d      	ldr	r3, [pc, #180]	; (9fc4 <_ZN13deviceManager12disconnectedEP7bt_connh+0x184>)
    9f0e:	701a      	strb	r2, [r3, #0]
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    9f10:	f013 fc22 	bl	1d758 <dk_set_led_off>
			if (sensorInfos == 4)
    9f14:	4b2e      	ldr	r3, [pc, #184]	; (9fd0 <_ZN13deviceManager12disconnectedEP7bt_connh+0x190>)
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9f16:	a901      	add	r1, sp, #4
			if (sensorInfos == 4)
    9f18:	781b      	ldrb	r3, [r3, #0]
    9f1a:	2b04      	cmp	r3, #4
				disconnectedCode[0] = 11;
    9f1c:	bf0c      	ite	eq
    9f1e:	220b      	moveq	r2, #11
				disconnectedCode[0] = 12;
    9f20:	220c      	movne	r2, #12
    9f22:	4b27      	ldr	r3, [pc, #156]	; (9fc0 <_ZN13deviceManager12disconnectedEP7bt_connh+0x180>)
    9f24:	f88d 2004 	strb.w	r2, [sp, #4]
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9f28:	6818      	ldr	r0, [r3, #0]
    9f2a:	462a      	mov	r2, r5
    9f2c:	f000 f8e2 	bl	a0f4 <_Z17data_service_sendP7bt_connPKht>
		if (checkAddresses(addr,sensor3))
    9f30:	492a      	ldr	r1, [pc, #168]	; (9fdc <_ZN13deviceManager12disconnectedEP7bt_connh+0x19c>)
    9f32:	a80e      	add	r0, sp, #56	; 0x38
    9f34:	f010 fbed 	bl	1a712 <_ZN13deviceManager14checkAddressesEPcS0_>
    9f38:	b188      	cbz	r0, 9f5e <_ZN13deviceManager12disconnectedEP7bt_connh+0x11e>
			subscriptionDone = false;
    9f3a:	2200      	movs	r2, #0
			once_sensor3 = true;
    9f3c:	2501      	movs	r5, #1
			subscriptionDone = false;
    9f3e:	4b21      	ldr	r3, [pc, #132]	; (9fc4 <_ZN13deviceManager12disconnectedEP7bt_connh+0x184>)
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    9f40:	4628      	mov	r0, r5
			subscriptionDone = false;
    9f42:	701a      	strb	r2, [r3, #0]
			once_sensor3 = true;
    9f44:	4b26      	ldr	r3, [pc, #152]	; (9fe0 <_ZN13deviceManager12disconnectedEP7bt_connh+0x1a0>)
    9f46:	701d      	strb	r5, [r3, #0]
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    9f48:	f013 fc06 	bl	1d758 <dk_set_led_off>
			disconnectedCode[0] = 12;
    9f4c:	230c      	movs	r3, #12
    9f4e:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9f52:	4b1b      	ldr	r3, [pc, #108]	; (9fc0 <_ZN13deviceManager12disconnectedEP7bt_connh+0x180>)
    9f54:	462a      	mov	r2, r5
    9f56:	6818      	ldr	r0, [r3, #0]
    9f58:	a901      	add	r1, sp, #4
    9f5a:	f000 f8cb 	bl	a0f4 <_Z17data_service_sendP7bt_connPKht>
void deviceManager::disconnected(struct bt_conn *conn, uint8_t reason) {
    9f5e:	2600      	movs	r6, #0
			bt_addr_le_to_str(bt_conn_get_dst(centralConnections[i]), addrToFind, sizeof(addrToFind));
    9f60:	4f20      	ldr	r7, [pc, #128]	; (9fe4 <_ZN13deviceManager12disconnectedEP7bt_connh+0x1a4>)
		for (uint8_t i = 0; i <= nbrConnectionsCentral-1; i++)
    9f62:	7823      	ldrb	r3, [r4, #0]
    9f64:	b2f5      	uxtb	r5, r6
    9f66:	3b01      	subs	r3, #1
    9f68:	429d      	cmp	r5, r3
    9f6a:	dc18      	bgt.n	9f9e <_ZN13deviceManager12disconnectedEP7bt_connh+0x15e>
			bt_addr_le_to_str(bt_conn_get_dst(centralConnections[i]), addrToFind, sizeof(addrToFind));
    9f6c:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
    9f70:	f012 f976 	bl	1c260 <bt_conn_get_dst>
    9f74:	a902      	add	r1, sp, #8
    9f76:	2212      	movs	r2, #18
    9f78:	f7ff fb02 	bl	9580 <bt_addr_le_to_str.isra.0>
			if (checkAddresses(addr,addrToFind))
    9f7c:	a902      	add	r1, sp, #8
    9f7e:	a80e      	add	r0, sp, #56	; 0x38
    9f80:	f010 fbc7 	bl	1a712 <_ZN13deviceManager14checkAddressesEPcS0_>
    9f84:	b148      	cbz	r0, 9f9a <_ZN13deviceManager12disconnectedEP7bt_connh+0x15a>
				bt_conn_unref(centralConnections[i]);
    9f86:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
    9f8a:	f007 fa67 	bl	1145c <bt_conn_unref>
				centralConnections[i] = nullptr;
    9f8e:	2300      	movs	r3, #0
    9f90:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
				nbrConnectionsCentral--;
    9f94:	7823      	ldrb	r3, [r4, #0]
    9f96:	3b01      	subs	r3, #1
    9f98:	7023      	strb	r3, [r4, #0]
		for (uint8_t i = 0; i <= nbrConnectionsCentral-1; i++)
    9f9a:	3601      	adds	r6, #1
    9f9c:	e7e1      	b.n	9f62 <_ZN13deviceManager12disconnectedEP7bt_connh+0x122>
		startScan();
    9f9e:	f7ff fbef 	bl	9780 <_ZN13deviceManager9startScanEv>
    9fa2:	e759      	b.n	9e58 <_ZN13deviceManager12disconnectedEP7bt_connh+0x18>
    9fa4:	0001f783 	.word	0x0001f783
    9fa8:	0001f824 	.word	0x0001f824
    9fac:	2000f2ce 	.word	0x2000f2ce
    9fb0:	2000f2d8 	.word	0x2000f2d8
    9fb4:	2000f2d6 	.word	0x2000f2d6
    9fb8:	0001f84f 	.word	0x0001f84f
    9fbc:	2000f2cd 	.word	0x2000f2cd
    9fc0:	2000a670 	.word	0x2000a670
    9fc4:	2000f2d5 	.word	0x2000f2d5
    9fc8:	2000f29a 	.word	0x2000f29a
    9fcc:	20008565 	.word	0x20008565
    9fd0:	2000f2d0 	.word	0x2000f2d0
    9fd4:	2000f2ab 	.word	0x2000f2ab
    9fd8:	20008566 	.word	0x20008566
    9fdc:	2000f2bc 	.word	0x2000f2bc
    9fe0:	20008567 	.word	0x20008567
    9fe4:	2000a674 	.word	0x2000a674

00009fe8 <_ZN7dataCSC8saveDataEPKv>:
    type = ((uint8_t*)data)[0];
    9fe8:	780b      	ldrb	r3, [r1, #0]
    switch (type)
    9fea:	2b01      	cmp	r3, #1
    type = ((uint8_t*)data)[0];
    9fec:	7403      	strb	r3, [r0, #16]
    switch (type)
    9fee:	d004      	beq.n	9ffa <_ZN7dataCSC8saveDataEPKv+0x12>
    9ff0:	2b02      	cmp	r3, #2
    9ff2:	d00d      	beq.n	a010 <_ZN7dataCSC8saveDataEPKv+0x28>
        printk("Unknown type\n");
    9ff4:	480c      	ldr	r0, [pc, #48]	; (a028 <_ZN7dataCSC8saveDataEPKv+0x40>)
    9ff6:	f010 bc3b 	b.w	1a870 <printk>
        oldSumRevSpeed = sumRevSpeed;
    9ffa:	8803      	ldrh	r3, [r0, #0]
    9ffc:	8043      	strh	r3, [r0, #2]
        oldLastEventSpeed = lastEventSpeed;
    9ffe:	8903      	ldrh	r3, [r0, #8]
    a000:	8143      	strh	r3, [r0, #10]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
    a002:	f8b1 3001 	ldrh.w	r3, [r1, #1]
        sumRevSpeed = sys_get_le16(&((uint8_t*)data)[1]);
    a006:	8003      	strh	r3, [r0, #0]
    a008:	f8b1 3005 	ldrh.w	r3, [r1, #5]
		lastEventSpeed = sys_get_le16(&((uint8_t*)data)[5]);
    a00c:	8103      	strh	r3, [r0, #8]
        break;
    a00e:	4770      	bx	lr
        oldSumRevCadence = sumRevCadence;
    a010:	8883      	ldrh	r3, [r0, #4]
    a012:	80c3      	strh	r3, [r0, #6]
        oldLastEventCadence  = lastEventCadence;
    a014:	8983      	ldrh	r3, [r0, #12]
    a016:	81c3      	strh	r3, [r0, #14]
    a018:	f8b1 3001 	ldrh.w	r3, [r1, #1]
		sumRevCadence = sys_get_le16(&((uint8_t*)data)[1]);
    a01c:	8083      	strh	r3, [r0, #4]
    a01e:	f8b1 3003 	ldrh.w	r3, [r1, #3]
		lastEventCadence  = sys_get_le16(&((uint8_t*)data)[3]);
    a022:	8183      	strh	r3, [r0, #12]
}
    a024:	4770      	bx	lr
    a026:	bf00      	nop
    a028:	0001f88f 	.word	0x0001f88f

0000a02c <_ZN7dataCSC7calcRPMEv>:
uint16_t dataCSC::calcRPM() {
    a02c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    a030:	8985      	ldrh	r5, [r0, #12]
    a032:	89c3      	ldrh	r3, [r0, #14]
uint16_t dataCSC::calcRPM() {
    a034:	4604      	mov	r4, r0
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    a036:	429d      	cmp	r5, r3
    a038:	d02f      	beq.n	a09a <_ZN7dataCSC7calcRPMEv+0x6e>
    uint16_t nbrRev = sumRevCadence-oldSumRevCadence;
    a03a:	f8b0 8004 	ldrh.w	r8, [r0, #4]
    a03e:	f8b0 9006 	ldrh.w	r9, [r0, #6]
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    a042:	45c8      	cmp	r8, r9
    a044:	d029      	beq.n	a09a <_ZN7dataCSC7calcRPMEv+0x6e>
        double time = (lastEventCadence - oldLastEventCadence)/1024.0;
    a046:	1aed      	subs	r5, r5, r3
    a048:	4628      	mov	r0, r5
    a04a:	f7fe fa4b 	bl	84e4 <__aeabi_i2d>
    a04e:	2200      	movs	r2, #0
    a050:	4b13      	ldr	r3, [pc, #76]	; (a0a0 <_ZN7dataCSC7calcRPMEv+0x74>)
    a052:	f7fe fab1 	bl	85b8 <__aeabi_dmul>
        if (time < 0)
    a056:	2200      	movs	r2, #0
    a058:	2300      	movs	r3, #0
        double time = (lastEventCadence - oldLastEventCadence)/1024.0;
    a05a:	4606      	mov	r6, r0
    a05c:	460f      	mov	r7, r1
        if (time < 0)
    a05e:	f7fe fd1d 	bl	8a9c <__aeabi_dcmplt>
    a062:	b130      	cbz	r0, a072 <_ZN7dataCSC7calcRPMEv+0x46>
            time = 0xffff - oldLastEventCadence + lastEventCadence;
    a064:	f505 407f 	add.w	r0, r5, #65280	; 0xff00
    a068:	30ff      	adds	r0, #255	; 0xff
    a06a:	f7fe fa3b 	bl	84e4 <__aeabi_i2d>
    a06e:	4606      	mov	r6, r0
    a070:	460f      	mov	r7, r1
        rpm = (sumRevCadence - oldSumRevCadence) * 60 / time;
    a072:	203c      	movs	r0, #60	; 0x3c
    a074:	eba8 0809 	sub.w	r8, r8, r9
    a078:	fb00 f008 	mul.w	r0, r0, r8
    a07c:	f7fe fa32 	bl	84e4 <__aeabi_i2d>
    a080:	4632      	mov	r2, r6
    a082:	463b      	mov	r3, r7
    a084:	f7fe fbc2 	bl	880c <__aeabi_ddiv>
    a088:	4602      	mov	r2, r0
    a08a:	460b      	mov	r3, r1
    a08c:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
        retVal = (uint16_t) rpm;
    a090:	f7fe fd2c 	bl	8aec <__aeabi_d2uiz>
    a094:	b280      	uxth	r0, r0
}
    a096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint16_t retVal = 0;
    a09a:	2000      	movs	r0, #0
    a09c:	e7fb      	b.n	a096 <_ZN7dataCSC7calcRPMEv+0x6a>
    a09e:	bf00      	nop
    a0a0:	3f500000 	.word	0x3f500000

0000a0a4 <_Z15on_cccd_changedPK12bt_gatt_attrt>:
{
    ARG_UNUSED(attr);

    uint8_t notificationsCode[1];

    switch(value)
    a0a4:	2901      	cmp	r1, #1
    a0a6:	d004      	beq.n	a0b2 <_Z15on_cccd_changedPK12bt_gatt_attrt+0xe>
    a0a8:	2902      	cmp	r1, #2
    a0aa:	d005      	beq.n	a0b8 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x14>
    a0ac:	b931      	cbnz	r1, a0bc <_Z15on_cccd_changedPK12bt_gatt_attrt+0x18>
            printk("Notifications ON with Indications\n");
            break;

        case 0: 
            // Stop sending stuff
            printk("Notifications OFF\n");
    a0ae:	4804      	ldr	r0, [pc, #16]	; (a0c0 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x1c>)
    a0b0:	e000      	b.n	a0b4 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
            printk("Notifications ON\n");
    a0b2:	4804      	ldr	r0, [pc, #16]	; (a0c4 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x20>)
            break;
        
        default: 
            printk("Error, CCCD has been set to an invalid value\n");     
    a0b4:	f010 bbdc 	b.w	1a870 <printk>
            printk("Notifications ON with Indications\n");
    a0b8:	4803      	ldr	r0, [pc, #12]	; (a0c8 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x24>)
    a0ba:	e7fb      	b.n	a0b4 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
            printk("Error, CCCD has been set to an invalid value\n");     
    a0bc:	4803      	ldr	r0, [pc, #12]	; (a0cc <_Z15on_cccd_changedPK12bt_gatt_attrt+0x28>)
    a0be:	e7f9      	b.n	a0b4 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
    a0c0:	0001f8d2 	.word	0x0001f8d2
    a0c4:	0001f89d 	.word	0x0001f89d
    a0c8:	0001f8af 	.word	0x0001f8af
    a0cc:	0001f8e5 	.word	0x0001f8e5

0000a0d0 <_Z17data_service_initv>:
{
    a0d0:	b508      	push	{r3, lr}
    memset(&data_rx, 0, MAX_TRANSMIT_SIZE);
    a0d2:	22f0      	movs	r2, #240	; 0xf0
    a0d4:	2100      	movs	r1, #0
    a0d6:	4805      	ldr	r0, [pc, #20]	; (a0ec <_Z17data_service_initv+0x1c>)
    a0d8:	f011 fe39 	bl	1bd4e <memset>
    memset(&data_tx, 0, MAX_TRANSMIT_SIZE);
    a0dc:	22f0      	movs	r2, #240	; 0xf0
    a0de:	2100      	movs	r1, #0
    a0e0:	4803      	ldr	r0, [pc, #12]	; (a0f0 <_Z17data_service_initv+0x20>)
    a0e2:	f011 fe34 	bl	1bd4e <memset>
}
    a0e6:	2000      	movs	r0, #0
    a0e8:	bd08      	pop	{r3, pc}
    a0ea:	bf00      	nop
    a0ec:	2000f315 	.word	0x2000f315
    a0f0:	2000f405 	.word	0x2000f405

0000a0f4 <_Z17data_service_sendP7bt_connPKht>:
     * to check whether notification has been enabled by the peer or not.
     * Attribute table: 0 = Service, 1 = Primary service, 2 = RX, 3 = TX, 4 = CCC.
     */
    const struct bt_gatt_attr *attr = &data_service.attrs[3]; 

    struct bt_gatt_notify_params params = 
    a0f4:	2300      	movs	r3, #0
{
    a0f6:	b510      	push	{r4, lr}
    a0f8:	b086      	sub	sp, #24
    struct bt_gatt_notify_params params = 
    a0fa:	9303      	str	r3, [sp, #12]
    a0fc:	9305      	str	r3, [sp, #20]
    a0fe:	4b0d      	ldr	r3, [pc, #52]	; (a134 <_Z17data_service_sendP7bt_connPKht+0x40>)
        .uuid   = BT_UUID_DATA_SERVICE_TX,
        .attr   = attr,
        .data   = data,
        .len    = len,
        .func   = on_sent
    };
    a100:	f8ad 200c 	strh.w	r2, [sp, #12]
    struct bt_gatt_notify_params params = 
    a104:	9300      	str	r3, [sp, #0]
    a106:	4b0c      	ldr	r3, [pc, #48]	; (a138 <_Z17data_service_sendP7bt_connPKht+0x44>)

    // Check whether notifications are enabled or not
    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) 
    a108:	2201      	movs	r2, #1
    struct bt_gatt_notify_params params = 
    a10a:	9304      	str	r3, [sp, #16]
    };
    a10c:	4b0b      	ldr	r3, [pc, #44]	; (a13c <_Z17data_service_sendP7bt_connPKht+0x48>)
{
    a10e:	4604      	mov	r4, r0
    };
    a110:	e9cd 3101 	strd	r3, r1, [sp, #4]
    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) 
    a114:	4619      	mov	r1, r3
    a116:	f00a f98b 	bl	14430 <bt_gatt_is_subscribed>
    a11a:	b148      	cbz	r0, a130 <_Z17data_service_sendP7bt_connPKht+0x3c>
    {
        // Send the notification
	    if(bt_gatt_notify_cb(conn, &params))
    a11c:	4669      	mov	r1, sp
    a11e:	4620      	mov	r0, r4
    a120:	f009 ffa4 	bl	1406c <bt_gatt_notify_cb>
    a124:	b110      	cbz	r0, a12c <_Z17data_service_sendP7bt_connPKht+0x38>
        {
            printk("Error, unable to send notification\n");
    a126:	4806      	ldr	r0, [pc, #24]	; (a140 <_Z17data_service_sendP7bt_connPKht+0x4c>)
        }
    }
    else
    {
        printk("Warning, notification not enabled on the selected attribute\n");
    a128:	f010 fba2 	bl	1a870 <printk>
    }
}
    a12c:	b006      	add	sp, #24
    a12e:	bd10      	pop	{r4, pc}
        printk("Warning, notification not enabled on the selected attribute\n");
    a130:	4804      	ldr	r0, [pc, #16]	; (a144 <_Z17data_service_sendP7bt_connPKht+0x50>)
    a132:	e7f9      	b.n	a128 <_Z17data_service_sendP7bt_connPKht+0x34>
    a134:	0001f9fa 	.word	0x0001f9fa
    a138:	0001a739 	.word	0x0001a739
    a13c:	0001e8dc 	.word	0x0001e8dc
    a140:	0001f944 	.word	0x0001f944
    a144:	0001f968 	.word	0x0001f968

0000a148 <_Z11getDiameterv>:

// getter
double getDiameter() {
    return dia;
}
    a148:	4b01      	ldr	r3, [pc, #4]	; (a150 <_Z11getDiameterv+0x8>)
    a14a:	e9d3 0100 	ldrd	r0, r1, [r3]
    a14e:	4770      	bx	lr
    a150:	20008810 	.word	0x20008810

0000a154 <_Z17getNbrOfAddressesv>:

// getter
uint8_t getNbrOfAddresses() {
    return nbrAddresses;
}
    a154:	4b01      	ldr	r3, [pc, #4]	; (a15c <_Z17getNbrOfAddressesv+0x8>)
    a156:	7818      	ldrb	r0, [r3, #0]
    a158:	4770      	bx	lr
    a15a:	bf00      	nop
    a15c:	2000f4f7 	.word	0x2000f4f7

0000a160 <_Z10getAddressPch>:

// getter
void getAddress(char* outArray, uint8_t nbr) {
    switch (nbr)
    a160:	2902      	cmp	r1, #2
    a162:	d00d      	beq.n	a180 <_Z10getAddressPch+0x20>
    a164:	2903      	cmp	r1, #3
    a166:	d015      	beq.n	a194 <_Z10getAddressPch+0x34>
    a168:	2901      	cmp	r1, #1
    a16a:	d11c      	bne.n	a1a6 <_Z10getAddressPch+0x46>
    a16c:	4a0e      	ldr	r2, [pc, #56]	; (a1a8 <_Z10getAddressPch+0x48>)
    a16e:	1e43      	subs	r3, r0, #1
    a170:	3010      	adds	r0, #16
    {
    case 1:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address1[i];
    a172:	f812 1b01 	ldrb.w	r1, [r2], #1
    a176:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    a17a:	4283      	cmp	r3, r0
    a17c:	d1f9      	bne.n	a172 <_Z10getAddressPch+0x12>
    a17e:	4770      	bx	lr
    a180:	4a0a      	ldr	r2, [pc, #40]	; (a1ac <_Z10getAddressPch+0x4c>)
    a182:	1e43      	subs	r3, r0, #1
    a184:	3010      	adds	r0, #16
        }    
        break;
    case 2:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address2[i];
    a186:	f812 1b01 	ldrb.w	r1, [r2], #1
    a18a:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    a18e:	4283      	cmp	r3, r0
    a190:	d1f9      	bne.n	a186 <_Z10getAddressPch+0x26>
    a192:	4770      	bx	lr
    a194:	4a06      	ldr	r2, [pc, #24]	; (a1b0 <_Z10getAddressPch+0x50>)
    a196:	1e43      	subs	r3, r0, #1
    a198:	3010      	adds	r0, #16
        }    
        break;
    case 3:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address3[i];
    a19a:	f812 1b01 	ldrb.w	r1, [r2], #1
    a19e:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    a1a2:	4283      	cmp	r3, r0
    a1a4:	d1f9      	bne.n	a19a <_Z10getAddressPch+0x3a>
        break;
    
    default:
        break;
    }
}
    a1a6:	4770      	bx	lr
    a1a8:	2000f2e1 	.word	0x2000f2e1
    a1ac:	2000f2f2 	.word	0x2000f2f2
    a1b0:	2000f303 	.word	0x2000f303

0000a1b4 <_Z14getSensorInfosv>:

uint8_t getSensorInfos() {
    return infoSensors;
}
    a1b4:	4b01      	ldr	r3, [pc, #4]	; (a1bc <_Z14getSensorInfosv+0x8>)
    a1b6:	7818      	ldrb	r0, [r3, #0]
    a1b8:	4770      	bx	lr
    a1ba:	bf00      	nop
    a1bc:	2000f4f6 	.word	0x2000f4f6

0000a1c0 <discovery_error_found_cb>:

void discovery_error_found_cb(struct bt_conn *conn,
				     int err,
				     void *context)
{
	printk("The discovery procedure failed with %d\n", err);
    a1c0:	4801      	ldr	r0, [pc, #4]	; (a1c8 <discovery_error_found_cb+0x8>)
    a1c2:	f010 bb55 	b.w	1a870 <printk>
    a1c6:	bf00      	nop
    a1c8:	0001fa0b 	.word	0x0001fa0b

0000a1cc <discovery_service_not_found_cb>:
	printk("The service could not be found during the discovery\n");
    a1cc:	4801      	ldr	r0, [pc, #4]	; (a1d4 <discovery_service_not_found_cb+0x8>)
    a1ce:	f010 bb4f 	b.w	1a870 <printk>
    a1d2:	bf00      	nop
    a1d4:	0001fa33 	.word	0x0001fa33

0000a1d8 <subscribeBatterySpeed>:

    return err;
}

void subscribeBatterySpeed(struct bt_gatt_dm *dm) 
{
    a1d8:	b510      	push	{r4, lr}
	uint8_t err = 0;

	err = bt_bas_handles_assign(dm, &bas_speed);
    a1da:	4918      	ldr	r1, [pc, #96]	; (a23c <subscribeBatterySpeed+0x64>)
{
    a1dc:	4604      	mov	r4, r0
	err = bt_bas_handles_assign(dm, &bas_speed);
    a1de:	f003 f847 	bl	d270 <bt_bas_handles_assign>
	if (err) 
    a1e2:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    a1e6:	d002      	beq.n	a1ee <subscribeBatterySpeed+0x16>
	{
		printk("Could not init BAS client object from speed sensor, error: %d\n", err);
    a1e8:	4815      	ldr	r0, [pc, #84]	; (a240 <subscribeBatterySpeed+0x68>)
    a1ea:	f010 fb41 	bl	1a870 <printk>
 * @retval true If notifications are supported.
 *              Otherwise, @c false is returned.
 */
static inline bool bt_bas_notify_supported(struct bt_bas_client *bas)
{
	return bas->notify;
    a1ee:	4813      	ldr	r0, [pc, #76]	; (a23c <subscribeBatterySpeed+0x64>)
	}

	if (bt_bas_notify_supported(&bas_speed))
    a1f0:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    a1f4:	b1ab      	cbz	r3, a222 <subscribeBatterySpeed+0x4a>
	{
		err = bt_bas_subscribe_battery_level(&bas_speed, notify_battery_level_cb_speed);
    a1f6:	4913      	ldr	r1, [pc, #76]	; (a244 <subscribeBatterySpeed+0x6c>)
    a1f8:	f003 f8c4 	bl	d384 <bt_bas_subscribe_battery_level>
		if (err) 
    a1fc:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    a200:	d002      	beq.n	a208 <subscribeBatterySpeed+0x30>
		{
			printk("Cannot subscribe to BAS value notification from speed sensor, (err: %d)\n", err);
    a202:	4811      	ldr	r0, [pc, #68]	; (a248 <subscribeBatterySpeed+0x70>)
    a204:	f010 fb34 	bl	1a870 <printk>
		{
			printk("Could not start periodic read of BAS value for speed sensor\n");
		}
	}

	err = bt_gatt_dm_data_release(dm);
    a208:	4620      	mov	r0, r4
    a20a:	f010 ffce 	bl	1b1aa <bt_gatt_dm_data_release>
	if (err) {
    a20e:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    a212:	d002      	beq.n	a21a <subscribeBatterySpeed+0x42>
		printk("Could not release the discovery data, error "
    a214:	480d      	ldr	r0, [pc, #52]	; (a24c <subscribeBatterySpeed+0x74>)
    a216:	f010 fb2b 	bl	1a870 <printk>
		       "code: %d\n", err);
	}
	free = true;
    a21a:	2201      	movs	r2, #1
    a21c:	4b0c      	ldr	r3, [pc, #48]	; (a250 <subscribeBatterySpeed+0x78>)
    a21e:	701a      	strb	r2, [r3, #0]
}
    a220:	bd10      	pop	{r4, pc}
		err = bt_bas_start_per_read_battery_level(&bas_speed, BAS_READ_VALUE_INTERVAL, notify_battery_level_cb_speed);
    a222:	f242 7110 	movw	r1, #10000	; 0x2710
    a226:	4a07      	ldr	r2, [pc, #28]	; (a244 <subscribeBatterySpeed+0x6c>)
    a228:	f003 f906 	bl	d438 <bt_bas_start_per_read_battery_level>
		if (err) 
    a22c:	b2c0      	uxtb	r0, r0
    a22e:	2800      	cmp	r0, #0
    a230:	d0ea      	beq.n	a208 <subscribeBatterySpeed+0x30>
			printk("Could not start periodic read of BAS value for speed sensor\n");
    a232:	4808      	ldr	r0, [pc, #32]	; (a254 <subscribeBatterySpeed+0x7c>)
    a234:	f010 fb1c 	bl	1a870 <printk>
    a238:	e7e6      	b.n	a208 <subscribeBatterySpeed+0x30>
    a23a:	bf00      	nop
    a23c:	20008928 	.word	0x20008928
    a240:	0001fa68 	.word	0x0001fa68
    a244:	0000a351 	.word	0x0000a351
    a248:	0001faa7 	.word	0x0001faa7
    a24c:	0001fb2d 	.word	0x0001fb2d
    a250:	2000856a 	.word	0x2000856a
    a254:	0001faf0 	.word	0x0001faf0

0000a258 <subscribeBatteryCadence>:

void subscribeBatteryCadence(struct bt_gatt_dm *dm) 
{
    a258:	b510      	push	{r4, lr}
	uint8_t err = 0;

	err = bt_bas_handles_assign(dm, &bas_cadence);
    a25a:	4918      	ldr	r1, [pc, #96]	; (a2bc <subscribeBatteryCadence+0x64>)
{
    a25c:	4604      	mov	r4, r0
	err = bt_bas_handles_assign(dm, &bas_cadence);
    a25e:	f003 f807 	bl	d270 <bt_bas_handles_assign>
	if (err) 
    a262:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    a266:	d002      	beq.n	a26e <subscribeBatteryCadence+0x16>
	{
		printk("Could not init BAS client object from cadence sensor, error: %d\n", err);
    a268:	4815      	ldr	r0, [pc, #84]	; (a2c0 <subscribeBatteryCadence+0x68>)
    a26a:	f010 fb01 	bl	1a870 <printk>
    a26e:	4813      	ldr	r0, [pc, #76]	; (a2bc <subscribeBatteryCadence+0x64>)
	}

	if (bt_bas_notify_supported(&bas_cadence))
    a270:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    a274:	b1ab      	cbz	r3, a2a2 <subscribeBatteryCadence+0x4a>
	{
		err = bt_bas_subscribe_battery_level(&bas_cadence, notify_battery_level_cb_cadence);
    a276:	4913      	ldr	r1, [pc, #76]	; (a2c4 <subscribeBatteryCadence+0x6c>)
    a278:	f003 f884 	bl	d384 <bt_bas_subscribe_battery_level>
		if (err) 
    a27c:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    a280:	d002      	beq.n	a288 <subscribeBatteryCadence+0x30>
		{
			printk("Cannot subscribe to BAS value notification from cadence sensor, (err: %d)\n", err);
    a282:	4811      	ldr	r0, [pc, #68]	; (a2c8 <subscribeBatteryCadence+0x70>)
    a284:	f010 faf4 	bl	1a870 <printk>
		{
			printk("Could not start periodic read of BAS value for cadence sensor\n");
		}
	}	

	err = bt_gatt_dm_data_release(dm);
    a288:	4620      	mov	r0, r4
    a28a:	f010 ff8e 	bl	1b1aa <bt_gatt_dm_data_release>
	if (err) {
    a28e:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    a292:	d002      	beq.n	a29a <subscribeBatteryCadence+0x42>
		printk("Could not release the discovery data, error "
    a294:	480d      	ldr	r0, [pc, #52]	; (a2cc <subscribeBatteryCadence+0x74>)
    a296:	f010 faeb 	bl	1a870 <printk>
		       "code: %d\n", err);
	}
	free = true;
    a29a:	2201      	movs	r2, #1
    a29c:	4b0c      	ldr	r3, [pc, #48]	; (a2d0 <subscribeBatteryCadence+0x78>)
    a29e:	701a      	strb	r2, [r3, #0]
}
    a2a0:	bd10      	pop	{r4, pc}
		err = bt_bas_start_per_read_battery_level(&bas_cadence, BAS_READ_VALUE_INTERVAL, notify_battery_level_cb_cadence);
    a2a2:	f242 7110 	movw	r1, #10000	; 0x2710
    a2a6:	4a07      	ldr	r2, [pc, #28]	; (a2c4 <subscribeBatteryCadence+0x6c>)
    a2a8:	f003 f8c6 	bl	d438 <bt_bas_start_per_read_battery_level>
		if (err) 
    a2ac:	b2c0      	uxtb	r0, r0
    a2ae:	2800      	cmp	r0, #0
    a2b0:	d0ea      	beq.n	a288 <subscribeBatteryCadence+0x30>
			printk("Could not start periodic read of BAS value for cadence sensor\n");
    a2b2:	4808      	ldr	r0, [pc, #32]	; (a2d4 <subscribeBatteryCadence+0x7c>)
    a2b4:	f010 fadc 	bl	1a870 <printk>
    a2b8:	e7e6      	b.n	a288 <subscribeBatteryCadence+0x30>
    a2ba:	bf00      	nop
    a2bc:	20008818 	.word	0x20008818
    a2c0:	0001fb63 	.word	0x0001fb63
    a2c4:	0000a391 	.word	0x0000a391
    a2c8:	0001fba4 	.word	0x0001fba4
    a2cc:	0001fb2d 	.word	0x0001fb2d
    a2d0:	2000856a 	.word	0x2000856a
    a2d4:	0001fbef 	.word	0x0001fbef

0000a2d8 <bt_addr_le_to_str.constprop.0.isra.0>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    a2d8:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    a2da:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    a2dc:	b08a      	sub	sp, #40	; 0x28
    a2de:	4604      	mov	r4, r0
    a2e0:	460e      	mov	r6, r1
    a2e2:	ad07      	add	r5, sp, #28
    a2e4:	2b03      	cmp	r3, #3
    a2e6:	d820      	bhi.n	a32a <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    a2e8:	e8df f003 	tbb	[pc, r3]
    a2ec:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    a2f0:	4911      	ldr	r1, [pc, #68]	; (a338 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		strcpy(type, "random");
    a2f2:	4628      	mov	r0, r5
    a2f4:	f011 fca6 	bl	1bc44 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    a2f8:	7863      	ldrb	r3, [r4, #1]
    a2fa:	211e      	movs	r1, #30
    a2fc:	9304      	str	r3, [sp, #16]
    a2fe:	78a3      	ldrb	r3, [r4, #2]
    a300:	4630      	mov	r0, r6
    a302:	9303      	str	r3, [sp, #12]
    a304:	78e3      	ldrb	r3, [r4, #3]
    a306:	4a0d      	ldr	r2, [pc, #52]	; (a33c <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    a308:	9302      	str	r3, [sp, #8]
    a30a:	7923      	ldrb	r3, [r4, #4]
    a30c:	9505      	str	r5, [sp, #20]
    a30e:	9301      	str	r3, [sp, #4]
    a310:	7963      	ldrb	r3, [r4, #5]
    a312:	9300      	str	r3, [sp, #0]
    a314:	79a3      	ldrb	r3, [r4, #6]
    a316:	f010 fab8 	bl	1a88a <snprintk>
}
    a31a:	b00a      	add	sp, #40	; 0x28
    a31c:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    a31e:	4908      	ldr	r1, [pc, #32]	; (a340 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    a320:	e7e7      	b.n	a2f2 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    a322:	4908      	ldr	r1, [pc, #32]	; (a344 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    a324:	e7e5      	b.n	a2f2 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    a326:	4908      	ldr	r1, [pc, #32]	; (a348 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    a328:	e7e3      	b.n	a2f2 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    a32a:	210a      	movs	r1, #10
    a32c:	4628      	mov	r0, r5
    a32e:	4a07      	ldr	r2, [pc, #28]	; (a34c <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    a330:	f010 faab 	bl	1a88a <snprintk>
		break;
    a334:	e7e0      	b.n	a2f8 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    a336:	bf00      	nop
    a338:	0001f466 	.word	0x0001f466
    a33c:	0001f48f 	.word	0x0001f48f
    a340:	0001f46d 	.word	0x0001f46d
    a344:	0001f474 	.word	0x0001f474
    a348:	0001f47e 	.word	0x0001f47e
    a34c:	0001f488 	.word	0x0001f488

0000a350 <notify_battery_level_cb_speed>:
{
    a350:	b510      	push	{r4, lr}
    a352:	460c      	mov	r4, r1
    a354:	b088      	sub	sp, #32
	bt_addr_le_to_str(bt_conn_get_dst(bt_bas_conn(bas)),
    a356:	f010 ff42 	bl	1b1de <bt_bas_conn>
    a35a:	f011 ff81 	bl	1c260 <bt_conn_get_dst>
    a35e:	4669      	mov	r1, sp
    a360:	f7ff ffba 	bl	a2d8 <bt_addr_le_to_str.constprop.0.isra.0>
	if (battery_level == BT_BAS_VAL_INVALID) {
    a364:	2cff      	cmp	r4, #255	; 0xff
    a366:	d107      	bne.n	a378 <notify_battery_level_cb_speed+0x28>
		printk("[%s] Battery notification aborted\n", addr);
    a368:	4669      	mov	r1, sp
    a36a:	4806      	ldr	r0, [pc, #24]	; (a384 <notify_battery_level_cb_speed+0x34>)
    a36c:	f010 fa80 	bl	1a870 <printk>
	batteryLevel_speed = battery_level;
    a370:	4b05      	ldr	r3, [pc, #20]	; (a388 <notify_battery_level_cb_speed+0x38>)
    a372:	701c      	strb	r4, [r3, #0]
}
    a374:	b008      	add	sp, #32
    a376:	bd10      	pop	{r4, pc}
		printk("[%s] Battery notification: %"PRIu8"%%\n",
    a378:	4622      	mov	r2, r4
    a37a:	4669      	mov	r1, sp
    a37c:	4803      	ldr	r0, [pc, #12]	; (a38c <notify_battery_level_cb_speed+0x3c>)
    a37e:	f010 fa77 	bl	1a870 <printk>
    a382:	e7f5      	b.n	a370 <notify_battery_level_cb_speed+0x20>
    a384:	0001fc2e 	.word	0x0001fc2e
    a388:	2000f4fa 	.word	0x2000f4fa
    a38c:	0001fc51 	.word	0x0001fc51

0000a390 <notify_battery_level_cb_cadence>:
{
    a390:	b510      	push	{r4, lr}
    a392:	460c      	mov	r4, r1
    a394:	b088      	sub	sp, #32
	bt_addr_le_to_str(bt_conn_get_dst(bt_bas_conn(bas)),
    a396:	f010 ff22 	bl	1b1de <bt_bas_conn>
    a39a:	f011 ff61 	bl	1c260 <bt_conn_get_dst>
    a39e:	4669      	mov	r1, sp
    a3a0:	f7ff ff9a 	bl	a2d8 <bt_addr_le_to_str.constprop.0.isra.0>
	if (battery_level == BT_BAS_VAL_INVALID) {
    a3a4:	2cff      	cmp	r4, #255	; 0xff
    a3a6:	d107      	bne.n	a3b8 <notify_battery_level_cb_cadence+0x28>
		printk("[%s] Battery notification aborted\n", addr);
    a3a8:	4669      	mov	r1, sp
    a3aa:	4806      	ldr	r0, [pc, #24]	; (a3c4 <notify_battery_level_cb_cadence+0x34>)
    a3ac:	f010 fa60 	bl	1a870 <printk>
	batteryLevel_cadence = battery_level;
    a3b0:	4b05      	ldr	r3, [pc, #20]	; (a3c8 <notify_battery_level_cb_cadence+0x38>)
    a3b2:	701c      	strb	r4, [r3, #0]
}
    a3b4:	b008      	add	sp, #32
    a3b6:	bd10      	pop	{r4, pc}
		printk("[%s] Battery notification: %"PRIu8"%%\n",
    a3b8:	4622      	mov	r2, r4
    a3ba:	4669      	mov	r1, sp
    a3bc:	4803      	ldr	r0, [pc, #12]	; (a3cc <notify_battery_level_cb_cadence+0x3c>)
    a3be:	f010 fa57 	bl	1a870 <printk>
    a3c2:	e7f5      	b.n	a3b0 <notify_battery_level_cb_cadence+0x20>
    a3c4:	0001fc2e 	.word	0x0001fc2e
    a3c8:	2000f4f8 	.word	0x2000f4f8
    a3cc:	0001fc51 	.word	0x0001fc51

0000a3d0 <notify_battery_level_cb_heartRate>:
{
    a3d0:	b510      	push	{r4, lr}
    a3d2:	460c      	mov	r4, r1
    a3d4:	b088      	sub	sp, #32
	bt_addr_le_to_str(bt_conn_get_dst(bt_bas_conn(bas)),
    a3d6:	f010 ff02 	bl	1b1de <bt_bas_conn>
    a3da:	f011 ff41 	bl	1c260 <bt_conn_get_dst>
    a3de:	4669      	mov	r1, sp
    a3e0:	f7ff ff7a 	bl	a2d8 <bt_addr_le_to_str.constprop.0.isra.0>
	if (battery_level == BT_BAS_VAL_INVALID) {
    a3e4:	2cff      	cmp	r4, #255	; 0xff
    a3e6:	d107      	bne.n	a3f8 <notify_battery_level_cb_heartRate+0x28>
		printk("[%s] Battery notification aborted\n", addr);
    a3e8:	4669      	mov	r1, sp
    a3ea:	4806      	ldr	r0, [pc, #24]	; (a404 <notify_battery_level_cb_heartRate+0x34>)
    a3ec:	f010 fa40 	bl	1a870 <printk>
	batteryLevel_heartRate = battery_level;
    a3f0:	4b05      	ldr	r3, [pc, #20]	; (a408 <notify_battery_level_cb_heartRate+0x38>)
    a3f2:	701c      	strb	r4, [r3, #0]
}
    a3f4:	b008      	add	sp, #32
    a3f6:	bd10      	pop	{r4, pc}
		printk("[%s] Battery notification: %"PRIu8"%%\n",
    a3f8:	4622      	mov	r2, r4
    a3fa:	4669      	mov	r1, sp
    a3fc:	4803      	ldr	r0, [pc, #12]	; (a40c <notify_battery_level_cb_heartRate+0x3c>)
    a3fe:	f010 fa37 	bl	1a870 <printk>
    a402:	e7f5      	b.n	a3f0 <notify_battery_level_cb_heartRate+0x20>
    a404:	0001fc2e 	.word	0x0001fc2e
    a408:	2000f4f9 	.word	0x2000f4f9
    a40c:	0001fc51 	.word	0x0001fc51

0000a410 <read_battery_level_cb_heartRate>:
{
    a410:	b530      	push	{r4, r5, lr}
    a412:	4615      	mov	r5, r2
    a414:	b089      	sub	sp, #36	; 0x24
    a416:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(bt_bas_conn(bas)),
    a418:	f010 fee1 	bl	1b1de <bt_bas_conn>
    a41c:	f011 ff20 	bl	1c260 <bt_conn_get_dst>
    a420:	4669      	mov	r1, sp
    a422:	f7ff ff59 	bl	a2d8 <bt_addr_le_to_str.constprop.0.isra.0>
	if (err) {
    a426:	b135      	cbz	r5, a436 <read_battery_level_cb_heartRate+0x26>
		printk("[%s] Battery read ERROR: %d\n", addr, err);
    a428:	462a      	mov	r2, r5
    a42a:	4669      	mov	r1, sp
    a42c:	4806      	ldr	r0, [pc, #24]	; (a448 <read_battery_level_cb_heartRate+0x38>)
    a42e:	f010 fa1f 	bl	1a870 <printk>
}
    a432:	b009      	add	sp, #36	; 0x24
    a434:	bd30      	pop	{r4, r5, pc}
	printk("[%s] Battery read: %"PRIu8"%%\n", addr, battery_level);
    a436:	4622      	mov	r2, r4
    a438:	4669      	mov	r1, sp
    a43a:	4804      	ldr	r0, [pc, #16]	; (a44c <read_battery_level_cb_heartRate+0x3c>)
    a43c:	f010 fa18 	bl	1a870 <printk>
    batteryLevel_heartRate = battery_level;
    a440:	4b03      	ldr	r3, [pc, #12]	; (a450 <read_battery_level_cb_heartRate+0x40>)
    a442:	701c      	strb	r4, [r3, #0]
    a444:	e7f5      	b.n	a432 <read_battery_level_cb_heartRate+0x22>
    a446:	bf00      	nop
    a448:	0001fc72 	.word	0x0001fc72
    a44c:	0001fc8f 	.word	0x0001fc8f
    a450:	2000f4f9 	.word	0x2000f4f9

0000a454 <gatt_discover_battery_service>:
{
    a454:	b537      	push	{r0, r1, r2, r4, r5, lr}
	cnt++;
    a456:	4d0f      	ldr	r5, [pc, #60]	; (a494 <gatt_discover_battery_service+0x40>)
	err = bt_gatt_dm_start(conn, BT_UUID_BAS, &discovery_cb, NULL);
    a458:	f641 020f 	movw	r2, #6159	; 0x180f
	cnt++;
    a45c:	782b      	ldrb	r3, [r5, #0]
	err = bt_gatt_dm_start(conn, BT_UUID_BAS, &discovery_cb, NULL);
    a45e:	f8ad 2006 	strh.w	r2, [sp, #6]
	cnt++;
    a462:	3301      	adds	r3, #1
    a464:	702b      	strb	r3, [r5, #0]
	err = bt_gatt_dm_start(conn, BT_UUID_BAS, &discovery_cb, NULL);
    a466:	2300      	movs	r3, #0
    a468:	4a0b      	ldr	r2, [pc, #44]	; (a498 <gatt_discover_battery_service+0x44>)
    a46a:	a901      	add	r1, sp, #4
    a46c:	f88d 3004 	strb.w	r3, [sp, #4]
    a470:	f002 fa4a 	bl	c908 <bt_gatt_dm_start>
	if (err) {
    a474:	4604      	mov	r4, r0
    a476:	b150      	cbz	r0, a48e <gatt_discover_battery_service+0x3a>
		printk("Could not start the discovery procedure, error "
    a478:	4601      	mov	r1, r0
    a47a:	4808      	ldr	r0, [pc, #32]	; (a49c <gatt_discover_battery_service+0x48>)
    a47c:	f010 f9f8 	bl	1a870 <printk>
		cnt--;
    a480:	782b      	ldrb	r3, [r5, #0]
		cntDevices--;
    a482:	4a07      	ldr	r2, [pc, #28]	; (a4a0 <gatt_discover_battery_service+0x4c>)
		cnt--;
    a484:	3b01      	subs	r3, #1
    a486:	702b      	strb	r3, [r5, #0]
		cntDevices--;
    a488:	7813      	ldrb	r3, [r2, #0]
    a48a:	3b01      	subs	r3, #1
    a48c:	7013      	strb	r3, [r2, #0]
}
    a48e:	b2e0      	uxtb	r0, r4
    a490:	b003      	add	sp, #12
    a492:	bd30      	pop	{r4, r5, pc}
    a494:	2000f4fb 	.word	0x2000f4fb
    a498:	200081e4 	.word	0x200081e4
    a49c:	0001fca8 	.word	0x0001fca8
    a4a0:	2000f4fc 	.word	0x2000f4fc

0000a4a4 <initBatteryManager>:
	free = false;
    a4a4:	2200      	movs	r2, #0
{
    a4a6:	b538      	push	{r3, r4, r5, lr}
    a4a8:	4604      	mov	r4, r0
	cntDevices++;
    a4aa:	4d16      	ldr	r5, [pc, #88]	; (a504 <initBatteryManager+0x60>)
	free = false;
    a4ac:	4b16      	ldr	r3, [pc, #88]	; (a508 <initBatteryManager+0x64>)
	cntDevices++;
    a4ae:	7829      	ldrb	r1, [r5, #0]
	free = false;
    a4b0:	701a      	strb	r2, [r3, #0]
	infoSensors = sensorInfos;
    a4b2:	4b16      	ldr	r3, [pc, #88]	; (a50c <initBatteryManager+0x68>)
	cntDevices++;
    a4b4:	3101      	adds	r1, #1
	infoSensors = sensorInfos;
    a4b6:	7018      	strb	r0, [r3, #0]
	cntDevices++;
    a4b8:	b2c9      	uxtb	r1, r1
	printk("Initialize battery manager: # %d\n", cntDevices);
    a4ba:	4815      	ldr	r0, [pc, #84]	; (a510 <initBatteryManager+0x6c>)
    a4bc:	3c01      	subs	r4, #1
	cntDevices++;
    a4be:	7029      	strb	r1, [r5, #0]
	printk("Initialize battery manager: # %d\n", cntDevices);
    a4c0:	f010 f9d6 	bl	1a870 <printk>
	switch (sensorInfos)
    a4c4:	2c06      	cmp	r4, #6
    a4c6:	d81c      	bhi.n	a502 <initBatteryManager+0x5e>
    a4c8:	e8df f004 	tbb	[pc, r4]
    a4cc:	0c041107 	.word	0x0c041107
    a4d0:	1813      	.short	0x1813
    a4d2:	16          	.byte	0x16
    a4d3:	00          	.byte	0x00
		if (cntDevices == 1)
    a4d4:	782b      	ldrb	r3, [r5, #0]
    a4d6:	2b01      	cmp	r3, #1
    a4d8:	d109      	bne.n	a4ee <initBatteryManager+0x4a>
			bt_bas_client_init(&bas_speed);
    a4da:	480e      	ldr	r0, [pc, #56]	; (a514 <initBatteryManager+0x70>)
}
    a4dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_bas_client_init(&bas_heartRate);
    a4e0:	f002 beb2 	b.w	d248 <bt_bas_client_init>
		if (cntDevices == 1)
    a4e4:	782b      	ldrb	r3, [r5, #0]
    a4e6:	2b01      	cmp	r3, #1
    a4e8:	d0f7      	beq.n	a4da <initBatteryManager+0x36>
		else if (cntDevices == 2)
    a4ea:	2b02      	cmp	r3, #2
		if (cntDevices == 1)
    a4ec:	d104      	bne.n	a4f8 <initBatteryManager+0x54>
			bt_bas_client_init(&bas_cadence);
    a4ee:	480a      	ldr	r0, [pc, #40]	; (a518 <initBatteryManager+0x74>)
    a4f0:	e7f4      	b.n	a4dc <initBatteryManager+0x38>
		if (cntDevices == 1)
    a4f2:	782b      	ldrb	r3, [r5, #0]
    a4f4:	2b01      	cmp	r3, #1
    a4f6:	d0f0      	beq.n	a4da <initBatteryManager+0x36>
		bt_bas_client_init(&bas_heartRate);
    a4f8:	4808      	ldr	r0, [pc, #32]	; (a51c <initBatteryManager+0x78>)
    a4fa:	e7ef      	b.n	a4dc <initBatteryManager+0x38>
		if (cntDevices == 1)
    a4fc:	782b      	ldrb	r3, [r5, #0]
    a4fe:	2b01      	cmp	r3, #1
    a500:	e7f4      	b.n	a4ec <initBatteryManager+0x48>
}
    a502:	bd38      	pop	{r3, r4, r5, pc}
    a504:	2000f4fc 	.word	0x2000f4fc
    a508:	2000856a 	.word	0x2000856a
    a50c:	2000f4fd 	.word	0x2000f4fd
    a510:	0001fce1 	.word	0x0001fce1
    a514:	20008928 	.word	0x20008928
    a518:	20008818 	.word	0x20008818
    a51c:	200088a0 	.word	0x200088a0

0000a520 <getBatteryLevel>:
	switch (nbrSensor)
    a520:	2802      	cmp	r0, #2
    a522:	d006      	beq.n	a532 <getBatteryLevel+0x12>
    a524:	2803      	cmp	r0, #3
    a526:	d006      	beq.n	a536 <getBatteryLevel+0x16>
    a528:	2801      	cmp	r0, #1
    a52a:	d106      	bne.n	a53a <getBatteryLevel+0x1a>
		return batteryLevel_speed;
    a52c:	4b04      	ldr	r3, [pc, #16]	; (a540 <getBatteryLevel+0x20>)
		return batteryLevel_cadence;
    a52e:	7818      	ldrb	r0, [r3, #0]
    a530:	4770      	bx	lr
    a532:	4b04      	ldr	r3, [pc, #16]	; (a544 <getBatteryLevel+0x24>)
    a534:	e7fb      	b.n	a52e <getBatteryLevel+0xe>
		return batteryLevel_heartRate;
    a536:	4b04      	ldr	r3, [pc, #16]	; (a548 <getBatteryLevel+0x28>)
    a538:	e7f9      	b.n	a52e <getBatteryLevel+0xe>
	switch (nbrSensor)
    a53a:	2000      	movs	r0, #0
}
    a53c:	4770      	bx	lr
    a53e:	bf00      	nop
    a540:	2000f4fa 	.word	0x2000f4fa
    a544:	2000f4f8 	.word	0x2000f4f8
    a548:	2000f4f9 	.word	0x2000f4f9

0000a54c <subscribeBatteryHeartRate>:

void subscribeBatteryHeartRate(struct bt_gatt_dm *dm) 
{
    a54c:	b510      	push	{r4, lr}
	uint8_t err = 0;

	err = bt_bas_handles_assign(dm, &bas_heartRate);
    a54e:	4918      	ldr	r1, [pc, #96]	; (a5b0 <subscribeBatteryHeartRate+0x64>)
{
    a550:	4604      	mov	r4, r0
	err = bt_bas_handles_assign(dm, &bas_heartRate);
    a552:	f002 fe8d 	bl	d270 <bt_bas_handles_assign>
	if (err) 
    a556:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    a55a:	d002      	beq.n	a562 <subscribeBatteryHeartRate+0x16>
	{
		printk("Could not init BAS client object from heart rate sensor, error: %d\n", err);
    a55c:	4815      	ldr	r0, [pc, #84]	; (a5b4 <subscribeBatteryHeartRate+0x68>)
    a55e:	f010 f987 	bl	1a870 <printk>
    a562:	4813      	ldr	r0, [pc, #76]	; (a5b0 <subscribeBatteryHeartRate+0x64>)
	}

	if (bt_bas_notify_supported(&bas_heartRate))
    a564:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    a568:	b1ab      	cbz	r3, a596 <subscribeBatteryHeartRate+0x4a>
	{
		err = bt_bas_subscribe_battery_level(&bas_heartRate, notify_battery_level_cb_heartRate);
    a56a:	4913      	ldr	r1, [pc, #76]	; (a5b8 <subscribeBatteryHeartRate+0x6c>)
    a56c:	f002 ff0a 	bl	d384 <bt_bas_subscribe_battery_level>
		if (err) 
    a570:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    a574:	d002      	beq.n	a57c <subscribeBatteryHeartRate+0x30>
		{
			printk("Cannot subscribe to BAS value notification from heart rate sensor, (err: %d)\n", err);
    a576:	4811      	ldr	r0, [pc, #68]	; (a5bc <subscribeBatteryHeartRate+0x70>)
    a578:	f010 f97a 	bl	1a870 <printk>
		{
			printk("Could not start periodic read of BAS value for heart rate sensor\n");
		}
	}	

	err = bt_gatt_dm_data_release(dm);
    a57c:	4620      	mov	r0, r4
    a57e:	f010 fe14 	bl	1b1aa <bt_gatt_dm_data_release>
	if (err) {
    a582:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    a586:	d002      	beq.n	a58e <subscribeBatteryHeartRate+0x42>
		printk("Could not release the discovery data, error "
    a588:	480d      	ldr	r0, [pc, #52]	; (a5c0 <subscribeBatteryHeartRate+0x74>)
    a58a:	f010 f971 	bl	1a870 <printk>
		       "code: %d\n", err);
	}	
	free = true;
    a58e:	2201      	movs	r2, #1
    a590:	4b0c      	ldr	r3, [pc, #48]	; (a5c4 <subscribeBatteryHeartRate+0x78>)
    a592:	701a      	strb	r2, [r3, #0]
}
    a594:	bd10      	pop	{r4, pc}
		err = bt_bas_start_per_read_battery_level(&bas_heartRate, BAS_READ_VALUE_INTERVAL, notify_battery_level_cb_heartRate);
    a596:	f242 7110 	movw	r1, #10000	; 0x2710
    a59a:	4a07      	ldr	r2, [pc, #28]	; (a5b8 <subscribeBatteryHeartRate+0x6c>)
    a59c:	f002 ff4c 	bl	d438 <bt_bas_start_per_read_battery_level>
		if (err) 
    a5a0:	b2c0      	uxtb	r0, r0
    a5a2:	2800      	cmp	r0, #0
    a5a4:	d0ea      	beq.n	a57c <subscribeBatteryHeartRate+0x30>
			printk("Could not start periodic read of BAS value for heart rate sensor\n");
    a5a6:	4808      	ldr	r0, [pc, #32]	; (a5c8 <subscribeBatteryHeartRate+0x7c>)
    a5a8:	f010 f962 	bl	1a870 <printk>
    a5ac:	e7e6      	b.n	a57c <subscribeBatteryHeartRate+0x30>
    a5ae:	bf00      	nop
    a5b0:	200088a0 	.word	0x200088a0
    a5b4:	0001fd03 	.word	0x0001fd03
    a5b8:	0000a3d1 	.word	0x0000a3d1
    a5bc:	0001fd47 	.word	0x0001fd47
    a5c0:	0001fb2d 	.word	0x0001fb2d
    a5c4:	2000856a 	.word	0x2000856a
    a5c8:	0001fd95 	.word	0x0001fd95

0000a5cc <discovery_completed_cb>:
{
    a5cc:	b510      	push	{r4, lr}
    a5ce:	4604      	mov	r4, r0
	printk("The discovery procedure succeeded\n");
    a5d0:	4817      	ldr	r0, [pc, #92]	; (a630 <discovery_completed_cb+0x64>)
    a5d2:	f010 f94d 	bl	1a870 <printk>
	switch (infoSensors)
    a5d6:	4b17      	ldr	r3, [pc, #92]	; (a634 <discovery_completed_cb+0x68>)
    a5d8:	781b      	ldrb	r3, [r3, #0]
    a5da:	3b01      	subs	r3, #1
    a5dc:	2b06      	cmp	r3, #6
    a5de:	d826      	bhi.n	a62e <discovery_completed_cb+0x62>
    a5e0:	e8df f003 	tbb	[pc, r3]
    a5e4:	0d041308 	.word	0x0d041308
    a5e8:	2118      	.short	0x2118
    a5ea:	1c          	.byte	0x1c
    a5eb:	00          	.byte	0x00
		if (cntDevices == 1)
    a5ec:	4b12      	ldr	r3, [pc, #72]	; (a638 <discovery_completed_cb+0x6c>)
    a5ee:	781b      	ldrb	r3, [r3, #0]
    a5f0:	2b01      	cmp	r3, #1
    a5f2:	d10a      	bne.n	a60a <discovery_completed_cb+0x3e>
			subscribeBatterySpeed(dm);
    a5f4:	4620      	mov	r0, r4
}
    a5f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			subscribeBatterySpeed(dm);
    a5fa:	f7ff bded 	b.w	a1d8 <subscribeBatterySpeed>
		if (cntDevices == 1)
    a5fe:	4b0e      	ldr	r3, [pc, #56]	; (a638 <discovery_completed_cb+0x6c>)
    a600:	781b      	ldrb	r3, [r3, #0]
    a602:	2b01      	cmp	r3, #1
    a604:	d0f6      	beq.n	a5f4 <discovery_completed_cb+0x28>
		else if (cntDevices == 2)
    a606:	2b02      	cmp	r3, #2
		if (cntDevices == 1)
    a608:	d108      	bne.n	a61c <discovery_completed_cb+0x50>
			subscribeBatteryCadence(dm);
    a60a:	4620      	mov	r0, r4
}
    a60c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			subscribeBatteryCadence(dm);
    a610:	f7ff be22 	b.w	a258 <subscribeBatteryCadence>
		if (cntDevices == 1)
    a614:	4b08      	ldr	r3, [pc, #32]	; (a638 <discovery_completed_cb+0x6c>)
    a616:	781b      	ldrb	r3, [r3, #0]
    a618:	2b01      	cmp	r3, #1
    a61a:	d0eb      	beq.n	a5f4 <discovery_completed_cb+0x28>
			subscribeBatteryHeartRate(dm);
    a61c:	4620      	mov	r0, r4
}
    a61e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			subscribeBatteryHeartRate(dm);
    a622:	f7ff bf93 	b.w	a54c <subscribeBatteryHeartRate>
		if (cntDevices == 1)
    a626:	4b04      	ldr	r3, [pc, #16]	; (a638 <discovery_completed_cb+0x6c>)
    a628:	781b      	ldrb	r3, [r3, #0]
    a62a:	2b01      	cmp	r3, #1
    a62c:	e7ec      	b.n	a608 <discovery_completed_cb+0x3c>
}
    a62e:	bd10      	pop	{r4, pc}
    a630:	0001f24f 	.word	0x0001f24f
    a634:	2000f4fd 	.word	0x2000f4fd
    a638:	2000f4fc 	.word	0x2000f4fc

0000a63c <isFree>:

bool isFree()
{
	return free;
}
    a63c:	4b01      	ldr	r3, [pc, #4]	; (a644 <isFree+0x8>)
    a63e:	7818      	ldrb	r0, [r3, #0]
    a640:	4770      	bx	lr
    a642:	bf00      	nop
    a644:	2000856a 	.word	0x2000856a

0000a648 <askForBatteryLevelHeartRate>:

void askForBatteryLevelHeartRate()
{
	bt_bas_read_battery_level(&bas_heartRate, read_battery_level_cb_heartRate);
    a648:	4901      	ldr	r1, [pc, #4]	; (a650 <askForBatteryLevelHeartRate+0x8>)
    a64a:	4802      	ldr	r0, [pc, #8]	; (a654 <askForBatteryLevelHeartRate+0xc>)
    a64c:	f002 bed4 	b.w	d3f8 <bt_bas_read_battery_level>
    a650:	0000a411 	.word	0x0000a411
    a654:	200088a0 	.word	0x200088a0

0000a658 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    a658:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    a65a:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
    a65c:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    a660:	2b02      	cmp	r3, #2
{
    a662:	4604      	mov	r4, r0
    a664:	460e      	mov	r6, r1
	notify->result = res;
    a666:	6081      	str	r1, [r0, #8]
	switch (method) {
    a668:	d010      	beq.n	a68c <sys_notify_finalize+0x34>
    a66a:	2b03      	cmp	r3, #3
    a66c:	d004      	beq.n	a678 <sys_notify_finalize+0x20>
    a66e:	2b01      	cmp	r3, #1
    a670:	d10f      	bne.n	a692 <sys_notify_finalize+0x3a>
    a672:	2500      	movs	r5, #0
    a674:	4628      	mov	r0, r5
    a676:	e001      	b.n	a67c <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    a678:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
    a67a:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    a67c:	2300      	movs	r3, #0
    a67e:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    a680:	b110      	cbz	r0, a688 <sys_notify_finalize+0x30>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    a682:	4631      	mov	r1, r6
    a684:	f00f ffae 	bl	1a5e4 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    a688:	4628      	mov	r0, r5
    a68a:	bd70      	pop	{r4, r5, r6, pc}
	sys_notify_generic_callback rv = 0;
    a68c:	2500      	movs	r5, #0
		sig = notify->method.signal;
    a68e:	6800      	ldr	r0, [r0, #0]
		break;
    a690:	e7f4      	b.n	a67c <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    a692:	2245      	movs	r2, #69	; 0x45
    a694:	4904      	ldr	r1, [pc, #16]	; (a6a8 <sys_notify_finalize+0x50>)
    a696:	4805      	ldr	r0, [pc, #20]	; (a6ac <sys_notify_finalize+0x54>)
    a698:	f010 f8ea 	bl	1a870 <printk>
    a69c:	2145      	movs	r1, #69	; 0x45
    a69e:	4802      	ldr	r0, [pc, #8]	; (a6a8 <sys_notify_finalize+0x50>)
    a6a0:	f010 fb8c 	bl	1adbc <assert_post_action>
	sys_notify_generic_callback rv = 0;
    a6a4:	2500      	movs	r5, #0
    a6a6:	e7e8      	b.n	a67a <sys_notify_finalize+0x22>
    a6a8:	0001fdd7 	.word	0x0001fdd7
    a6ac:	0001fdfa 	.word	0x0001fdfa

0000a6b0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    a6b0:	680b      	ldr	r3, [r1, #0]
    a6b2:	3301      	adds	r3, #1
    a6b4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    a6b6:	4b01      	ldr	r3, [pc, #4]	; (a6bc <char_out+0xc>)
    a6b8:	681b      	ldr	r3, [r3, #0]
    a6ba:	4718      	bx	r3
    a6bc:	200081f0 	.word	0x200081f0

0000a6c0 <__printk_hook_install>:
	_char_out = fn;
    a6c0:	4b01      	ldr	r3, [pc, #4]	; (a6c8 <__printk_hook_install+0x8>)
    a6c2:	6018      	str	r0, [r3, #0]
}
    a6c4:	4770      	bx	lr
    a6c6:	bf00      	nop
    a6c8:	200081f0 	.word	0x200081f0

0000a6cc <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    a6cc:	b507      	push	{r0, r1, r2, lr}
    a6ce:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    a6d0:	2100      	movs	r1, #0
{
    a6d2:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    a6d4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    a6d6:	4803      	ldr	r0, [pc, #12]	; (a6e4 <vprintk+0x18>)
    a6d8:	a901      	add	r1, sp, #4
    a6da:	f000 fbe9 	bl	aeb0 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    a6de:	b003      	add	sp, #12
    a6e0:	f85d fb04 	ldr.w	pc, [sp], #4
    a6e4:	0000a6b1 	.word	0x0000a6b1

0000a6e8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    a6e8:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    a6ea:	2500      	movs	r5, #0
{
    a6ec:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    a6ee:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    a6f2:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
    a6f4:	a901      	add	r1, sp, #4
    a6f6:	4805      	ldr	r0, [pc, #20]	; (a70c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    a6f8:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    a6fa:	f000 fbd9 	bl	aeb0 <cbvprintf>

	if (ctx.count < ctx.max) {
    a6fe:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    a702:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    a704:	bfb8      	it	lt
    a706:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    a708:	b005      	add	sp, #20
    a70a:	bd30      	pop	{r4, r5, pc}
    a70c:	0001a84b 	.word	0x0001a84b

0000a710 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    a710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a714:	f8b0 a01c 	ldrh.w	sl, [r0, #28]
{
    a718:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    a71a:	f01a 0f08 	tst.w	sl, #8
{
    a71e:	4693      	mov	fp, r2
	if (processing) {
    a720:	d01c      	beq.n	a75c <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
    a722:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    a724:	bf0c      	ite	eq
    a726:	f04a 0a10 	orreq.w	sl, sl, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    a72a:	f04a 0a20 	orrne.w	sl, sl, #32
    a72e:	f8a0 a01c 	strh.w	sl, [r0, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a732:	f104 0014 	add.w	r0, r4, #20
    a736:	f00f f8bd 	bl	198b4 <z_spin_unlock_valid>
    a73a:	b940      	cbnz	r0, a74e <process_event+0x3e>
    a73c:	4992      	ldr	r1, [pc, #584]	; (a988 <process_event+0x278>)
    a73e:	4893      	ldr	r0, [pc, #588]	; (a98c <process_event+0x27c>)
    a740:	22a7      	movs	r2, #167	; 0xa7
    a742:	f010 f895 	bl	1a870 <printk>
    a746:	21a7      	movs	r1, #167	; 0xa7
    a748:	488f      	ldr	r0, [pc, #572]	; (a988 <process_event+0x278>)
    a74a:	f010 fb37 	bl	1adbc <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    a74e:	f38b 8811 	msr	BASEPRI, fp
    a752:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    a756:	b003      	add	sp, #12
    a758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    a75c:	4f8c      	ldr	r7, [pc, #560]	; (a990 <process_event+0x280>)
    a75e:	f8df 822c 	ldr.w	r8, [pc, #556]	; a98c <process_event+0x27c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a762:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
    a766:	2902      	cmp	r1, #2
    a768:	d106      	bne.n	a778 <process_event+0x68>
			evt = process_recheck(mgr);
    a76a:	4620      	mov	r0, r4
    a76c:	f010 f89a 	bl	1a8a4 <process_recheck>
		if (evt == EVT_NOP) {
    a770:	2800      	cmp	r0, #0
    a772:	d0de      	beq.n	a732 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    a774:	2801      	cmp	r0, #1
    a776:	d163      	bne.n	a840 <process_event+0x130>
			res = mgr->last_res;
    a778:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a77c:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    a77e:	f1b9 0f00 	cmp.w	r9, #0
    a782:	da19      	bge.n	a7b8 <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    a784:	2600      	movs	r6, #0
		*clients = mgr->clients;
    a786:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a788:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    a78c:	e9c4 6600 	strd	r6, r6, [r4]
    a790:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    a794:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a796:	8ba3      	ldrh	r3, [r4, #28]
    a798:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    a79c:	4552      	cmp	r2, sl
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a79e:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
    a7a0:	d003      	beq.n	a7aa <process_event+0x9a>
		if (do_monitors
    a7a2:	68a2      	ldr	r2, [r4, #8]
    a7a4:	2a00      	cmp	r2, #0
    a7a6:	f040 80f5 	bne.w	a994 <process_event+0x284>
		    || !sys_slist_is_empty(&clients)
    a7aa:	b915      	cbnz	r5, a7b2 <process_event+0xa2>
		    || (transit != NULL)) {
    a7ac:	2e00      	cmp	r6, #0
    a7ae:	f000 812f 	beq.w	aa10 <process_event+0x300>
    a7b2:	f04f 0a00 	mov.w	sl, #0
    a7b6:	e0ef      	b.n	a998 <process_event+0x288>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a7b8:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    a7bc:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    a7be:	2901      	cmp	r1, #1
    a7c0:	d820      	bhi.n	a804 <process_event+0xf4>
	list->head = NULL;
    a7c2:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a7c4:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    a7c8:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    a7ca:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a7cc:	b29b      	uxth	r3, r3
	list->tail = NULL;
    a7ce:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    a7d2:	d10a      	bne.n	a7ea <process_event+0xda>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    a7d4:	b13d      	cbz	r5, a7e6 <process_event+0xd6>
    a7d6:	4629      	mov	r1, r5
    a7d8:	8be2      	ldrh	r2, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    a7da:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
    a7dc:	3201      	adds	r2, #1
    a7de:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    a7e0:	2900      	cmp	r1, #0
    a7e2:	d1fa      	bne.n	a7da <process_event+0xca>
    a7e4:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a7e6:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    a7ea:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    a7ec:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    a7ee:	f010 f859 	bl	1a8a4 <process_recheck>
    a7f2:	4606      	mov	r6, r0
    a7f4:	2800      	cmp	r0, #0
    a7f6:	d0ce      	beq.n	a796 <process_event+0x86>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    a7f8:	8ba3      	ldrh	r3, [r4, #28]
    a7fa:	f043 0320 	orr.w	r3, r3, #32
    a7fe:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    a800:	2600      	movs	r6, #0
    a802:	e7c8      	b.n	a796 <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
    a804:	2a04      	cmp	r2, #4
    a806:	d10d      	bne.n	a824 <process_event+0x114>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a808:	f023 0307 	bic.w	r3, r3, #7
    a80c:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    a80e:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    a810:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    a812:	f010 f847 	bl	1a8a4 <process_recheck>
    a816:	4605      	mov	r5, r0
    a818:	b180      	cbz	r0, a83c <process_event+0x12c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    a81a:	f042 0220 	orr.w	r2, r2, #32
    a81e:	2500      	movs	r5, #0
    a820:	83a2      	strh	r2, [r4, #28]
    a822:	e7ed      	b.n	a800 <process_event+0xf0>
		__ASSERT_NO_MSG(false);
    a824:	f240 1219 	movw	r2, #281	; 0x119
    a828:	4639      	mov	r1, r7
    a82a:	4640      	mov	r0, r8
    a82c:	f010 f820 	bl	1a870 <printk>
    a830:	f240 1119 	movw	r1, #281	; 0x119
    a834:	4638      	mov	r0, r7
    a836:	f010 fac1 	bl	1adbc <assert_post_action>
    a83a:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    a83c:	462e      	mov	r6, r5
    a83e:	e7aa      	b.n	a796 <process_event+0x86>
		} else if (evt == EVT_START) {
    a840:	2803      	cmp	r0, #3
    a842:	d131      	bne.n	a8a8 <process_event+0x198>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    a844:	f1ba 0f00 	cmp.w	sl, #0
    a848:	d00a      	beq.n	a860 <process_event+0x150>
    a84a:	4639      	mov	r1, r7
    a84c:	4640      	mov	r0, r8
    a84e:	f44f 72aa 	mov.w	r2, #340	; 0x154
    a852:	f010 f80d 	bl	1a870 <printk>
    a856:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a85a:	4638      	mov	r0, r7
    a85c:	f010 faae 	bl	1adbc <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    a860:	6823      	ldr	r3, [r4, #0]
    a862:	b953      	cbnz	r3, a87a <process_event+0x16a>
    a864:	4639      	mov	r1, r7
    a866:	4640      	mov	r0, r8
    a868:	f240 1255 	movw	r2, #341	; 0x155
    a86c:	f010 f800 	bl	1a870 <printk>
    a870:	f240 1155 	movw	r1, #341	; 0x155
    a874:	4638      	mov	r0, r7
    a876:	f010 faa1 	bl	1adbc <assert_post_action>
			transit = mgr->transitions->start;
    a87a:	6923      	ldr	r3, [r4, #16]
    a87c:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    a87e:	b956      	cbnz	r6, a896 <process_event+0x186>
    a880:	4639      	mov	r1, r7
    a882:	4640      	mov	r0, r8
    a884:	f44f 72ac 	mov.w	r2, #344	; 0x158
    a888:	f00f fff2 	bl	1a870 <printk>
    a88c:	f44f 71ac 	mov.w	r1, #344	; 0x158
    a890:	4638      	mov	r0, r7
    a892:	f010 fa93 	bl	1adbc <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a896:	8ba3      	ldrh	r3, [r4, #28]
    a898:	f023 0307 	bic.w	r3, r3, #7
    a89c:	f043 0306 	orr.w	r3, r3, #6
}
    a8a0:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    a8a2:	83a3      	strh	r3, [r4, #28]
		res = 0;
    a8a4:	46a9      	mov	r9, r5
}
    a8a6:	e776      	b.n	a796 <process_event+0x86>
		} else if (evt == EVT_STOP) {
    a8a8:	2804      	cmp	r0, #4
    a8aa:	d12e      	bne.n	a90a <process_event+0x1fa>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    a8ac:	f1ba 0f02 	cmp.w	sl, #2
    a8b0:	d00a      	beq.n	a8c8 <process_event+0x1b8>
    a8b2:	4639      	mov	r1, r7
    a8b4:	4640      	mov	r0, r8
    a8b6:	f240 125b 	movw	r2, #347	; 0x15b
    a8ba:	f00f ffd9 	bl	1a870 <printk>
    a8be:	f240 115b 	movw	r1, #347	; 0x15b
    a8c2:	4638      	mov	r0, r7
    a8c4:	f010 fa7a 	bl	1adbc <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    a8c8:	8be3      	ldrh	r3, [r4, #30]
    a8ca:	b153      	cbz	r3, a8e2 <process_event+0x1d2>
    a8cc:	4639      	mov	r1, r7
    a8ce:	4640      	mov	r0, r8
    a8d0:	f44f 72ae 	mov.w	r2, #348	; 0x15c
    a8d4:	f00f ffcc 	bl	1a870 <printk>
    a8d8:	f44f 71ae 	mov.w	r1, #348	; 0x15c
    a8dc:	4638      	mov	r0, r7
    a8de:	f010 fa6d 	bl	1adbc <assert_post_action>
			transit = mgr->transitions->stop;
    a8e2:	6923      	ldr	r3, [r4, #16]
    a8e4:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    a8e6:	b956      	cbnz	r6, a8fe <process_event+0x1ee>
    a8e8:	4639      	mov	r1, r7
    a8ea:	4640      	mov	r0, r8
    a8ec:	f240 125f 	movw	r2, #351	; 0x15f
    a8f0:	f00f ffbe 	bl	1a870 <printk>
    a8f4:	f240 115f 	movw	r1, #351	; 0x15f
    a8f8:	4638      	mov	r0, r7
    a8fa:	f010 fa5f 	bl	1adbc <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a8fe:	8ba3      	ldrh	r3, [r4, #28]
    a900:	f023 0307 	bic.w	r3, r3, #7
    a904:	f043 0304 	orr.w	r3, r3, #4
    a908:	e7ca      	b.n	a8a0 <process_event+0x190>
		} else if (evt == EVT_RESET) {
    a90a:	2805      	cmp	r0, #5
    a90c:	d12e      	bne.n	a96c <process_event+0x25c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    a90e:	f1ba 0f01 	cmp.w	sl, #1
    a912:	d00a      	beq.n	a92a <process_event+0x21a>
    a914:	4639      	mov	r1, r7
    a916:	4640      	mov	r0, r8
    a918:	f44f 72b1 	mov.w	r2, #354	; 0x162
    a91c:	f00f ffa8 	bl	1a870 <printk>
    a920:	f44f 71b1 	mov.w	r1, #354	; 0x162
    a924:	4638      	mov	r0, r7
    a926:	f010 fa49 	bl	1adbc <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    a92a:	6823      	ldr	r3, [r4, #0]
    a92c:	b953      	cbnz	r3, a944 <process_event+0x234>
    a92e:	4639      	mov	r1, r7
    a930:	4640      	mov	r0, r8
    a932:	f240 1263 	movw	r2, #355	; 0x163
    a936:	f00f ff9b 	bl	1a870 <printk>
    a93a:	f240 1163 	movw	r1, #355	; 0x163
    a93e:	4638      	mov	r0, r7
    a940:	f010 fa3c 	bl	1adbc <assert_post_action>
			transit = mgr->transitions->reset;
    a944:	6923      	ldr	r3, [r4, #16]
    a946:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    a948:	b956      	cbnz	r6, a960 <process_event+0x250>
    a94a:	4639      	mov	r1, r7
    a94c:	4640      	mov	r0, r8
    a94e:	f44f 72b3 	mov.w	r2, #358	; 0x166
    a952:	f00f ff8d 	bl	1a870 <printk>
    a956:	f44f 71b3 	mov.w	r1, #358	; 0x166
    a95a:	4638      	mov	r0, r7
    a95c:	f010 fa2e 	bl	1adbc <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a960:	8ba3      	ldrh	r3, [r4, #28]
    a962:	f023 0307 	bic.w	r3, r3, #7
    a966:	f043 0305 	orr.w	r3, r3, #5
    a96a:	e799      	b.n	a8a0 <process_event+0x190>
			__ASSERT_NO_MSG(false);
    a96c:	2500      	movs	r5, #0
    a96e:	f240 1269 	movw	r2, #361	; 0x169
    a972:	4639      	mov	r1, r7
    a974:	4640      	mov	r0, r8
    a976:	f00f ff7b 	bl	1a870 <printk>
    a97a:	f240 1169 	movw	r1, #361	; 0x169
    a97e:	4638      	mov	r0, r7
    a980:	f010 fa1c 	bl	1adbc <assert_post_action>
		onoff_transition_fn transit = NULL;
    a984:	462e      	mov	r6, r5
    a986:	e78d      	b.n	a8a4 <process_event+0x194>
    a988:	0001fe34 	.word	0x0001fe34
    a98c:	0001fdfa 	.word	0x0001fdfa
    a990:	0001fe12 	.word	0x0001fe12
				   && !sys_slist_is_empty(&mgr->monitors);
    a994:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    a998:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    a99c:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    a99e:	f104 0314 	add.w	r3, r4, #20
    a9a2:	4618      	mov	r0, r3
    a9a4:	9301      	str	r3, [sp, #4]
    a9a6:	f00e ff85 	bl	198b4 <z_spin_unlock_valid>
    a9aa:	b940      	cbnz	r0, a9be <process_event+0x2ae>
    a9ac:	4640      	mov	r0, r8
    a9ae:	4931      	ldr	r1, [pc, #196]	; (aa74 <process_event+0x364>)
    a9b0:	22a7      	movs	r2, #167	; 0xa7
    a9b2:	f00f ff5d 	bl	1a870 <printk>
    a9b6:	21a7      	movs	r1, #167	; 0xa7
    a9b8:	482e      	ldr	r0, [pc, #184]	; (aa74 <process_event+0x364>)
    a9ba:	f010 f9ff 	bl	1adbc <assert_post_action>
    a9be:	f38b 8811 	msr	BASEPRI, fp
    a9c2:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    a9c6:	f1ba 0f00 	cmp.w	sl, #0
    a9ca:	d130      	bne.n	aa2e <process_event+0x31e>
	while (!sys_slist_is_empty(list)) {
    a9cc:	2d00      	cmp	r5, #0
    a9ce:	d140      	bne.n	aa52 <process_event+0x342>
			if (transit != NULL) {
    a9d0:	b116      	cbz	r6, a9d8 <process_event+0x2c8>
				transit(mgr, transition_complete);
    a9d2:	4620      	mov	r0, r4
    a9d4:	4928      	ldr	r1, [pc, #160]	; (aa78 <process_event+0x368>)
    a9d6:	47b0      	blx	r6
	__asm__ volatile(
    a9d8:	f04f 0320 	mov.w	r3, #32
    a9dc:	f3ef 8b11 	mrs	fp, BASEPRI
    a9e0:	f383 8811 	msr	BASEPRI, r3
    a9e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a9e8:	9801      	ldr	r0, [sp, #4]
    a9ea:	f00e ff55 	bl	19898 <z_spin_lock_valid>
    a9ee:	b940      	cbnz	r0, aa02 <process_event+0x2f2>
    a9f0:	4640      	mov	r0, r8
    a9f2:	4920      	ldr	r1, [pc, #128]	; (aa74 <process_event+0x364>)
    a9f4:	227c      	movs	r2, #124	; 0x7c
    a9f6:	f00f ff3b 	bl	1a870 <printk>
    a9fa:	217c      	movs	r1, #124	; 0x7c
    a9fc:	481d      	ldr	r0, [pc, #116]	; (aa74 <process_event+0x364>)
    a9fe:	f010 f9dd 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
    aa02:	9801      	ldr	r0, [sp, #4]
    aa04:	f00e ff64 	bl	198d0 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    aa08:	8ba3      	ldrh	r3, [r4, #28]
    aa0a:	f023 0308 	bic.w	r3, r3, #8
    aa0e:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    aa10:	8ba3      	ldrh	r3, [r4, #28]
    aa12:	06da      	lsls	r2, r3, #27
    aa14:	d525      	bpl.n	aa62 <process_event+0x352>
			evt = EVT_COMPLETE;
    aa16:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    aa18:	f023 0310 	bic.w	r3, r3, #16
    aa1c:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    aa1e:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
    aa22:	f00a 0a07 	and.w	sl, sl, #7
	} while (evt != EVT_NOP);
    aa26:	2900      	cmp	r1, #0
    aa28:	f47f ae9d 	bne.w	a766 <process_event+0x56>
out:
    aa2c:	e681      	b.n	a732 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    aa2e:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    aa30:	2900      	cmp	r1, #0
    aa32:	d0cb      	beq.n	a9cc <process_event+0x2bc>
	return node->next;
    aa34:	f8d1 a000 	ldr.w	sl, [r1]
		mon->callback(mgr, mon, state, res);
    aa38:	464b      	mov	r3, r9
    aa3a:	4620      	mov	r0, r4
    aa3c:	f8d1 b004 	ldr.w	fp, [r1, #4]
    aa40:	9a00      	ldr	r2, [sp, #0]
    aa42:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    aa44:	f1ba 0f00 	cmp.w	sl, #0
    aa48:	d0c0      	beq.n	a9cc <process_event+0x2bc>
    aa4a:	4651      	mov	r1, sl
    aa4c:	f8da a000 	ldr.w	sl, [sl]
    aa50:	e7f2      	b.n	aa38 <process_event+0x328>
    aa52:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    aa54:	464b      	mov	r3, r9
    aa56:	4620      	mov	r0, r4
    aa58:	9a00      	ldr	r2, [sp, #0]
    aa5a:	682d      	ldr	r5, [r5, #0]
    aa5c:	f00f ff3e 	bl	1a8dc <notify_one>
    aa60:	e7b4      	b.n	a9cc <process_event+0x2bc>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    aa62:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    aa66:	bf1e      	ittt	ne
    aa68:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    aa6c:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    aa6e:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    aa70:	e7d5      	b.n	aa1e <process_event+0x30e>
    aa72:	bf00      	nop
    aa74:	0001fe34 	.word	0x0001fe34
    aa78:	0000aa7d 	.word	0x0000aa7d

0000aa7c <transition_complete>:
{
    aa7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aa7e:	4604      	mov	r4, r0
    aa80:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    aa82:	f100 0614 	add.w	r6, r0, #20
    aa86:	f04f 0320 	mov.w	r3, #32
    aa8a:	f3ef 8711 	mrs	r7, BASEPRI
    aa8e:	f383 8811 	msr	BASEPRI, r3
    aa92:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    aa96:	4630      	mov	r0, r6
    aa98:	f00e fefe 	bl	19898 <z_spin_lock_valid>
    aa9c:	b940      	cbnz	r0, aab0 <transition_complete+0x34>
    aa9e:	490a      	ldr	r1, [pc, #40]	; (aac8 <transition_complete+0x4c>)
    aaa0:	480a      	ldr	r0, [pc, #40]	; (aacc <transition_complete+0x50>)
    aaa2:	227c      	movs	r2, #124	; 0x7c
    aaa4:	f00f fee4 	bl	1a870 <printk>
    aaa8:	217c      	movs	r1, #124	; 0x7c
    aaaa:	4807      	ldr	r0, [pc, #28]	; (aac8 <transition_complete+0x4c>)
    aaac:	f010 f986 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
    aab0:	4630      	mov	r0, r6
    aab2:	f00e ff0d 	bl	198d0 <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
    aab6:	463a      	mov	r2, r7
    aab8:	4620      	mov	r0, r4
	mgr->last_res = res;
    aaba:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    aabc:	2101      	movs	r1, #1
}
    aabe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    aac2:	f7ff be25 	b.w	a710 <process_event>
    aac6:	bf00      	nop
    aac8:	0001fe34 	.word	0x0001fe34
    aacc:	0001fdfa 	.word	0x0001fdfa

0000aad0 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    aad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aad4:	4604      	mov	r4, r0
    aad6:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    aad8:	f00f ff16 	bl	1a908 <validate_args>

	if (rv < 0) {
    aadc:	1e05      	subs	r5, r0, #0
    aade:	db54      	blt.n	ab8a <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    aae0:	f104 0914 	add.w	r9, r4, #20
    aae4:	f04f 0320 	mov.w	r3, #32
    aae8:	f3ef 8a11 	mrs	sl, BASEPRI
    aaec:	f383 8811 	msr	BASEPRI, r3
    aaf0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    aaf4:	4648      	mov	r0, r9
    aaf6:	f00e fecf 	bl	19898 <z_spin_lock_valid>
    aafa:	b940      	cbnz	r0, ab0e <onoff_request+0x3e>
    aafc:	4933      	ldr	r1, [pc, #204]	; (abcc <onoff_request+0xfc>)
    aafe:	4834      	ldr	r0, [pc, #208]	; (abd0 <onoff_request+0x100>)
    ab00:	227c      	movs	r2, #124	; 0x7c
    ab02:	f00f feb5 	bl	1a870 <printk>
    ab06:	217c      	movs	r1, #124	; 0x7c
    ab08:	4830      	ldr	r0, [pc, #192]	; (abcc <onoff_request+0xfc>)
    ab0a:	f010 f957 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
    ab0e:	4648      	mov	r0, r9
    ab10:	f00e fede 	bl	198d0 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    ab14:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ab18:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ab1a:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    ab1c:	428b      	cmp	r3, r1
    ab1e:	f002 0607 	and.w	r6, r2, #7
    ab22:	d04a      	beq.n	abba <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    ab24:	2e02      	cmp	r6, #2
    ab26:	d11f      	bne.n	ab68 <onoff_request+0x98>
	rv = state;
    ab28:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
    ab2a:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
    ab2e:	3301      	adds	r3, #1
    ab30:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ab32:	4648      	mov	r0, r9
    ab34:	f00e febe 	bl	198b4 <z_spin_unlock_valid>
    ab38:	b940      	cbnz	r0, ab4c <onoff_request+0x7c>
    ab3a:	4924      	ldr	r1, [pc, #144]	; (abcc <onoff_request+0xfc>)
    ab3c:	4824      	ldr	r0, [pc, #144]	; (abd0 <onoff_request+0x100>)
    ab3e:	22a7      	movs	r2, #167	; 0xa7
    ab40:	f00f fe96 	bl	1a870 <printk>
    ab44:	21a7      	movs	r1, #167	; 0xa7
    ab46:	4821      	ldr	r0, [pc, #132]	; (abcc <onoff_request+0xfc>)
    ab48:	f010 f938 	bl	1adbc <assert_post_action>
	__asm__ volatile(
    ab4c:	f38a 8811 	msr	BASEPRI, sl
    ab50:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    ab54:	f1b8 0f00 	cmp.w	r8, #0
    ab58:	d017      	beq.n	ab8a <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
    ab5a:	2300      	movs	r3, #0
    ab5c:	4632      	mov	r2, r6
    ab5e:	4639      	mov	r1, r7
    ab60:	4620      	mov	r0, r4
    ab62:	f00f febb 	bl	1a8dc <notify_one>
    ab66:	e010      	b.n	ab8a <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
    ab68:	0793      	lsls	r3, r2, #30
    ab6a:	d001      	beq.n	ab70 <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
    ab6c:	2e06      	cmp	r6, #6
    ab6e:	d10f      	bne.n	ab90 <onoff_request+0xc0>
	parent->next = child;
    ab70:	2300      	movs	r3, #0
    ab72:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    ab74:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    ab76:	b9eb      	cbnz	r3, abb4 <onoff_request+0xe4>
	list->head = node;
    ab78:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    ab7c:	4635      	mov	r5, r6
    ab7e:	b9f6      	cbnz	r6, abbe <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
    ab80:	4652      	mov	r2, sl
    ab82:	2102      	movs	r1, #2
    ab84:	4620      	mov	r0, r4
    ab86:	f7ff fdc3 	bl	a710 <process_event>
		}
	}

	return rv;
}
    ab8a:	4628      	mov	r0, r5
    ab8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    ab90:	2e05      	cmp	r6, #5
    ab92:	d017      	beq.n	abc4 <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    ab94:	2e01      	cmp	r6, #1
    ab96:	d00a      	beq.n	abae <onoff_request+0xde>
    ab98:	490e      	ldr	r1, [pc, #56]	; (abd4 <onoff_request+0x104>)
    ab9a:	480d      	ldr	r0, [pc, #52]	; (abd0 <onoff_request+0x100>)
    ab9c:	f240 12c5 	movw	r2, #453	; 0x1c5
    aba0:	f00f fe66 	bl	1a870 <printk>
    aba4:	f240 11c5 	movw	r1, #453	; 0x1c5
    aba8:	480a      	ldr	r0, [pc, #40]	; (abd4 <onoff_request+0x104>)
    abaa:	f010 f907 	bl	1adbc <assert_post_action>
		rv = -EIO;
    abae:	f06f 0504 	mvn.w	r5, #4
    abb2:	e004      	b.n	abbe <onoff_request+0xee>
	parent->next = child;
    abb4:	601f      	str	r7, [r3, #0]
	list->tail = node;
    abb6:	6067      	str	r7, [r4, #4]
}
    abb8:	e7e0      	b.n	ab7c <onoff_request+0xac>
		rv = -EAGAIN;
    abba:	f06f 050a 	mvn.w	r5, #10
    abbe:	f04f 0800 	mov.w	r8, #0
    abc2:	e7b6      	b.n	ab32 <onoff_request+0x62>
		rv = -ENOTSUP;
    abc4:	f06f 0522 	mvn.w	r5, #34	; 0x22
    abc8:	e7f9      	b.n	abbe <onoff_request+0xee>
    abca:	bf00      	nop
    abcc:	0001fe34 	.word	0x0001fe34
    abd0:	0001fdfa 	.word	0x0001fdfa
    abd4:	0001fe12 	.word	0x0001fe12

0000abd8 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    abd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    abdc:	4605      	mov	r5, r0
		if (work == NULL) {
			continue;
		}

		handler = work->handler;
		__ASSERT(handler != NULL, "handler must be provided");
    abde:	4e14      	ldr	r6, [pc, #80]	; (ac30 <z_work_q_main+0x58>)
    abe0:	f8df 8050 	ldr.w	r8, [pc, #80]	; ac34 <z_work_q_main+0x5c>
	return z_impl_k_queue_get(queue, timeout);
    abe4:	f04f 32ff 	mov.w	r2, #4294967295
    abe8:	f04f 33ff 	mov.w	r3, #4294967295
    abec:	4628      	mov	r0, r5
    abee:	f00d fbfb 	bl	183e8 <z_impl_k_queue_get>
		if (work == NULL) {
    abf2:	4604      	mov	r4, r0
    abf4:	2800      	cmp	r0, #0
    abf6:	d0f5      	beq.n	abe4 <z_work_q_main+0xc>
		handler = work->handler;
    abf8:	6847      	ldr	r7, [r0, #4]
		__ASSERT(handler != NULL, "handler must be provided");
    abfa:	b947      	cbnz	r7, ac0e <z_work_q_main+0x36>
    abfc:	4631      	mov	r1, r6
    abfe:	4640      	mov	r0, r8
    ac00:	221c      	movs	r2, #28
    ac02:	f00f fe35 	bl	1a870 <printk>
    ac06:	211c      	movs	r1, #28
    ac08:	4630      	mov	r0, r6
    ac0a:	f010 f8d7 	bl	1adbc <assert_post_action>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ac0e:	f104 0308 	add.w	r3, r4, #8
    ac12:	e8d3 2fef 	ldaex	r2, [r3]
    ac16:	f022 0101 	bic.w	r1, r2, #1
    ac1a:	e8c3 1fe0 	stlex	r0, r1, [r3]
    ac1e:	2800      	cmp	r0, #0
    ac20:	d1f7      	bne.n	ac12 <z_work_q_main+0x3a>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    ac22:	07d3      	lsls	r3, r2, #31
    ac24:	d501      	bpl.n	ac2a <z_work_q_main+0x52>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    ac26:	4620      	mov	r0, r4
    ac28:	47b8      	blx	r7
	z_impl_k_yield();
    ac2a:	f00e fb07 	bl	1923c <z_impl_k_yield>
    ac2e:	e7d9      	b.n	abe4 <z_work_q_main+0xc>
    ac30:	0001fe5a 	.word	0x0001fe5a
    ac34:	0001fdfa 	.word	0x0001fdfa

0000ac38 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    ac38:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    ac3a:	2900      	cmp	r1, #0
    ac3c:	d039      	beq.n	acb2 <sys_heap_free+0x7a>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    ac3e:	6805      	ldr	r5, [r0, #0]
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    ac40:	2201      	movs	r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    ac42:	68ab      	ldr	r3, [r5, #8]
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    ac44:	4628      	mov	r0, r5
	return big_heap(h) ? 8 : 4;
    ac46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    ac4a:	bf2c      	ite	cs
    ac4c:	2408      	movcs	r4, #8
    ac4e:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ac50:	1b0c      	subs	r4, r1, r4
    ac52:	1b64      	subs	r4, r4, r5
    ac54:	08e4      	lsrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    ac56:	4621      	mov	r1, r4
    ac58:	f00f fe82 	bl	1a960 <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    ac5c:	07c3      	lsls	r3, r0, #31
    ac5e:	d408      	bmi.n	ac72 <sys_heap_free+0x3a>
    ac60:	4914      	ldr	r1, [pc, #80]	; (acb4 <sys_heap_free+0x7c>)
    ac62:	4815      	ldr	r0, [pc, #84]	; (acb8 <sys_heap_free+0x80>)
    ac64:	229a      	movs	r2, #154	; 0x9a
    ac66:	f00f fe03 	bl	1a870 <printk>
    ac6a:	219a      	movs	r1, #154	; 0x9a
    ac6c:	4811      	ldr	r0, [pc, #68]	; (acb4 <sys_heap_free+0x7c>)
    ac6e:	f010 f8a5 	bl	1adbc <assert_post_action>
	return c + chunk_size(h, c);
    ac72:	4621      	mov	r1, r4
    ac74:	4628      	mov	r0, r5
    ac76:	f00f fe89 	bl	1a98c <chunk_size>
    ac7a:	1826      	adds	r6, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
    ac7c:	4631      	mov	r1, r6
    ac7e:	2200      	movs	r2, #0
    ac80:	4628      	mov	r0, r5
    ac82:	f00f fe6d 	bl	1a960 <chunk_field>
    ac86:	1a36      	subs	r6, r6, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    ac88:	42b4      	cmp	r4, r6
    ac8a:	d008      	beq.n	ac9e <sys_heap_free+0x66>
    ac8c:	4909      	ldr	r1, [pc, #36]	; (acb4 <sys_heap_free+0x7c>)
    ac8e:	480a      	ldr	r0, [pc, #40]	; (acb8 <sys_heap_free+0x80>)
    ac90:	22a2      	movs	r2, #162	; 0xa2
    ac92:	f00f fded 	bl	1a870 <printk>
    ac96:	21a2      	movs	r1, #162	; 0xa2
    ac98:	4806      	ldr	r0, [pc, #24]	; (acb4 <sys_heap_free+0x7c>)
    ac9a:	f010 f88f 	bl	1adbc <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
    ac9e:	4621      	mov	r1, r4
    aca0:	4628      	mov	r0, r5
    aca2:	2200      	movs	r2, #0
    aca4:	f00f fe78 	bl	1a998 <set_chunk_used>
	free_chunk(h, c);
    aca8:	4621      	mov	r1, r4
}
    acaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    acae:	f00f bfb5 	b.w	1ac1c <free_chunk>
}
    acb2:	bd70      	pop	{r4, r5, r6, pc}
    acb4:	0001fe7d 	.word	0x0001fe7d
    acb8:	0001fdfa 	.word	0x0001fdfa

0000acbc <sys_heap_aligned_alloc>:
	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    acbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;

	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    acc0:	f101 39ff 	add.w	r9, r1, #4294967295
    acc4:	ea19 0f01 	tst.w	r9, r1
{
    acc8:	4680      	mov	r8, r0
    acca:	460f      	mov	r7, r1
    accc:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    acce:	6805      	ldr	r5, [r0, #0]
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    acd0:	d008      	beq.n	ace4 <sys_heap_aligned_alloc+0x28>
    acd2:	4931      	ldr	r1, [pc, #196]	; (ad98 <sys_heap_aligned_alloc+0xdc>)
    acd4:	4831      	ldr	r0, [pc, #196]	; (ad9c <sys_heap_aligned_alloc+0xe0>)
    acd6:	22fc      	movs	r2, #252	; 0xfc
    acd8:	f00f fdca 	bl	1a870 <printk>
    acdc:	21fc      	movs	r1, #252	; 0xfc
    acde:	482e      	ldr	r0, [pc, #184]	; (ad98 <sys_heap_aligned_alloc+0xdc>)
    ace0:	f010 f86c 	bl	1adbc <assert_post_action>
	return big_heap_chunks(h->len);
    ace4:	68a8      	ldr	r0, [r5, #8]
	return big_heap(h) ? 8 : 4;
    ace6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    acea:	bf2c      	ite	cs
    acec:	2308      	movcs	r3, #8
    acee:	2304      	movcc	r3, #4

	if (align <= chunk_header_bytes(h)) {
    acf0:	429f      	cmp	r7, r3
    acf2:	d805      	bhi.n	ad00 <sys_heap_aligned_alloc+0x44>
		return sys_heap_alloc(heap, bytes);
    acf4:	4621      	mov	r1, r4
    acf6:	4640      	mov	r0, r8
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
    acf8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		return sys_heap_alloc(heap, bytes);
    acfc:	f00f bfd0 	b.w	1aca0 <sys_heap_alloc>
	if (bytes == 0 || size_too_big(h, bytes)) {
    ad00:	b91c      	cbnz	r4, ad0a <sys_heap_aligned_alloc+0x4e>
		return NULL;
    ad02:	2600      	movs	r6, #0
}
    ad04:	4630      	mov	r0, r6
    ad06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (bytes == 0 || size_too_big(h, bytes)) {
    ad0a:	ebb0 0fd4 	cmp.w	r0, r4, lsr #3
    ad0e:	d9f8      	bls.n	ad02 <sys_heap_aligned_alloc+0x46>
		bytes_to_chunksz(h, bytes + align - chunk_header_bytes(h));
    ad10:	1939      	adds	r1, r7, r4
    ad12:	1ac9      	subs	r1, r1, r3
    ad14:	f00f fe5c 	bl	1a9d0 <bytes_to_chunksz.isra.0>
    ad18:	4601      	mov	r1, r0
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    ad1a:	4628      	mov	r0, r5
    ad1c:	f00f feb3 	bl	1aa86 <alloc_chunk>
	if (c0 == 0) {
    ad20:	4680      	mov	r8, r0
    ad22:	2800      	cmp	r0, #0
    ad24:	d0ed      	beq.n	ad02 <sys_heap_aligned_alloc+0x46>
    ad26:	68ab      	ldr	r3, [r5, #8]
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
    ad28:	427f      	negs	r7, r7
    ad2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    ad2e:	bf2c      	ite	cs
    ad30:	2308      	movcs	r3, #8
    ad32:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    ad34:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
    ad38:	442e      	add	r6, r5
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
    ad3a:	444e      	add	r6, r9
    ad3c:	403e      	ands	r6, r7
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ad3e:	4434      	add	r4, r6
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ad40:	1af3      	subs	r3, r6, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ad42:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ad44:	1b5b      	subs	r3, r3, r5
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ad46:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    ad4a:	1b64      	subs	r4, r4, r5
	if (c > c0) {
    ad4c:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ad50:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    ad54:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    ad58:	d208      	bcs.n	ad6c <sys_heap_aligned_alloc+0xb0>
		split_chunks(h, c0, c);
    ad5a:	4601      	mov	r1, r0
    ad5c:	463a      	mov	r2, r7
    ad5e:	4628      	mov	r0, r5
    ad60:	f00f fed4 	bl	1ab0c <split_chunks>
		free_list_add(h, c0);
    ad64:	4641      	mov	r1, r8
    ad66:	4628      	mov	r0, r5
    ad68:	f00f ff15 	bl	1ab96 <free_list_add>
	return c + chunk_size(h, c);
    ad6c:	4639      	mov	r1, r7
    ad6e:	4628      	mov	r0, r5
    ad70:	f00f fe0c 	bl	1a98c <chunk_size>
    ad74:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    ad76:	4284      	cmp	r4, r0
    ad78:	d208      	bcs.n	ad8c <sys_heap_aligned_alloc+0xd0>
		split_chunks(h, c, c_end);
    ad7a:	4639      	mov	r1, r7
    ad7c:	4628      	mov	r0, r5
    ad7e:	4622      	mov	r2, r4
    ad80:	f00f fec4 	bl	1ab0c <split_chunks>
		free_list_add(h, c_end);
    ad84:	4621      	mov	r1, r4
    ad86:	4628      	mov	r0, r5
    ad88:	f00f ff05 	bl	1ab96 <free_list_add>
	set_chunk_used(h, c, true);
    ad8c:	2201      	movs	r2, #1
    ad8e:	4639      	mov	r1, r7
    ad90:	4628      	mov	r0, r5
    ad92:	f00f fe01 	bl	1a998 <set_chunk_used>
	return mem;
    ad96:	e7b5      	b.n	ad04 <sys_heap_aligned_alloc+0x48>
    ad98:	0001fe7d 	.word	0x0001fe7d
    ad9c:	0001fdfa 	.word	0x0001fdfa

0000ada0 <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
    ada0:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    ada4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ada6:	4607      	mov	r7, r0
    ada8:	460c      	mov	r4, r1
    adaa:	4616      	mov	r6, r2
    adac:	d20e      	bcs.n	adcc <sys_heap_init+0x2c>
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    adae:	2a04      	cmp	r2, #4
    adb0:	d80a      	bhi.n	adc8 <sys_heap_init+0x28>
    adb2:	493d      	ldr	r1, [pc, #244]	; (aea8 <sys_heap_init+0x108>)
    adb4:	483d      	ldr	r0, [pc, #244]	; (aeac <sys_heap_init+0x10c>)
    adb6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
    adba:	f00f fd59 	bl	1a870 <printk>
    adbe:	f44f 71b6 	mov.w	r1, #364	; 0x16c
    adc2:	4839      	ldr	r0, [pc, #228]	; (aea8 <sys_heap_init+0x108>)
    adc4:	f00f fffa 	bl	1adbc <assert_post_action>
    adc8:	2204      	movs	r2, #4
    adca:	e000      	b.n	adce <sys_heap_init+0x2e>
    adcc:	2208      	movs	r2, #8
	bytes -= heap_footer_bytes(bytes);
    adce:	1ab6      	subs	r6, r6, r2

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    add0:	1de5      	adds	r5, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    add2:	4434      	add	r4, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    add4:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    add8:	f024 0407 	bic.w	r4, r4, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    addc:	1b64      	subs	r4, r4, r5

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    adde:	2c17      	cmp	r4, #23
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    ade0:	ea4f 06d4 	mov.w	r6, r4, lsr #3
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    ade4:	d80a      	bhi.n	adfc <sys_heap_init+0x5c>
    ade6:	4930      	ldr	r1, [pc, #192]	; (aea8 <sys_heap_init+0x108>)
    ade8:	4830      	ldr	r0, [pc, #192]	; (aeac <sys_heap_init+0x10c>)
    adea:	f240 1275 	movw	r2, #373	; 0x175
    adee:	f00f fd3f 	bl	1a870 <printk>
    adf2:	f240 1175 	movw	r1, #373	; 0x175
    adf6:	482c      	ldr	r0, [pc, #176]	; (aea8 <sys_heap_init+0x108>)
    adf8:	f00f ffe0 	bl	1adbc <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    adfc:	2300      	movs	r3, #0
    adfe:	2200      	movs	r2, #0
	heap->heap = h;
    ae00:	603d      	str	r5, [r7, #0]
	h->chunk0_hdr_area = 0;
    ae02:	e9c5 2300 	strd	r2, r3, [r5]
	h->len = buf_sz;
	h->avail_buckets = 0;
    ae06:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    ae08:	4631      	mov	r1, r6
    ae0a:	4630      	mov	r0, r6
	h->len = buf_sz;
    ae0c:	60ae      	str	r6, [r5, #8]
	h->avail_buckets = 0;
    ae0e:	60eb      	str	r3, [r5, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    ae10:	f00f fde7 	bl	1a9e2 <bucket_idx.isra.0>
    ae14:	2101      	movs	r1, #1
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    ae16:	0084      	lsls	r4, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    ae18:	1c47      	adds	r7, r0, #1
}

static inline size_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    ae1a:	4630      	mov	r0, r6
    ae1c:	f00f fdd8 	bl	1a9d0 <bytes_to_chunksz.isra.0>
    ae20:	341b      	adds	r4, #27
    ae22:	08e4      	lsrs	r4, r4, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");
    ae24:	4420      	add	r0, r4
    ae26:	42b0      	cmp	r0, r6
    ae28:	d30a      	bcc.n	ae40 <sys_heap_init+0xa0>
    ae2a:	491f      	ldr	r1, [pc, #124]	; (aea8 <sys_heap_init+0x108>)
    ae2c:	481f      	ldr	r0, [pc, #124]	; (aeac <sys_heap_init+0x10c>)
    ae2e:	f240 1281 	movw	r2, #385	; 0x181
    ae32:	f00f fd1d 	bl	1a870 <printk>
    ae36:	f240 1181 	movw	r1, #385	; 0x181
    ae3a:	481b      	ldr	r0, [pc, #108]	; (aea8 <sys_heap_init+0x108>)
    ae3c:	f00f ffbe 	bl	1adbc <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
    ae40:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    ae42:	4619      	mov	r1, r3
    ae44:	f105 0210 	add.w	r2, r5, #16
	for (int i = 0; i < nb_buckets; i++) {
    ae48:	42bb      	cmp	r3, r7
    ae4a:	db28      	blt.n	ae9e <sys_heap_init+0xfe>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    ae4c:	4622      	mov	r2, r4
    ae4e:	4628      	mov	r0, r5
    ae50:	2100      	movs	r1, #0
    ae52:	f00f fdb9 	bl	1a9c8 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    ae56:	1b37      	subs	r7, r6, r4
	set_chunk_used(h, 0, true);
    ae58:	4628      	mov	r0, r5
    ae5a:	2201      	movs	r2, #1
    ae5c:	2100      	movs	r1, #0
    ae5e:	f00f fd9b 	bl	1a998 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    ae62:	463a      	mov	r2, r7
    ae64:	4621      	mov	r1, r4
    ae66:	f00f fdaf 	bl	1a9c8 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    ae6a:	4623      	mov	r3, r4
    ae6c:	2200      	movs	r2, #0
    ae6e:	4621      	mov	r1, r4
    ae70:	4628      	mov	r0, r5
    ae72:	f00f fd80 	bl	1a976 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    ae76:	4631      	mov	r1, r6
    ae78:	4628      	mov	r0, r5
    ae7a:	f00f fda5 	bl	1a9c8 <set_chunk_size>
    ae7e:	463b      	mov	r3, r7
    ae80:	4631      	mov	r1, r6
    ae82:	4628      	mov	r0, r5
    ae84:	2200      	movs	r2, #0
    ae86:	f00f fd76 	bl	1a976 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    ae8a:	4631      	mov	r1, r6
    ae8c:	4628      	mov	r0, r5
    ae8e:	2201      	movs	r2, #1
    ae90:	f00f fd82 	bl	1a998 <set_chunk_used>

	free_list_add(h, chunk0_size);
    ae94:	4621      	mov	r1, r4
}
    ae96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    ae9a:	f00f be7c 	b.w	1ab96 <free_list_add>
		h->buckets[i].next = 0;
    ae9e:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    aea2:	3301      	adds	r3, #1
    aea4:	e7d0      	b.n	ae48 <sys_heap_init+0xa8>
    aea6:	bf00      	nop
    aea8:	0001fe7d 	.word	0x0001fe7d
    aeac:	0001fdfa 	.word	0x0001fdfa

0000aeb0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    aeb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aeb4:	468b      	mov	fp, r1
    aeb6:	4692      	mov	sl, r2
    aeb8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    aeba:	2500      	movs	r5, #0
{
    aebc:	b091      	sub	sp, #68	; 0x44
    aebe:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    aec0:	f89a 0000 	ldrb.w	r0, [sl]
    aec4:	b908      	cbnz	r0, aeca <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    aec6:	4628      	mov	r0, r5
    aec8:	e35f      	b.n	b58a <cbvprintf+0x6da>
		if (*fp != '%') {
    aeca:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    aecc:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    aed0:	d007      	beq.n	aee2 <cbvprintf+0x32>
			OUTC('%');
    aed2:	4659      	mov	r1, fp
    aed4:	9b02      	ldr	r3, [sp, #8]
    aed6:	4798      	blx	r3
    aed8:	2800      	cmp	r0, #0
    aeda:	f2c0 8356 	blt.w	b58a <cbvprintf+0x6da>
    aede:	3501      	adds	r5, #1
			break;
    aee0:	e212      	b.n	b308 <cbvprintf+0x458>
		} state = {
    aee2:	2218      	movs	r2, #24
    aee4:	2100      	movs	r1, #0
    aee6:	a80a      	add	r0, sp, #40	; 0x28
    aee8:	f010 ff31 	bl	1bd4e <memset>
	if (*sp == '%') {
    aeec:	f89a 3001 	ldrb.w	r3, [sl, #1]
    aef0:	2b25      	cmp	r3, #37	; 0x25
    aef2:	d078      	beq.n	afe6 <cbvprintf+0x136>
    aef4:	2200      	movs	r2, #0
    aef6:	4694      	mov	ip, r2
    aef8:	4696      	mov	lr, r2
    aefa:	4616      	mov	r6, r2
    aefc:	4610      	mov	r0, r2
    aefe:	4639      	mov	r1, r7
		switch (*sp) {
    af00:	f817 3b01 	ldrb.w	r3, [r7], #1
    af04:	2b2b      	cmp	r3, #43	; 0x2b
    af06:	f000 809d 	beq.w	b044 <cbvprintf+0x194>
    af0a:	f200 8094 	bhi.w	b036 <cbvprintf+0x186>
    af0e:	2b20      	cmp	r3, #32
    af10:	f000 809a 	beq.w	b048 <cbvprintf+0x198>
    af14:	2b23      	cmp	r3, #35	; 0x23
    af16:	f000 809a 	beq.w	b04e <cbvprintf+0x19e>
    af1a:	b128      	cbz	r0, af28 <cbvprintf+0x78>
    af1c:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    af20:	f040 0004 	orr.w	r0, r0, #4
    af24:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    af28:	b12e      	cbz	r6, af36 <cbvprintf+0x86>
    af2a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    af2e:	f040 0008 	orr.w	r0, r0, #8
    af32:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    af36:	f1be 0f00 	cmp.w	lr, #0
    af3a:	d005      	beq.n	af48 <cbvprintf+0x98>
    af3c:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    af40:	f040 0010 	orr.w	r0, r0, #16
    af44:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    af48:	f1bc 0f00 	cmp.w	ip, #0
    af4c:	d005      	beq.n	af5a <cbvprintf+0xaa>
    af4e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    af52:	f040 0020 	orr.w	r0, r0, #32
    af56:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    af5a:	b12a      	cbz	r2, af68 <cbvprintf+0xb8>
    af5c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    af60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    af64:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    af68:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    af6c:	f002 0044 	and.w	r0, r2, #68	; 0x44
    af70:	2844      	cmp	r0, #68	; 0x44
    af72:	d103      	bne.n	af7c <cbvprintf+0xcc>
		conv->flag_zero = false;
    af74:	f36f 1286 	bfc	r2, #6, #1
    af78:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    af7c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    af80:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    af82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    af86:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    af8a:	d17b      	bne.n	b084 <cbvprintf+0x1d4>
		conv->width_star = true;
    af8c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
			++sp;
    af90:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    af92:	f042 0201 	orr.w	r2, r2, #1
    af96:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    af9a:	781a      	ldrb	r2, [r3, #0]
    af9c:	2a2e      	cmp	r2, #46	; 0x2e
    af9e:	bf0c      	ite	eq
    afa0:	2101      	moveq	r1, #1
    afa2:	2100      	movne	r1, #0
    afa4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    afa8:	f361 0241 	bfi	r2, r1, #1, #1
    afac:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    afb0:	d174      	bne.n	b09c <cbvprintf+0x1ec>
	if (*sp == '*') {
    afb2:	785a      	ldrb	r2, [r3, #1]
    afb4:	2a2a      	cmp	r2, #42	; 0x2a
    afb6:	d06a      	beq.n	b08e <cbvprintf+0x1de>
	size_t val = 0;
    afb8:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    afba:	260a      	movs	r6, #10
	++sp;
    afbc:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    afbe:	4618      	mov	r0, r3
    afc0:	f810 2b01 	ldrb.w	r2, [r0], #1
    afc4:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    afc8:	2f09      	cmp	r7, #9
    afca:	f240 808e 	bls.w	b0ea <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    afce:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    afd2:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    afd4:	f3c2 0040 	ubfx	r0, r2, #1, #1
    afd8:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    afdc:	f361 0241 	bfi	r2, r1, #1, #1
    afe0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    afe4:	e05a      	b.n	b09c <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    afe6:	f10a 0702 	add.w	r7, sl, #2
    afea:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    afee:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    aff2:	07d9      	lsls	r1, r3, #31
    aff4:	f140 8149 	bpl.w	b28a <cbvprintf+0x3da>
			width = va_arg(ap, int);
    aff8:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    affc:	f1b9 0f00 	cmp.w	r9, #0
    b000:	da07      	bge.n	b012 <cbvprintf+0x162>
				conv->flag_dash = true;
    b002:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
    b006:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    b00a:	f042 0204 	orr.w	r2, r2, #4
    b00e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
    b012:	075a      	lsls	r2, r3, #29
    b014:	f140 8142 	bpl.w	b29c <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    b018:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    b01c:	f1b8 0f00 	cmp.w	r8, #0
    b020:	f280 8141 	bge.w	b2a6 <cbvprintf+0x3f6>
				conv->prec_present = false;
    b024:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    b028:	f36f 0341 	bfc	r3, #1, #1
    b02c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    b030:	f04f 38ff 	mov.w	r8, #4294967295
    b034:	e137      	b.n	b2a6 <cbvprintf+0x3f6>
		switch (*sp) {
    b036:	2b2d      	cmp	r3, #45	; 0x2d
    b038:	d00c      	beq.n	b054 <cbvprintf+0x1a4>
    b03a:	2b30      	cmp	r3, #48	; 0x30
    b03c:	f47f af6d 	bne.w	af1a <cbvprintf+0x6a>
			conv->flag_zero = true;
    b040:	2201      	movs	r2, #1
	} while (loop);
    b042:	e75c      	b.n	aefe <cbvprintf+0x4e>
			conv->flag_plus = true;
    b044:	2601      	movs	r6, #1
    b046:	e75a      	b.n	aefe <cbvprintf+0x4e>
			conv->flag_space = true;
    b048:	f04f 0e01 	mov.w	lr, #1
    b04c:	e757      	b.n	aefe <cbvprintf+0x4e>
			conv->flag_hash = true;
    b04e:	f04f 0c01 	mov.w	ip, #1
    b052:	e754      	b.n	aefe <cbvprintf+0x4e>
		switch (*sp) {
    b054:	2001      	movs	r0, #1
    b056:	e752      	b.n	aefe <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    b058:	4633      	mov	r3, r6
    b05a:	fb0c 0202 	mla	r2, ip, r2, r0
    b05e:	3a30      	subs	r2, #48	; 0x30
    b060:	461e      	mov	r6, r3
    b062:	f816 0b01 	ldrb.w	r0, [r6], #1
    b066:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    b06a:	2f09      	cmp	r7, #9
    b06c:	d9f4      	bls.n	b058 <cbvprintf+0x1a8>
	if (sp != wp) {
    b06e:	4299      	cmp	r1, r3
    b070:	d093      	beq.n	af9a <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    b072:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    b076:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    b078:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    b07a:	f362 0141 	bfi	r1, r2, #1, #1
    b07e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    b082:	e78a      	b.n	af9a <cbvprintf+0xea>
    b084:	460b      	mov	r3, r1
	size_t val = 0;
    b086:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    b088:	f04f 0c0a 	mov.w	ip, #10
    b08c:	e7e8      	b.n	b060 <cbvprintf+0x1b0>
		conv->prec_star = true;
    b08e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    b092:	3302      	adds	r3, #2
		conv->prec_star = true;
    b094:	f042 0204 	orr.w	r2, r2, #4
    b098:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
    b09c:	461f      	mov	r7, r3
    b09e:	f817 2b01 	ldrb.w	r2, [r7], #1
    b0a2:	2a6c      	cmp	r2, #108	; 0x6c
    b0a4:	d041      	beq.n	b12a <cbvprintf+0x27a>
    b0a6:	d825      	bhi.n	b0f4 <cbvprintf+0x244>
    b0a8:	2a68      	cmp	r2, #104	; 0x68
    b0aa:	d02b      	beq.n	b104 <cbvprintf+0x254>
    b0ac:	2a6a      	cmp	r2, #106	; 0x6a
    b0ae:	d046      	beq.n	b13e <cbvprintf+0x28e>
    b0b0:	2a4c      	cmp	r2, #76	; 0x4c
    b0b2:	d04c      	beq.n	b14e <cbvprintf+0x29e>
    b0b4:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    b0b6:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    b0ba:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
    b0be:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    b0c0:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    b0c4:	f200 80d9 	bhi.w	b27a <cbvprintf+0x3ca>
    b0c8:	2a57      	cmp	r2, #87	; 0x57
    b0ca:	d84d      	bhi.n	b168 <cbvprintf+0x2b8>
    b0cc:	2a41      	cmp	r2, #65	; 0x41
    b0ce:	d003      	beq.n	b0d8 <cbvprintf+0x228>
    b0d0:	3a45      	subs	r2, #69	; 0x45
    b0d2:	2a02      	cmp	r2, #2
    b0d4:	f200 80d1 	bhi.w	b27a <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    b0d8:	2204      	movs	r2, #4
    b0da:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    b0de:	f362 0302 	bfi	r3, r2, #0, #3
    b0e2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    b0e6:	2301      	movs	r3, #1
			break;
    b0e8:	e09e      	b.n	b228 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    b0ea:	fb06 2101 	mla	r1, r6, r1, r2
    b0ee:	4603      	mov	r3, r0
    b0f0:	3930      	subs	r1, #48	; 0x30
    b0f2:	e764      	b.n	afbe <cbvprintf+0x10e>
	switch (*sp) {
    b0f4:	2a74      	cmp	r2, #116	; 0x74
    b0f6:	d026      	beq.n	b146 <cbvprintf+0x296>
    b0f8:	2a7a      	cmp	r2, #122	; 0x7a
    b0fa:	d1db      	bne.n	b0b4 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    b0fc:	2206      	movs	r2, #6
    b0fe:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    b102:	e00d      	b.n	b120 <cbvprintf+0x270>
		if (*++sp == 'h') {
    b104:	785a      	ldrb	r2, [r3, #1]
    b106:	2a68      	cmp	r2, #104	; 0x68
    b108:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    b10c:	d106      	bne.n	b11c <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    b10e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    b110:	f361 02c6 	bfi	r2, r1, #3, #4
    b114:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    b118:	1c9f      	adds	r7, r3, #2
    b11a:	e7cc      	b.n	b0b6 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    b11c:	4613      	mov	r3, r2
    b11e:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    b120:	f362 03c6 	bfi	r3, r2, #3, #4
    b124:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    b128:	e7c5      	b.n	b0b6 <cbvprintf+0x206>
		if (*++sp == 'l') {
    b12a:	785a      	ldrb	r2, [r3, #1]
    b12c:	2a6c      	cmp	r2, #108	; 0x6c
    b12e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    b132:	d101      	bne.n	b138 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    b134:	2104      	movs	r1, #4
    b136:	e7eb      	b.n	b110 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    b138:	4613      	mov	r3, r2
    b13a:	2203      	movs	r2, #3
    b13c:	e7f0      	b.n	b120 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    b13e:	2205      	movs	r2, #5
    b140:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    b144:	e7ec      	b.n	b120 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    b146:	2207      	movs	r2, #7
    b148:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    b14c:	e7e8      	b.n	b120 <cbvprintf+0x270>
		conv->unsupported = true;
    b14e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    b152:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    b156:	f023 0302 	bic.w	r3, r3, #2
    b15a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    b15e:	f043 0302 	orr.w	r3, r3, #2
    b162:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    b166:	e7a6      	b.n	b0b6 <cbvprintf+0x206>
    b168:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    b16c:	2920      	cmp	r1, #32
    b16e:	f200 8084 	bhi.w	b27a <cbvprintf+0x3ca>
    b172:	a001      	add	r0, pc, #4	; (adr r0, b178 <cbvprintf+0x2c8>)
    b174:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    b178:	0000b23d 	.word	0x0000b23d
    b17c:	0000b27b 	.word	0x0000b27b
    b180:	0000b27b 	.word	0x0000b27b
    b184:	0000b27b 	.word	0x0000b27b
    b188:	0000b27b 	.word	0x0000b27b
    b18c:	0000b27b 	.word	0x0000b27b
    b190:	0000b27b 	.word	0x0000b27b
    b194:	0000b27b 	.word	0x0000b27b
    b198:	0000b27b 	.word	0x0000b27b
    b19c:	0000b0d9 	.word	0x0000b0d9
    b1a0:	0000b27b 	.word	0x0000b27b
    b1a4:	0000b23d 	.word	0x0000b23d
    b1a8:	0000b1fd 	.word	0x0000b1fd
    b1ac:	0000b0d9 	.word	0x0000b0d9
    b1b0:	0000b0d9 	.word	0x0000b0d9
    b1b4:	0000b0d9 	.word	0x0000b0d9
    b1b8:	0000b27b 	.word	0x0000b27b
    b1bc:	0000b1fd 	.word	0x0000b1fd
    b1c0:	0000b27b 	.word	0x0000b27b
    b1c4:	0000b27b 	.word	0x0000b27b
    b1c8:	0000b27b 	.word	0x0000b27b
    b1cc:	0000b27b 	.word	0x0000b27b
    b1d0:	0000b245 	.word	0x0000b245
    b1d4:	0000b23d 	.word	0x0000b23d
    b1d8:	0000b261 	.word	0x0000b261
    b1dc:	0000b27b 	.word	0x0000b27b
    b1e0:	0000b27b 	.word	0x0000b27b
    b1e4:	0000b261 	.word	0x0000b261
    b1e8:	0000b27b 	.word	0x0000b27b
    b1ec:	0000b23d 	.word	0x0000b23d
    b1f0:	0000b27b 	.word	0x0000b27b
    b1f4:	0000b27b 	.word	0x0000b27b
    b1f8:	0000b23d 	.word	0x0000b23d
		conv->specifier_cat = SPECIFIER_SINT;
    b1fc:	2001      	movs	r0, #1
    b1fe:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    b202:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    b206:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    b20a:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    b20c:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    b210:	bf02      	ittt	eq
    b212:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    b216:	f041 0101 	orreq.w	r1, r1, #1
    b21a:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    b21e:	2a63      	cmp	r2, #99	; 0x63
    b220:	d131      	bne.n	b286 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    b222:	3b00      	subs	r3, #0
    b224:	bf18      	it	ne
    b226:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    b228:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    b22c:	f3c2 0140 	ubfx	r1, r2, #1, #1
    b230:	430b      	orrs	r3, r1
    b232:	f363 0241 	bfi	r2, r3, #1, #1
    b236:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    b23a:	e6d8      	b.n	afee <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    b23c:	2002      	movs	r0, #2
    b23e:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    b242:	e7de      	b.n	b202 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    b244:	2103      	movs	r1, #3
    b246:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    b24a:	f003 0378 	and.w	r3, r3, #120	; 0x78
    b24e:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    b252:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    b256:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    b258:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    b25c:	4143      	adcs	r3, r0
    b25e:	e7e3      	b.n	b228 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    b260:	2103      	movs	r1, #3
    b262:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    b266:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    b26a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    b26e:	bf14      	ite	ne
    b270:	2301      	movne	r3, #1
    b272:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
    b274:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    b278:	e7d6      	b.n	b228 <cbvprintf+0x378>
		conv->invalid = true;
    b27a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    b27e:	f043 0301 	orr.w	r3, r3, #1
    b282:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    b286:	2300      	movs	r3, #0
    b288:	e7ce      	b.n	b228 <cbvprintf+0x378>
		} else if (conv->width_present) {
    b28a:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    b28e:	2a00      	cmp	r2, #0
		int width = -1;
    b290:	bfac      	ite	ge
    b292:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    b296:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
    b29a:	e6ba      	b.n	b012 <cbvprintf+0x162>
		} else if (conv->prec_present) {
    b29c:	079b      	lsls	r3, r3, #30
    b29e:	f57f aec7 	bpl.w	b030 <cbvprintf+0x180>
			precision = conv->prec_value;
    b2a2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
    b2a6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    b2a8:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    b2ac:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
    b2b0:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
    b2b4:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    b2b8:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    b2ba:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    b2be:	d138      	bne.n	b332 <cbvprintf+0x482>
			switch (length_mod) {
    b2c0:	1ecb      	subs	r3, r1, #3
    b2c2:	2b04      	cmp	r3, #4
    b2c4:	d822      	bhi.n	b30c <cbvprintf+0x45c>
    b2c6:	e8df f003 	tbb	[pc, r3]
    b2ca:	0903      	.short	0x0903
    b2cc:	2109      	.short	0x2109
    b2ce:	21          	.byte	0x21
    b2cf:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    b2d0:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    b2d4:	17da      	asrs	r2, r3, #31
    b2d6:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    b2da:	e006      	b.n	b2ea <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    b2dc:	3407      	adds	r4, #7
    b2de:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    b2e2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    b2e6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    b2ea:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    b2ee:	f013 0603 	ands.w	r6, r3, #3
    b2f2:	d056      	beq.n	b3a2 <cbvprintf+0x4f2>
			OUTS(sp, fp);
    b2f4:	463b      	mov	r3, r7
    b2f6:	4652      	mov	r2, sl
    b2f8:	4659      	mov	r1, fp
    b2fa:	9802      	ldr	r0, [sp, #8]
    b2fc:	f00f fd48 	bl	1ad90 <outs>
    b300:	2800      	cmp	r0, #0
    b302:	f2c0 8142 	blt.w	b58a <cbvprintf+0x6da>
    b306:	4405      	add	r5, r0
			continue;
    b308:	46ba      	mov	sl, r7
    b30a:	e5d9      	b.n	aec0 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    b30c:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    b310:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    b312:	ea4f 72e3 	mov.w	r2, r3, asr #31
    b316:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    b31a:	d105      	bne.n	b328 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
    b31c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    b320:	930a      	str	r3, [sp, #40]	; 0x28
    b322:	2300      	movs	r3, #0
    b324:	930b      	str	r3, [sp, #44]	; 0x2c
    b326:	e7e0      	b.n	b2ea <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
    b328:	2902      	cmp	r1, #2
    b32a:	d1de      	bne.n	b2ea <cbvprintf+0x43a>
				value->sint = (short)value->sint;
    b32c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    b330:	e7d0      	b.n	b2d4 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    b332:	2b02      	cmp	r3, #2
    b334:	d123      	bne.n	b37e <cbvprintf+0x4ce>
			switch (length_mod) {
    b336:	1ecb      	subs	r3, r1, #3
    b338:	2b04      	cmp	r3, #4
    b33a:	d813      	bhi.n	b364 <cbvprintf+0x4b4>
    b33c:	e8df f003 	tbb	[pc, r3]
    b340:	120a0a03 	.word	0x120a0a03
    b344:	12          	.byte	0x12
    b345:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
    b346:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
    b348:	6822      	ldr	r2, [r4, #0]
				value->sint = va_arg(ap, int);
    b34a:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    b34c:	920a      	str	r2, [sp, #40]	; 0x28
    b34e:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    b350:	4604      	mov	r4, r0
    b352:	e7ca      	b.n	b2ea <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
    b354:	1de0      	adds	r0, r4, #7
    b356:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    b35a:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    b35e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    b362:	e7f5      	b.n	b350 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
    b364:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    b368:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    b36a:	930a      	str	r3, [sp, #40]	; 0x28
    b36c:	f04f 0300 	mov.w	r3, #0
    b370:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    b372:	d0d3      	beq.n	b31c <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
    b374:	2902      	cmp	r1, #2
    b376:	d1b8      	bne.n	b2ea <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
    b378:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    b37c:	e7d0      	b.n	b320 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
    b37e:	2b04      	cmp	r3, #4
    b380:	d109      	bne.n	b396 <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
    b382:	1de3      	adds	r3, r4, #7
    b384:	f023 0307 	bic.w	r3, r3, #7
    b388:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    b38c:	e9d3 2300 	ldrd	r2, r3, [r3]
    b390:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    b394:	e7a9      	b.n	b2ea <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    b396:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    b398:	bf04      	itt	eq
    b39a:	f854 3b04 	ldreq.w	r3, [r4], #4
    b39e:	930a      	streq	r3, [sp, #40]	; 0x28
    b3a0:	e7a3      	b.n	b2ea <cbvprintf+0x43a>
		switch (conv->specifier) {
    b3a2:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    b3a6:	2878      	cmp	r0, #120	; 0x78
    b3a8:	d8ae      	bhi.n	b308 <cbvprintf+0x458>
    b3aa:	2862      	cmp	r0, #98	; 0x62
    b3ac:	d822      	bhi.n	b3f4 <cbvprintf+0x544>
    b3ae:	2825      	cmp	r0, #37	; 0x25
    b3b0:	f43f ad8f 	beq.w	aed2 <cbvprintf+0x22>
    b3b4:	2858      	cmp	r0, #88	; 0x58
    b3b6:	d1a7      	bne.n	b308 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    b3b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    b3bc:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    b3c0:	9300      	str	r3, [sp, #0]
    b3c2:	aa0c      	add	r2, sp, #48	; 0x30
    b3c4:	ab04      	add	r3, sp, #16
    b3c6:	f00f fc9d 	bl	1ad04 <encode_uint>
    b3ca:	4682      	mov	sl, r0
			if (precision >= 0) {
    b3cc:	f1b8 0f00 	cmp.w	r8, #0
    b3d0:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    b3d4:	db0c      	blt.n	b3f0 <cbvprintf+0x540>
				conv->flag_zero = false;
    b3d6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    b3da:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    b3de:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    b3e2:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    b3e4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    b3e8:	d902      	bls.n	b3f0 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
    b3ea:	eba8 0303 	sub.w	r3, r8, r3
    b3ee:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    b3f0:	4680      	mov	r8, r0
    b3f2:	e03d      	b.n	b470 <cbvprintf+0x5c0>
    b3f4:	3863      	subs	r0, #99	; 0x63
    b3f6:	2815      	cmp	r0, #21
    b3f8:	d886      	bhi.n	b308 <cbvprintf+0x458>
    b3fa:	a201      	add	r2, pc, #4	; (adr r2, b400 <cbvprintf+0x550>)
    b3fc:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    b400:	0000b481 	.word	0x0000b481
    b404:	0000b4e5 	.word	0x0000b4e5
    b408:	0000b309 	.word	0x0000b309
    b40c:	0000b309 	.word	0x0000b309
    b410:	0000b309 	.word	0x0000b309
    b414:	0000b309 	.word	0x0000b309
    b418:	0000b4e5 	.word	0x0000b4e5
    b41c:	0000b309 	.word	0x0000b309
    b420:	0000b309 	.word	0x0000b309
    b424:	0000b309 	.word	0x0000b309
    b428:	0000b309 	.word	0x0000b309
    b42c:	0000b53f 	.word	0x0000b53f
    b430:	0000b50d 	.word	0x0000b50d
    b434:	0000b511 	.word	0x0000b511
    b438:	0000b309 	.word	0x0000b309
    b43c:	0000b309 	.word	0x0000b309
    b440:	0000b459 	.word	0x0000b459
    b444:	0000b309 	.word	0x0000b309
    b448:	0000b50d 	.word	0x0000b50d
    b44c:	0000b309 	.word	0x0000b309
    b450:	0000b309 	.word	0x0000b309
    b454:	0000b50d 	.word	0x0000b50d
			if (precision >= 0) {
    b458:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    b45c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    b460:	db0a      	blt.n	b478 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    b462:	4641      	mov	r1, r8
    b464:	4650      	mov	r0, sl
    b466:	f010 fc10 	bl	1bc8a <strnlen>
		char sign = 0;
    b46a:	2600      	movs	r6, #0
			bpe = bps + len;
    b46c:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
    b470:	f1ba 0f00 	cmp.w	sl, #0
    b474:	d10c      	bne.n	b490 <cbvprintf+0x5e0>
    b476:	e747      	b.n	b308 <cbvprintf+0x458>
				len = strlen(bps);
    b478:	4650      	mov	r0, sl
    b47a:	f010 fbff 	bl	1bc7c <strlen>
    b47e:	e7f4      	b.n	b46a <cbvprintf+0x5ba>
			break;
    b480:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    b482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bps = buf;
    b484:	f10d 0a10 	add.w	sl, sp, #16
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    b488:	f88d 3010 	strb.w	r3, [sp, #16]
			bpe = buf + 1;
    b48c:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    b490:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    b494:	b106      	cbz	r6, b498 <cbvprintf+0x5e8>
			nj_len += 1U;
    b496:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    b498:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    b49c:	06d0      	lsls	r0, r2, #27
    b49e:	d568      	bpl.n	b572 <cbvprintf+0x6c2>
			nj_len += 2U;
    b4a0:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    b4a2:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    b4a4:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    b4a6:	bf48      	it	mi
    b4a8:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    b4aa:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    b4ac:	bf48      	it	mi
    b4ae:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    b4b0:	f1b9 0f00 	cmp.w	r9, #0
    b4b4:	dd76      	ble.n	b5a4 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    b4b6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    b4ba:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    b4be:	f3c2 0380 	ubfx	r3, r2, #2, #1
    b4c2:	9303      	str	r3, [sp, #12]
    b4c4:	0753      	lsls	r3, r2, #29
    b4c6:	d46d      	bmi.n	b5a4 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    b4c8:	0650      	lsls	r0, r2, #25
    b4ca:	d561      	bpl.n	b590 <cbvprintf+0x6e0>
					if (sign != 0) {
    b4cc:	b146      	cbz	r6, b4e0 <cbvprintf+0x630>
						OUTC(sign);
    b4ce:	4659      	mov	r1, fp
    b4d0:	4630      	mov	r0, r6
    b4d2:	9b02      	ldr	r3, [sp, #8]
    b4d4:	4798      	blx	r3
    b4d6:	2800      	cmp	r0, #0
    b4d8:	db57      	blt.n	b58a <cbvprintf+0x6da>
						sign = 0;
    b4da:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    b4dc:	3501      	adds	r5, #1
						sign = 0;
    b4de:	461e      	mov	r6, r3
					pad = '0';
    b4e0:	2330      	movs	r3, #48	; 0x30
    b4e2:	e056      	b.n	b592 <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    b4e4:	071e      	lsls	r6, r3, #28
    b4e6:	d40f      	bmi.n	b508 <cbvprintf+0x658>
				sign = ' ';
    b4e8:	f013 0610 	ands.w	r6, r3, #16
    b4ec:	bf18      	it	ne
    b4ee:	2620      	movne	r6, #32
			if (value->sint < 0) {
    b4f0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    b4f4:	2b00      	cmp	r3, #0
    b4f6:	f6bf af5f 	bge.w	b3b8 <cbvprintf+0x508>
				value->uint = (uint_value_type)-value->sint;
    b4fa:	4252      	negs	r2, r2
    b4fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    b500:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-value->sint;
    b502:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    b506:	e757      	b.n	b3b8 <cbvprintf+0x508>
				sign = '+';
    b508:	262b      	movs	r6, #43	; 0x2b
    b50a:	e7f1      	b.n	b4f0 <cbvprintf+0x640>
		switch (conv->specifier) {
    b50c:	2600      	movs	r6, #0
    b50e:	e753      	b.n	b3b8 <cbvprintf+0x508>
			if (value->ptr != NULL) {
    b510:	980a      	ldr	r0, [sp, #40]	; 0x28
    b512:	b340      	cbz	r0, b566 <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    b514:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    b518:	9300      	str	r3, [sp, #0]
    b51a:	2100      	movs	r1, #0
    b51c:	ab04      	add	r3, sp, #16
    b51e:	aa0c      	add	r2, sp, #48	; 0x30
    b520:	f00f fbf0 	bl	1ad04 <encode_uint>
				conv->altform_0c = true;
    b524:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
    b528:	4682      	mov	sl, r0
				conv->altform_0c = true;
    b52a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    b52e:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    b532:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    b536:	2600      	movs	r6, #0
				conv->altform_0c = true;
    b538:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
    b53c:	e746      	b.n	b3cc <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    b53e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    b540:	2907      	cmp	r1, #7
    b542:	f63f aee1 	bhi.w	b308 <cbvprintf+0x458>
    b546:	e8df f001 	tbb	[pc, r1]
    b54a:	040c      	.short	0x040c
    b54c:	08080c06 	.word	0x08080c06
    b550:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    b552:	701d      	strb	r5, [r3, #0]
		break;
    b554:	e6d8      	b.n	b308 <cbvprintf+0x458>
		*(short *)dp = (short)count;
    b556:	801d      	strh	r5, [r3, #0]
		break;
    b558:	e6d6      	b.n	b308 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    b55a:	17ea      	asrs	r2, r5, #31
    b55c:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    b560:	e6d2      	b.n	b308 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    b562:	601d      	str	r5, [r3, #0]
		break;
    b564:	e6d0      	b.n	b308 <cbvprintf+0x458>
			bps = "(nil)";
    b566:	f8df a0c8 	ldr.w	sl, [pc, #200]	; b630 <cbvprintf+0x780>
    b56a:	4606      	mov	r6, r0
			bpe = bps + 5;
    b56c:	f10a 0805 	add.w	r8, sl, #5
    b570:	e78e      	b.n	b490 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    b572:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    b574:	bf48      	it	mi
    b576:	3301      	addmi	r3, #1
    b578:	e793      	b.n	b4a2 <cbvprintf+0x5f2>
					OUTC(pad);
    b57a:	4618      	mov	r0, r3
    b57c:	9303      	str	r3, [sp, #12]
    b57e:	4659      	mov	r1, fp
    b580:	9b02      	ldr	r3, [sp, #8]
    b582:	4798      	blx	r3
    b584:	2800      	cmp	r0, #0
    b586:	9b03      	ldr	r3, [sp, #12]
    b588:	da04      	bge.n	b594 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    b58a:	b011      	add	sp, #68	; 0x44
    b58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    b590:	2320      	movs	r3, #32
    b592:	444d      	add	r5, r9
    b594:	464a      	mov	r2, r9
				while (width-- > 0) {
    b596:	2a00      	cmp	r2, #0
    b598:	eba5 0109 	sub.w	r1, r5, r9
    b59c:	f109 39ff 	add.w	r9, r9, #4294967295
    b5a0:	dceb      	bgt.n	b57a <cbvprintf+0x6ca>
    b5a2:	460d      	mov	r5, r1
		if (sign != 0) {
    b5a4:	b136      	cbz	r6, b5b4 <cbvprintf+0x704>
			OUTC(sign);
    b5a6:	4659      	mov	r1, fp
    b5a8:	4630      	mov	r0, r6
    b5aa:	9b02      	ldr	r3, [sp, #8]
    b5ac:	4798      	blx	r3
    b5ae:	2800      	cmp	r0, #0
    b5b0:	dbeb      	blt.n	b58a <cbvprintf+0x6da>
    b5b2:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    b5b4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    b5b8:	06d9      	lsls	r1, r3, #27
    b5ba:	d401      	bmi.n	b5c0 <cbvprintf+0x710>
    b5bc:	071a      	lsls	r2, r3, #28
    b5be:	d506      	bpl.n	b5ce <cbvprintf+0x71e>
				OUTC('0');
    b5c0:	4659      	mov	r1, fp
    b5c2:	2030      	movs	r0, #48	; 0x30
    b5c4:	9b02      	ldr	r3, [sp, #8]
    b5c6:	4798      	blx	r3
    b5c8:	2800      	cmp	r0, #0
    b5ca:	dbde      	blt.n	b58a <cbvprintf+0x6da>
    b5cc:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    b5ce:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    b5d2:	06db      	lsls	r3, r3, #27
    b5d4:	d507      	bpl.n	b5e6 <cbvprintf+0x736>
				OUTC(conv->specifier);
    b5d6:	4659      	mov	r1, fp
    b5d8:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    b5dc:	9b02      	ldr	r3, [sp, #8]
    b5de:	4798      	blx	r3
    b5e0:	2800      	cmp	r0, #0
    b5e2:	dbd2      	blt.n	b58a <cbvprintf+0x6da>
    b5e4:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    b5e6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    b5e8:	442e      	add	r6, r5
    b5ea:	1b73      	subs	r3, r6, r5
    b5ec:	2b00      	cmp	r3, #0
    b5ee:	dc16      	bgt.n	b61e <cbvprintf+0x76e>
			OUTS(bps, bpe);
    b5f0:	4643      	mov	r3, r8
    b5f2:	4652      	mov	r2, sl
    b5f4:	4659      	mov	r1, fp
    b5f6:	9802      	ldr	r0, [sp, #8]
    b5f8:	f00f fbca 	bl	1ad90 <outs>
    b5fc:	2800      	cmp	r0, #0
    b5fe:	dbc4      	blt.n	b58a <cbvprintf+0x6da>
    b600:	4405      	add	r5, r0
		while (width > 0) {
    b602:	44a9      	add	r9, r5
    b604:	eba9 0305 	sub.w	r3, r9, r5
    b608:	2b00      	cmp	r3, #0
    b60a:	f77f ae7d 	ble.w	b308 <cbvprintf+0x458>
			OUTC(' ');
    b60e:	4659      	mov	r1, fp
    b610:	2020      	movs	r0, #32
    b612:	9b02      	ldr	r3, [sp, #8]
    b614:	4798      	blx	r3
    b616:	2800      	cmp	r0, #0
    b618:	dbb7      	blt.n	b58a <cbvprintf+0x6da>
    b61a:	3501      	adds	r5, #1
			--width;
    b61c:	e7f2      	b.n	b604 <cbvprintf+0x754>
				OUTC('0');
    b61e:	4659      	mov	r1, fp
    b620:	2030      	movs	r0, #48	; 0x30
    b622:	9b02      	ldr	r3, [sp, #8]
    b624:	4798      	blx	r3
    b626:	2800      	cmp	r0, #0
    b628:	dbaf      	blt.n	b58a <cbvprintf+0x6da>
    b62a:	3501      	adds	r5, #1
    b62c:	e7dd      	b.n	b5ea <cbvprintf+0x73a>
    b62e:	bf00      	nop
    b630:	0001fe9e 	.word	0x0001fe9e

0000b634 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    b634:	b148      	cbz	r0, b64a <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    b636:	4b05      	ldr	r3, [pc, #20]	; (b64c <arch_busy_wait+0x18>)
    b638:	681a      	ldr	r2, [r3, #0]
    b63a:	4b05      	ldr	r3, [pc, #20]	; (b650 <arch_busy_wait+0x1c>)
    b63c:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    b640:	4b04      	ldr	r3, [pc, #16]	; (b654 <arch_busy_wait+0x20>)
    delay_cycles(cycles);
    b642:	4350      	muls	r0, r2
    b644:	f043 0301 	orr.w	r3, r3, #1
    b648:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    b64a:	4770      	bx	lr
    b64c:	2000851c 	.word	0x2000851c
    b650:	000f4240 	.word	0x000f4240
    b654:	0001e7f0 	.word	0x0001e7f0

0000b658 <virtio_set_status>:
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
    b658:	4b01      	ldr	r3, [pc, #4]	; (b660 <virtio_set_status+0x8>)
    b65a:	7019      	strb	r1, [r3, #0]
}

static void virtio_set_status(struct virtio_device *vdev, unsigned char status)
{
	sys_write8(status, VDEV_STATUS_ADDR);
}
    b65c:	4770      	bx	lr
    b65e:	bf00      	nop
    b660:	20070000 	.word	0x20070000

0000b664 <init_status_flag>:
    b664:	2000      	movs	r0, #0
    b666:	4b01      	ldr	r3, [pc, #4]	; (b66c <init_status_flag+0x8>)
    b668:	7018      	strb	r0, [r3, #0]
int init_status_flag(const struct device *arg)
{
	virtio_set_status(NULL, 0);

	return 0;
}
    b66a:	4770      	bx	lr
    b66c:	20070000 	.word	0x20070000

0000b670 <ipm_callback_process>:
	virtqueue_notification(vq[VIRTQUEUE_ID]);
    b670:	4b01      	ldr	r3, [pc, #4]	; (b678 <ipm_callback_process+0x8>)
    b672:	6818      	ldr	r0, [r3, #0]
    b674:	f012 baf8 	b.w	1dc68 <virtqueue_notification>
    b678:	2000a698 	.word	0x2000a698

0000b67c <virtio_notify>:
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    b67c:	4b0a      	ldr	r3, [pc, #40]	; (b6a8 <virtio_notify+0x2c>)
{
    b67e:	b513      	push	{r0, r1, r4, lr}
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    b680:	6818      	ldr	r0, [r3, #0]
				  const void *data, int size)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->send(ipmdev, wait, id, data, size);
    b682:	2300      	movs	r3, #0
    b684:	6882      	ldr	r2, [r0, #8]
    b686:	9300      	str	r3, [sp, #0]
    b688:	6814      	ldr	r4, [r2, #0]
    b68a:	4619      	mov	r1, r3
    b68c:	461a      	mov	r2, r3
    b68e:	47a0      	blx	r4
	if (status != 0) {
    b690:	4602      	mov	r2, r0
    b692:	b130      	cbz	r0, b6a2 <virtio_notify+0x26>
		LOG_ERR("ipm_send failed to notify: %d", status);
    b694:	2145      	movs	r1, #69	; 0x45
    b696:	4805      	ldr	r0, [pc, #20]	; (b6ac <virtio_notify+0x30>)
}
    b698:	b002      	add	sp, #8
    b69a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("ipm_send failed to notify: %d", status);
    b69e:	f00f b8e7 	b.w	1a870 <printk>
}
    b6a2:	b002      	add	sp, #8
    b6a4:	bd10      	pop	{r4, pc}
    b6a6:	bf00      	nop
    b6a8:	2000a688 	.word	0x2000a688
    b6ac:	0001fed0 	.word	0x0001fed0

0000b6b0 <ipm_callback>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b6b0:	4907      	ldr	r1, [pc, #28]	; (b6d0 <ipm_callback+0x20>)
    b6b2:	e8d1 3fef 	ldaex	r3, [r1]
    b6b6:	f043 0201 	orr.w	r2, r3, #1
    b6ba:	e8c1 2fe0 	stlex	r0, r2, [r1]
    b6be:	2800      	cmp	r0, #0
    b6c0:	d1f7      	bne.n	b6b2 <ipm_callback+0x2>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    b6c2:	07db      	lsls	r3, r3, #31
    b6c4:	d403      	bmi.n	b6ce <ipm_callback+0x1e>
		k_queue_append(&work_q->queue, work);
    b6c6:	4803      	ldr	r0, [pc, #12]	; (b6d4 <ipm_callback+0x24>)
    b6c8:	3908      	subs	r1, #8
    b6ca:	f012 bc8e 	b.w	1dfea <k_queue_append>
}
    b6ce:	4770      	bx	lr
    b6d0:	2000a694 	.word	0x2000a694
    b6d4:	200089b0 	.word	0x200089b0

0000b6d8 <rpmsg_backend_init>:
{
    b6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b6da:	4b47      	ldr	r3, [pc, #284]	; (b7f8 <rpmsg_backend_init+0x120>)
{
    b6dc:	b085      	sub	sp, #20
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b6de:	ac02      	add	r4, sp, #8
{
    b6e0:	4606      	mov	r6, r0
    b6e2:	460d      	mov	r5, r1
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b6e4:	e893 0003 	ldmia.w	r3, {r0, r1}
	k_work_q_start(&ipm_work_q, ipm_stack_area,
    b6e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b6ec:	e884 0003 	stmia.w	r4, {r0, r1}
	k_work_q_start(&ipm_work_q, ipm_stack_area,
    b6f0:	f04f 33ff 	mov.w	r3, #4294967295
    b6f4:	4941      	ldr	r1, [pc, #260]	; (b7fc <rpmsg_backend_init+0x124>)
    b6f6:	4842      	ldr	r0, [pc, #264]	; (b800 <rpmsg_backend_init+0x128>)
    b6f8:	f00e f91e 	bl	19938 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
    b6fc:	4941      	ldr	r1, [pc, #260]	; (b804 <rpmsg_backend_init+0x12c>)
    b6fe:	4842      	ldr	r0, [pc, #264]	; (b808 <rpmsg_backend_init+0x130>)
    b700:	f012 fce5 	bl	1e0ce <z_impl_k_thread_name_set>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    b704:	2200      	movs	r2, #0
    b706:	4b41      	ldr	r3, [pc, #260]	; (b80c <rpmsg_backend_init+0x134>)
    b708:	4941      	ldr	r1, [pc, #260]	; (b810 <rpmsg_backend_init+0x138>)
	err = metal_init(&metal_params);
    b70a:	4620      	mov	r0, r4
    b70c:	e9c3 1201 	strd	r1, r2, [r3, #4]
    b710:	601a      	str	r2, [r3, #0]
    b712:	f00b fde7 	bl	172e4 <metal_init>
	if (err) {
    b716:	4604      	mov	r4, r0
    b718:	b138      	cbz	r0, b72a <rpmsg_backend_init+0x52>
		LOG_ERR("metal_init: failed - error code %d", err);
    b71a:	2145      	movs	r1, #69	; 0x45
    b71c:	4602      	mov	r2, r0
    b71e:	483d      	ldr	r0, [pc, #244]	; (b814 <rpmsg_backend_init+0x13c>)
		LOG_ERR("Couldn't register shared memory device: %d", err);
    b720:	f00f f8a6 	bl	1a870 <printk>
}
    b724:	4620      	mov	r0, r4
    b726:	b005      	add	sp, #20
    b728:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = metal_register_generic_device(&shm_device);
    b72a:	483b      	ldr	r0, [pc, #236]	; (b818 <rpmsg_backend_init+0x140>)
    b72c:	f00b fdba 	bl	172a4 <metal_register_generic_device>
	if (err) {
    b730:	4604      	mov	r4, r0
    b732:	b118      	cbz	r0, b73c <rpmsg_backend_init+0x64>
		LOG_ERR("Couldn't register shared memory device: %d", err);
    b734:	4602      	mov	r2, r0
    b736:	2145      	movs	r1, #69	; 0x45
    b738:	4838      	ldr	r0, [pc, #224]	; (b81c <rpmsg_backend_init+0x144>)
    b73a:	e7f1      	b.n	b720 <rpmsg_backend_init+0x48>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    b73c:	4938      	ldr	r1, [pc, #224]	; (b820 <rpmsg_backend_init+0x148>)
    b73e:	4839      	ldr	r0, [pc, #228]	; (b824 <rpmsg_backend_init+0x14c>)
    b740:	aa01      	add	r2, sp, #4
    b742:	f012 f811 	bl	1d768 <metal_device_open>
	if (err) {
    b746:	4604      	mov	r4, r0
    b748:	b118      	cbz	r0, b752 <rpmsg_backend_init+0x7a>
		LOG_ERR("metal_device_open failed: %d", err);
    b74a:	4602      	mov	r2, r0
    b74c:	2145      	movs	r1, #69	; 0x45
    b74e:	4836      	ldr	r0, [pc, #216]	; (b828 <rpmsg_backend_init+0x150>)
    b750:	e7e6      	b.n	b720 <rpmsg_backend_init+0x48>
	*io = metal_device_io_region(device, 0);
    b752:	9b01      	ldr	r3, [sp, #4]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    b754:	689a      	ldr	r2, [r3, #8]
    b756:	b92a      	cbnz	r2, b764 <rpmsg_backend_init+0x8c>
    b758:	6030      	str	r0, [r6, #0]
		LOG_ERR("metal_device_io_region failed to get region");
    b75a:	2145      	movs	r1, #69	; 0x45
    b75c:	4833      	ldr	r0, [pc, #204]	; (b82c <rpmsg_backend_init+0x154>)
    b75e:	f00f f887 	bl	1a870 <printk>
		return err;
    b762:	e7df      	b.n	b724 <rpmsg_backend_init+0x4c>
    b764:	330c      	adds	r3, #12
	*io = metal_device_io_region(device, 0);
    b766:	6033      	str	r3, [r6, #0]
	if (!*io) {
    b768:	2b00      	cmp	r3, #0
    b76a:	d0f6      	beq.n	b75a <rpmsg_backend_init+0x82>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    b76c:	4830      	ldr	r0, [pc, #192]	; (b830 <rpmsg_backend_init+0x158>)
    b76e:	f00c f8d1 	bl	17914 <z_impl_device_get_binding>
	ipm_tx_handle = device_get_binding(CONFIG_RPMSG_SERVICE_IPM_TX_NAME);
    b772:	4f30      	ldr	r7, [pc, #192]	; (b834 <rpmsg_backend_init+0x15c>)
    b774:	6038      	str	r0, [r7, #0]
    b776:	4830      	ldr	r0, [pc, #192]	; (b838 <rpmsg_backend_init+0x160>)
    b778:	f00c f8cc 	bl	17914 <z_impl_device_get_binding>
	if (!ipm_tx_handle) {
    b77c:	683a      	ldr	r2, [r7, #0]
    b77e:	b932      	cbnz	r2, b78e <rpmsg_backend_init+0xb6>
		LOG_ERR("Could not get TX IPM device handle");
    b780:	2145      	movs	r1, #69	; 0x45
    b782:	482e      	ldr	r0, [pc, #184]	; (b83c <rpmsg_backend_init+0x164>)
		LOG_ERR("Could not get RX IPM device handle");
    b784:	f00f f874 	bl	1a870 <printk>
		return -ENODEV;
    b788:	f06f 0412 	mvn.w	r4, #18
    b78c:	e7ca      	b.n	b724 <rpmsg_backend_init+0x4c>
	if (!ipm_rx_handle) {
    b78e:	b910      	cbnz	r0, b796 <rpmsg_backend_init+0xbe>
		LOG_ERR("Could not get RX IPM device handle");
    b790:	2145      	movs	r1, #69	; 0x45
    b792:	482b      	ldr	r0, [pc, #172]	; (b840 <rpmsg_backend_init+0x168>)
    b794:	e7f6      	b.n	b784 <rpmsg_backend_init+0xac>
					 ipm_callback_t cb, void *user_data)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	api->register_callback(ipmdev, cb, user_data);
    b796:	6883      	ldr	r3, [r0, #8]
    b798:	4622      	mov	r2, r4
    b79a:	685b      	ldr	r3, [r3, #4]
    b79c:	4929      	ldr	r1, [pc, #164]	; (b844 <rpmsg_backend_init+0x16c>)
    b79e:	4798      	blx	r3
	vq[0] = virtqueue_allocate(VRING_SIZE);
    b7a0:	f00f fb4c 	bl	1ae3c <virtqueue_allocate.constprop.0>
    b7a4:	4f28      	ldr	r7, [pc, #160]	; (b848 <rpmsg_backend_init+0x170>)
    b7a6:	6038      	str	r0, [r7, #0]
	if (!vq[0]) {
    b7a8:	b930      	cbnz	r0, b7b8 <rpmsg_backend_init+0xe0>
		LOG_ERR("virtqueue_allocate failed to alloc vq[0]");
    b7aa:	2145      	movs	r1, #69	; 0x45
    b7ac:	4827      	ldr	r0, [pc, #156]	; (b84c <rpmsg_backend_init+0x174>)
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
    b7ae:	f00f f85f 	bl	1a870 <printk>
		return -ENOMEM;
    b7b2:	f06f 040b 	mvn.w	r4, #11
    b7b6:	e7b5      	b.n	b724 <rpmsg_backend_init+0x4c>
	vq[1] = virtqueue_allocate(VRING_SIZE);
    b7b8:	f00f fb40 	bl	1ae3c <virtqueue_allocate.constprop.0>
    b7bc:	6078      	str	r0, [r7, #4]
	if (!vq[1]) {
    b7be:	b910      	cbnz	r0, b7c6 <rpmsg_backend_init+0xee>
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
    b7c0:	2145      	movs	r1, #69	; 0x45
    b7c2:	4823      	ldr	r0, [pc, #140]	; (b850 <rpmsg_backend_init+0x178>)
    b7c4:	e7f3      	b.n	b7ae <rpmsg_backend_init+0xd6>
	rvrings[0].io = *io;
    b7c6:	6832      	ldr	r2, [r6, #0]
    b7c8:	4b22      	ldr	r3, [pc, #136]	; (b854 <rpmsg_backend_init+0x17c>)
	rvrings[0].info.num_descs = VRING_SIZE;
    b7ca:	2110      	movs	r1, #16
	rvrings[0].io = *io;
    b7cc:	615a      	str	r2, [r3, #20]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    b7ce:	4a22      	ldr	r2, [pc, #136]	; (b858 <rpmsg_backend_init+0x180>)
	rvrings[0].vq = vq[0];
    b7d0:	683f      	ldr	r7, [r7, #0]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    b7d2:	605a      	str	r2, [r3, #4]
	rvrings[0].info.align = VRING_ALIGNMENT;
    b7d4:	2204      	movs	r2, #4
	rvrings[1].io = *io;
    b7d6:	6836      	ldr	r6, [r6, #0]
	rvrings[0].info.align = VRING_ALIGNMENT;
    b7d8:	609a      	str	r2, [r3, #8]
	rvrings[1].info.align = VRING_ALIGNMENT;
    b7da:	621a      	str	r2, [r3, #32]
	vdev->vrings_num = VRING_COUNT;
    b7dc:	2202      	movs	r2, #2
	rvrings[1].io = *io;
    b7de:	62de      	str	r6, [r3, #44]	; 0x2c
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    b7e0:	4e1e      	ldr	r6, [pc, #120]	; (b85c <rpmsg_backend_init+0x184>)
	vdev->vrings_num = VRING_COUNT;
    b7e2:	62aa      	str	r2, [r5, #40]	; 0x28
	vdev->func = &dispatch;
    b7e4:	4a1e      	ldr	r2, [pc, #120]	; (b860 <rpmsg_backend_init+0x188>)
	rvrings[1].info.num_descs = VRING_SIZE;
    b7e6:	8499      	strh	r1, [r3, #36]	; 0x24
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    b7e8:	61de      	str	r6, [r3, #28]
	rvrings[1].vq = vq[1];
    b7ea:	6198      	str	r0, [r3, #24]
	rvrings[0].info.num_descs = VRING_SIZE;
    b7ec:	8199      	strh	r1, [r3, #12]
	rvrings[0].vq = vq[0];
    b7ee:	601f      	str	r7, [r3, #0]
	vdev->role = RPMSG_ROLE;
    b7f0:	61ac      	str	r4, [r5, #24]
	vdev->func = &dispatch;
    b7f2:	622a      	str	r2, [r5, #32]
	vdev->vrings_info = &rvrings[0];
    b7f4:	62eb      	str	r3, [r5, #44]	; 0x2c
	return 0;
    b7f6:	e795      	b.n	b724 <rpmsg_backend_init+0x4c>
    b7f8:	0001e768 	.word	0x0001e768
    b7fc:	2000f9f8 	.word	0x2000f9f8
    b800:	200089b0 	.word	0x200089b0
    b804:	0001fef3 	.word	0x0001fef3
    b808:	200089d0 	.word	0x200089d0
    b80c:	2000a68c 	.word	0x2000a68c
    b810:	0000b671 	.word	0x0000b671
    b814:	0001fefe 	.word	0x0001fefe
    b818:	20008234 	.word	0x20008234
    b81c:	0001ff26 	.word	0x0001ff26
    b820:	0001ff56 	.word	0x0001ff56
    b824:	0001ff60 	.word	0x0001ff60
    b828:	0001ff68 	.word	0x0001ff68
    b82c:	0001ff8a 	.word	0x0001ff8a
    b830:	0001ffbb 	.word	0x0001ffbb
    b834:	2000a688 	.word	0x2000a688
    b838:	0001ffc1 	.word	0x0001ffc1
    b83c:	0001ffc7 	.word	0x0001ffc7
    b840:	0001ffef 	.word	0x0001ffef
    b844:	0000b6b1 	.word	0x0000b6b1
    b848:	2000a698 	.word	0x2000a698
    b84c:	00020017 	.word	0x00020017
    b850:	00020045 	.word	0x00020045
    b854:	20008204 	.word	0x20008204
    b858:	2007fc00 	.word	0x2007fc00
    b85c:	2007f800 	.word	0x2007f800
    b860:	0001e97c 	.word	0x0001e97c

0000b864 <ns_bind_cb>:
#if MASTER

static void ns_bind_cb(struct rpmsg_device *rdev,
					const char *name,
					uint32_t dest)
{
    b864:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    b868:	460d      	mov	r5, r1
	int err;

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (strcmp(name, endpoints[i].name) == 0) {
    b86a:	4e1b      	ldr	r6, [pc, #108]	; (b8d8 <ns_bind_cb+0x74>)
{
    b86c:	4607      	mov	r7, r0
		if (strcmp(name, endpoints[i].name) == 0) {
    b86e:	6831      	ldr	r1, [r6, #0]
    b870:	4628      	mov	r0, r5
{
    b872:	4690      	mov	r8, r2
		if (strcmp(name, endpoints[i].name) == 0) {
    b874:	f010 fa12 	bl	1bc9c <strcmp>
    b878:	b168      	cbz	r0, b896 <ns_bind_cb+0x32>
    b87a:	4628      	mov	r0, r5
    b87c:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
    b87e:	f010 fa0d 	bl	1bc9c <strcmp>
    b882:	b138      	cbz	r0, b894 <ns_bind_cb+0x30>

			return;
		}
	}

	LOG_ERR("Remote endpoint %s not registered locally", name);
    b884:	462a      	mov	r2, r5
    b886:	2145      	movs	r1, #69	; 0x45
    b888:	4814      	ldr	r0, [pc, #80]	; (b8dc <ns_bind_cb+0x78>)
}
    b88a:	b004      	add	sp, #16
    b88c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_ERR("Remote endpoint %s not registered locally", name);
    b890:	f00e bfee 	b.w	1a870 <printk>
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
    b894:	2001      	movs	r0, #1
			err = rpmsg_create_ept(&endpoints[i].ep,
    b896:	244c      	movs	r4, #76	; 0x4c
    b898:	4344      	muls	r4, r0
    b89a:	4b11      	ldr	r3, [pc, #68]	; (b8e0 <ns_bind_cb+0x7c>)
    b89c:	f104 0008 	add.w	r0, r4, #8
    b8a0:	9302      	str	r3, [sp, #8]
    b8a2:	4434      	add	r4, r6
    b8a4:	6863      	ldr	r3, [r4, #4]
    b8a6:	462a      	mov	r2, r5
    b8a8:	e9cd 8300 	strd	r8, r3, [sp]
    b8ac:	4639      	mov	r1, r7
    b8ae:	f04f 33ff 	mov.w	r3, #4294967295
    b8b2:	4430      	add	r0, r6
    b8b4:	f00b fde2 	bl	1747c <rpmsg_create_ept>
			if (err != 0) {
    b8b8:	4603      	mov	r3, r0
    b8ba:	b138      	cbz	r0, b8cc <ns_bind_cb+0x68>
				LOG_ERR("Creating remote endpoint %s"
    b8bc:	462a      	mov	r2, r5
    b8be:	2145      	movs	r1, #69	; 0x45
    b8c0:	4808      	ldr	r0, [pc, #32]	; (b8e4 <ns_bind_cb+0x80>)
}
    b8c2:	b004      	add	sp, #16
    b8c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				LOG_ERR("Creating remote endpoint %s"
    b8c8:	f00e bfd2 	b.w	1a870 <printk>
				endpoints[i].bound = true;
    b8cc:	2301      	movs	r3, #1
    b8ce:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
    b8d2:	b004      	add	sp, #16
    b8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b8d8:	2000a6a0 	.word	0x2000a6a0
    b8dc:	00020081 	.word	0x00020081
    b8e0:	0001ae57 	.word	0x0001ae57
    b8e4:	000200b0 	.word	0x000200b0

0000b8e8 <rpmsg_service_init>:

#endif

static int rpmsg_service_init(const struct device *dev)
{
    b8e8:	b537      	push	{r0, r1, r2, r4, r5, lr}

	(void)dev;

	LOG_DBG("RPMsg service initialization start");

	err = rpmsg_backend_init(&io, &vdev);
    b8ea:	4d13      	ldr	r5, [pc, #76]	; (b938 <rpmsg_service_init+0x50>)
    b8ec:	4913      	ldr	r1, [pc, #76]	; (b93c <rpmsg_service_init+0x54>)
    b8ee:	4628      	mov	r0, r5
    b8f0:	f7ff fef2 	bl	b6d8 <rpmsg_backend_init>
	if (err) {
    b8f4:	4604      	mov	r4, r0
    b8f6:	b138      	cbz	r0, b908 <rpmsg_service_init+0x20>
		LOG_ERR("RPMsg backend init failed with error %d", err);
    b8f8:	2145      	movs	r1, #69	; 0x45
    b8fa:	4602      	mov	r2, r0
    b8fc:	4810      	ldr	r0, [pc, #64]	; (b940 <rpmsg_service_init+0x58>)
#else
	err = rpmsg_init_vdev(&rvdev, &vdev, NULL, io, NULL);
#endif

	if (err) {
		LOG_ERR("rpmsg_init_vdev failed %d", err);
    b8fe:	f00e ffb7 	bl	1a870 <printk>
#endif

	LOG_DBG("RPMsg service initialized");

	return 0;
}
    b902:	4620      	mov	r0, r4
    b904:	b003      	add	sp, #12
    b906:	bd30      	pop	{r4, r5, pc}
	rpmsg_virtio_init_shm_pool(&shpool, (void *)SHM_START_ADDR, SHM_SIZE);
    b908:	4c0e      	ldr	r4, [pc, #56]	; (b944 <rpmsg_service_init+0x5c>)
    b90a:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
    b90e:	4620      	mov	r0, r4
    b910:	490d      	ldr	r1, [pc, #52]	; (b948 <rpmsg_service_init+0x60>)
    b912:	f012 fb33 	bl	1df7c <rpmsg_virtio_init_shm_pool>
	err = rpmsg_init_vdev(&rvdev, &vdev, ns_bind_cb, io, &shpool);
    b916:	9400      	str	r4, [sp, #0]
    b918:	682b      	ldr	r3, [r5, #0]
    b91a:	4a0c      	ldr	r2, [pc, #48]	; (b94c <rpmsg_service_init+0x64>)
    b91c:	4907      	ldr	r1, [pc, #28]	; (b93c <rpmsg_service_init+0x54>)
    b91e:	480c      	ldr	r0, [pc, #48]	; (b950 <rpmsg_service_init+0x68>)
    b920:	f00b fed8 	bl	176d4 <rpmsg_init_vdev>
	if (err) {
    b924:	4604      	mov	r4, r0
    b926:	b118      	cbz	r0, b930 <rpmsg_service_init+0x48>
		LOG_ERR("rpmsg_init_vdev failed %d", err);
    b928:	4602      	mov	r2, r0
    b92a:	2145      	movs	r1, #69	; 0x45
    b92c:	4809      	ldr	r0, [pc, #36]	; (b954 <rpmsg_service_init+0x6c>)
    b92e:	e7e6      	b.n	b8fe <rpmsg_service_init+0x16>
	ep_crt_started = true;
    b930:	2201      	movs	r2, #1
    b932:	4b09      	ldr	r3, [pc, #36]	; (b958 <rpmsg_service_init+0x70>)
    b934:	701a      	strb	r2, [r3, #0]
	return 0;
    b936:	e7e4      	b.n	b902 <rpmsg_service_init+0x1a>
    b938:	2000a738 	.word	0x2000a738
    b93c:	20008a60 	.word	0x20008a60
    b940:	000200e6 	.word	0x000200e6
    b944:	2000a7cc 	.word	0x2000a7cc
    b948:	20070400 	.word	0x20070400
    b94c:	0000b865 	.word	0x0000b865
    b950:	2000a73c 	.word	0x2000a73c
    b954:	00020113 	.word	0x00020113
    b958:	2000f4fe 	.word	0x2000f4fe

0000b95c <rpmsg_service_register_endpoint>:

int rpmsg_service_register_endpoint(const char *name, rpmsg_ept_cb cb)
{
    b95c:	b538      	push	{r3, r4, r5, lr}
	if (ep_crt_started) {
    b95e:	4b0d      	ldr	r3, [pc, #52]	; (b994 <rpmsg_service_register_endpoint+0x38>)
{
    b960:	4602      	mov	r2, r0
	if (ep_crt_started) {
    b962:	781b      	ldrb	r3, [r3, #0]
    b964:	b993      	cbnz	r3, b98c <rpmsg_service_register_endpoint+0x30>
		return -EINPROGRESS;
	}

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (!endpoints[i].name) {
    b966:	4c0c      	ldr	r4, [pc, #48]	; (b998 <rpmsg_service_register_endpoint+0x3c>)
    b968:	6820      	ldr	r0, [r4, #0]
    b96a:	b148      	cbz	r0, b980 <rpmsg_service_register_endpoint+0x24>
    b96c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    b96e:	b133      	cbz	r3, b97e <rpmsg_service_register_endpoint+0x22>

			return i;
		}
	}

	LOG_ERR("No free slots to register endpoint %s", name);
    b970:	480a      	ldr	r0, [pc, #40]	; (b99c <rpmsg_service_register_endpoint+0x40>)
    b972:	2145      	movs	r1, #69	; 0x45
    b974:	f00e ff7c 	bl	1a870 <printk>

	return -ENOMEM;
    b978:	f06f 000b 	mvn.w	r0, #11
}
    b97c:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
    b97e:	2001      	movs	r0, #1
			endpoints[i].name = name;
    b980:	234c      	movs	r3, #76	; 0x4c
    b982:	4343      	muls	r3, r0
    b984:	18e5      	adds	r5, r4, r3
    b986:	50e2      	str	r2, [r4, r3]
			endpoints[i].cb = cb;
    b988:	6069      	str	r1, [r5, #4]
			return i;
    b98a:	e7f7      	b.n	b97c <rpmsg_service_register_endpoint+0x20>
		return -EINPROGRESS;
    b98c:	f06f 0043 	mvn.w	r0, #67	; 0x43
    b990:	e7f4      	b.n	b97c <rpmsg_service_register_endpoint+0x20>
    b992:	bf00      	nop
    b994:	2000f4fe 	.word	0x2000f4fe
    b998:	2000a6a0 	.word	0x2000a6a0
    b99c:	00020132 	.word	0x00020132

0000b9a0 <rpmsg_service_endpoint_is_bound>:

bool rpmsg_service_endpoint_is_bound(int endpoint_id)
{
	return endpoints[endpoint_id].bound;
    b9a0:	224c      	movs	r2, #76	; 0x4c
    b9a2:	4b03      	ldr	r3, [pc, #12]	; (b9b0 <rpmsg_service_endpoint_is_bound+0x10>)
    b9a4:	fb02 3300 	mla	r3, r2, r0, r3
    b9a8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
}
    b9ac:	4770      	bx	lr
    b9ae:	bf00      	nop
    b9b0:	2000a6a0 	.word	0x2000a6a0

0000b9b4 <rpmsg_service_send>:

int rpmsg_service_send(int endpoint_id, const void *data, size_t len)
{
    b9b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    b9b6:	244c      	movs	r4, #76	; 0x4c
    b9b8:	460b      	mov	r3, r1
    b9ba:	2101      	movs	r1, #1
    b9bc:	4344      	muls	r4, r0
    b9be:	e9cd 2100 	strd	r2, r1, [sp]
    b9c2:	4d05      	ldr	r5, [pc, #20]	; (b9d8 <rpmsg_service_send+0x24>)
    b9c4:	1928      	adds	r0, r5, r4
	return rpmsg_send(&endpoints[endpoint_id].ep, data, len);
    b9c6:	3408      	adds	r4, #8
    b9c8:	e9d0 120b 	ldrd	r1, r2, [r0, #44]	; 0x2c
    b9cc:	1928      	adds	r0, r5, r4
    b9ce:	f00b fd43 	bl	17458 <rpmsg_send_offchannel_raw>
}
    b9d2:	b003      	add	sp, #12
    b9d4:	bd30      	pop	{r4, r5, pc}
    b9d6:	bf00      	nop
    b9d8:	2000a6a0 	.word	0x2000a6a0

0000b9dc <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    b9dc:	4b10      	ldr	r3, [pc, #64]	; (ba20 <settings_save_one+0x44>)
{
    b9de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    b9e2:	681c      	ldr	r4, [r3, #0]
{
    b9e4:	4605      	mov	r5, r0
    b9e6:	460e      	mov	r6, r1
    b9e8:	4617      	mov	r7, r2
	if (!cs) {
    b9ea:	b1ac      	cbz	r4, ba18 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    b9ec:	f04f 32ff 	mov.w	r2, #4294967295
    b9f0:	f04f 33ff 	mov.w	r3, #4294967295
    b9f4:	480b      	ldr	r0, [pc, #44]	; (ba24 <settings_save_one+0x48>)
    b9f6:	f00c faaf 	bl	17f58 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    b9fa:	6863      	ldr	r3, [r4, #4]
    b9fc:	4632      	mov	r2, r6
    b9fe:	f8d3 8008 	ldr.w	r8, [r3, #8]
    ba02:	4629      	mov	r1, r5
    ba04:	463b      	mov	r3, r7
    ba06:	4620      	mov	r0, r4
    ba08:	47c0      	blx	r8
    ba0a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    ba0c:	4805      	ldr	r0, [pc, #20]	; (ba24 <settings_save_one+0x48>)
    ba0e:	f00c fb6f 	bl	180f0 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    ba12:	4620      	mov	r0, r4
    ba14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    ba18:	f06f 0401 	mvn.w	r4, #1
    ba1c:	e7f9      	b.n	ba12 <settings_save_one+0x36>
    ba1e:	bf00      	nop
    ba20:	2000a7e0 	.word	0x2000a7e0
    ba24:	20008674 	.word	0x20008674

0000ba28 <settings_load_subtree>:
	const struct settings_load_arg arg = {
    ba28:	2300      	movs	r3, #0
{
    ba2a:	b530      	push	{r4, r5, lr}
    ba2c:	b085      	sub	sp, #20
    ba2e:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    ba30:	e9cd 3302 	strd	r3, r3, [sp, #8]
    ba34:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    ba36:	f04f 33ff 	mov.w	r3, #4294967295
    ba3a:	f04f 32ff 	mov.w	r2, #4294967295
    ba3e:	480b      	ldr	r0, [pc, #44]	; (ba6c <settings_load_subtree+0x44>)
    ba40:	f00c fa8a 	bl	17f58 <z_impl_k_mutex_lock>
	return list->head;
    ba44:	4b0a      	ldr	r3, [pc, #40]	; (ba70 <settings_load_subtree+0x48>)
    ba46:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    ba48:	b134      	cbz	r4, ba58 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
    ba4a:	6863      	ldr	r3, [r4, #4]
    ba4c:	4620      	mov	r0, r4
    ba4e:	681b      	ldr	r3, [r3, #0]
    ba50:	a901      	add	r1, sp, #4
    ba52:	4798      	blx	r3
	return node->next;
    ba54:	6824      	ldr	r4, [r4, #0]
    ba56:	e7f7      	b.n	ba48 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
    ba58:	4628      	mov	r0, r5
    ba5a:	f000 f83b 	bl	bad4 <settings_commit_subtree>
    ba5e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    ba60:	4802      	ldr	r0, [pc, #8]	; (ba6c <settings_load_subtree+0x44>)
    ba62:	f00c fb45 	bl	180f0 <z_impl_k_mutex_unlock>
}
    ba66:	4620      	mov	r0, r4
    ba68:	b005      	add	sp, #20
    ba6a:	bd30      	pop	{r4, r5, pc}
    ba6c:	20008674 	.word	0x20008674
    ba70:	2000a7d8 	.word	0x2000a7d8

0000ba74 <settings_load_subtree_direct>:
{
    ba74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    ba76:	e9cd 0101 	strd	r0, r1, [sp, #4]
    ba7a:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    ba7c:	f04f 33ff 	mov.w	r3, #4294967295
    ba80:	f04f 32ff 	mov.w	r2, #4294967295
    ba84:	4809      	ldr	r0, [pc, #36]	; (baac <settings_load_subtree_direct+0x38>)
    ba86:	f00c fa67 	bl	17f58 <z_impl_k_mutex_lock>
	return list->head;
    ba8a:	4b09      	ldr	r3, [pc, #36]	; (bab0 <settings_load_subtree_direct+0x3c>)
    ba8c:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    ba8e:	b134      	cbz	r4, ba9e <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
    ba90:	6863      	ldr	r3, [r4, #4]
    ba92:	4620      	mov	r0, r4
    ba94:	681b      	ldr	r3, [r3, #0]
    ba96:	a901      	add	r1, sp, #4
    ba98:	4798      	blx	r3
	return node->next;
    ba9a:	6824      	ldr	r4, [r4, #0]
    ba9c:	e7f7      	b.n	ba8e <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
    ba9e:	4803      	ldr	r0, [pc, #12]	; (baac <settings_load_subtree_direct+0x38>)
    baa0:	f00c fb26 	bl	180f0 <z_impl_k_mutex_unlock>
}
    baa4:	2000      	movs	r0, #0
    baa6:	b004      	add	sp, #16
    baa8:	bd10      	pop	{r4, pc}
    baaa:	bf00      	nop
    baac:	20008674 	.word	0x20008674
    bab0:	2000a7d8 	.word	0x2000a7d8

0000bab4 <settings_store_init>:
	list->head = NULL;
    bab4:	2200      	movs	r2, #0
    bab6:	4b02      	ldr	r3, [pc, #8]	; (bac0 <settings_store_init+0xc>)
	list->tail = NULL;
    bab8:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    babc:	4770      	bx	lr
    babe:	bf00      	nop
    bac0:	2000a7d8 	.word	0x2000a7d8

0000bac4 <settings_init>:
	list->head = NULL;
    bac4:	2200      	movs	r2, #0
    bac6:	4b02      	ldr	r3, [pc, #8]	; (bad0 <settings_init+0xc>)
	list->tail = NULL;
    bac8:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    bacc:	f7ff bff2 	b.w	bab4 <settings_store_init>
    bad0:	2000a7e4 	.word	0x2000a7e4

0000bad4 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    bad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bad8:	4606      	mov	r6, r0
	int rc;
	int rc2;

	rc = 0;
    bada:	2500      	movs	r5, #0

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    badc:	4c1f      	ldr	r4, [pc, #124]	; (bb5c <settings_commit_subtree+0x88>)
    bade:	4f20      	ldr	r7, [pc, #128]	; (bb60 <settings_commit_subtree+0x8c>)
    bae0:	f8df 8080 	ldr.w	r8, [pc, #128]	; bb64 <settings_commit_subtree+0x90>
    bae4:	42bc      	cmp	r4, r7
    bae6:	d908      	bls.n	bafa <settings_commit_subtree+0x26>
    bae8:	4641      	mov	r1, r8
    baea:	481f      	ldr	r0, [pc, #124]	; (bb68 <settings_commit_subtree+0x94>)
    baec:	22f4      	movs	r2, #244	; 0xf4
    baee:	f00e febf 	bl	1a870 <printk>
    baf2:	21f4      	movs	r1, #244	; 0xf4
    baf4:	4640      	mov	r0, r8
    baf6:	f00f f961 	bl	1adbc <assert_post_action>
    bafa:	42bc      	cmp	r4, r7
    bafc:	d307      	bcc.n	bb0e <settings_commit_subtree+0x3a>
	return list->head;
    bafe:	4b1b      	ldr	r3, [pc, #108]	; (bb6c <settings_commit_subtree+0x98>)
    bb00:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    bb02:	b10c      	cbz	r4, bb08 <settings_commit_subtree+0x34>
    bb04:	3c14      	subs	r4, #20
    bb06:	b9a4      	cbnz	r4, bb32 <settings_commit_subtree+0x5e>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    bb08:	4628      	mov	r0, r5
    bb0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    bb0e:	b91e      	cbnz	r6, bb18 <settings_commit_subtree+0x44>
		if (ch->h_commit) {
    bb10:	68e3      	ldr	r3, [r4, #12]
    bb12:	b94b      	cbnz	r3, bb28 <settings_commit_subtree+0x54>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    bb14:	3414      	adds	r4, #20
    bb16:	e7e5      	b.n	bae4 <settings_commit_subtree+0x10>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    bb18:	2200      	movs	r2, #0
    bb1a:	4631      	mov	r1, r6
    bb1c:	6820      	ldr	r0, [r4, #0]
    bb1e:	f00f f9a3 	bl	1ae68 <settings_name_steq>
    bb22:	2800      	cmp	r0, #0
    bb24:	d1f4      	bne.n	bb10 <settings_commit_subtree+0x3c>
    bb26:	e7f5      	b.n	bb14 <settings_commit_subtree+0x40>
			rc2 = ch->h_commit();
    bb28:	4798      	blx	r3
				rc = rc2;
    bb2a:	2d00      	cmp	r5, #0
    bb2c:	bf08      	it	eq
    bb2e:	4605      	moveq	r5, r0
    bb30:	e7f0      	b.n	bb14 <settings_commit_subtree+0x40>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    bb32:	b936      	cbnz	r6, bb42 <settings_commit_subtree+0x6e>
		if (ch->h_commit) {
    bb34:	68e3      	ldr	r3, [r4, #12]
    bb36:	b963      	cbnz	r3, bb52 <settings_commit_subtree+0x7e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    bb38:	f114 0f14 	cmn.w	r4, #20
    bb3c:	d0e4      	beq.n	bb08 <settings_commit_subtree+0x34>
	return node->next;
    bb3e:	6964      	ldr	r4, [r4, #20]
    bb40:	e7df      	b.n	bb02 <settings_commit_subtree+0x2e>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    bb42:	2200      	movs	r2, #0
    bb44:	4631      	mov	r1, r6
    bb46:	6820      	ldr	r0, [r4, #0]
    bb48:	f00f f98e 	bl	1ae68 <settings_name_steq>
    bb4c:	2800      	cmp	r0, #0
    bb4e:	d1f1      	bne.n	bb34 <settings_commit_subtree+0x60>
    bb50:	e7f2      	b.n	bb38 <settings_commit_subtree+0x64>
			rc2 = ch->h_commit();
    bb52:	4798      	blx	r3
				rc = rc2;
    bb54:	2d00      	cmp	r5, #0
    bb56:	bf08      	it	eq
    bb58:	4605      	moveq	r5, r0
    bb5a:	e7ed      	b.n	bb38 <settings_commit_subtree+0x64>
    bb5c:	0001e604 	.word	0x0001e604
    bb60:	0001e668 	.word	0x0001e668
    bb64:	0002016b 	.word	0x0002016b
    bb68:	0001fdfa 	.word	0x0001fdfa
    bb6c:	2000a7e4 	.word	0x2000a7e4

0000bb70 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    bb70:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    bb72:	4c06      	ldr	r4, [pc, #24]	; (bb8c <settings_subsys_init+0x1c>)
    bb74:	7823      	ldrb	r3, [r4, #0]
    bb76:	b93b      	cbnz	r3, bb88 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    bb78:	f7ff ffa4 	bl	bac4 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    bb7c:	f00f f9ad 	bl	1aeda <settings_backend_init>

	if (!err) {
    bb80:	b908      	cbnz	r0, bb86 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    bb82:	2301      	movs	r3, #1
    bb84:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    bb86:	bd10      	pop	{r4, pc}
		return 0;
    bb88:	2000      	movs	r0, #0
    bb8a:	e7fc      	b.n	bb86 <settings_subsys_init+0x16>
    bb8c:	2000f4ff 	.word	0x2000f4ff

0000bb90 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    bb90:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    bb92:	4c04      	ldr	r4, [pc, #16]	; (bba4 <rtt_console_init+0x14>)
    bb94:	4620      	mov	r0, r4
    bb96:	f7fe fd93 	bl	a6c0 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    bb9a:	4620      	mov	r0, r4
    bb9c:	f002 fc7e 	bl	e49c <__stdout_hook_install>

	return 0;
}
    bba0:	2000      	movs	r0, #0
    bba2:	bd10      	pop	{r4, pc}
    bba4:	0000bba9 	.word	0x0000bba9

0000bba8 <rtt_console_out>:
{
    bba8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    bbac:	4604      	mov	r4, r0
	char c = (char)character;
    bbae:	2503      	movs	r5, #3
	return z_impl_k_mutex_lock(mutex, timeout);
    bbb0:	f8df 8058 	ldr.w	r8, [pc, #88]	; bc0c <rtt_console_out+0x64>
    bbb4:	4e16      	ldr	r6, [pc, #88]	; (bc10 <rtt_console_out+0x68>)
    bbb6:	f88d 0007 	strb.w	r0, [sp, #7]
    bbba:	f04f 33ff 	mov.w	r3, #4294967295
    bbbe:	f04f 32ff 	mov.w	r2, #4294967295
    bbc2:	4640      	mov	r0, r8
    bbc4:	f00c f9c8 	bl	17f58 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    bbc8:	2201      	movs	r2, #1
    bbca:	f10d 0107 	add.w	r1, sp, #7
    bbce:	2000      	movs	r0, #0
    bbd0:	f001 fd02 	bl	d5d8 <SEGGER_RTT_WriteNoLock>
    bbd4:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
    bbd6:	4640      	mov	r0, r8
    bbd8:	f00c fa8a 	bl	180f0 <z_impl_k_mutex_unlock>
		if (cnt) {
    bbdc:	b12f      	cbz	r7, bbea <rtt_console_out+0x42>
			host_present = true;
    bbde:	2301      	movs	r3, #1
    bbe0:	7033      	strb	r3, [r6, #0]
}
    bbe2:	4620      	mov	r0, r4
    bbe4:	b002      	add	sp, #8
    bbe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    bbea:	7833      	ldrb	r3, [r6, #0]
    bbec:	2b00      	cmp	r3, #0
    bbee:	d0f8      	beq.n	bbe2 <rtt_console_out+0x3a>
			if (max_cnt) {
    bbf0:	3d01      	subs	r5, #1
    bbf2:	d008      	beq.n	bc06 <rtt_console_out+0x5e>
	if (k_is_in_isr()) {
    bbf4:	f012 fa61 	bl	1e0ba <k_is_in_isr>
    bbf8:	2800      	cmp	r0, #0
    bbfa:	d1de      	bne.n	bbba <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    bbfc:	2100      	movs	r1, #0
    bbfe:	2042      	movs	r0, #66	; 0x42
    bc00:	f00d fc28 	bl	19454 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    bc04:	e7d9      	b.n	bbba <rtt_console_out+0x12>
				host_present = false;
    bc06:	7035      	strb	r5, [r6, #0]
    bc08:	e7eb      	b.n	bbe2 <rtt_console_out+0x3a>
    bc0a:	bf00      	nop
    bc0c:	2000864c 	.word	0x2000864c
    bc10:	2000f500 	.word	0x2000f500

0000bc14 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    bc14:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    bc16:	2340      	movs	r3, #64	; 0x40
{
    bc18:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    bc1a:	490a      	ldr	r1, [pc, #40]	; (bc44 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    bc1c:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    bc1e:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    bc20:	1149      	asrs	r1, r1, #5
{
    bc22:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    bc24:	4623      	mov	r3, r4
    bc26:	4a08      	ldr	r2, [pc, #32]	; (bc48 <onoff_start+0x34>)
    bc28:	4808      	ldr	r0, [pc, #32]	; (bc4c <onoff_start+0x38>)
    bc2a:	f00f f96b 	bl	1af04 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    bc2e:	1e01      	subs	r1, r0, #0
    bc30:	da05      	bge.n	bc3e <onoff_start+0x2a>
		notify(mgr, err);
    bc32:	4628      	mov	r0, r5
    bc34:	4623      	mov	r3, r4
	}
}
    bc36:	b003      	add	sp, #12
    bc38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    bc3c:	4718      	bx	r3
}
    bc3e:	b003      	add	sp, #12
    bc40:	bd30      	pop	{r4, r5, pc}
    bc42:	bf00      	nop
    bc44:	2000a7fc 	.word	0x2000a7fc
    bc48:	0001af77 	.word	0x0001af77
    bc4c:	2000856c 	.word	0x2000856c

0000bc50 <get_status>:
{
    bc50:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    bc52:	b2cc      	uxtb	r4, r1
    bc54:	2c03      	cmp	r4, #3
{
    bc56:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    bc58:	d908      	bls.n	bc6c <get_status+0x1c>
    bc5a:	4909      	ldr	r1, [pc, #36]	; (bc80 <get_status+0x30>)
    bc5c:	4809      	ldr	r0, [pc, #36]	; (bc84 <get_status+0x34>)
    bc5e:	227e      	movs	r2, #126	; 0x7e
    bc60:	f00e fe06 	bl	1a870 <printk>
    bc64:	217e      	movs	r1, #126	; 0x7e
    bc66:	4806      	ldr	r0, [pc, #24]	; (bc80 <get_status+0x30>)
    bc68:	f00f f8a8 	bl	1adbc <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    bc6c:	230c      	movs	r3, #12
    bc6e:	68e9      	ldr	r1, [r5, #12]
    bc70:	fb04 1403 	mla	r4, r4, r3, r1
    bc74:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
}
    bc78:	f000 0007 	and.w	r0, r0, #7
    bc7c:	bd38      	pop	{r3, r4, r5, pc}
    bc7e:	bf00      	nop
    bc80:	000201a3 	.word	0x000201a3
    bc84:	0001fdfa 	.word	0x0001fdfa

0000bc88 <stop>:
{
    bc88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bc8a:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    bc8c:	2c03      	cmp	r4, #3
{
    bc8e:	4605      	mov	r5, r0
    bc90:	4617      	mov	r7, r2
	struct nrf_clock_control_data *data = dev->data;
    bc92:	68c6      	ldr	r6, [r0, #12]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    bc94:	d90a      	bls.n	bcac <stop+0x24>
    bc96:	4919      	ldr	r1, [pc, #100]	; (bcfc <stop+0x74>)
    bc98:	4819      	ldr	r0, [pc, #100]	; (bd00 <stop+0x78>)
    bc9a:	f240 1253 	movw	r2, #339	; 0x153
    bc9e:	f00e fde7 	bl	1a870 <printk>
    bca2:	f240 1153 	movw	r1, #339	; 0x153
    bca6:	4815      	ldr	r0, [pc, #84]	; (bcfc <stop+0x74>)
    bca8:	f00f f888 	bl	1adbc <assert_post_action>
	__asm__ volatile(
    bcac:	f04f 0320 	mov.w	r3, #32
    bcb0:	f3ef 8111 	mrs	r1, BASEPRI
    bcb4:	f383 8811 	msr	BASEPRI, r3
    bcb8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    bcbc:	220c      	movs	r2, #12
    bcbe:	fb02 6304 	mla	r3, r2, r4, r6
    bcc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    bcc6:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    bcca:	d001      	beq.n	bcd0 <stop+0x48>
    bccc:	429f      	cmp	r7, r3
    bcce:	d112      	bne.n	bcf6 <stop+0x6e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    bcd0:	2301      	movs	r3, #1
	int err = 0;
    bcd2:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
    bcd4:	fb02 6604 	mla	r6, r2, r4, r6
    bcd8:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
	__asm__ volatile(
    bcdc:	f381 8811 	msr	BASEPRI, r1
    bce0:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    bce4:	b930      	cbnz	r0, bcf4 <stop+0x6c>
	get_sub_config(dev, type)->stop();
    bce6:	230c      	movs	r3, #12
    bce8:	6869      	ldr	r1, [r5, #4]
    bcea:	fb03 1404 	mla	r4, r3, r4, r1
    bcee:	6863      	ldr	r3, [r4, #4]
    bcf0:	4798      	blx	r3
	return 0;
    bcf2:	2000      	movs	r0, #0
}
    bcf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    bcf6:	f04f 30ff 	mov.w	r0, #4294967295
    bcfa:	e7ef      	b.n	bcdc <stop+0x54>
    bcfc:	000201a3 	.word	0x000201a3
    bd00:	0001fdfa 	.word	0x0001fdfa

0000bd04 <onoff_stop>:
{
    bd04:	b570      	push	{r4, r5, r6, lr}
    bd06:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    bd08:	4906      	ldr	r1, [pc, #24]	; (bd24 <onoff_stop+0x20>)
{
    bd0a:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    bd0c:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    bd0e:	1149      	asrs	r1, r1, #5
    bd10:	2240      	movs	r2, #64	; 0x40
    bd12:	4805      	ldr	r0, [pc, #20]	; (bd28 <onoff_stop+0x24>)
    bd14:	f7ff ffb8 	bl	bc88 <stop>
	notify(mgr, res);
    bd18:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    bd1a:	4601      	mov	r1, r0
	notify(mgr, res);
    bd1c:	4620      	mov	r0, r4
}
    bd1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    bd22:	4718      	bx	r3
    bd24:	2000a7fc 	.word	0x2000a7fc
    bd28:	2000856c 	.word	0x2000856c

0000bd2c <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    bd2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    bd30:	2200      	movs	r2, #0
    bd32:	2101      	movs	r1, #1
{
    bd34:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    bd36:	2005      	movs	r0, #5
    bd38:	f001 fe6a 	bl	da10 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    bd3c:	2005      	movs	r0, #5
    bd3e:	f001 fe49 	bl	d9d4 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    bd42:	4811      	ldr	r0, [pc, #68]	; (bd88 <clk_init+0x5c>)
    bd44:	f00a ff5e 	bl	16c04 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    bd48:	4b10      	ldr	r3, [pc, #64]	; (bd8c <clk_init+0x60>)
    bd4a:	4298      	cmp	r0, r3
    bd4c:	d119      	bne.n	bd82 <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    bd4e:	f00a ff79 	bl	16c44 <nrfx_clock_enable>
    bd52:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    bd54:	f04f 080c 	mov.w	r8, #12
    bd58:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
    bd5a:	f8df 9034 	ldr.w	r9, [pc, #52]	; bd90 <clk_init+0x64>
	struct nrf_clock_control_data *data = dev->data;
    bd5e:	68f5      	ldr	r5, [r6, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    bd60:	4649      	mov	r1, r9
    bd62:	eb05 1044 	add.w	r0, r5, r4, lsl #5
    bd66:	f00e fdde 	bl	1a926 <onoff_manager_init>
		if (err < 0) {
    bd6a:	2800      	cmp	r0, #0
    bd6c:	db07      	blt.n	bd7e <clk_init+0x52>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    bd6e:	fb08 5504 	mla	r5, r8, r4, r5
	for (enum clock_control_nrf_type i = 0;
    bd72:	3401      	adds	r4, #1
    bd74:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    bd76:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
	for (enum clock_control_nrf_type i = 0;
    bd7a:	d1f0      	bne.n	bd5e <clk_init+0x32>
	}

	return 0;
    bd7c:	2000      	movs	r0, #0
}
    bd7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    bd82:	f06f 0004 	mvn.w	r0, #4
    bd86:	e7fa      	b.n	bd7e <clk_init+0x52>
    bd88:	0000bdcd 	.word	0x0000bdcd
    bd8c:	0bad0000 	.word	0x0bad0000
    bd90:	0001e9e4 	.word	0x0001e9e4

0000bd94 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    bd94:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    bd96:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    bd98:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    bd9a:	434b      	muls	r3, r1
    bd9c:	4809      	ldr	r0, [pc, #36]	; (bdc4 <clkstarted_handle.constprop.0+0x30>)
static void clkstarted_handle(const struct device *dev,
    bd9e:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    bda0:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    bda2:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
    bda4:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    bda8:	4418      	add	r0, r3
	sub_data->cb = NULL;
    bdaa:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    bdae:	f00f f896 	bl	1aede <set_on_state>
	if (callback) {
    bdb2:	b12d      	cbz	r5, bdc0 <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
    bdb4:	4632      	mov	r2, r6
    bdb6:	462b      	mov	r3, r5
}
    bdb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    bdbc:	4802      	ldr	r0, [pc, #8]	; (bdc8 <clkstarted_handle.constprop.0+0x34>)
    bdbe:	4718      	bx	r3
}
    bdc0:	bd70      	pop	{r4, r5, r6, pc}
    bdc2:	bf00      	nop
    bdc4:	2000a7fc 	.word	0x2000a7fc
    bdc8:	2000856c 	.word	0x2000856c

0000bdcc <clock_event_handler>:
{
    bdcc:	b508      	push	{r3, lr}
    bdce:	2805      	cmp	r0, #5
    bdd0:	d821      	bhi.n	be16 <clock_event_handler+0x4a>
    bdd2:	e8df f000 	tbb	[pc, r0]
    bdd6:	1103      	.short	0x1103
    bdd8:	0d0f1320 	.word	0x0d0f1320
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    bddc:	4b13      	ldr	r3, [pc, #76]	; (be2c <clock_event_handler+0x60>)
    bdde:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    bde2:	f010 0007 	ands.w	r0, r0, #7
    bde6:	d11f      	bne.n	be28 <clock_event_handler+0x5c>
}
    bde8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    bdec:	f7ff bfd2 	b.w	bd94 <clkstarted_handle.constprop.0>
    bdf0:	2002      	movs	r0, #2
    bdf2:	e7f9      	b.n	bde8 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    bdf4:	2003      	movs	r0, #3
    bdf6:	e7f7      	b.n	bde8 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    bdf8:	2001      	movs	r0, #1
    bdfa:	e7f5      	b.n	bde8 <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
    bdfc:	490c      	ldr	r1, [pc, #48]	; (be30 <clock_event_handler+0x64>)
    bdfe:	f240 2266 	movw	r2, #614	; 0x266
    be02:	480c      	ldr	r0, [pc, #48]	; (be34 <clock_event_handler+0x68>)
    be04:	f00e fd34 	bl	1a870 <printk>
    be08:	f240 2166 	movw	r1, #614	; 0x266
}
    be0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    be10:	4807      	ldr	r0, [pc, #28]	; (be30 <clock_event_handler+0x64>)
    be12:	f00e bfd3 	b.w	1adbc <assert_post_action>
    be16:	4906      	ldr	r1, [pc, #24]	; (be30 <clock_event_handler+0x64>)
    be18:	f240 226a 	movw	r2, #618	; 0x26a
    be1c:	4805      	ldr	r0, [pc, #20]	; (be34 <clock_event_handler+0x68>)
    be1e:	f00e fd27 	bl	1a870 <printk>
    be22:	f240 216a 	movw	r1, #618	; 0x26a
    be26:	e7f1      	b.n	be0c <clock_event_handler+0x40>
}
    be28:	bd08      	pop	{r3, pc}
    be2a:	bf00      	nop
    be2c:	2000a7fc 	.word	0x2000a7fc
    be30:	000201a3 	.word	0x000201a3
    be34:	0001fdfa 	.word	0x0001fdfa

0000be38 <generic_hfclk_start>:
{
    be38:	b508      	push	{r3, lr}
	__asm__ volatile(
    be3a:	f04f 0320 	mov.w	r3, #32
    be3e:	f3ef 8111 	mrs	r1, BASEPRI
    be42:	f383 8811 	msr	BASEPRI, r3
    be46:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    be4a:	4a11      	ldr	r2, [pc, #68]	; (be90 <generic_hfclk_start+0x58>)
    be4c:	6813      	ldr	r3, [r2, #0]
    be4e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    be52:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    be56:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    be58:	d00b      	beq.n	be72 <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    be5a:	4a0e      	ldr	r2, [pc, #56]	; (be94 <generic_hfclk_start+0x5c>)
    be5c:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    be60:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    be64:	f013 0301 	ands.w	r3, r3, #1
    be68:	d003      	beq.n	be72 <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
    be6a:	480b      	ldr	r0, [pc, #44]	; (be98 <generic_hfclk_start+0x60>)
    be6c:	f00f f837 	bl	1aede <set_on_state>
			already_started = true;
    be70:	2301      	movs	r3, #1
	__asm__ volatile(
    be72:	f381 8811 	msr	BASEPRI, r1
    be76:	f3bf 8f6f 	isb	sy
	if (already_started) {
    be7a:	b123      	cbz	r3, be86 <generic_hfclk_start+0x4e>
}
    be7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    be80:	2000      	movs	r0, #0
    be82:	f7ff bf87 	b.w	bd94 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    be86:	2001      	movs	r0, #1
}
    be88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    be8c:	f00a befe 	b.w	16c8c <nrfx_clock_start>
    be90:	2000a8ac 	.word	0x2000a8ac
    be94:	40005000 	.word	0x40005000
    be98:	2000a884 	.word	0x2000a884

0000be9c <api_blocking_start>:
{
    be9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    be9e:	2200      	movs	r2, #0
    bea0:	2301      	movs	r3, #1
    bea2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    bea6:	ab04      	add	r3, sp, #16
    bea8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    beac:	4a09      	ldr	r2, [pc, #36]	; (bed4 <api_blocking_start+0x38>)
    beae:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    beb0:	f8cd d000 	str.w	sp, [sp]
    beb4:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    beb8:	f00f f856 	bl	1af68 <api_start>
	if (err < 0) {
    bebc:	2800      	cmp	r0, #0
    bebe:	db05      	blt.n	becc <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    bec0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    bec4:	2300      	movs	r3, #0
    bec6:	4668      	mov	r0, sp
    bec8:	f00d fb36 	bl	19538 <z_impl_k_sem_take>
}
    becc:	b007      	add	sp, #28
    bece:	f85d fb04 	ldr.w	pc, [sp], #4
    bed2:	bf00      	nop
    bed4:	0001afad 	.word	0x0001afad

0000bed8 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    bed8:	4b07      	ldr	r3, [pc, #28]	; (bef8 <generic_hfclk_stop+0x20>)
    beda:	e8d3 2fef 	ldaex	r2, [r3]
    bede:	f022 0102 	bic.w	r1, r2, #2
    bee2:	e8c3 1fe0 	stlex	r0, r1, [r3]
    bee6:	2800      	cmp	r0, #0
    bee8:	d1f7      	bne.n	beda <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    beea:	07d3      	lsls	r3, r2, #31
    beec:	d402      	bmi.n	bef4 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    beee:	2001      	movs	r0, #1
    bef0:	f00a bf36 	b.w	16d60 <nrfx_clock_stop>
}
    bef4:	4770      	bx	lr
    bef6:	bf00      	nop
    bef8:	2000a8ac 	.word	0x2000a8ac

0000befc <z_nrf_clock_control_lf_on>:
{
    befc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    bf00:	2201      	movs	r2, #1
    bf02:	4606      	mov	r6, r0
    bf04:	4942      	ldr	r1, [pc, #264]	; (c010 <z_nrf_clock_control_lf_on+0x114>)
    bf06:	e8d1 3fef 	ldaex	r3, [r1]
    bf0a:	e8c1 2fe0 	stlex	r0, r2, [r1]
    bf0e:	2800      	cmp	r0, #0
    bf10:	d1f9      	bne.n	bf06 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    bf12:	b99b      	cbnz	r3, bf3c <z_nrf_clock_control_lf_on+0x40>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    bf14:	493f      	ldr	r1, [pc, #252]	; (c014 <z_nrf_clock_control_lf_on+0x118>)
		err = onoff_request(mgr, &cli);
    bf16:	4840      	ldr	r0, [pc, #256]	; (c018 <z_nrf_clock_control_lf_on+0x11c>)
    bf18:	604b      	str	r3, [r1, #4]
    bf1a:	60cb      	str	r3, [r1, #12]
    bf1c:	608a      	str	r2, [r1, #8]
    bf1e:	f7fe fdd7 	bl	aad0 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    bf22:	2800      	cmp	r0, #0
    bf24:	da0a      	bge.n	bf3c <z_nrf_clock_control_lf_on+0x40>
    bf26:	493d      	ldr	r1, [pc, #244]	; (c01c <z_nrf_clock_control_lf_on+0x120>)
    bf28:	483d      	ldr	r0, [pc, #244]	; (c020 <z_nrf_clock_control_lf_on+0x124>)
    bf2a:	f240 2226 	movw	r2, #550	; 0x226
    bf2e:	f00e fc9f 	bl	1a870 <printk>
    bf32:	f240 2126 	movw	r1, #550	; 0x226
    bf36:	4839      	ldr	r0, [pc, #228]	; (c01c <z_nrf_clock_control_lf_on+0x120>)
    bf38:	f00e ff40 	bl	1adbc <assert_post_action>
	switch (start_mode) {
    bf3c:	b386      	cbz	r6, bfa0 <z_nrf_clock_control_lf_on+0xa4>
    bf3e:	1e73      	subs	r3, r6, #1
    bf40:	2b01      	cmp	r3, #1
    bf42:	d852      	bhi.n	bfea <z_nrf_clock_control_lf_on+0xee>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    bf44:	2e01      	cmp	r6, #1
    bf46:	d106      	bne.n	bf56 <z_nrf_clock_control_lf_on+0x5a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    bf48:	4b36      	ldr	r3, [pc, #216]	; (c024 <z_nrf_clock_control_lf_on+0x128>)
    bf4a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    bf4e:	f003 0303 	and.w	r3, r3, #3
    bf52:	2b02      	cmp	r3, #2
    bf54:	d024      	beq.n	bfa0 <z_nrf_clock_control_lf_on+0xa4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    bf56:	f012 f8b0 	bl	1e0ba <k_is_in_isr>
    bf5a:	4604      	mov	r4, r0
    bf5c:	b918      	cbnz	r0, bf66 <z_nrf_clock_control_lf_on+0x6a>
	return !z_sys_post_kernel;
    bf5e:	4b32      	ldr	r3, [pc, #200]	; (c028 <z_nrf_clock_control_lf_on+0x12c>)
	int key = isr_mode ? irq_lock() : 0;
    bf60:	781b      	ldrb	r3, [r3, #0]
    bf62:	2b00      	cmp	r3, #0
    bf64:	d14e      	bne.n	c004 <z_nrf_clock_control_lf_on+0x108>
	__asm__ volatile(
    bf66:	f04f 0320 	mov.w	r3, #32
    bf6a:	f3ef 8711 	mrs	r7, BASEPRI
    bf6e:	f383 8811 	msr	BASEPRI, r3
    bf72:	f3bf 8f6f 	isb	sy
    bf76:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    bf78:	4d2a      	ldr	r5, [pc, #168]	; (c024 <z_nrf_clock_control_lf_on+0x128>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    bf7a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; c02c <z_nrf_clock_control_lf_on+0x130>
    bf7e:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    bf82:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    bf86:	03d2      	lsls	r2, r2, #15
    bf88:	d50c      	bpl.n	bfa4 <z_nrf_clock_control_lf_on+0xa8>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    bf8a:	f003 0303 	and.w	r3, r3, #3
    bf8e:	2b02      	cmp	r3, #2
    bf90:	d001      	beq.n	bf96 <z_nrf_clock_control_lf_on+0x9a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    bf92:	2e01      	cmp	r6, #1
    bf94:	d106      	bne.n	bfa4 <z_nrf_clock_control_lf_on+0xa8>
	if (isr_mode) {
    bf96:	b324      	cbz	r4, bfe2 <z_nrf_clock_control_lf_on+0xe6>
	__asm__ volatile(
    bf98:	f387 8811 	msr	BASEPRI, r7
    bf9c:	f3bf 8f6f 	isb	sy
}
    bfa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode) {
    bfa4:	b1c4      	cbz	r4, bfd8 <z_nrf_clock_control_lf_on+0xdc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    bfa6:	4638      	mov	r0, r7
    bfa8:	f001 fda2 	bl	daf0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    bfac:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    bfb0:	b2db      	uxtb	r3, r3
    bfb2:	2b01      	cmp	r3, #1
    bfb4:	d1e3      	bne.n	bf7e <z_nrf_clock_control_lf_on+0x82>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    bfb6:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    bfba:	2a00      	cmp	r2, #0
    bfbc:	d0df      	beq.n	bf7e <z_nrf_clock_control_lf_on+0x82>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bfbe:	2200      	movs	r2, #0
    bfc0:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    bfc4:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    bfc8:	2202      	movs	r2, #2
    bfca:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    bfce:	2220      	movs	r2, #32
    bfd0:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    bfd4:	60ab      	str	r3, [r5, #8]
}
    bfd6:	e7d2      	b.n	bf7e <z_nrf_clock_control_lf_on+0x82>
	return z_impl_k_sleep(timeout);
    bfd8:	2100      	movs	r1, #0
    bfda:	2021      	movs	r0, #33	; 0x21
    bfdc:	f00d fa3a 	bl	19454 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    bfe0:	e7e4      	b.n	bfac <z_nrf_clock_control_lf_on+0xb0>
    p_reg->INTENSET = mask;
    bfe2:	2302      	movs	r3, #2
    bfe4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
    bfe8:	e7da      	b.n	bfa0 <z_nrf_clock_control_lf_on+0xa4>
		__ASSERT_NO_MSG(false);
    bfea:	490c      	ldr	r1, [pc, #48]	; (c01c <z_nrf_clock_control_lf_on+0x120>)
    bfec:	480c      	ldr	r0, [pc, #48]	; (c020 <z_nrf_clock_control_lf_on+0x124>)
    bfee:	f44f 720e 	mov.w	r2, #568	; 0x238
    bff2:	f00e fc3d 	bl	1a870 <printk>
}
    bff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
    bffa:	f44f 710e 	mov.w	r1, #568	; 0x238
    bffe:	4807      	ldr	r0, [pc, #28]	; (c01c <z_nrf_clock_control_lf_on+0x120>)
    c000:	f00e bedc 	b.w	1adbc <assert_post_action>
    p_reg->INTENCLR = mask;
    c004:	2202      	movs	r2, #2
    c006:	4b07      	ldr	r3, [pc, #28]	; (c024 <z_nrf_clock_control_lf_on+0x128>)
	int key = isr_mode ? irq_lock() : 0;
    c008:	4607      	mov	r7, r0
    c00a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    c00e:	e7b3      	b.n	bf78 <z_nrf_clock_control_lf_on+0x7c>
    c010:	2000a8b0 	.word	0x2000a8b0
    c014:	2000a7ec 	.word	0x2000a7ec
    c018:	2000a81c 	.word	0x2000a81c
    c01c:	000201a3 	.word	0x000201a3
    c020:	0001fdfa 	.word	0x0001fdfa
    c024:	40005000 	.word	0x40005000
    c028:	2000f9f6 	.word	0x2000f9f6
    c02c:	e000e100 	.word	0xe000e100

0000c030 <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
    c030:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_rpmsg_platform_init();
    c032:	f000 f905 	bl	c240 <bt_rpmsg_platform_init>
	if (err < 0) {
    c036:	1e04      	subs	r4, r0, #0
    c038:	da06      	bge.n	c048 <bt_rpmsg_init+0x18>
		BT_ERR("Failed to initialize BT RPMSG (err %d)", err);
    c03a:	4622      	mov	r2, r4
    c03c:	2145      	movs	r1, #69	; 0x45
    c03e:	4807      	ldr	r0, [pc, #28]	; (c05c <bt_rpmsg_init+0x2c>)
		return err;
	}

	err = bt_hci_driver_register(&drv);
	if (err < 0) {
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
    c040:	f00e fc16 	bl	1a870 <printk>
	}

	return err;
}
    c044:	4620      	mov	r0, r4
    c046:	bd10      	pop	{r4, pc}
	err = bt_hci_driver_register(&drv);
    c048:	4805      	ldr	r0, [pc, #20]	; (c060 <bt_rpmsg_init+0x30>)
    c04a:	f003 ffd5 	bl	fff8 <bt_hci_driver_register>
	if (err < 0) {
    c04e:	1e04      	subs	r4, r0, #0
    c050:	daf8      	bge.n	c044 <bt_rpmsg_init+0x14>
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
    c052:	4622      	mov	r2, r4
    c054:	2145      	movs	r1, #69	; 0x45
    c056:	4803      	ldr	r0, [pc, #12]	; (c064 <bt_rpmsg_init+0x34>)
    c058:	e7f2      	b.n	c040 <bt_rpmsg_init+0x10>
    c05a:	bf00      	nop
    c05c:	00020215 	.word	0x00020215
    c060:	0001e9f0 	.word	0x0001e9f0
    c064:	00020241 	.word	0x00020241

0000c068 <bt_rpmsg_send>:
{
    c068:	b510      	push	{r4, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    c06a:	7d02      	ldrb	r2, [r0, #20]
    c06c:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    c06e:	2a02      	cmp	r2, #2
    c070:	d00c      	beq.n	c08c <bt_rpmsg_send+0x24>
    c072:	2a04      	cmp	r2, #4
    c074:	d009      	beq.n	c08a <bt_rpmsg_send+0x22>
    c076:	b1b2      	cbz	r2, c0a6 <bt_rpmsg_send+0x3e>
		BT_ERR("Unknown type %u", bt_buf_get_type(buf));
    c078:	2145      	movs	r1, #69	; 0x45
    c07a:	480c      	ldr	r0, [pc, #48]	; (c0ac <bt_rpmsg_send+0x44>)
		BT_ERR("Failed to send (err %d)", err);
    c07c:	f00e fbf8 	bl	1a870 <printk>
	net_buf_unref(buf);
    c080:	4620      	mov	r0, r4
    c082:	f009 fb7f 	bl	15784 <net_buf_unref>
}
    c086:	2000      	movs	r0, #0
    c088:	bd10      	pop	{r4, pc}
		pkt_indicator = RPMSG_ISO;
    c08a:	2205      	movs	r2, #5
 * @param buf Buffer to update.
 * @param val 8-bit value to be pushed to the buffer.
 */
static inline void net_buf_push_u8(struct net_buf *buf, uint8_t val)
{
	net_buf_simple_push_u8(&buf->b, val);
    c08c:	4611      	mov	r1, r2
    c08e:	f104 0008 	add.w	r0, r4, #8
    c092:	f011 f94c 	bl	1d32e <net_buf_simple_push_u8>
	err = bt_rpmsg_platform_send(buf);
    c096:	4620      	mov	r0, r4
    c098:	f000 f8ee 	bl	c278 <bt_rpmsg_platform_send>
	if (err < 0) {
    c09c:	1e02      	subs	r2, r0, #0
    c09e:	daef      	bge.n	c080 <bt_rpmsg_send+0x18>
		BT_ERR("Failed to send (err %d)", err);
    c0a0:	2145      	movs	r1, #69	; 0x45
    c0a2:	4803      	ldr	r0, [pc, #12]	; (c0b0 <bt_rpmsg_send+0x48>)
    c0a4:	e7ea      	b.n	c07c <bt_rpmsg_send+0x14>
	switch (bt_buf_get_type(buf)) {
    c0a6:	2201      	movs	r2, #1
    c0a8:	e7f0      	b.n	c08c <bt_rpmsg_send+0x24>
    c0aa:	bf00      	nop
    c0ac:	00020270 	.word	0x00020270
    c0b0:	00020285 	.word	0x00020285

0000c0b4 <bt_rpmsg_rx>:
{
    c0b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	pkt_indicator = *data++;
    c0b8:	4680      	mov	r8, r0
{
    c0ba:	4606      	mov	r6, r0
	pkt_indicator = *data++;
    c0bc:	f818 0b01 	ldrb.w	r0, [r8], #1
{
    c0c0:	460d      	mov	r5, r1
	switch (pkt_indicator) {
    c0c2:	2804      	cmp	r0, #4
	remaining -= sizeof(pkt_indicator);
    c0c4:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
    c0c8:	d009      	beq.n	c0de <bt_rpmsg_rx+0x2a>
    c0ca:	2805      	cmp	r0, #5
    c0cc:	d074      	beq.n	c1b8 <bt_rpmsg_rx+0x104>
    c0ce:	2802      	cmp	r0, #2
    c0d0:	f040 8099 	bne.w	c206 <bt_rpmsg_rx+0x152>
	if (remaining < sizeof(hdr)) {
    c0d4:	2b03      	cmp	r3, #3
    c0d6:	d84a      	bhi.n	c16e <bt_rpmsg_rx+0xba>
		BT_ERR("Not enough data for ACL header");
    c0d8:	2145      	movs	r1, #69	; 0x45
    c0da:	484f      	ldr	r0, [pc, #316]	; (c218 <bt_rpmsg_rx+0x164>)
    c0dc:	e003      	b.n	c0e6 <bt_rpmsg_rx+0x32>
	if (remaining < sizeof(hdr)) {
    c0de:	2b01      	cmp	r3, #1
    c0e0:	d806      	bhi.n	c0f0 <bt_rpmsg_rx+0x3c>
		BT_ERR("Not enough data for event header");
    c0e2:	2145      	movs	r1, #69	; 0x45
    c0e4:	484d      	ldr	r0, [pc, #308]	; (c21c <bt_rpmsg_rx+0x168>)
}
    c0e6:	b002      	add	sp, #8
    c0e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Not enough data for ACL header");
    c0ec:	f00e bbc0 	b.w	1a870 <printk>
	switch (evt_type) {
    c0f0:	7873      	ldrb	r3, [r6, #1]
    c0f2:	2b3e      	cmp	r3, #62	; 0x3e
    c0f4:	d117      	bne.n	c126 <bt_rpmsg_rx+0x72>
		uint8_t subevt_type = evt_data[sizeof(struct bt_hci_evt_hdr)];
    c0f6:	78f7      	ldrb	r7, [r6, #3]
		switch (subevt_type) {
    c0f8:	2f02      	cmp	r7, #2
    c0fa:	d016      	beq.n	c12a <bt_rpmsg_rx+0x76>
    c0fc:	f1a7 030d 	sub.w	r3, r7, #13
    c100:	425f      	negs	r7, r3
    c102:	415f      	adcs	r7, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
    c104:	2202      	movs	r2, #2
    c106:	4641      	mov	r1, r8
    c108:	a801      	add	r0, sp, #4
    c10a:	f00f fdf5 	bl	1bcf8 <memcpy>
	if (remaining != hdr.len) {
    c10e:	f89d 3005 	ldrb.w	r3, [sp, #5]
	remaining -= sizeof(hdr);
    c112:	3d03      	subs	r5, #3
	if (remaining != hdr.len) {
    c114:	429d      	cmp	r5, r3
    c116:	d00a      	beq.n	c12e <bt_rpmsg_rx+0x7a>
		BT_ERR("Event payload length is not correct");
    c118:	2145      	movs	r1, #69	; 0x45
    c11a:	4841      	ldr	r0, [pc, #260]	; (c220 <bt_rpmsg_rx+0x16c>)
			BT_ERR("No available event buffers!");
    c11c:	f00e fba8 	bl	1a870 <printk>
}
    c120:	b002      	add	sp, #8
    c122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    c126:	2700      	movs	r7, #0
    c128:	e7ec      	b.n	c104 <bt_rpmsg_rx+0x50>
			return true;
    c12a:	2701      	movs	r7, #1
    c12c:	e7ea      	b.n	c104 <bt_rpmsg_rx+0x50>
	buf = bt_buf_get_evt(hdr.evt, discardable, K_NO_WAIT);
    c12e:	2200      	movs	r2, #0
    c130:	2300      	movs	r3, #0
    c132:	4639      	mov	r1, r7
    c134:	f89d 0004 	ldrb.w	r0, [sp, #4]
    c138:	f002 fb88 	bl	e84c <bt_buf_get_evt>
	if (!buf) {
    c13c:	4604      	mov	r4, r0
    c13e:	b920      	cbnz	r0, c14a <bt_rpmsg_rx+0x96>
		if (discardable) {
    c140:	2f00      	cmp	r7, #0
    c142:	d1ed      	bne.n	c120 <bt_rpmsg_rx+0x6c>
			BT_ERR("No available event buffers!");
    c144:	2145      	movs	r1, #69	; 0x45
    c146:	4837      	ldr	r0, [pc, #220]	; (c224 <bt_rpmsg_rx+0x170>)
    c148:	e7e8      	b.n	c11c <bt_rpmsg_rx+0x68>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    c14a:	f100 0708 	add.w	r7, r0, #8
    c14e:	2202      	movs	r2, #2
    c150:	a901      	add	r1, sp, #4
    c152:	4638      	mov	r0, r7
    c154:	f011 f90e 	bl	1d374 <net_buf_simple_add_mem>
    c158:	462a      	mov	r2, r5
    c15a:	1cf1      	adds	r1, r6, #3
    c15c:	4638      	mov	r0, r7
    c15e:	f011 f909 	bl	1d374 <net_buf_simple_add_mem>
		bt_recv(buf);
    c162:	4620      	mov	r0, r4
}
    c164:	b002      	add	sp, #8
    c166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv(buf);
    c16a:	f003 bf1b 	b.w	ffa4 <bt_recv>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
    c16e:	2200      	movs	r2, #0
    c170:	2300      	movs	r3, #0
    c172:	2003      	movs	r0, #3
    c174:	f002 fb18 	bl	e7a8 <bt_buf_get_rx>
	if (buf) {
    c178:	4604      	mov	r4, r0
    c17a:	b1d0      	cbz	r0, c1b2 <bt_rpmsg_rx+0xfe>
		memcpy((void *)&hdr, data, sizeof(hdr));
    c17c:	2204      	movs	r2, #4
    c17e:	4641      	mov	r1, r8
    c180:	eb0d 0002 	add.w	r0, sp, r2
    c184:	f00f fdb8 	bl	1bcf8 <memcpy>
    c188:	2204      	movs	r2, #4
    c18a:	f104 0708 	add.w	r7, r4, #8
    c18e:	4638      	mov	r0, r7
    c190:	eb0d 0102 	add.w	r1, sp, r2
    c194:	f011 f8ee 	bl	1d374 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    c198:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    c19c:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    c19e:	429d      	cmp	r5, r3
    c1a0:	d02e      	beq.n	c200 <bt_rpmsg_rx+0x14c>
		BT_ERR("ACL payload length is not correct");
    c1a2:	2145      	movs	r1, #69	; 0x45
    c1a4:	4820      	ldr	r0, [pc, #128]	; (c228 <bt_rpmsg_rx+0x174>)
		BT_ERR("ISO payload length is not correct");
    c1a6:	f00e fb63 	bl	1a870 <printk>
		net_buf_unref(buf);
    c1aa:	4620      	mov	r0, r4
    c1ac:	f009 faea 	bl	15784 <net_buf_unref>
	if (buf) {
    c1b0:	e7b6      	b.n	c120 <bt_rpmsg_rx+0x6c>
		BT_ERR("No available ACL buffers!");
    c1b2:	2145      	movs	r1, #69	; 0x45
    c1b4:	481d      	ldr	r0, [pc, #116]	; (c22c <bt_rpmsg_rx+0x178>)
    c1b6:	e796      	b.n	c0e6 <bt_rpmsg_rx+0x32>
	if (remaining < sizeof(hdr)) {
    c1b8:	2b03      	cmp	r3, #3
    c1ba:	d802      	bhi.n	c1c2 <bt_rpmsg_rx+0x10e>
		BT_ERR("Not enough data for ISO header");
    c1bc:	2145      	movs	r1, #69	; 0x45
    c1be:	481c      	ldr	r0, [pc, #112]	; (c230 <bt_rpmsg_rx+0x17c>)
    c1c0:	e791      	b.n	c0e6 <bt_rpmsg_rx+0x32>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
    c1c2:	2200      	movs	r2, #0
    c1c4:	2300      	movs	r3, #0
    c1c6:	f002 faef 	bl	e7a8 <bt_buf_get_rx>
	if (buf) {
    c1ca:	4604      	mov	r4, r0
    c1cc:	b1a8      	cbz	r0, c1fa <bt_rpmsg_rx+0x146>
		memcpy((void *)&hdr, data, sizeof(hdr));
    c1ce:	2204      	movs	r2, #4
    c1d0:	4641      	mov	r1, r8
    c1d2:	eb0d 0002 	add.w	r0, sp, r2
    c1d6:	f00f fd8f 	bl	1bcf8 <memcpy>
    c1da:	2204      	movs	r2, #4
    c1dc:	f104 0708 	add.w	r7, r4, #8
    c1e0:	4638      	mov	r0, r7
    c1e2:	eb0d 0102 	add.w	r1, sp, r2
    c1e6:	f011 f8c5 	bl	1d374 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    c1ea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    c1ee:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    c1f0:	429d      	cmp	r5, r3
    c1f2:	d005      	beq.n	c200 <bt_rpmsg_rx+0x14c>
		BT_ERR("ISO payload length is not correct");
    c1f4:	2145      	movs	r1, #69	; 0x45
    c1f6:	480f      	ldr	r0, [pc, #60]	; (c234 <bt_rpmsg_rx+0x180>)
    c1f8:	e7d5      	b.n	c1a6 <bt_rpmsg_rx+0xf2>
		BT_ERR("No available ISO buffers!");
    c1fa:	2145      	movs	r1, #69	; 0x45
    c1fc:	480e      	ldr	r0, [pc, #56]	; (c238 <bt_rpmsg_rx+0x184>)
    c1fe:	e772      	b.n	c0e6 <bt_rpmsg_rx+0x32>
    c200:	462a      	mov	r2, r5
    c202:	1d71      	adds	r1, r6, #5
    c204:	e7aa      	b.n	c15c <bt_rpmsg_rx+0xa8>
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    c206:	4602      	mov	r2, r0
    c208:	2145      	movs	r1, #69	; 0x45
    c20a:	480c      	ldr	r0, [pc, #48]	; (c23c <bt_rpmsg_rx+0x188>)
}
    c20c:	b002      	add	sp, #8
    c20e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    c212:	f00e bb2d 	b.w	1a870 <printk>
    c216:	bf00      	nop
    c218:	00020312 	.word	0x00020312
    c21c:	000202a2 	.word	0x000202a2
    c220:	000202c8 	.word	0x000202c8
    c224:	000202f1 	.word	0x000202f1
    c228:	00020355 	.word	0x00020355
    c22c:	00020336 	.word	0x00020336
    c230:	0002037c 	.word	0x0002037c
    c234:	000203bf 	.word	0x000203bf
    c238:	000203a0 	.word	0x000203a0
    c23c:	000203e6 	.word	0x000203e6

0000c240 <bt_rpmsg_platform_init>:

	return RPMSG_SUCCESS;
}

int bt_rpmsg_platform_init(void)
{
    c240:	b508      	push	{r3, lr}
	int err;

	err = rpmsg_service_register_endpoint("nrf_bt_hci", endpoint_cb);
    c242:	4908      	ldr	r1, [pc, #32]	; (c264 <bt_rpmsg_platform_init+0x24>)
    c244:	4808      	ldr	r0, [pc, #32]	; (c268 <bt_rpmsg_platform_init+0x28>)
    c246:	f7ff fb89 	bl	b95c <rpmsg_service_register_endpoint>

	if (err < 0) {
    c24a:	1e02      	subs	r2, r0, #0
    c24c:	da05      	bge.n	c25a <bt_rpmsg_platform_init+0x1a>
		LOG_ERR("Registering endpoint failed with %d", err);
    c24e:	4807      	ldr	r0, [pc, #28]	; (c26c <bt_rpmsg_platform_init+0x2c>)
    c250:	2145      	movs	r1, #69	; 0x45
    c252:	f00e fb0d 	bl	1a870 <printk>
		return RPMSG_ERR_INIT;
    c256:	4806      	ldr	r0, [pc, #24]	; (c270 <bt_rpmsg_platform_init+0x30>)
	}

	endpoint_id = err;

	return RPMSG_SUCCESS;
}
    c258:	bd08      	pop	{r3, pc}
	endpoint_id = err;
    c25a:	4b06      	ldr	r3, [pc, #24]	; (c274 <bt_rpmsg_platform_init+0x34>)
	return RPMSG_SUCCESS;
    c25c:	2000      	movs	r0, #0
	endpoint_id = err;
    c25e:	601a      	str	r2, [r3, #0]
	return RPMSG_SUCCESS;
    c260:	e7fa      	b.n	c258 <bt_rpmsg_platform_init+0x18>
    c262:	bf00      	nop
    c264:	0001afc9 	.word	0x0001afc9
    c268:	00020413 	.word	0x00020413
    c26c:	0002041e 	.word	0x0002041e
    c270:	fffff82a 	.word	0xfffff82a
    c274:	2000a8b4 	.word	0x2000a8b4

0000c278 <bt_rpmsg_platform_send>:

int bt_rpmsg_platform_send(struct net_buf *buf)
{
	return rpmsg_service_send(endpoint_id, buf->data, buf->len);
    c278:	4b02      	ldr	r3, [pc, #8]	; (c284 <bt_rpmsg_platform_send+0xc>)
    c27a:	8982      	ldrh	r2, [r0, #12]
    c27c:	6881      	ldr	r1, [r0, #8]
    c27e:	6818      	ldr	r0, [r3, #0]
    c280:	f7ff bb98 	b.w	b9b4 <rpmsg_service_send>
    c284:	2000a8b4 	.word	0x2000a8b4

0000c288 <bt_rpmsg_platform_endpoint_is_bound>:
}

int bt_rpmsg_platform_endpoint_is_bound(void)
{
    c288:	b508      	push	{r3, lr}
	return rpmsg_service_endpoint_is_bound(endpoint_id);
    c28a:	4b02      	ldr	r3, [pc, #8]	; (c294 <bt_rpmsg_platform_endpoint_is_bound+0xc>)
    c28c:	6818      	ldr	r0, [r3, #0]
    c28e:	f7ff fb87 	bl	b9a0 <rpmsg_service_endpoint_is_bound>
}
    c292:	bd08      	pop	{r3, pc}
    c294:	2000a8b4 	.word	0x2000a8b4

0000c298 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
    c298:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    c29a:	4c06      	ldr	r4, [pc, #24]	; (c2b4 <z_clock_isr+0x1c>)
    c29c:	4806      	ldr	r0, [pc, #24]	; (c2b8 <z_clock_isr+0x20>)
    c29e:	4621      	mov	r1, r4
    c2a0:	2217      	movs	r2, #23
    c2a2:	f00e fae5 	bl	1a870 <printk>
    c2a6:	4620      	mov	r0, r4
}
    c2a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    c2ac:	2117      	movs	r1, #23
    c2ae:	f00e bd85 	b.w	1adbc <assert_post_action>
    c2b2:	bf00      	nop
    c2b4:	0002045b 	.word	0x0002045b
    c2b8:	0001fdfa 	.word	0x0001fdfa

0000c2bc <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    c2bc:	4a04      	ldr	r2, [pc, #16]	; (c2d0 <sys_clock_timeout_handler+0x14>)
    c2be:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    c2c0:	1ac8      	subs	r0, r1, r3
    c2c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    c2c6:	4403      	add	r3, r0
    c2c8:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    c2ca:	f00d bdd9 	b.w	19e80 <z_clock_announce>
    c2ce:	bf00      	nop
    c2d0:	2000a8c4 	.word	0x2000a8c4

0000c2d4 <set_absolute_alarm>:
{
    c2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    c2d8:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c2dc:	f04f 0900 	mov.w	r9, #0
    c2e0:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    c2e2:	f100 0450 	add.w	r4, r0, #80	; 0x50
    c2e6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
    c2ea:	00a4      	lsls	r4, r4, #2
    c2ec:	f506 36a8 	add.w	r6, r6, #86016	; 0x15000
    c2f0:	b2a4      	uxth	r4, r4
    c2f2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    return p_reg->CC[ch];
    c2f6:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    c2fa:	f8df 806c 	ldr.w	r8, [pc, #108]	; c368 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    c2fe:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c302:	f504 34a8 	add.w	r4, r4, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    c306:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    c308:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    c30c:	eba3 030a 	sub.w	r3, r3, sl
    c310:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    c314:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    c318:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    c31a:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    c31e:	d102      	bne.n	c326 <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
    c320:	2013      	movs	r0, #19
    c322:	f011 fed0 	bl	1e0c6 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    c326:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    c32a:	1aab      	subs	r3, r5, r2
    c32c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    c330:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    c334:	bf88      	it	hi
    c336:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c338:	f8c4 9000 	str.w	r9, [r4]
    c33c:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    c33e:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    c342:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    c346:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    c34a:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    c34e:	459a      	cmp	sl, r3
    c350:	d006      	beq.n	c360 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
    c352:	1aeb      	subs	r3, r5, r3
    c354:	3b02      	subs	r3, #2
    c356:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    c35a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    c35e:	d801      	bhi.n	c364 <set_absolute_alarm+0x90>
}
    c360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    c364:	462b      	mov	r3, r5
    c366:	e7cf      	b.n	c308 <set_absolute_alarm+0x34>
    c368:	40015000 	.word	0x40015000

0000c36c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    c36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    c36e:	2500      	movs	r5, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c370:	462f      	mov	r7, r5
    c372:	4c10      	ldr	r4, [pc, #64]	; (c3b4 <rtc_nrf_isr+0x48>)
    c374:	6826      	ldr	r6, [r4, #0]
    return p_reg->INTENSET & mask;
    c376:	4b10      	ldr	r3, [pc, #64]	; (c3b8 <rtc_nrf_isr+0x4c>)
    c378:	b105      	cbz	r5, c37c <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    c37a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c37c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    c380:	03d2      	lsls	r2, r2, #15
    c382:	d5fa      	bpl.n	c37a <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c384:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    c388:	2a00      	cmp	r2, #0
    c38a:	d0f6      	beq.n	c37a <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c38c:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140
    c390:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    c394:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    c398:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    c39c:	2501      	movs	r5, #1
    return p_reg->CC[ch];
    c39e:	f8d3 1540 	ldr.w	r1, [r3, #1344]	; 0x540
			if (handler) {
    c3a2:	b126      	cbz	r6, c3ae <rtc_nrf_isr+0x42>
				handler(chan, cc_val,
    c3a4:	2000      	movs	r0, #0
    c3a6:	6862      	ldr	r2, [r4, #4]
    c3a8:	6027      	str	r7, [r4, #0]
    c3aa:	47b0      	blx	r6
    c3ac:	e7e2      	b.n	c374 <rtc_nrf_isr+0x8>
    c3ae:	6026      	str	r6, [r4, #0]
}
    c3b0:	e7e3      	b.n	c37a <rtc_nrf_isr+0xe>
    c3b2:	bf00      	nop
    c3b4:	2000a8b8 	.word	0x2000a8b8
    c3b8:	40015000 	.word	0x40015000

0000c3bc <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    c3bc:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    c3be:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    c3c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    c3c4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    c3c8:	4c0c      	ldr	r4, [pc, #48]	; (c3fc <z_clock_driver_init+0x40>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    c3ca:	2101      	movs	r1, #1
    c3cc:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    c3d0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    c3d4:	4b0a      	ldr	r3, [pc, #40]	; (c400 <z_clock_driver_init+0x44>)
    c3d6:	2015      	movs	r0, #21
    c3d8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    c3dc:	462a      	mov	r2, r5
    c3de:	f001 fb17 	bl	da10 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    c3e2:	2015      	movs	r0, #21
    c3e4:	f001 faf6 	bl	d9d4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    c3e8:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    c3ea:	4a06      	ldr	r2, [pc, #24]	; (c404 <z_clock_driver_init+0x48>)
    c3ec:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    c3ee:	2002      	movs	r0, #2
    c3f0:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    c3f2:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    c3f4:	f7ff fd82 	bl	befc <z_nrf_clock_control_lf_on>

	return 0;
}
    c3f8:	4628      	mov	r0, r5
    c3fa:	bd38      	pop	{r3, r4, r5, pc}
    c3fc:	40015000 	.word	0x40015000
    c400:	e000e100 	.word	0xe000e100
    c404:	2000a8c0 	.word	0x2000a8c0

0000c408 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    c408:	4a13      	ldr	r2, [pc, #76]	; (c458 <z_clock_set_timeout+0x50>)
    c40a:	f1b0 3fff 	cmp.w	r0, #4294967295
    c40e:	bf14      	ite	ne
    c410:	4603      	movne	r3, r0
    c412:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    c414:	3b01      	subs	r3, #1
    c416:	2b00      	cmp	r3, #0
    c418:	dd1c      	ble.n	c454 <z_clock_set_timeout+0x4c>
    c41a:	4293      	cmp	r3, r2
    c41c:	bfa8      	it	ge
    c41e:	4613      	movge	r3, r2
     return p_reg->COUNTER;
    c420:	4a0e      	ldr	r2, [pc, #56]	; (c45c <z_clock_set_timeout+0x54>)
    c422:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    c426:	4a0e      	ldr	r2, [pc, #56]	; (c460 <z_clock_set_timeout+0x58>)
    c428:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    c42a:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    c42c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    c430:	bf18      	it	ne
    c432:	2300      	movne	r3, #0
	return (a - b) & COUNTER_MAX;
    c434:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    c438:	3201      	adds	r2, #1
	cc_data[chan].callback = handler;
    c43a:	480a      	ldr	r0, [pc, #40]	; (c464 <z_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    c43c:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    c43e:	4a0a      	ldr	r2, [pc, #40]	; (c468 <z_clock_set_timeout+0x60>)
    c440:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    c442:	2000      	movs	r0, #0
    c444:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    c446:	4a04      	ldr	r2, [pc, #16]	; (c458 <z_clock_set_timeout+0x50>)
    c448:	4293      	cmp	r3, r2
    c44a:	bf94      	ite	ls
    c44c:	18c9      	addls	r1, r1, r3
    c44e:	1889      	addhi	r1, r1, r2
    c450:	f7ff bf40 	b.w	c2d4 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    c454:	2300      	movs	r3, #0
    c456:	e7e3      	b.n	c420 <z_clock_set_timeout+0x18>
    c458:	007fffff 	.word	0x007fffff
    c45c:	40015000 	.word	0x40015000
    c460:	2000a8c4 	.word	0x2000a8c4
    c464:	0000c2bd 	.word	0x0000c2bd
    c468:	2000a8b8 	.word	0x2000a8b8

0000c46c <z_clock_elapsed>:
	cyc += last_count;
	compare_set(0, cyc, sys_clock_timeout_handler, NULL);
}

uint32_t z_clock_elapsed(void)
{
    c46c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    c46e:	f04f 0320 	mov.w	r3, #32
    c472:	f3ef 8511 	mrs	r5, BASEPRI
    c476:	f383 8811 	msr	BASEPRI, r3
    c47a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c47e:	4815      	ldr	r0, [pc, #84]	; (c4d4 <z_clock_elapsed+0x68>)
    c480:	f00d fa0a 	bl	19898 <z_spin_lock_valid>
    c484:	b940      	cbnz	r0, c498 <z_clock_elapsed+0x2c>
    c486:	4914      	ldr	r1, [pc, #80]	; (c4d8 <z_clock_elapsed+0x6c>)
    c488:	4814      	ldr	r0, [pc, #80]	; (c4dc <z_clock_elapsed+0x70>)
    c48a:	227c      	movs	r2, #124	; 0x7c
    c48c:	f00e f9f0 	bl	1a870 <printk>
    c490:	217c      	movs	r1, #124	; 0x7c
    c492:	4811      	ldr	r0, [pc, #68]	; (c4d8 <z_clock_elapsed+0x6c>)
    c494:	f00e fc92 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
    c498:	480e      	ldr	r0, [pc, #56]	; (c4d4 <z_clock_elapsed+0x68>)
    c49a:	f00d fa19 	bl	198d0 <z_spin_lock_set_owner>
    c49e:	4b10      	ldr	r3, [pc, #64]	; (c4e0 <z_clock_elapsed+0x74>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c4a0:	480c      	ldr	r0, [pc, #48]	; (c4d4 <z_clock_elapsed+0x68>)
    c4a2:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    c4a6:	4b0f      	ldr	r3, [pc, #60]	; (c4e4 <z_clock_elapsed+0x78>)
	return (a - b) & COUNTER_MAX;
    c4a8:	681b      	ldr	r3, [r3, #0]
    c4aa:	1ae4      	subs	r4, r4, r3
    c4ac:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    c4b0:	f00d fa00 	bl	198b4 <z_spin_unlock_valid>
    c4b4:	b940      	cbnz	r0, c4c8 <z_clock_elapsed+0x5c>
    c4b6:	4908      	ldr	r1, [pc, #32]	; (c4d8 <z_clock_elapsed+0x6c>)
    c4b8:	4808      	ldr	r0, [pc, #32]	; (c4dc <z_clock_elapsed+0x70>)
    c4ba:	22a7      	movs	r2, #167	; 0xa7
    c4bc:	f00e f9d8 	bl	1a870 <printk>
    c4c0:	21a7      	movs	r1, #167	; 0xa7
    c4c2:	4805      	ldr	r0, [pc, #20]	; (c4d8 <z_clock_elapsed+0x6c>)
    c4c4:	f00e fc7a 	bl	1adbc <assert_post_action>
	__asm__ volatile(
    c4c8:	f385 8811 	msr	BASEPRI, r5
    c4cc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    c4d0:	4620      	mov	r0, r4
    c4d2:	bd38      	pop	{r3, r4, r5, pc}
    c4d4:	2000a8c8 	.word	0x2000a8c8
    c4d8:	0001fe34 	.word	0x0001fe34
    c4dc:	0001fdfa 	.word	0x0001fdfa
    c4e0:	40015000 	.word	0x40015000
    c4e4:	2000a8c4 	.word	0x2000a8c4

0000c4e8 <user_data_alloc.constprop.0>:

/* Currently only one instance is supported */
static struct bt_gatt_dm bt_gatt_dm_inst;

/* Returns pointer to newly allocated space in a dm->data_chunk */
static void *user_data_alloc(struct bt_gatt_dm *dm,
    c4e8:	b538      	push	{r3, r4, r5, lr}
	struct data_chunk_item *item;

	/* Round up len to 32 bits to make sure that return pointers are always
	 * correctly aligned.
	 */
	len = (len + DATA_ALIGN - 1) & ~(DATA_ALIGN - 1);
    c4ea:	1cc5      	adds	r5, r0, #3
    c4ec:	f025 0503 	bic.w	r5, r5, #3

	__ASSERT_NO_MSG(len <= CHUNK_DATA_SIZE);
    c4f0:	2d74      	cmp	r5, #116	; 0x74
    c4f2:	d908      	bls.n	c506 <user_data_alloc.constprop.0+0x1e>
    c4f4:	4917      	ldr	r1, [pc, #92]	; (c554 <user_data_alloc.constprop.0+0x6c>)
    c4f6:	4818      	ldr	r0, [pc, #96]	; (c558 <user_data_alloc.constprop.0+0x70>)
    c4f8:	2250      	movs	r2, #80	; 0x50
    c4fa:	f00e f9b9 	bl	1a870 <printk>
    c4fe:	2150      	movs	r1, #80	; 0x50
    c500:	4814      	ldr	r0, [pc, #80]	; (c554 <user_data_alloc.constprop.0+0x6c>)
    c502:	f00e fc5b 	bl	1adbc <assert_post_action>
	return list->head;
    c506:	4c15      	ldr	r4, [pc, #84]	; (c55c <user_data_alloc.constprop.0+0x74>)

	if (sys_slist_is_empty(&dm->chunk_list) ||
    c508:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    c50c:	b123      	cbz	r3, c518 <user_data_alloc.constprop.0+0x30>
	    dm->cur_chunk_len + len > CHUNK_DATA_SIZE) {
    c50e:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    c512:	442b      	add	r3, r5
	if (sys_slist_is_empty(&dm->chunk_list) ||
    c514:	2b74      	cmp	r3, #116	; 0x74
    c516:	d919      	bls.n	c54c <user_data_alloc.constprop.0+0x64>
	return k_aligned_alloc(sizeof(void *), size);
    c518:	2178      	movs	r1, #120	; 0x78
    c51a:	2004      	movs	r0, #4
    c51c:	f00e f8ac 	bl	1a678 <k_aligned_alloc>

		item = k_malloc(sizeof(struct data_chunk_item));

		if (!item) {
    c520:	b178      	cbz	r0, c542 <user_data_alloc.constprop.0+0x5a>
	parent->next = child;
    c522:	2300      	movs	r3, #0
	return list->tail;
    c524:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	parent->next = child;
    c528:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
    c52a:	b95a      	cbnz	r2, c544 <user_data_alloc.constprop.0+0x5c>
	list->head = node;
    c52c:	e9c4 004f 	strd	r0, r0, [r4, #316]	; 0x13c
			return NULL;
		}

		sys_slist_append(&dm->chunk_list, &item->node);
		dm->cur_chunk_len = 0;
    c530:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
		item = SYS_SLIST_PEEK_TAIL_CONTAINER(&dm->chunk_list, item,
						     node);

	}

	user_data_loc = &item->data[dm->cur_chunk_len];
    c534:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    c538:	1d1a      	adds	r2, r3, #4
	dm->cur_chunk_len += len;
    c53a:	441d      	add	r5, r3
	user_data_loc = &item->data[dm->cur_chunk_len];
    c53c:	4410      	add	r0, r2
	dm->cur_chunk_len += len;
    c53e:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144

	return user_data_loc;
}
    c542:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
    c544:	6010      	str	r0, [r2, #0]
	list->tail = node;
    c546:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
}
    c54a:	e7f1      	b.n	c530 <user_data_alloc.constprop.0+0x48>
	return list->tail;
    c54c:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
    c550:	e7f0      	b.n	c534 <user_data_alloc.constprop.0+0x4c>
    c552:	bf00      	nop
    c554:	000204c8 	.word	0x000204c8
    c558:	0001fdfa 	.word	0x0001fdfa
    c55c:	2000a8cc 	.word	0x2000a8cc

0000c560 <discovery_complete.constprop.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c560:	4808      	ldr	r0, [pc, #32]	; (c584 <discovery_complete.constprop.0+0x24>)
    c562:	f500 739c 	add.w	r3, r0, #312	; 0x138
    c566:	e8d3 2fef 	ldaex	r2, [r3]
    c56a:	f042 0202 	orr.w	r2, r2, #2
    c56e:	e8c3 2fe1 	stlex	r1, r2, [r3]
    c572:	2900      	cmp	r1, #0
    c574:	d1f7      	bne.n	c566 <discovery_complete.constprop.0+0x6>

static void discovery_complete(struct bt_gatt_dm *dm)
{
	LOG_DBG("Discovery complete.");
	atomic_set_bit(dm->state_flags, STATE_ATTRS_RELEASE_PENDING);
	if (dm->callback->completed) {
    c576:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
    c57a:	681b      	ldr	r3, [r3, #0]
    c57c:	b10b      	cbz	r3, c582 <discovery_complete.constprop.0+0x22>
		dm->callback->completed(dm, dm->context);
    c57e:	6841      	ldr	r1, [r0, #4]
    c580:	4718      	bx	r3
	}
}
    c582:	4770      	bx	lr
    c584:	2000a8cc 	.word	0x2000a8cc

0000c588 <discovery_complete_error.constprop.0>:
	if (dm->callback->service_not_found) {
		dm->callback->service_not_found(dm->conn, dm->context);
	}
}

static void discovery_complete_error(struct bt_gatt_dm *dm, int err)
    c588:	b570      	push	{r4, r5, r6, lr}
{
	svc_attr_memory_release(dm);
    c58a:	4c0b      	ldr	r4, [pc, #44]	; (c5b8 <discovery_complete_error.constprop.0+0x30>)
static void discovery_complete_error(struct bt_gatt_dm *dm, int err)
    c58c:	4605      	mov	r5, r0
	svc_attr_memory_release(dm);
    c58e:	4620      	mov	r0, r4
    c590:	f00e fd40 	bl	1b014 <svc_attr_memory_release>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c594:	f06f 0101 	mvn.w	r1, #1
    c598:	f504 709c 	add.w	r0, r4, #312	; 0x138
    c59c:	f00e fd51 	bl	1b042 <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	if (dm->callback->error_found) {
    c5a0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    c5a4:	689b      	ldr	r3, [r3, #8]
    c5a6:	b12b      	cbz	r3, c5b4 <discovery_complete_error.constprop.0+0x2c>
		dm->callback->error_found(dm->conn, err, dm->context);
    c5a8:	4629      	mov	r1, r5
    c5aa:	6862      	ldr	r2, [r4, #4]
    c5ac:	6820      	ldr	r0, [r4, #0]
	}
}
    c5ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		dm->callback->error_found(dm->conn, err, dm->context);
    c5b2:	4718      	bx	r3
}
    c5b4:	bd70      	pop	{r4, r5, r6, pc}
    c5b6:	bf00      	nop
    c5b8:	2000a8cc 	.word	0x2000a8cc

0000c5bc <attr_store.constprop.0>:
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    c5bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    c5c0:	4c1f      	ldr	r4, [pc, #124]	; (c640 <attr_store.constprop.0+0x84>)
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    c5c2:	4607      	mov	r7, r0
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    c5c4:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    c5c8:	460e      	mov	r6, r1
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    c5ca:	2b22      	cmp	r3, #34	; 0x22
    c5cc:	d907      	bls.n	c5de <attr_store.constprop.0+0x22>
		LOG_ERR("No space for new attribute.");
    c5ce:	2145      	movs	r1, #69	; 0x45
    c5d0:	481c      	ldr	r0, [pc, #112]	; (c644 <attr_store.constprop.0+0x88>)
    c5d2:	f00e f94d 	bl	1a870 <printk>
		return NULL;
    c5d6:	2500      	movs	r5, #0
}
    c5d8:	4628      	mov	r0, r5
    c5da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	size_t uuid_size = get_uuid_size(attr->uuid);
    c5de:	6803      	ldr	r3, [r0, #0]
    c5e0:	781b      	ldrb	r3, [r3, #0]
	switch (uuid->type) {
    c5e2:	2b02      	cmp	r3, #2
    c5e4:	d80d      	bhi.n	c602 <attr_store.constprop.0+0x46>
    c5e6:	4a18      	ldr	r2, [pc, #96]	; (c648 <attr_store.constprop.0+0x8c>)
    c5e8:	f812 9003 	ldrb.w	r9, [r2, r3]
	uint8_t *attr_data = user_data_alloc(dm, additional_len + uuid_size);
    c5ec:	eb06 0009 	add.w	r0, r6, r9
    c5f0:	f7ff ff7a 	bl	c4e8 <user_data_alloc.constprop.0>
	if (!attr_data) {
    c5f4:	4605      	mov	r5, r0
    c5f6:	b958      	cbnz	r0, c610 <attr_store.constprop.0+0x54>
		LOG_ERR("No space for attribute data.");
    c5f8:	2145      	movs	r1, #69	; 0x45
    c5fa:	4814      	ldr	r0, [pc, #80]	; (c64c <attr_store.constprop.0+0x90>)
    c5fc:	f00e f938 	bl	1a870 <printk>
		return NULL;
    c600:	e7ea      	b.n	c5d8 <attr_store.constprop.0+0x1c>
		LOG_ERR("Unsupported UUID type.");
    c602:	2145      	movs	r1, #69	; 0x45
    c604:	4812      	ldr	r0, [pc, #72]	; (c650 <attr_store.constprop.0+0x94>)
    c606:	f00e f933 	bl	1a870 <printk>
    c60a:	f04f 0900 	mov.w	r9, #0
    c60e:	e7ed      	b.n	c5ec <attr_store.constprop.0+0x30>
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    c610:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    c614:	4430      	add	r0, r6
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    c616:	1c5a      	adds	r2, r3, #1
    c618:	3303      	adds	r3, #3
    c61a:	00db      	lsls	r3, r3, #3
    c61c:	f103 0804 	add.w	r8, r3, #4
    c620:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    c624:	44a0      	add	r8, r4
	cur_attr->handle = attr->handle;
    c626:	441c      	add	r4, r3
    c628:	8a3b      	ldrh	r3, [r7, #16]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    c62a:	464a      	mov	r2, r9
	cur_attr->handle = attr->handle;
    c62c:	8123      	strh	r3, [r4, #8]
	cur_attr->perm = attr->perm;
    c62e:	7cbb      	ldrb	r3, [r7, #18]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    c630:	6839      	ldr	r1, [r7, #0]
	cur_attr->perm = attr->perm;
    c632:	72a3      	strb	r3, [r4, #10]
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    c634:	6060      	str	r0, [r4, #4]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    c636:	f00f fb5f 	bl	1bcf8 <memcpy>
	return cur_attr;
    c63a:	4645      	mov	r5, r8
    c63c:	e7cc      	b.n	c5d8 <attr_store.constprop.0+0x1c>
    c63e:	bf00      	nop
    c640:	2000a8cc 	.word	0x2000a8cc
    c644:	000204f3 	.word	0x000204f3
    c648:	000206be 	.word	0x000206be
    c64c:	00020530 	.word	0x00020530
    c650:	00020514 	.word	0x00020514

0000c654 <uuid_store.constprop.0>:
static struct bt_uuid *uuid_store(struct bt_gatt_dm *dm,
    c654:	b570      	push	{r4, r5, r6, lr}
	if (!uuid) {
    c656:	4604      	mov	r4, r0
    c658:	b930      	cbnz	r0, c668 <uuid_store.constprop.0+0x14>
		LOG_ERR("Uninitialized UUID.");
    c65a:	2145      	movs	r1, #69	; 0x45
    c65c:	480c      	ldr	r0, [pc, #48]	; (c690 <uuid_store.constprop.0+0x3c>)
    c65e:	f00e f907 	bl	1a870 <printk>
    c662:	4625      	mov	r5, r4
}
    c664:	4628      	mov	r0, r5
    c666:	bd70      	pop	{r4, r5, r6, pc}
	size_t size = get_uuid_size(uuid);
    c668:	7803      	ldrb	r3, [r0, #0]
	switch (uuid->type) {
    c66a:	2b02      	cmp	r3, #2
    c66c:	d80a      	bhi.n	c684 <uuid_store.constprop.0+0x30>
    c66e:	4a09      	ldr	r2, [pc, #36]	; (c694 <uuid_store.constprop.0+0x40>)
    c670:	5cd6      	ldrb	r6, [r2, r3]
	void *buffer = user_data_alloc(dm, size);
    c672:	4630      	mov	r0, r6
    c674:	f7ff ff38 	bl	c4e8 <user_data_alloc.constprop.0>
	memcpy(buffer, uuid, size);
    c678:	4632      	mov	r2, r6
    c67a:	4621      	mov	r1, r4
	void *buffer = user_data_alloc(dm, size);
    c67c:	4605      	mov	r5, r0
	memcpy(buffer, uuid, size);
    c67e:	f00f fb3b 	bl	1bcf8 <memcpy>
	return (struct bt_uuid *)buffer;
    c682:	e7ef      	b.n	c664 <uuid_store.constprop.0+0x10>
		LOG_ERR("Unsupported UUID type.");
    c684:	2145      	movs	r1, #69	; 0x45
    c686:	4804      	ldr	r0, [pc, #16]	; (c698 <uuid_store.constprop.0+0x44>)
    c688:	f00e f8f2 	bl	1a870 <printk>
    c68c:	2600      	movs	r6, #0
    c68e:	e7f0      	b.n	c672 <uuid_store.constprop.0+0x1e>
    c690:	00020552 	.word	0x00020552
    c694:	000206be 	.word	0x000206be
    c698:	00020514 	.word	0x00020514

0000c69c <discovery_callback>:
}

static uint8_t discovery_callback(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr,
			       struct bt_gatt_discover_params *params)
{
    c69c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
		LOG_DBG("NULL attribute");
	} else {
		LOG_DBG("Attr: handle %u", attr->handle);
	}

	if (conn != bt_gatt_dm_inst.conn) {
    c6a0:	4e79      	ldr	r6, [pc, #484]	; (c888 <discovery_callback+0x1ec>)
{
    c6a2:	460d      	mov	r5, r1
	if (conn != bt_gatt_dm_inst.conn) {
    c6a4:	6833      	ldr	r3, [r6, #0]
    c6a6:	4283      	cmp	r3, r0
    c6a8:	d008      	beq.n	c6bc <discovery_callback+0x20>
		LOG_ERR("Unexpected conn object. Aborting.");
    c6aa:	4878      	ldr	r0, [pc, #480]	; (c88c <discovery_callback+0x1f0>)
    c6ac:	2145      	movs	r1, #69	; 0x45
    c6ae:	f00e f8df 	bl	1a870 <printk>
		discovery_complete_error(&bt_gatt_dm_inst, -EFAULT);
    c6b2:	f06f 000d 	mvn.w	r0, #13
				discovery_complete_error(dm, err);
    c6b6:	f7ff ff67 	bl	c588 <discovery_complete_error.constprop.0>
    c6ba:	e031      	b.n	c720 <discovery_callback+0x84>
    c6bc:	7c13      	ldrb	r3, [r2, #16]
		return BT_GATT_ITER_STOP;
	}

	switch (params->type) {
    c6be:	2b03      	cmp	r3, #3
    c6c0:	f000 80ae 	beq.w	c820 <discovery_callback+0x184>
    c6c4:	d80d      	bhi.n	c6e2 <discovery_callback+0x46>
    c6c6:	2b02      	cmp	r3, #2
    c6c8:	d126      	bne.n	c718 <discovery_callback+0x7c>
		return discovery_process_characteristic(&bt_gatt_dm_inst,
							attr,
							params);
	default:
		/* This should not be possible */
		__ASSERT(false, "Unknown param type.");
    c6ca:	f240 12b3 	movw	r2, #435	; 0x1b3
    c6ce:	4970      	ldr	r1, [pc, #448]	; (c890 <discovery_callback+0x1f4>)
    c6d0:	4870      	ldr	r0, [pc, #448]	; (c894 <discovery_callback+0x1f8>)
    c6d2:	f00e f8cd 	bl	1a870 <printk>
    c6d6:	f240 11b3 	movw	r1, #435	; 0x1b3
    c6da:	486d      	ldr	r0, [pc, #436]	; (c890 <discovery_callback+0x1f4>)
    c6dc:	f00e fb6e 	bl	1adbc <assert_post_action>
    c6e0:	e01e      	b.n	c720 <discovery_callback+0x84>
	switch (params->type) {
    c6e2:	2b05      	cmp	r3, #5
    c6e4:	d1f1      	bne.n	c6ca <discovery_callback+0x2e>
	if (!attr) {
    c6e6:	2900      	cmp	r1, #0
    c6e8:	f040 8081 	bne.w	c7ee <discovery_callback+0x152>
		if (dm->cur_attr_id > 1) {
    c6ec:	f8d6 3134 	ldr.w	r3, [r6, #308]	; 0x134
    c6f0:	2b01      	cmp	r3, #1
    c6f2:	d979      	bls.n	c7e8 <discovery_callback+0x14c>
				dm->attrs[0].handle + 1;
    c6f4:	8c33      	ldrh	r3, [r6, #32]
			int err = bt_gatt_discover(dm->conn,
    c6f6:	f106 0108 	add.w	r1, r6, #8
				dm->attrs[0].handle + 1;
    c6fa:	3301      	adds	r3, #1
			dm->discover_params.start_handle =
    c6fc:	8233      	strh	r3, [r6, #16]
			dm->discover_params.type =
    c6fe:	2303      	movs	r3, #3
    c700:	7633      	strb	r3, [r6, #24]
			int err = bt_gatt_discover(dm->conn,
    c702:	f007 feff 	bl	14504 <bt_gatt_discover>
			if (err) {
    c706:	4604      	mov	r4, r0
    c708:	b150      	cbz	r0, c720 <discovery_callback+0x84>
				LOG_ERR("Characteristic discover failed,"
    c70a:	4602      	mov	r2, r0
    c70c:	2145      	movs	r1, #69	; 0x45
    c70e:	4862      	ldr	r0, [pc, #392]	; (c898 <discovery_callback+0x1fc>)
    c710:	f00e f8ae 	bl	1a870 <printk>
				discovery_complete_error(dm, err);
    c714:	4620      	mov	r0, r4
    c716:	e7ce      	b.n	c6b6 <discovery_callback+0x1a>
	if (!attr) {
    c718:	b921      	cbnz	r1, c724 <discovery_callback+0x88>
		discovery_complete_not_found(dm);
    c71a:	4630      	mov	r0, r6
    c71c:	f00e fc9c 	bl	1b058 <discovery_complete_not_found>
		break;
	}

	return BT_GATT_ITER_STOP;
    c720:	2400      	movs	r4, #0
    c722:	e04a      	b.n	c7ba <discovery_callback+0x11e>
	struct bt_gatt_service_val *service_val = attr->user_data;
    c724:	f8d1 800c 	ldr.w	r8, [r1, #12]
		attr_store(dm, attr, sizeof(*service_val));
    c728:	4628      	mov	r0, r5
    c72a:	2108      	movs	r1, #8
    c72c:	f7ff ff46 	bl	c5bc <attr_store.constprop.0>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
    c730:	2400      	movs	r4, #0
    c732:	f44f 5320 	mov.w	r3, #10240	; 0x2800
		attr_store(dm, attr, sizeof(*service_val));
    c736:	4607      	mov	r7, r0
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
    c738:	4669      	mov	r1, sp
    c73a:	6828      	ldr	r0, [r5, #0]
    c73c:	f88d 4000 	strb.w	r4, [sp]
    c740:	f8ad 3002 	strh.w	r3, [sp, #2]
    c744:	f00f fb4d 	bl	1bde2 <bt_uuid_cmp>
    c748:	b1a8      	cbz	r0, c776 <discovery_callback+0xda>
    c74a:	f642 0301 	movw	r3, #10241	; 0x2801
    c74e:	6828      	ldr	r0, [r5, #0]
    c750:	a901      	add	r1, sp, #4
    c752:	f88d 4004 	strb.w	r4, [sp, #4]
    c756:	f8ad 3006 	strh.w	r3, [sp, #6]
    c75a:	f00f fb42 	bl	1bde2 <bt_uuid_cmp>
    c75e:	b150      	cbz	r0, c776 <discovery_callback+0xda>
    c760:	494b      	ldr	r1, [pc, #300]	; (c890 <discovery_callback+0x1f4>)
    c762:	484c      	ldr	r0, [pc, #304]	; (c894 <discovery_callback+0x1f8>)
    c764:	f240 1217 	movw	r2, #279	; 0x117
    c768:	f00e f882 	bl	1a870 <printk>
    c76c:	f240 1117 	movw	r1, #279	; 0x117
    c770:	4847      	ldr	r0, [pc, #284]	; (c890 <discovery_callback+0x1f4>)
    c772:	f00e fb23 	bl	1adbc <assert_post_action>
	if (!cur_attr) {
    c776:	b937      	cbnz	r7, c786 <discovery_callback+0xea>
		LOG_ERR("Not enough memory for service attribute.");
    c778:	4848      	ldr	r0, [pc, #288]	; (c89c <discovery_callback+0x200>)
    c77a:	2145      	movs	r1, #69	; 0x45
    c77c:	f00e f878 	bl	1a870 <printk>
		discovery_complete_error(dm, -ENOMEM);
    c780:	f06f 000b 	mvn.w	r0, #11
    c784:	e797      	b.n	c6b6 <discovery_callback+0x1a>
		bt_gatt_dm_attr_service_val(cur_attr);
    c786:	4638      	mov	r0, r7
    c788:	f00e fc7a 	bl	1b080 <bt_gatt_dm_attr_service_val>
    c78c:	4605      	mov	r5, r0
	memcpy(cur_service_val, service_val, sizeof(*cur_service_val));
    c78e:	2208      	movs	r2, #8
    c790:	4641      	mov	r1, r8
    c792:	f00f fab1 	bl	1bcf8 <memcpy>
	cur_service_val->uuid = uuid_store(dm, cur_service_val->uuid);
    c796:	6828      	ldr	r0, [r5, #0]
    c798:	f7ff ff5c 	bl	c654 <uuid_store.constprop.0>
    c79c:	4604      	mov	r4, r0
    c79e:	6028      	str	r0, [r5, #0]
	if (!cur_service_val->uuid) {
    c7a0:	b930      	cbnz	r0, c7b0 <discovery_callback+0x114>
		LOG_ERR("Not enough memory for service attribute data.");
    c7a2:	2145      	movs	r1, #69	; 0x45
    c7a4:	483e      	ldr	r0, [pc, #248]	; (c8a0 <discovery_callback+0x204>)
    c7a6:	f00e f863 	bl	1a870 <printk>
		discovery_complete_error(dm, -ENOMEM);
    c7aa:	f06f 000b 	mvn.w	r0, #11
    c7ae:	e058      	b.n	c862 <discovery_callback+0x1c6>
	if (cur_attr->handle == cur_service_val->end_handle) {
    c7b0:	88bb      	ldrh	r3, [r7, #4]
    c7b2:	88aa      	ldrh	r2, [r5, #4]
    c7b4:	4293      	cmp	r3, r2
    c7b6:	d104      	bne.n	c7c2 <discovery_callback+0x126>
		return BT_GATT_ITER_CONTINUE;
    c7b8:	2401      	movs	r4, #1
}
    c7ba:	4620      	mov	r0, r4
    c7bc:	b002      	add	sp, #8
    c7be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
    c7c2:	2105      	movs	r1, #5
	dm->discover_params.uuid         = NULL;
    c7c4:	2400      	movs	r4, #0
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
    c7c6:	7631      	strb	r1, [r6, #24]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    c7c8:	3301      	adds	r3, #1
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    c7ca:	4936      	ldr	r1, [pc, #216]	; (c8a4 <discovery_callback+0x208>)
    c7cc:	6830      	ldr	r0, [r6, #0]
	dm->discover_params.end_handle   = cur_service_val->end_handle;
    c7ce:	82f2      	strh	r2, [r6, #22]
	dm->discover_params.uuid         = NULL;
    c7d0:	60b4      	str	r4, [r6, #8]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    c7d2:	8233      	strh	r3, [r6, #16]
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    c7d4:	f007 fe96 	bl	14504 <bt_gatt_discover>
	if (err) {
    c7d8:	4602      	mov	r2, r0
    c7da:	2800      	cmp	r0, #0
    c7dc:	d0a0      	beq.n	c720 <discovery_callback+0x84>
		LOG_ERR("Descriptor discover failed, error: %d.", err);
    c7de:	2145      	movs	r1, #69	; 0x45
    c7e0:	4831      	ldr	r0, [pc, #196]	; (c8a8 <discovery_callback+0x20c>)
		LOG_ERR("Not enough memory for next attribute descriptor"
    c7e2:	f00e f845 	bl	1a870 <printk>
		discovery_complete_error(dm, -ENOMEM);
    c7e6:	e7e0      	b.n	c7aa <discovery_callback+0x10e>
			discovery_complete(dm);
    c7e8:	f7ff feba 	bl	c560 <discovery_complete.constprop.0>
    c7ec:	e798      	b.n	c720 <discovery_callback+0x84>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
    c7ee:	2400      	movs	r4, #0
    c7f0:	f642 0303 	movw	r3, #10243	; 0x2803
    c7f4:	6828      	ldr	r0, [r5, #0]
    c7f6:	a901      	add	r1, sp, #4
    c7f8:	f88d 4004 	strb.w	r4, [sp, #4]
    c7fc:	f8ad 3006 	strh.w	r3, [sp, #6]
    c800:	f00f faef 	bl	1bde2 <bt_uuid_cmp>
    c804:	b950      	cbnz	r0, c81c <discovery_callback+0x180>
		cur_attr = attr_store(dm, attr, sizeof(struct bt_gatt_chrc));
    c806:	2108      	movs	r1, #8
		cur_attr = attr_store(dm, attr, 0);
    c808:	4628      	mov	r0, r5
    c80a:	f7ff fed7 	bl	c5bc <attr_store.constprop.0>
    c80e:	4604      	mov	r4, r0
	if (!cur_attr) {
    c810:	2800      	cmp	r0, #0
    c812:	d1d1      	bne.n	c7b8 <discovery_callback+0x11c>
		LOG_ERR("Not enough memory for next attribute descriptor"
    c814:	2145      	movs	r1, #69	; 0x45
    c816:	8a2a      	ldrh	r2, [r5, #16]
    c818:	4824      	ldr	r0, [pc, #144]	; (c8ac <discovery_callback+0x210>)
    c81a:	e7e2      	b.n	c7e2 <discovery_callback+0x146>
		cur_attr = attr_store(dm, attr, 0);
    c81c:	4621      	mov	r1, r4
    c81e:	e7f3      	b.n	c808 <discovery_callback+0x16c>
	if (!attr) {
    c820:	2900      	cmp	r1, #0
    c822:	d0e1      	beq.n	c7e8 <discovery_callback+0x14c>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0);
    c824:	2300      	movs	r3, #0
    c826:	f88d 3004 	strb.w	r3, [sp, #4]
    c82a:	f642 0303 	movw	r3, #10243	; 0x2803
    c82e:	6828      	ldr	r0, [r5, #0]
    c830:	a901      	add	r1, sp, #4
    c832:	f8ad 3006 	strh.w	r3, [sp, #6]
    c836:	f00f fad4 	bl	1bde2 <bt_uuid_cmp>
    c83a:	b150      	cbz	r0, c852 <discovery_callback+0x1b6>
    c83c:	4914      	ldr	r1, [pc, #80]	; (c890 <discovery_callback+0x1f4>)
    c83e:	4815      	ldr	r0, [pc, #84]	; (c894 <discovery_callback+0x1f8>)
    c840:	f44f 72c0 	mov.w	r2, #384	; 0x180
    c844:	f00e f814 	bl	1a870 <printk>
    c848:	f44f 71c0 	mov.w	r1, #384	; 0x180
    c84c:	4810      	ldr	r0, [pc, #64]	; (c890 <discovery_callback+0x1f4>)
    c84e:	f00e fab5 	bl	1adbc <assert_post_action>
	cur_attr = attr_find_by_handle(dm, attr->handle);
    c852:	8a29      	ldrh	r1, [r5, #16]
    c854:	480c      	ldr	r0, [pc, #48]	; (c888 <discovery_callback+0x1ec>)
    c856:	f00e fbbf 	bl	1afd8 <attr_find_by_handle>
	if (!cur_attr) {
    c85a:	4604      	mov	r4, r0
    c85c:	b920      	cbnz	r0, c868 <discovery_callback+0x1cc>
		discovery_complete_error(dm, -ESRCH);
    c85e:	f06f 0002 	mvn.w	r0, #2
		discovery_complete_error(dm, -ENOMEM);
    c862:	f7ff fe91 	bl	c588 <discovery_complete_error.constprop.0>
		return BT_GATT_ITER_STOP;
    c866:	e7a8      	b.n	c7ba <discovery_callback+0x11e>
	gatt_chrc = attr->user_data;
    c868:	68ec      	ldr	r4, [r5, #12]
	cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
    c86a:	f00e fc29 	bl	1b0c0 <bt_gatt_dm_attr_chrc_val>
    c86e:	4605      	mov	r5, r0
	memcpy(cur_gatt_chrc, gatt_chrc, sizeof(*cur_gatt_chrc));
    c870:	4621      	mov	r1, r4
    c872:	2208      	movs	r2, #8
    c874:	f00f fa40 	bl	1bcf8 <memcpy>
	cur_gatt_chrc->uuid = uuid_store(dm, cur_gatt_chrc->uuid);
    c878:	6828      	ldr	r0, [r5, #0]
    c87a:	f7ff feeb 	bl	c654 <uuid_store.constprop.0>
    c87e:	4604      	mov	r4, r0
    c880:	6028      	str	r0, [r5, #0]
	if (!cur_gatt_chrc->uuid) {
    c882:	2800      	cmp	r0, #0
    c884:	d198      	bne.n	c7b8 <discovery_callback+0x11c>
    c886:	e790      	b.n	c7aa <discovery_callback+0x10e>
    c888:	2000a8cc 	.word	0x2000a8cc
    c88c:	0002056b 	.word	0x0002056b
    c890:	000204c8 	.word	0x000204c8
    c894:	0001fdfa 	.word	0x0001fdfa
    c898:	0002061f 	.word	0x0002061f
    c89c:	00020592 	.word	0x00020592
    c8a0:	000205c0 	.word	0x000205c0
    c8a4:	2000a8d4 	.word	0x2000a8d4
    c8a8:	000205f3 	.word	0x000205f3
    c8ac:	0002064f 	.word	0x0002064f

0000c8b0 <bt_gatt_dm_char_by_uuid>:
}

const struct bt_gatt_dm_attr *bt_gatt_dm_char_by_uuid(
	const struct bt_gatt_dm *dm,
	const struct bt_uuid *uuid)
{
    c8b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c8b4:	4606      	mov	r6, r0
    c8b6:	460f      	mov	r7, r1
	const struct bt_gatt_dm_attr *curr = NULL;
    c8b8:	2400      	movs	r4, #0

	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);

		__ASSERT_NO_MSG(chrc != NULL);
    c8ba:	f8df 8044 	ldr.w	r8, [pc, #68]	; c900 <bt_gatt_dm_char_by_uuid+0x50>
    c8be:	f8df 9044 	ldr.w	r9, [pc, #68]	; c904 <bt_gatt_dm_char_by_uuid+0x54>
	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
    c8c2:	4621      	mov	r1, r4
    c8c4:	4630      	mov	r0, r6
    c8c6:	f00e fc13 	bl	1b0f0 <bt_gatt_dm_char_next>
    c8ca:	4604      	mov	r4, r0
    c8cc:	b1a0      	cbz	r0, c8f8 <bt_gatt_dm_char_by_uuid+0x48>
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);
    c8ce:	f00e fbf7 	bl	1b0c0 <bt_gatt_dm_attr_chrc_val>
		__ASSERT_NO_MSG(chrc != NULL);
    c8d2:	4605      	mov	r5, r0
    c8d4:	b950      	cbnz	r0, c8ec <bt_gatt_dm_char_by_uuid+0x3c>
    c8d6:	4641      	mov	r1, r8
    c8d8:	4648      	mov	r0, r9
    c8da:	f240 12fb 	movw	r2, #507	; 0x1fb
    c8de:	f00d ffc7 	bl	1a870 <printk>
    c8e2:	f240 11fb 	movw	r1, #507	; 0x1fb
    c8e6:	4640      	mov	r0, r8
    c8e8:	f00e fa68 	bl	1adbc <assert_post_action>
		if (!bt_uuid_cmp(uuid, chrc->uuid)) {
    c8ec:	4638      	mov	r0, r7
    c8ee:	6829      	ldr	r1, [r5, #0]
    c8f0:	f00f fa77 	bl	1bde2 <bt_uuid_cmp>
    c8f4:	2800      	cmp	r0, #0
    c8f6:	d1e4      	bne.n	c8c2 <bt_gatt_dm_char_by_uuid+0x12>
			return curr;
		}
	}

	return NULL;
}
    c8f8:	4620      	mov	r0, r4
    c8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c8fe:	bf00      	nop
    c900:	000204c8 	.word	0x000204c8
    c904:	0001fdfa 	.word	0x0001fdfa

0000c908 <bt_gatt_dm_start>:

int bt_gatt_dm_start(struct bt_conn *conn,
		     const struct bt_uuid *svc_uuid,
		     const struct bt_gatt_dm_cb *cb,
		     void *context)
{
    c908:	b570      	push	{r4, r5, r6, lr}
    c90a:	4605      	mov	r5, r0
	int err;
	struct bt_gatt_dm *dm;

	if (svc_uuid &&
    c90c:	4608      	mov	r0, r1
    c90e:	b119      	cbz	r1, c918 <bt_gatt_dm_start+0x10>
    c910:	7809      	ldrb	r1, [r1, #0]
    c912:	f011 0ffd 	tst.w	r1, #253	; 0xfd
    c916:	d139      	bne.n	c98c <bt_gatt_dm_start+0x84>
	    (svc_uuid->type != BT_UUID_TYPE_16) &&
	    (svc_uuid->type != BT_UUID_TYPE_128)) {
		return -EINVAL;
	}

	if (!cb) {
    c918:	2a00      	cmp	r2, #0
    c91a:	d037      	beq.n	c98c <bt_gatt_dm_start+0x84>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c91c:	4c1e      	ldr	r4, [pc, #120]	; (c998 <bt_gatt_dm_start+0x90>)
    c91e:	f504 769c 	add.w	r6, r4, #312	; 0x138
    c922:	e8d6 1fef 	ldaex	r1, [r6]
    c926:	f041 0c01 	orr.w	ip, r1, #1
    c92a:	e8c6 cfee 	stlex	lr, ip, [r6]
    c92e:	f1be 0f00 	cmp.w	lr, #0
    c932:	d1f6      	bne.n	c922 <bt_gatt_dm_start+0x1a>
		return -EINVAL;
	}

	dm = &bt_gatt_dm_inst;

	if (atomic_test_and_set_bit(dm->state_flags, STATE_ATTRS_LOCKED)) {
    c934:	f011 0101 	ands.w	r1, r1, #1
    c938:	d12b      	bne.n	c992 <bt_gatt_dm_start+0x8a>
		return -EALREADY;
	}

	dm->conn = conn;
	dm->context = context;
    c93a:	e9c4 5300 	strd	r5, r3, [r4]
	list->tail = NULL;
    c93e:	e9c4 114f 	strd	r1, r1, [r4, #316]	; 0x13c
	dm->callback = cb;
    c942:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
	dm->cur_attr_id = 0;
    c946:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
	sys_slist_init(&dm->chunk_list);
	dm->cur_chunk_len = 0;
    c94a:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144

	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
    c94e:	b108      	cbz	r0, c954 <bt_gatt_dm_start+0x4c>
    c950:	f7ff fe80 	bl	c654 <uuid_store.constprop.0>
	dm->discover_params.func = discovery_callback;
    c954:	4b11      	ldr	r3, [pc, #68]	; (c99c <bt_gatt_dm_start+0x94>)
	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
    c956:	60a0      	str	r0, [r4, #8]
	dm->discover_params.func = discovery_callback;
    c958:	60e3      	str	r3, [r4, #12]
	dm->discover_params.start_handle = 0x0001;
    c95a:	2301      	movs	r3, #1
    c95c:	8223      	strh	r3, [r4, #16]
	dm->discover_params.end_handle = 0xffff;
    c95e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c962:	82e3      	strh	r3, [r4, #22]
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    c964:	2300      	movs	r3, #0

	err = bt_gatt_discover(conn, &dm->discover_params);
    c966:	4628      	mov	r0, r5
    c968:	490d      	ldr	r1, [pc, #52]	; (c9a0 <bt_gatt_dm_start+0x98>)
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    c96a:	7623      	strb	r3, [r4, #24]
	err = bt_gatt_discover(conn, &dm->discover_params);
    c96c:	f007 fdca 	bl	14504 <bt_gatt_discover>
	if (err) {
    c970:	4604      	mov	r4, r0
    c972:	b148      	cbz	r0, c988 <bt_gatt_dm_start+0x80>
		LOG_ERR("Discover failed, error: %d.", err);
    c974:	4602      	mov	r2, r0
    c976:	2145      	movs	r1, #69	; 0x45
    c978:	480a      	ldr	r0, [pc, #40]	; (c9a4 <bt_gatt_dm_start+0x9c>)
    c97a:	f00d ff79 	bl	1a870 <printk>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c97e:	f06f 0101 	mvn.w	r1, #1
    c982:	4809      	ldr	r0, [pc, #36]	; (c9a8 <bt_gatt_dm_start+0xa0>)
    c984:	f00e fb5d 	bl	1b042 <atomic_and>
		atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	}

	return err;
}
    c988:	4620      	mov	r0, r4
    c98a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    c98c:	f06f 0415 	mvn.w	r4, #21
    c990:	e7fa      	b.n	c988 <bt_gatt_dm_start+0x80>
		return -EALREADY;
    c992:	f06f 0444 	mvn.w	r4, #68	; 0x44
    c996:	e7f7      	b.n	c988 <bt_gatt_dm_start+0x80>
    c998:	2000a8cc 	.word	0x2000a8cc
    c99c:	0000c69d 	.word	0x0000c69d
    c9a0:	2000a8d4 	.word	0x2000a8d4
    c9a4:	00020692 	.word	0x00020692
    c9a8:	2000aa04 	.word	0x2000aa04

0000c9ac <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
    c9ac:	b570      	push	{r4, r5, r6, lr}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    c9ae:	4c06      	ldr	r4, [pc, #24]	; (c9c8 <scan_default_param_set+0x1c>)
{
    c9b0:	b086      	sub	sp, #24
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    c9b2:	ad01      	add	r5, sp, #4
    c9b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    c9b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c9b8:	6826      	ldr	r6, [r4, #0]

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
    c9ba:	4c04      	ldr	r4, [pc, #16]	; (c9cc <scan_default_param_set+0x20>)
    c9bc:	ad01      	add	r5, sp, #4
    c9be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c9c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c9c2:	6026      	str	r6, [r4, #0]
}
    c9c4:	b006      	add	sp, #24
    c9c6:	bd70      	pop	{r4, r5, r6, pc}
    c9c8:	0001e770 	.word	0x0001e770
    c9cc:	2000aa78 	.word	0x2000aa78

0000c9d0 <scan_default_conn_param_set>:
static void scan_default_conn_param_set(void)
{
	struct bt_le_conn_param *conn_param = BT_LE_CONN_PARAM_DEFAULT;

	/* Set default Connection params. */
	bt_scan.conn_param = *conn_param;
    c9d0:	f04f 72c8 	mov.w	r2, #26214400	; 0x1900000
    c9d4:	4b02      	ldr	r3, [pc, #8]	; (c9e0 <scan_default_conn_param_set+0x10>)
    c9d6:	4903      	ldr	r1, [pc, #12]	; (c9e4 <scan_default_conn_param_set+0x14>)
    c9d8:	e9c3 121d 	strd	r1, r2, [r3, #116]	; 0x74
}
    c9dc:	4770      	bx	lr
    c9de:	bf00      	nop
    c9e0:	2000aa18 	.word	0x2000aa18
    c9e4:	00280018 	.word	0x00280018

0000c9e8 <uuid_check>:
{
    c9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_scan.scan_filters.uuid.enabled;
    c9ec:	4c29      	ldr	r4, [pc, #164]	; (ca94 <uuid_check+0xac>)
{
    c9ee:	b08b      	sub	sp, #44	; 0x2c
	if (is_uuid_filter_enabled()) {
    c9f0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
{
    c9f4:	4606      	mov	r6, r0
    c9f6:	9100      	str	r1, [sp, #0]
    c9f8:	9203      	str	r2, [sp, #12]
	if (is_uuid_filter_enabled()) {
    c9fa:	2b00      	cmp	r3, #0
    c9fc:	d03c      	beq.n	ca78 <uuid_check+0x90>
	for (size_t i = 0; i < counter; i++) {
    c9fe:	2700      	movs	r7, #0
	uint8_t uuid_match_cnt = 0;
    ca00:	463d      	mov	r5, r7
	uint8_t data_len = data->data_len;
    ca02:	784b      	ldrb	r3, [r1, #1]
	const bool all_filters_mode = bt_scan.scan_filters.all_mode;
    ca04:	f894 b058 	ldrb.w	fp, [r4, #88]	; 0x58
	const uint8_t counter = bt_scan.scan_filters.uuid.cnt;
    ca08:	f894 a050 	ldrb.w	sl, [r4, #80]	; 0x50
	uint8_t data_len = data->data_len;
    ca0c:	9301      	str	r3, [sp, #4]
	for (size_t i = 0; i < counter; i++) {
    ca0e:	4557      	cmp	r7, sl
    ca10:	d30e      	bcc.n	ca30 <uuid_check+0x48>
	control->filter_status.uuid.count = uuid_match_cnt;
    ca12:	f886 5044 	strb.w	r5, [r6, #68]	; 0x44
	if ((all_filters_mode && (uuid_match_cnt == counter)) ||
    ca16:	f1bb 0f00 	cmp.w	fp, #0
    ca1a:	d02b      	beq.n	ca74 <uuid_check+0x8c>
    ca1c:	45aa      	cmp	sl, r5
    ca1e:	d12b      	bne.n	ca78 <uuid_check+0x90>
			control->filter_match_cnt++;
    ca20:	7873      	ldrb	r3, [r6, #1]
    ca22:	3301      	adds	r3, #1
    ca24:	7073      	strb	r3, [r6, #1]
			control->filter_status.uuid.match = true;
    ca26:	2301      	movs	r3, #1
    ca28:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
			control->filter_match = true;
    ca2c:	70b3      	strb	r3, [r6, #2]
}
    ca2e:	e023      	b.n	ca78 <uuid_check+0x90>
	for (size_t i = 0; i < data_len; i += uuid_len) {
    ca30:	f04f 0900 	mov.w	r9, #0
		if (find_uuid(data->data, data_len, uuid_type,
    ca34:	9b00      	ldr	r3, [sp, #0]
    ca36:	9a03      	ldr	r2, [sp, #12]
    ca38:	685b      	ldr	r3, [r3, #4]
    ca3a:	9302      	str	r3, [sp, #8]
	switch (uuid_type) {
    ca3c:	4b16      	ldr	r3, [pc, #88]	; (ca98 <uuid_check+0xb0>)
    ca3e:	f813 8002 	ldrb.w	r8, [r3, r2]
	for (size_t i = 0; i < data_len; i += uuid_len) {
    ca42:	9b01      	ldr	r3, [sp, #4]
    ca44:	4599      	cmp	r9, r3
    ca46:	d305      	bcc.n	ca54 <uuid_check+0x6c>
		} else if (all_filters_mode) {
    ca48:	f1bb 0f00 	cmp.w	fp, #0
    ca4c:	d1e1      	bne.n	ca12 <uuid_check+0x2a>
	for (size_t i = 0; i < counter; i++) {
    ca4e:	3701      	adds	r7, #1
    ca50:	3418      	adds	r4, #24
    ca52:	e7dc      	b.n	ca0e <uuid_check+0x26>
		if (!bt_uuid_create(&uuid.uuid, &data[i], uuid_len)) {
    ca54:	9b02      	ldr	r3, [sp, #8]
    ca56:	4642      	mov	r2, r8
    ca58:	eb03 0109 	add.w	r1, r3, r9
    ca5c:	a805      	add	r0, sp, #20
    ca5e:	f00f f9ee 	bl	1be3e <bt_uuid_create>
    ca62:	2800      	cmp	r0, #0
    ca64:	d0f0      	beq.n	ca48 <uuid_check+0x60>
		if (bt_uuid_cmp(&uuid.uuid, target_uuid->uuid) == 0) {
    ca66:	68a1      	ldr	r1, [r4, #8]
    ca68:	a805      	add	r0, sp, #20
    ca6a:	f00f f9ba 	bl	1bde2 <bt_uuid_cmp>
    ca6e:	b130      	cbz	r0, ca7e <uuid_check+0x96>
	for (size_t i = 0; i < data_len; i += uuid_len) {
    ca70:	44c1      	add	r9, r8
    ca72:	e7e6      	b.n	ca42 <uuid_check+0x5a>
	    ((!all_filters_mode) && (uuid_match_cnt > 0))) {
    ca74:	2d00      	cmp	r5, #0
    ca76:	d1d3      	bne.n	ca20 <uuid_check+0x38>
}
    ca78:	b00b      	add	sp, #44	; 0x2c
    ca7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				uuid_filter->uuid[i].uuid;
    ca7e:	68a1      	ldr	r1, [r4, #8]
			control->filter_status.uuid.uuid[uuid_match_cnt] =
    ca80:	eb06 0285 	add.w	r2, r6, r5, lsl #2
			uuid_match_cnt++;
    ca84:	3501      	adds	r5, #1
			control->filter_status.uuid.uuid[uuid_match_cnt] =
    ca86:	6391      	str	r1, [r2, #56]	; 0x38
			uuid_match_cnt++;
    ca88:	b2ed      	uxtb	r5, r5
			if (!all_filters_mode) {
    ca8a:	f1bb 0f00 	cmp.w	fp, #0
    ca8e:	d1de      	bne.n	ca4e <uuid_check+0x66>
    ca90:	e7bf      	b.n	ca12 <uuid_check+0x2a>
    ca92:	bf00      	nop
    ca94:	2000aa18 	.word	0x2000aa18
    ca98:	000206cd 	.word	0x000206cd

0000ca9c <adv_data_found>:
		control->filter_cnt++;
	}
}

static bool adv_data_found(struct bt_data *data, void *user_data)
{
    ca9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_scan_control *scan_control =
			(struct bt_scan_control *)user_data;

	switch (data->type) {
    caa0:	7803      	ldrb	r3, [r0, #0]
{
    caa2:	4605      	mov	r5, r0
	switch (data->type) {
    caa4:	2b19      	cmp	r3, #25
{
    caa6:	460c      	mov	r4, r1
	switch (data->type) {
    caa8:	d812      	bhi.n	cad0 <adv_data_found+0x34>
    caaa:	2b01      	cmp	r3, #1
    caac:	d912      	bls.n	cad4 <adv_data_found+0x38>
    caae:	3b02      	subs	r3, #2
    cab0:	2b17      	cmp	r3, #23
    cab2:	d80f      	bhi.n	cad4 <adv_data_found+0x38>
    cab4:	e8df f003 	tbb	[pc, r3]
    cab8:	80807a7a 	.word	0x80807a7a
    cabc:	11318282 	.word	0x11318282
    cac0:	0e0e0e0e 	.word	0x0e0e0e0e
    cac4:	0e0e0e0e 	.word	0x0e0e0e0e
    cac8:	0e0e0e0e 	.word	0x0e0e0e0e
    cacc:	560e0e0e 	.word	0x560e0e0e
    cad0:	2bff      	cmp	r3, #255	; 0xff
    cad2:	d075      	beq.n	cbc0 <adv_data_found+0x124>
	default:
		break;
	}

	return true;
}
    cad4:	2001      	movs	r0, #1
    cad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return bt_scan.scan_filters.name.enabled;
    cada:	4f4e      	ldr	r7, [pc, #312]	; (cc14 <adv_data_found+0x178>)
	if (is_name_filter_enabled()) {
    cadc:	787b      	ldrb	r3, [r7, #1]
    cade:	2b00      	cmp	r3, #0
    cae0:	d0f8      	beq.n	cad4 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    cae2:	2600      	movs	r6, #0
	uint8_t counter = bt_scan.scan_filters.name.cnt;
    cae4:	f897 a000 	ldrb.w	sl, [r7]
	uint8_t data_len = data->data_len;
    cae8:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    caec:	4556      	cmp	r6, sl
    caee:	d2f1      	bcs.n	cad4 <adv_data_found+0x38>
		if (adv_name_cmp(data->data,
    caf0:	eb07 1946 	add.w	r9, r7, r6, lsl #5
	return strncmp(target_name, data, data_len) == 0;
    caf4:	4642      	mov	r2, r8
    caf6:	4648      	mov	r0, r9
    caf8:	6869      	ldr	r1, [r5, #4]
    cafa:	f00f f8db 	bl	1bcb4 <strncmp>
		if (adv_name_cmp(data->data,
    cafe:	b950      	cbnz	r0, cb16 <adv_data_found+0x7a>
			control->filter_match_cnt++;
    cb00:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.name.name =
    cb02:	f8c4 9018 	str.w	r9, [r4, #24]
			control->filter_match_cnt++;
    cb06:	3301      	adds	r3, #1
    cb08:	7063      	strb	r3, [r4, #1]
			control->filter_status.name.match = true;
    cb0a:	2301      	movs	r3, #1
			control->filter_status.name.len = data_len;
    cb0c:	f884 801c 	strb.w	r8, [r4, #28]
			control->filter_status.name.match = true;
    cb10:	7523      	strb	r3, [r4, #20]
			control->filter_match = true;
    cb12:	70a3      	strb	r3, [r4, #2]
    cb14:	e7de      	b.n	cad4 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    cb16:	3601      	adds	r6, #1
    cb18:	e7e8      	b.n	caec <adv_data_found+0x50>
	return bt_scan.scan_filters.short_name.enabled;
    cb1a:	4e3e      	ldr	r6, [pc, #248]	; (cc14 <adv_data_found+0x178>)
	if (is_short_name_filter_enabled()) {
    cb1c:	78f3      	ldrb	r3, [r6, #3]
    cb1e:	2b00      	cmp	r3, #0
    cb20:	d0d8      	beq.n	cad4 <adv_data_found+0x38>
	uint8_t data_len = data->data_len;
    cb22:	78b3      	ldrb	r3, [r6, #2]
    cb24:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    cb28:	eb03 1343 	add.w	r3, r3, r3, lsl #5
    cb2c:	18f7      	adds	r7, r6, r3
    cb2e:	42be      	cmp	r6, r7
    cb30:	d0d0      	beq.n	cad4 <adv_data_found+0x38>
	if ((data_len >= short_name_min_len) &&
    cb32:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
    cb36:	4543      	cmp	r3, r8
    cb38:	d812      	bhi.n	cb60 <adv_data_found+0xc4>
    cb3a:	f106 0902 	add.w	r9, r6, #2
	    (strncmp(target_name, data, data_len) == 0)) {
    cb3e:	4642      	mov	r2, r8
    cb40:	4648      	mov	r0, r9
    cb42:	6869      	ldr	r1, [r5, #4]
    cb44:	f00f f8b6 	bl	1bcb4 <strncmp>
	if ((data_len >= short_name_min_len) &&
    cb48:	b950      	cbnz	r0, cb60 <adv_data_found+0xc4>
			control->filter_match_cnt++;
    cb4a:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.short_name.name =
    cb4c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
			control->filter_match_cnt++;
    cb50:	3301      	adds	r3, #1
    cb52:	7063      	strb	r3, [r4, #1]
			control->filter_status.short_name.match = true;
    cb54:	2301      	movs	r3, #1
			control->filter_status.short_name.len = data_len;
    cb56:	f884 8028 	strb.w	r8, [r4, #40]	; 0x28
			control->filter_status.short_name.match = true;
    cb5a:	f884 3020 	strb.w	r3, [r4, #32]
			control->filter_match = true;
    cb5e:	e7d8      	b.n	cb12 <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    cb60:	3621      	adds	r6, #33	; 0x21
    cb62:	e7e4      	b.n	cb2e <adv_data_found+0x92>
	return bt_scan.scan_filters.appearance.enabled;
    cb64:	482b      	ldr	r0, [pc, #172]	; (cc14 <adv_data_found+0x178>)
	if (is_appearance_filter_enabled()) {
    cb66:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
    cb6a:	2b00      	cmp	r3, #0
    cb6c:	d0b2      	beq.n	cad4 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    cb6e:	2300      	movs	r3, #0
	const uint8_t counter =
    cb70:	f890 6054 	ldrb.w	r6, [r0, #84]	; 0x54
	uint8_t data_len = data->data_len;
    cb74:	786f      	ldrb	r7, [r5, #1]
	for (size_t i = 0; i < counter; i++) {
    cb76:	42b3      	cmp	r3, r6
    cb78:	d2ac      	bcs.n	cad4 <adv_data_found+0x38>
	if (data_len != sizeof(uint16_t)) {
    cb7a:	2f02      	cmp	r7, #2
    cb7c:	d114      	bne.n	cba8 <adv_data_found+0x10c>
	if (decoded_appearance == *appearance) {
    cb7e:	686a      	ldr	r2, [r5, #4]
    cb80:	eb00 0143 	add.w	r1, r0, r3, lsl #1
    cb84:	8812      	ldrh	r2, [r2, #0]
    cb86:	f8b1 1054 	ldrh.w	r1, [r1, #84]	; 0x54
    cb8a:	ba52      	rev16	r2, r2
    cb8c:	b292      	uxth	r2, r2
    cb8e:	4291      	cmp	r1, r2
    cb90:	d10a      	bne.n	cba8 <adv_data_found+0x10c>
		if (find_appearance(data->data,
    cb92:	332a      	adds	r3, #42	; 0x2a
    cb94:	eb00 0343 	add.w	r3, r0, r3, lsl #1
			control->filter_status.appearance.appearance =
    cb98:	64e3      	str	r3, [r4, #76]	; 0x4c
			control->filter_match_cnt++;
    cb9a:	7863      	ldrb	r3, [r4, #1]
    cb9c:	3301      	adds	r3, #1
    cb9e:	7063      	strb	r3, [r4, #1]
			control->filter_status.appearance.match = true;
    cba0:	2301      	movs	r3, #1
    cba2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
			control->filter_match = true;
    cba6:	e7b4      	b.n	cb12 <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    cba8:	3301      	adds	r3, #1
    cbaa:	e7e4      	b.n	cb76 <adv_data_found+0xda>
		uuid_check(scan_control, data, BT_UUID_TYPE_16);
    cbac:	2200      	movs	r2, #0
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
    cbae:	4629      	mov	r1, r5
    cbb0:	4620      	mov	r0, r4
    cbb2:	f7ff ff19 	bl	c9e8 <uuid_check>
		break;
    cbb6:	e78d      	b.n	cad4 <adv_data_found+0x38>
		uuid_check(scan_control, data, BT_UUID_TYPE_32);
    cbb8:	2201      	movs	r2, #1
    cbba:	e7f8      	b.n	cbae <adv_data_found+0x112>
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
    cbbc:	2202      	movs	r2, #2
    cbbe:	e7f6      	b.n	cbae <adv_data_found+0x112>
	return bt_scan.scan_filters.manufacturer_data.enabled;
    cbc0:	f8df 8050 	ldr.w	r8, [pc, #80]	; cc14 <adv_data_found+0x178>
	if (is_manufacturer_data_filter_enabled()) {
    cbc4:	f898 3057 	ldrb.w	r3, [r8, #87]	; 0x57
    cbc8:	2b00      	cmp	r3, #0
    cbca:	d083      	beq.n	cad4 <adv_data_found+0x38>
	uint8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    cbcc:	4647      	mov	r7, r8
	for (size_t i = 0; i < counter; i++) {
    cbce:	2600      	movs	r6, #0
	uint8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    cbd0:	f817 9f56 	ldrb.w	r9, [r7, #86]!
	for (size_t i = 0; i < counter; i++) {
    cbd4:	454e      	cmp	r6, r9
    cbd6:	f4bf af7d 	bcs.w	cad4 <adv_data_found+0x38>
		if (adv_manufacturer_data_cmp(data->data,
    cbda:	f897 2020 	ldrb.w	r2, [r7, #32]
	if (target_data_len > data_len) {
    cbde:	786b      	ldrb	r3, [r5, #1]
    cbe0:	4293      	cmp	r3, r2
    cbe2:	d313      	bcc.n	cc0c <adv_data_found+0x170>
	if (memcmp(target_data, data, target_data_len) != 0) {
    cbe4:	4638      	mov	r0, r7
    cbe6:	6869      	ldr	r1, [r5, #4]
    cbe8:	f00f f875 	bl	1bcd6 <memcmp>
    cbec:	b970      	cbnz	r0, cc0c <adv_data_found+0x170>
				md_filter->manufacturer_data[i].data_len;
    cbee:	eb06 1646 	add.w	r6, r6, r6, lsl #5
			control->filter_status.manufacturer_data.data =
    cbf2:	6567      	str	r7, [r4, #84]	; 0x54
				md_filter->manufacturer_data[i].data_len;
    cbf4:	4446      	add	r6, r8
			control->filter_status.manufacturer_data.len =
    cbf6:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
    cbfa:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
			control->filter_match_cnt++;
    cbfe:	7863      	ldrb	r3, [r4, #1]
    cc00:	3301      	adds	r3, #1
    cc02:	7063      	strb	r3, [r4, #1]
			control->filter_status.manufacturer_data.match = true;
    cc04:	2301      	movs	r3, #1
    cc06:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    cc0a:	e782      	b.n	cb12 <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    cc0c:	3601      	adds	r6, #1
    cc0e:	3721      	adds	r7, #33	; 0x21
    cc10:	e7e0      	b.n	cbd4 <adv_data_found+0x138>
    cc12:	bf00      	nop
    cc14:	2000aa18 	.word	0x2000aa18

0000cc18 <notify_filter_matched.constprop.0>:
static void notify_filter_matched(struct bt_scan_device_info *device_info,
    cc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc1a:	4605      	mov	r5, r0
    cc1c:	460e      	mov	r6, r1
    cc1e:	4617      	mov	r7, r2
	return list->head;
    cc20:	4b08      	ldr	r3, [pc, #32]	; (cc44 <notify_filter_matched.constprop.0+0x2c>)
    cc22:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    cc24:	b10c      	cbz	r4, cc2a <notify_filter_matched.constprop.0+0x12>
    cc26:	3c04      	subs	r4, #4
    cc28:	b904      	cbnz	r4, cc2c <notify_filter_matched.constprop.0+0x14>
}
    cc2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->cb_addr->filter_match) {
    cc2c:	6823      	ldr	r3, [r4, #0]
    cc2e:	681b      	ldr	r3, [r3, #0]
    cc30:	b11b      	cbz	r3, cc3a <notify_filter_matched.constprop.0+0x22>
			cb->cb_addr->filter_match(device_info, filter_match,
    cc32:	463a      	mov	r2, r7
    cc34:	4631      	mov	r1, r6
    cc36:	4628      	mov	r0, r5
    cc38:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    cc3a:	1d23      	adds	r3, r4, #4
    cc3c:	d0f5      	beq.n	cc2a <notify_filter_matched.constprop.0+0x12>
	return node->next;
    cc3e:	6864      	ldr	r4, [r4, #4]
    cc40:	e7f0      	b.n	cc24 <notify_filter_matched.constprop.0+0xc>
    cc42:	bf00      	nop
    cc44:	2000aa94 	.word	0x2000aa94

0000cc48 <bt_scan_cb_register>:
	if (!cb) {
    cc48:	b150      	cbz	r0, cc60 <bt_scan_cb_register+0x18>
	parent->next = child;
    cc4a:	2300      	movs	r3, #0
    cc4c:	6043      	str	r3, [r0, #4]
	return list->tail;
    cc4e:	4b05      	ldr	r3, [pc, #20]	; (cc64 <bt_scan_cb_register+0x1c>)
	sys_slist_append(&callback_list, &cb->node);
    cc50:	1d02      	adds	r2, r0, #4
    cc52:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
    cc54:	b911      	cbnz	r1, cc5c <bt_scan_cb_register+0x14>
	list->head = node;
    cc56:	e9c3 2200 	strd	r2, r2, [r3]
}
    cc5a:	4770      	bx	lr
	parent->next = child;
    cc5c:	600a      	str	r2, [r1, #0]
	list->tail = node;
    cc5e:	605a      	str	r2, [r3, #4]
}
    cc60:	4770      	bx	lr
    cc62:	bf00      	nop
    cc64:	2000aa94 	.word	0x2000aa94

0000cc68 <bt_scan_filter_add>:
{
    cc68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cc6c:	4604      	mov	r4, r0
	if (!data) {
    cc6e:	460d      	mov	r5, r1
    cc70:	2900      	cmp	r1, #0
    cc72:	d06a      	beq.n	cd4a <bt_scan_filter_add+0xe2>
	return z_impl_k_mutex_lock(mutex, timeout);
    cc74:	f04f 32ff 	mov.w	r2, #4294967295
    cc78:	f04f 33ff 	mov.w	r3, #4294967295
    cc7c:	4834      	ldr	r0, [pc, #208]	; (cd50 <bt_scan_filter_add+0xe8>)
    cc7e:	f00b f96b 	bl	17f58 <z_impl_k_mutex_lock>
	switch (type) {
    cc82:	2c03      	cmp	r4, #3
    cc84:	d006      	beq.n	cc94 <bt_scan_filter_add+0x2c>
    cc86:	d902      	bls.n	cc8e <bt_scan_filter_add+0x26>
    cc88:	3c04      	subs	r4, #4
    cc8a:	2c01      	cmp	r4, #1
    cc8c:	d85a      	bhi.n	cd44 <bt_scan_filter_add+0xdc>
		return -ENOMEM;
    cc8e:	f06f 060b 	mvn.w	r6, #11
    cc92:	e020      	b.n	ccd6 <bt_scan_filter_add+0x6e>
	uint8_t counter = bt_scan.scan_filters.uuid.cnt;
    cc94:	4f2f      	ldr	r7, [pc, #188]	; (cd54 <bt_scan_filter_add+0xec>)
    cc96:	f897 4050 	ldrb.w	r4, [r7, #80]	; 0x50
	if (counter >= CONFIG_BT_SCAN_UUID_CNT) {
    cc9a:	2c02      	cmp	r4, #2
    cc9c:	d8f7      	bhi.n	cc8e <bt_scan_filter_add+0x26>
    cc9e:	46b9      	mov	r9, r7
	for (size_t i = 0; i < counter; i++) {
    cca0:	f04f 0800 	mov.w	r8, #0
    cca4:	45a0      	cmp	r8, r4
    cca6:	d31c      	bcc.n	cce2 <bt_scan_filter_add+0x7a>
	switch (uuid->type) {
    cca8:	782b      	ldrb	r3, [r5, #0]
    ccaa:	2b01      	cmp	r3, #1
    ccac:	d026      	beq.n	ccfc <bt_scan_filter_add+0x94>
    ccae:	2b02      	cmp	r3, #2
    ccb0:	d031      	beq.n	cd16 <bt_scan_filter_add+0xae>
    ccb2:	2b00      	cmp	r3, #0
    ccb4:	d146      	bne.n	cd44 <bt_scan_filter_add+0xdc>
		uuid_filter[counter].uuid_data.uuid_16 = *uuid_16;
    ccb6:	4b28      	ldr	r3, [pc, #160]	; (cd58 <bt_scan_filter_add+0xf0>)
    ccb8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    ccbc:	6828      	ldr	r0, [r5, #0]
    ccbe:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    ccc2:	1d11      	adds	r1, r2, #4
    ccc4:	6050      	str	r0, [r2, #4]
		uuid_filter[counter].uuid =
    ccc6:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	return 0;
    ccca:	2600      	movs	r6, #0
	bt_scan.scan_filters.uuid.cnt++;
    cccc:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    ccd0:	3301      	adds	r3, #1
    ccd2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	return z_impl_k_mutex_unlock(mutex);
    ccd6:	481e      	ldr	r0, [pc, #120]	; (cd50 <bt_scan_filter_add+0xe8>)
    ccd8:	f00b fa0a 	bl	180f0 <z_impl_k_mutex_unlock>
}
    ccdc:	4630      	mov	r0, r6
    ccde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (bt_uuid_cmp(uuid_filter[i].uuid, uuid) == 0) {
    cce2:	f8d9 0008 	ldr.w	r0, [r9, #8]
    cce6:	4629      	mov	r1, r5
    cce8:	f00f f87b 	bl	1bde2 <bt_uuid_cmp>
    ccec:	f109 0918 	add.w	r9, r9, #24
    ccf0:	4606      	mov	r6, r0
    ccf2:	2800      	cmp	r0, #0
    ccf4:	d0ef      	beq.n	ccd6 <bt_scan_filter_add+0x6e>
	for (size_t i = 0; i < counter; i++) {
    ccf6:	f108 0801 	add.w	r8, r8, #1
    ccfa:	e7d3      	b.n	cca4 <bt_scan_filter_add+0x3c>
		uuid_filter[counter].uuid_data.uuid_32 = *uuid_32;
    ccfc:	4a16      	ldr	r2, [pc, #88]	; (cd58 <bt_scan_filter_add+0xf0>)
    ccfe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    cd02:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
    cd06:	3304      	adds	r3, #4
    cd08:	e895 0003 	ldmia.w	r5, {r0, r1}
    cd0c:	e883 0003 	stmia.w	r3, {r0, r1}
		uuid_filter[counter].uuid =
    cd10:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
		break;
    cd14:	e7d9      	b.n	ccca <bt_scan_filter_add+0x62>
		uuid_filter[counter].uuid_data.uuid_128 = *uuid_128;
    cd16:	4a10      	ldr	r2, [pc, #64]	; (cd58 <bt_scan_filter_add+0xf0>)
    cd18:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    cd1c:	00e6      	lsls	r6, r4, #3
    cd1e:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    cd22:	3404      	adds	r4, #4
    cd24:	46a4      	mov	ip, r4
    cd26:	f105 0e10 	add.w	lr, r5, #16
    cd2a:	4623      	mov	r3, r4
    cd2c:	6828      	ldr	r0, [r5, #0]
    cd2e:	6869      	ldr	r1, [r5, #4]
    cd30:	3508      	adds	r5, #8
    cd32:	c303      	stmia	r3!, {r0, r1}
    cd34:	4575      	cmp	r5, lr
    cd36:	461c      	mov	r4, r3
    cd38:	d1f7      	bne.n	cd2a <bt_scan_filter_add+0xc2>
    cd3a:	782b      	ldrb	r3, [r5, #0]
    cd3c:	7023      	strb	r3, [r4, #0]
		uuid_filter[counter].uuid =
    cd3e:	f842 c006 	str.w	ip, [r2, r6]
		break;
    cd42:	e7c2      	b.n	ccca <bt_scan_filter_add+0x62>
		err = -EINVAL;
    cd44:	f06f 0615 	mvn.w	r6, #21
		break;
    cd48:	e7c5      	b.n	ccd6 <bt_scan_filter_add+0x6e>
		return -EINVAL;
    cd4a:	f06f 0615 	mvn.w	r6, #21
    cd4e:	e7c5      	b.n	ccdc <bt_scan_filter_add+0x74>
    cd50:	20008660 	.word	0x20008660
    cd54:	2000aa18 	.word	0x2000aa18
    cd58:	2000aa20 	.word	0x2000aa20

0000cd5c <bt_scan_filter_remove_all>:
{
    cd5c:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    cd5e:	4c0c      	ldr	r4, [pc, #48]	; (cd90 <bt_scan_filter_remove_all+0x34>)
    cd60:	f04f 32ff 	mov.w	r2, #4294967295
    cd64:	f04f 33ff 	mov.w	r3, #4294967295
    cd68:	4620      	mov	r0, r4
    cd6a:	f00b f8f5 	bl	17f58 <z_impl_k_mutex_lock>
	name_filter->cnt = 0;
    cd6e:	2200      	movs	r2, #0
    cd70:	4b08      	ldr	r3, [pc, #32]	; (cd94 <bt_scan_filter_remove_all+0x38>)
    cd72:	701a      	strb	r2, [r3, #0]
	short_name_filter->cnt = 0;
    cd74:	709a      	strb	r2, [r3, #2]
	addr_filter->cnt = 0;
    cd76:	711a      	strb	r2, [r3, #4]
	uuid_filter->cnt = 0;
    cd78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	appearance_filter->cnt = 0;
    cd7c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	manufacturer_data_filter->cnt = 0;
    cd80:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	return z_impl_k_mutex_unlock(mutex);
    cd84:	4620      	mov	r0, r4
}
    cd86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cd8a:	f00b b9b1 	b.w	180f0 <z_impl_k_mutex_unlock>
    cd8e:	bf00      	nop
    cd90:	20008660 	.word	0x20008660
    cd94:	2000aa18 	.word	0x2000aa18

0000cd98 <bt_scan_filter_disable>:
	bt_scan.scan_filters.name.enabled = false;
    cd98:	2200      	movs	r2, #0
    cd9a:	4b05      	ldr	r3, [pc, #20]	; (cdb0 <bt_scan_filter_disable+0x18>)
    cd9c:	705a      	strb	r2, [r3, #1]
	bt_scan.scan_filters.short_name.enabled = false;
    cd9e:	70da      	strb	r2, [r3, #3]
	bt_scan.scan_filters.addr.enabled = false;
    cda0:	715a      	strb	r2, [r3, #5]
	bt_scan.scan_filters.uuid.enabled = false;
    cda2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	bt_scan.scan_filters.appearance.enabled = false;
    cda6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	bt_scan.scan_filters.manufacturer_data.enabled = false;
    cdaa:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
}
    cdae:	4770      	bx	lr
    cdb0:	2000aa18 	.word	0x2000aa18

0000cdb4 <bt_scan_filter_enable>:
{
    cdb4:	b508      	push	{r3, lr}
	if (!check_filter_mode(mode)) {
    cdb6:	0683      	lsls	r3, r0, #26
    cdb8:	d025      	beq.n	ce06 <bt_scan_filter_enable+0x52>
	bt_scan_filter_disable();
    cdba:	f7ff ffed 	bl	cd98 <bt_scan_filter_disable>
	if (mode & BT_SCAN_ADDR_FILTER) {
    cdbe:	f010 0f02 	tst.w	r0, #2
		filters->addr.enabled = true;
    cdc2:	bf18      	it	ne
    cdc4:	2201      	movne	r2, #1
    cdc6:	4b11      	ldr	r3, [pc, #68]	; (ce0c <bt_scan_filter_enable+0x58>)
    cdc8:	bf18      	it	ne
    cdca:	715a      	strbne	r2, [r3, #5]
	if (mode & BT_SCAN_NAME_FILTER) {
    cdcc:	07c2      	lsls	r2, r0, #31
		filters->name.enabled = true;
    cdce:	bf44      	itt	mi
    cdd0:	2201      	movmi	r2, #1
    cdd2:	705a      	strbmi	r2, [r3, #1]
	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
    cdd4:	06c2      	lsls	r2, r0, #27
		filters->short_name.enabled = true;
    cdd6:	bf44      	itt	mi
    cdd8:	2201      	movmi	r2, #1
    cdda:	70da      	strbmi	r2, [r3, #3]
	if (mode & BT_SCAN_UUID_FILTER) {
    cddc:	0742      	lsls	r2, r0, #29
		filters->uuid.enabled = true;
    cdde:	bf44      	itt	mi
    cde0:	2201      	movmi	r2, #1
    cde2:	f883 2051 	strbmi.w	r2, [r3, #81]	; 0x51
	if (mode & BT_SCAN_APPEARANCE_FILTER) {
    cde6:	0702      	lsls	r2, r0, #28
		filters->appearance.enabled = true;
    cde8:	bf44      	itt	mi
    cdea:	2201      	movmi	r2, #1
    cdec:	f883 2055 	strbmi.w	r2, [r3, #85]	; 0x55
	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
    cdf0:	0682      	lsls	r2, r0, #26
		filters->manufacturer_data.enabled = true;
    cdf2:	bf48      	it	mi
    cdf4:	2201      	movmi	r2, #1
	return 0;
    cdf6:	f04f 0000 	mov.w	r0, #0
		filters->manufacturer_data.enabled = true;
    cdfa:	bf48      	it	mi
    cdfc:	f883 2057 	strbmi.w	r2, [r3, #87]	; 0x57
	filters->all_mode = match_all;
    ce00:	f883 1058 	strb.w	r1, [r3, #88]	; 0x58
}
    ce04:	bd08      	pop	{r3, pc}
		return -EINVAL;
    ce06:	f06f 0015 	mvn.w	r0, #21
    ce0a:	e7fb      	b.n	ce04 <bt_scan_filter_enable+0x50>
    ce0c:	2000aa18 	.word	0x2000aa18

0000ce10 <scan_connect_with_target.part.0>:
static void scan_connect_with_target(struct bt_scan_control *control,
    ce10:	b570      	push	{r4, r5, r6, lr}
    ce12:	460e      	mov	r6, r1
    ce14:	b086      	sub	sp, #24
    ce16:	4605      	mov	r5, r0
	bt_scan_stop();
    ce18:	f00e f9df 	bl	1b1da <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
    ce1c:	4b18      	ldr	r3, [pc, #96]	; (ce80 <scan_connect_with_target.part.0+0x70>)
    ce1e:	ac02      	add	r4, sp, #8
    ce20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    ce22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
    ce26:	4621      	mov	r1, r4
    ce28:	ab01      	add	r3, sp, #4
    ce2a:	4630      	mov	r0, r6
    ce2c:	4a15      	ldr	r2, [pc, #84]	; (ce84 <scan_connect_with_target.part.0+0x74>)
    ce2e:	f004 fcd3 	bl	117d8 <bt_conn_le_create>
	if (err) {
    ce32:	4b15      	ldr	r3, [pc, #84]	; (ce88 <scan_connect_with_target.part.0+0x78>)
		notify_connecting_error(&control->device_info);
    ce34:	3508      	adds	r5, #8
	return list->head;
    ce36:	681c      	ldr	r4, [r3, #0]
	if (err) {
    ce38:	b168      	cbz	r0, ce56 <scan_connect_with_target.part.0+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    ce3a:	b10c      	cbz	r4, ce40 <scan_connect_with_target.part.0+0x30>
    ce3c:	3c04      	subs	r4, #4
    ce3e:	b90c      	cbnz	r4, ce44 <scan_connect_with_target.part.0+0x34>
}
    ce40:	b006      	add	sp, #24
    ce42:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->cb_addr->connecting_error) {
    ce44:	6823      	ldr	r3, [r4, #0]
    ce46:	689b      	ldr	r3, [r3, #8]
    ce48:	b10b      	cbz	r3, ce4e <scan_connect_with_target.part.0+0x3e>
			cb->cb_addr->connecting_error(device_info);
    ce4a:	4628      	mov	r0, r5
    ce4c:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    ce4e:	1d22      	adds	r2, r4, #4
    ce50:	d0f6      	beq.n	ce40 <scan_connect_with_target.part.0+0x30>
	return node->next;
    ce52:	6864      	ldr	r4, [r4, #4]
    ce54:	e7f1      	b.n	ce3a <scan_connect_with_target.part.0+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    ce56:	b91c      	cbnz	r4, ce60 <scan_connect_with_target.part.0+0x50>
		bt_conn_unref(conn);
    ce58:	9801      	ldr	r0, [sp, #4]
    ce5a:	f004 faff 	bl	1145c <bt_conn_unref>
    ce5e:	e7ef      	b.n	ce40 <scan_connect_with_target.part.0+0x30>
		notify_connecting(&control->device_info, conn);
    ce60:	9e01      	ldr	r6, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    ce62:	3c04      	subs	r4, #4
    ce64:	2c00      	cmp	r4, #0
    ce66:	d0f7      	beq.n	ce58 <scan_connect_with_target.part.0+0x48>
		if (cb->cb_addr->connecting) {
    ce68:	6823      	ldr	r3, [r4, #0]
    ce6a:	68db      	ldr	r3, [r3, #12]
    ce6c:	b113      	cbz	r3, ce74 <scan_connect_with_target.part.0+0x64>
			cb->cb_addr->connecting(device_info, conn);
    ce6e:	4631      	mov	r1, r6
    ce70:	4628      	mov	r0, r5
    ce72:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    ce74:	1d23      	adds	r3, r4, #4
    ce76:	d0ef      	beq.n	ce58 <scan_connect_with_target.part.0+0x48>
	return node->next;
    ce78:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    ce7a:	2c00      	cmp	r4, #0
    ce7c:	d1f1      	bne.n	ce62 <scan_connect_with_target.part.0+0x52>
    ce7e:	e7eb      	b.n	ce58 <scan_connect_with_target.part.0+0x48>
    ce80:	0001e784 	.word	0x0001e784
    ce84:	2000aa8c 	.word	0x2000aa8c
    ce88:	2000aa94 	.word	0x2000aa94

0000ce8c <scan_recv>:
	}
}

static void scan_recv(const struct bt_le_scan_recv_info *info,
		      struct net_buf_simple *ad)
{
    ce8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    ce90:	4c54      	ldr	r4, [pc, #336]	; (cfe4 <scan_recv+0x158>)
{
    ce92:	b099      	sub	sp, #100	; 0x64
	memset(&scan_control, 0, sizeof(scan_control));
    ce94:	225c      	movs	r2, #92	; 0x5c
{
    ce96:	4606      	mov	r6, r0
    ce98:	460d      	mov	r5, r1
	memset(&scan_control, 0, sizeof(scan_control));
    ce9a:	a801      	add	r0, sp, #4
    ce9c:	2100      	movs	r1, #0
    ce9e:	f00e ff56 	bl	1bd4e <memset>
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    cea2:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
	return bt_scan.scan_filters.addr.enabled;
    cea6:	7962      	ldrb	r2, [r4, #5]
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    cea8:	f88d 3007 	strb.w	r3, [sp, #7]
	control->filter_cnt = 0;
    ceac:	2300      	movs	r3, #0
    ceae:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_addr_filter_enabled()) {
    ceb2:	b112      	cbz	r2, ceba <scan_recv+0x2e>
		control->filter_cnt++;
    ceb4:	2301      	movs	r3, #1
    ceb6:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_name_filter_enabled()) {
    ceba:	7863      	ldrb	r3, [r4, #1]
    cebc:	b123      	cbz	r3, cec8 <scan_recv+0x3c>
		control->filter_cnt++;
    cebe:	f89d 3004 	ldrb.w	r3, [sp, #4]
    cec2:	3301      	adds	r3, #1
    cec4:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_short_name_filter_enabled()) {
    cec8:	78e3      	ldrb	r3, [r4, #3]
    ceca:	b123      	cbz	r3, ced6 <scan_recv+0x4a>
		control->filter_cnt++;
    cecc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ced0:	3301      	adds	r3, #1
    ced2:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_uuid_filter_enabled()) {
    ced6:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
    ceda:	b123      	cbz	r3, cee6 <scan_recv+0x5a>
		control->filter_cnt++;
    cedc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    cee0:	3301      	adds	r3, #1
    cee2:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_appearance_filter_enabled()) {
    cee6:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
    ceea:	b123      	cbz	r3, cef6 <scan_recv+0x6a>
		control->filter_cnt++;
    ceec:	f89d 3004 	ldrb.w	r3, [sp, #4]
    cef0:	3301      	adds	r3, #1
    cef2:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_manufacturer_data_filter_enabled()) {
    cef6:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
    cefa:	b123      	cbz	r3, cf06 <scan_recv+0x7a>
		control->filter_cnt++;
    cefc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    cf00:	3301      	adds	r3, #1
    cf02:	f88d 3004 	strb.w	r3, [sp, #4]

	check_enabled_filters(&scan_control);

	/* Check id device is connectable. */
	scan_control.connectable =
		(info->adv_props & BT_GAP_ADV_PROP_CONNECTABLE) != 0;
    cf06:	7a33      	ldrb	r3, [r6, #8]
    cf08:	f003 0301 	and.w	r3, r3, #1
    cf0c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (is_addr_filter_enabled()) {
    cf10:	b1ea      	cbz	r2, cf4e <scan_recv+0xc2>
	for (size_t i = 0; i < counter; i++) {
    cf12:	f04f 0800 	mov.w	r8, #0

	/* Check the address filter. */
	check_addr(&scan_control, info->addr);
    cf16:	f8d6 a000 	ldr.w	sl, [r6]
	uint8_t counter = bt_scan.scan_filters.addr.cnt;
    cf1a:	f894 9004 	ldrb.w	r9, [r4, #4]
	for (size_t i = 0; i < counter; i++) {
    cf1e:	4f32      	ldr	r7, [pc, #200]	; (cfe8 <scan_recv+0x15c>)
    cf20:	45c8      	cmp	r8, r9
    cf22:	d214      	bcs.n	cf4e <scan_recv+0xc2>
	return memcmp(a, b, sizeof(*a));
    cf24:	4639      	mov	r1, r7
    cf26:	2207      	movs	r2, #7
    cf28:	4650      	mov	r0, sl
    cf2a:	f00e fed4 	bl	1bcd6 <memcmp>
		if (bt_addr_le_cmp(target_addr, &addr[i]) == 0) {
    cf2e:	46bb      	mov	fp, r7
    cf30:	3707      	adds	r7, #7
    cf32:	2800      	cmp	r0, #0
    cf34:	d13a      	bne.n	cfac <scan_recv+0x120>
			control->filter_match_cnt++;
    cf36:	f89d 3005 	ldrb.w	r3, [sp, #5]
			control->filter_status.addr.addr = &addr[i];
    cf3a:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
			control->filter_match_cnt++;
    cf3e:	3301      	adds	r3, #1
    cf40:	f88d 3005 	strb.w	r3, [sp, #5]
			control->filter_status.addr.match = true;
    cf44:	2301      	movs	r3, #1
    cf46:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			control->filter_match = true;
    cf4a:	f88d 3006 	strb.w	r3, [sp, #6]
	state->offset = net_buf_simple_headroom(buf);
    cf4e:	4628      	mov	r0, r5
    cf50:	f010 fa04 	bl	1d35c <net_buf_simple_headroom>
    cf54:	4607      	mov	r7, r0

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
    cf56:	4925      	ldr	r1, [pc, #148]	; (cfec <scan_recv+0x160>)
    cf58:	4628      	mov	r0, r5
    cf5a:	aa01      	add	r2, sp, #4
	state->len = buf->len;
    cf5c:	f8b5 8004 	ldrh.w	r8, [r5, #4]
    cf60:	f002 fd36 	bl	f9d0 <bt_data_parse>
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.recv_info = info;
	scan_control.device_info.conn_param = &bt_scan.conn_param;
    cf64:	4b22      	ldr	r3, [pc, #136]	; (cff0 <scan_recv+0x164>)
	buf->data = buf->__buf + state->offset;
    cf66:	68a8      	ldr	r0, [r5, #8]
	scan_control.device_info.adv_data = ad;
    cf68:	e9cd 3504 	strd	r3, r5, [sp, #16]
	if (control->all_mode &&
    cf6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cf70:	fa10 f787 	uxtah	r7, r0, r7
    cf74:	602f      	str	r7, [r5, #0]
	buf->len = state->len;
    cf76:	f8a5 8004 	strh.w	r8, [r5, #4]
	scan_control.device_info.recv_info = info;
    cf7a:	9603      	str	r6, [sp, #12]

	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, info->addr);
    cf7c:	6835      	ldr	r5, [r6, #0]
	if (control->all_mode &&
    cf7e:	b1c3      	cbz	r3, cfb2 <scan_recv+0x126>
    cf80:	f89d 2005 	ldrb.w	r2, [sp, #5]
    cf84:	f89d 3004 	ldrb.w	r3, [sp, #4]
    cf88:	429a      	cmp	r2, r3
    cf8a:	d116      	bne.n	cfba <scan_recv+0x12e>
		notify_filter_matched(&control->device_info,
    cf8c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    cf90:	a906      	add	r1, sp, #24
    cf92:	a803      	add	r0, sp, #12
    cf94:	f7ff fe40 	bl	cc18 <notify_filter_matched.constprop.0>
	if (!bt_scan.connect_if_match) {
    cf98:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    cf9c:	b11b      	cbz	r3, cfa6 <scan_recv+0x11a>
    cf9e:	4629      	mov	r1, r5
    cfa0:	a801      	add	r0, sp, #4
    cfa2:	f7ff ff35 	bl	ce10 <scan_connect_with_target.part.0>
}
    cfa6:	b019      	add	sp, #100	; 0x64
    cfa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < counter; i++) {
    cfac:	f108 0801 	add.w	r8, r8, #1
    cfb0:	e7b6      	b.n	cf20 <scan_recv+0x94>
	else if ((!control->all_mode) && control->filter_match) {
    cfb2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    cfb6:	2b00      	cmp	r3, #0
    cfb8:	d1e8      	bne.n	cf8c <scan_recv+0x100>
	return list->head;
    cfba:	4b0e      	ldr	r3, [pc, #56]	; (cff4 <scan_recv+0x168>)
    cfbc:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    cfbe:	2c00      	cmp	r4, #0
    cfc0:	d0f1      	beq.n	cfa6 <scan_recv+0x11a>
		notify_filter_no_match(&control->device_info,
    cfc2:	f89d 5008 	ldrb.w	r5, [sp, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    cfc6:	3c04      	subs	r4, #4
    cfc8:	2c00      	cmp	r4, #0
    cfca:	d0ec      	beq.n	cfa6 <scan_recv+0x11a>
		if (cb->cb_addr->filter_no_match) {
    cfcc:	6823      	ldr	r3, [r4, #0]
    cfce:	685b      	ldr	r3, [r3, #4]
    cfd0:	b113      	cbz	r3, cfd8 <scan_recv+0x14c>
			cb->cb_addr->filter_no_match(device_info, connectable);
    cfd2:	4629      	mov	r1, r5
    cfd4:	a803      	add	r0, sp, #12
    cfd6:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    cfd8:	1d23      	adds	r3, r4, #4
    cfda:	d0e4      	beq.n	cfa6 <scan_recv+0x11a>
	return node->next;
    cfdc:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    cfde:	2c00      	cmp	r4, #0
    cfe0:	d1f1      	bne.n	cfc6 <scan_recv+0x13a>
    cfe2:	e7e0      	b.n	cfa6 <scan_recv+0x11a>
    cfe4:	2000aa18 	.word	0x2000aa18
    cfe8:	2000aa1c 	.word	0x2000aa1c
    cfec:	0000ca9d 	.word	0x0000ca9d
    cff0:	2000aa8c 	.word	0x2000aa8c
    cff4:	2000aa94 	.word	0x2000aa94

0000cff8 <bt_scan_init>:
{
    cff8:	b570      	push	{r4, r5, r6, lr}
    cffa:	4606      	mov	r6, r0
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
    cffc:	4c14      	ldr	r4, [pc, #80]	; (d050 <bt_scan_init+0x58>)
	bt_le_scan_cb_register(&scan_cb);
    cffe:	4815      	ldr	r0, [pc, #84]	; (d054 <bt_scan_init+0x5c>)
    d000:	f003 ff12 	bl	10e28 <bt_le_scan_cb_register>
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
    d004:	225c      	movs	r2, #92	; 0x5c
    d006:	2100      	movs	r1, #0
    d008:	4620      	mov	r0, r4
    d00a:	f00e fea0 	bl	1bd4e <memset>
	if (init) {
    d00e:	b1be      	cbz	r6, d040 <bt_scan_init+0x48>
		bt_scan.connect_if_match = init->connect_if_match;
    d010:	7933      	ldrb	r3, [r6, #4]
		if (init->scan_param) {
    d012:	6835      	ldr	r5, [r6, #0]
		bt_scan.connect_if_match = init->connect_if_match;
    d014:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		if (init->scan_param) {
    d018:	b15d      	cbz	r5, d032 <bt_scan_init+0x3a>
			bt_scan.scan_param = *init->scan_param;
    d01a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d01c:	3460      	adds	r4, #96	; 0x60
    d01e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d020:	682b      	ldr	r3, [r5, #0]
    d022:	6023      	str	r3, [r4, #0]
		if (init->conn_param) {
    d024:	68b2      	ldr	r2, [r6, #8]
    d026:	b13a      	cbz	r2, d038 <bt_scan_init+0x40>
			bt_scan.conn_param = *init->conn_param;
    d028:	4b0b      	ldr	r3, [pc, #44]	; (d058 <bt_scan_init+0x60>)
    d02a:	6810      	ldr	r0, [r2, #0]
    d02c:	6851      	ldr	r1, [r2, #4]
    d02e:	c303      	stmia	r3!, {r0, r1}
}
    d030:	bd70      	pop	{r4, r5, r6, pc}
			scan_default_param_set();
    d032:	f7ff fcbb 	bl	c9ac <scan_default_param_set>
    d036:	e7f5      	b.n	d024 <bt_scan_init+0x2c>
}
    d038:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			scan_default_conn_param_set();
    d03c:	f7ff bcc8 	b.w	c9d0 <scan_default_conn_param_set>
		scan_default_param_set();
    d040:	f7ff fcb4 	bl	c9ac <scan_default_param_set>
		scan_default_conn_param_set();
    d044:	f7ff fcc4 	bl	c9d0 <scan_default_conn_param_set>
		bt_scan.connect_if_match = false;
    d048:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c
}
    d04c:	e7f0      	b.n	d030 <bt_scan_init+0x38>
    d04e:	bf00      	nop
    d050:	2000aa18 	.word	0x2000aa18
    d054:	2000828c 	.word	0x2000828c
    d058:	2000aa8c 	.word	0x2000aa8c

0000d05c <bt_scan_start>:
	.recv = scan_recv,
};

int bt_scan_start(enum bt_scan_type scan_type)
{
	switch (scan_type) {
    d05c:	b108      	cbz	r0, d062 <bt_scan_start+0x6>
    d05e:	2801      	cmp	r0, #1
    d060:	d106      	bne.n	d070 <bt_scan_start+0x14>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
		break;

	case BT_SCAN_TYPE_SCAN_PASSIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
    d062:	4b05      	ldr	r3, [pc, #20]	; (d078 <bt_scan_start+0x1c>)
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
    d064:	2100      	movs	r1, #0
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
    d066:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
    d06a:	4804      	ldr	r0, [pc, #16]	; (d07c <bt_scan_start+0x20>)
    d06c:	f003 be62 	b.w	10d34 <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
    d070:	f06f 0015 	mvn.w	r0, #21
    d074:	4770      	bx	lr
    d076:	bf00      	nop
    d078:	2000aa18 	.word	0x2000aa18
    d07c:	2000aa78 	.word	0x2000aa78

0000d080 <notify_process>:
 * @retval BT_GATT_ITER_CONTINUE Continue notification
 */
static uint8_t notify_process(struct bt_conn *conn,
			   struct bt_gatt_subscribe_params *params,
			   const void *data, uint16_t length)
{
    d080:	b570      	push	{r4, r5, r6, lr}
    d082:	460d      	mov	r5, r1
    d084:	461c      	mov	r4, r3
	struct bt_bas_client *bas;
	uint8_t battery_level;
	const uint8_t *bdata = (uint8_t *)data;

	bas = CONTAINER_OF(params, struct bt_bas_client, notify_params);
    d086:	1f0e      	subs	r6, r1, #4
	if (!data || !length) {
    d088:	b102      	cbz	r2, d08c <notify_process+0xc>
    d08a:	b953      	cbnz	r3, d0a2 <notify_process+0x22>
		LOG_INF("Notifications disabled.");
    d08c:	2149      	movs	r1, #73	; 0x49
    d08e:	480e      	ldr	r0, [pc, #56]	; (d0c8 <notify_process+0x48>)
		return BT_GATT_ITER_STOP;
	}

	battery_level = bdata[0];
	if (battery_level > BT_BAS_VAL_MAX) {
		LOG_ERR("Unexpected notification value.");
    d090:	f00d fbee 	bl	1a870 <printk>
		if (bas->notify_cb) {
    d094:	6f6b      	ldr	r3, [r5, #116]	; 0x74
    d096:	b113      	cbz	r3, d09e <notify_process+0x1e>
			bas->notify_cb(bas, BT_BAS_VAL_INVALID);
    d098:	21ff      	movs	r1, #255	; 0xff
    d09a:	4630      	mov	r0, r6
    d09c:	4798      	blx	r3
		return BT_GATT_ITER_STOP;
    d09e:	2000      	movs	r0, #0
	if (bas->notify_cb) {
		bas->notify_cb(bas, battery_level);
	}

	return BT_GATT_ITER_CONTINUE;
}
    d0a0:	bd70      	pop	{r4, r5, r6, pc}
	if (length != 1) {
    d0a2:	2b01      	cmp	r3, #1
    d0a4:	d002      	beq.n	d0ac <notify_process+0x2c>
		LOG_ERR("Unexpected notification value size.");
    d0a6:	2145      	movs	r1, #69	; 0x45
    d0a8:	4808      	ldr	r0, [pc, #32]	; (d0cc <notify_process+0x4c>)
    d0aa:	e7f1      	b.n	d090 <notify_process+0x10>
	battery_level = bdata[0];
    d0ac:	7811      	ldrb	r1, [r2, #0]
	if (battery_level > BT_BAS_VAL_MAX) {
    d0ae:	2964      	cmp	r1, #100	; 0x64
    d0b0:	d902      	bls.n	d0b8 <notify_process+0x38>
		LOG_ERR("Unexpected notification value.");
    d0b2:	2145      	movs	r1, #69	; 0x45
    d0b4:	4806      	ldr	r0, [pc, #24]	; (d0d0 <notify_process+0x50>)
    d0b6:	e7eb      	b.n	d090 <notify_process+0x10>
	if (bas->notify_cb) {
    d0b8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
	bas->battery_level = battery_level;
    d0ba:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
	if (bas->notify_cb) {
    d0be:	b10b      	cbz	r3, d0c4 <notify_process+0x44>
		bas->notify_cb(bas, battery_level);
    d0c0:	4630      	mov	r0, r6
    d0c2:	4798      	blx	r3
	return BT_GATT_ITER_CONTINUE;
    d0c4:	4620      	mov	r0, r4
    d0c6:	e7eb      	b.n	d0a0 <notify_process+0x20>
    d0c8:	000206d0 	.word	0x000206d0
    d0cc:	000206ed 	.word	0x000206ed
    d0d0:	00020716 	.word	0x00020716

0000d0d4 <read_process>:
 * @retval BT_GATT_ITER_CONTINUE Continue notification
 */
static uint8_t read_process(struct bt_conn *conn, uint8_t err,
			     struct bt_gatt_read_params *params,
			     const void *data, uint16_t length)
{
    d0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t battery_level = BT_BAS_VAL_INVALID;
	const uint8_t *bdata = (uint8_t *)data;

	bas = CONTAINER_OF(params, struct bt_bas_client, read_params);

	if (!bas->read_cb) {
    d0d6:	6e17      	ldr	r7, [r2, #96]	; 0x60
{
    d0d8:	460d      	mov	r5, r1
    d0da:	4614      	mov	r4, r2
	bas = CONTAINER_OF(params, struct bt_bas_client, read_params);
    d0dc:	f1a2 061c 	sub.w	r6, r2, #28
	if (!bas->read_cb) {
    d0e0:	b937      	cbnz	r7, d0f0 <read_process+0x1c>
		LOG_ERR("No read callback present");
    d0e2:	2145      	movs	r1, #69	; 0x45
    d0e4:	4814      	ldr	r0, [pc, #80]	; (d138 <read_process+0x64>)
    d0e6:	f00d fbc3 	bl	1a870 <printk>
			bas->battery_level = battery_level;
			bas->read_cb(bas, battery_level, err);
		}
	}

	bas->read_cb = NULL;
    d0ea:	2000      	movs	r0, #0
    d0ec:	6620      	str	r0, [r4, #96]	; 0x60

	return BT_GATT_ITER_STOP;
}
    d0ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else  if (err) {
    d0f0:	b151      	cbz	r1, d108 <read_process+0x34>
		LOG_ERR("Read value error: %d", err);
    d0f2:	460a      	mov	r2, r1
    d0f4:	4811      	ldr	r0, [pc, #68]	; (d13c <read_process+0x68>)
    d0f6:	2145      	movs	r1, #69	; 0x45
    d0f8:	f00d fbba 	bl	1a870 <printk>
			bas->read_cb(bas, BT_BAS_VAL_INVALID, err);
    d0fc:	462a      	mov	r2, r5
    d0fe:	21ff      	movs	r1, #255	; 0xff
    d100:	4630      	mov	r0, r6
    d102:	6e23      	ldr	r3, [r4, #96]	; 0x60
    d104:	4798      	blx	r3
    d106:	e7f0      	b.n	d0ea <read_process+0x16>
	} else if (!data || length != 1) {
    d108:	b11b      	cbz	r3, d112 <read_process+0x3e>
    d10a:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    d10e:	2a01      	cmp	r2, #1
    d110:	d005      	beq.n	d11e <read_process+0x4a>
		bas->read_cb(bas,  battery_level, -EMSGSIZE);
    d112:	f06f 0223 	mvn.w	r2, #35	; 0x23
    d116:	21ff      	movs	r1, #255	; 0xff
			bas->read_cb(bas, battery_level, err);
    d118:	4630      	mov	r0, r6
    d11a:	47b8      	blx	r7
    d11c:	e7e5      	b.n	d0ea <read_process+0x16>
		battery_level = bdata[0];
    d11e:	7819      	ldrb	r1, [r3, #0]
		if (battery_level > BT_BAS_VAL_MAX) {
    d120:	2964      	cmp	r1, #100	; 0x64
    d122:	d904      	bls.n	d12e <read_process+0x5a>
			LOG_ERR("Unexpected read value.");
    d124:	2145      	movs	r1, #69	; 0x45
    d126:	4806      	ldr	r0, [pc, #24]	; (d140 <read_process+0x6c>)
    d128:	f00d fba2 	bl	1a870 <printk>
    d12c:	e7e6      	b.n	d0fc <read_process+0x28>
			bas->read_cb(bas, battery_level, err);
    d12e:	462a      	mov	r2, r5
			bas->battery_level = battery_level;
    d130:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
			bas->read_cb(bas, battery_level, err);
    d134:	e7f0      	b.n	d118 <read_process+0x44>
    d136:	bf00      	nop
    d138:	0002073a 	.word	0x0002073a
    d13c:	00020758 	.word	0x00020758
    d140:	00020772 	.word	0x00020772

0000d144 <bas_read_value_handler>:
 * @brief Periodic read workqueue handler.
 *
 * @param work Work instance.
 */
static void bas_read_value_handler(struct k_work *work)
{
    d144:	4601      	mov	r1, r0
	struct bt_bas_client *bas;

	bas = CONTAINER_OF(work, struct bt_bas_client,
			     periodic_read.read_work);

	if (!bas->conn) {
    d146:	f850 0c30 	ldr.w	r0, [r0, #-48]
{
    d14a:	b508      	push	{r3, lr}
	if (!bas->conn) {
    d14c:	b928      	cbnz	r0, d15a <bas_read_value_handler+0x16>
	 */
	if (err) {
		LOG_ERR("Periodic Battery Level characteristic read error: %d",
			err);
	}
}
    d14e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("No connection object.");
    d152:	2145      	movs	r1, #69	; 0x45
    d154:	480b      	ldr	r0, [pc, #44]	; (d184 <bas_read_value_handler+0x40>)
    d156:	f00d bb8b 	b.w	1a870 <printk>
	bas->periodic_read.params.func = periodic_read_process;
    d15a:	4b0b      	ldr	r3, [pc, #44]	; (d188 <bas_read_value_handler+0x44>)
	err = bt_gatt_read(bas->conn, &bas->periodic_read.params);
    d15c:	3130      	adds	r1, #48	; 0x30
	bas->periodic_read.params.func = periodic_read_process;
    d15e:	600b      	str	r3, [r1, #0]
	bas->periodic_read.params.handle_count  = 1;
    d160:	2301      	movs	r3, #1
    d162:	604b      	str	r3, [r1, #4]
	bas->periodic_read.params.single.handle = bas->val_handle;
    d164:	8c0b      	ldrh	r3, [r1, #32]
    d166:	810b      	strh	r3, [r1, #8]
	bas->periodic_read.params.single.offset = 0;
    d168:	2300      	movs	r3, #0
    d16a:	814b      	strh	r3, [r1, #10]
	err = bt_gatt_read(bas->conn, &bas->periodic_read.params);
    d16c:	f007 fd74 	bl	14c58 <bt_gatt_read>
	if (err) {
    d170:	4602      	mov	r2, r0
    d172:	b128      	cbz	r0, d180 <bas_read_value_handler+0x3c>
}
    d174:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Periodic Battery Level characteristic read error: %d",
    d178:	2145      	movs	r1, #69	; 0x45
    d17a:	4804      	ldr	r0, [pc, #16]	; (d18c <bas_read_value_handler+0x48>)
    d17c:	f00d bb78 	b.w	1a870 <printk>
}
    d180:	bd08      	pop	{r3, pc}
    d182:	bf00      	nop
    d184:	0002078e 	.word	0x0002078e
    d188:	0000d191 	.word	0x0000d191
    d18c:	000207a9 	.word	0x000207a9

0000d190 <periodic_read_process>:
{
    d190:	b538      	push	{r3, r4, r5, lr}
    d192:	4614      	mov	r4, r2
	if (!bas->notify_cb) {
    d194:	6992      	ldr	r2, [r2, #24]
    d196:	b922      	cbnz	r2, d1a2 <periodic_read_process+0x12>
		LOG_ERR("No notification callback present");
    d198:	2145      	movs	r1, #69	; 0x45
    d19a:	4826      	ldr	r0, [pc, #152]	; (d234 <periodic_read_process+0xa4>)
		LOG_ERR("Unexpected read value size.");
    d19c:	f00d fb68 	bl	1a870 <printk>
    d1a0:	e005      	b.n	d1ae <periodic_read_process+0x1e>
	} else  if (err) {
    d1a2:	b359      	cbz	r1, d1fc <periodic_read_process+0x6c>
		LOG_ERR("Read value error: %d", err);
    d1a4:	460a      	mov	r2, r1
    d1a6:	4824      	ldr	r0, [pc, #144]	; (d238 <periodic_read_process+0xa8>)
    d1a8:	2145      	movs	r1, #69	; 0x45
    d1aa:	f00d fb61 	bl	1a870 <printk>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d1ae:	f104 0314 	add.w	r3, r4, #20
    d1b2:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(&bas->periodic_read.process,
    d1b6:	079b      	lsls	r3, r3, #30
    d1b8:	d51e      	bpl.n	d1f8 <periodic_read_process+0x68>
		k_delayed_work_submit(&bas->periodic_read.read_work,
    d1ba:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
				      K_MSEC(atomic_get(
    d1be:	3410      	adds	r4, #16
    d1c0:	e8d4 3faf 	lda	r3, [r4]
    d1c4:	2b00      	cmp	r3, #0
    d1c6:	dd31      	ble.n	d22c <periodic_read_process+0x9c>
    d1c8:	e8d4 0faf 	lda	r0, [r4]
    d1cc:	17c1      	asrs	r1, r0, #31
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    d1ce:	f240 33e7 	movw	r3, #999	; 0x3e7
    d1d2:	03c9      	lsls	r1, r1, #15
    d1d4:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    d1d8:	03c0      	lsls	r0, r0, #15
    d1da:	18c0      	adds	r0, r0, r3
    d1dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d1e0:	f04f 0300 	mov.w	r3, #0
    d1e4:	f141 0100 	adc.w	r1, r1, #0
    d1e8:	f7fb fca0 	bl	8b2c <__aeabi_uldivmod>
    d1ec:	4602      	mov	r2, r0
    d1ee:	460b      	mov	r3, r1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    d1f0:	4812      	ldr	r0, [pc, #72]	; (d23c <periodic_read_process+0xac>)
    d1f2:	4629      	mov	r1, r5
    d1f4:	f00c fbc6 	bl	19984 <k_delayed_work_submit_to_queue>
}
    d1f8:	2000      	movs	r0, #0
    d1fa:	bd38      	pop	{r3, r4, r5, pc}
	} else if (!data || length != 1) {
    d1fc:	b11b      	cbz	r3, d206 <periodic_read_process+0x76>
    d1fe:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    d202:	2901      	cmp	r1, #1
    d204:	d002      	beq.n	d20c <periodic_read_process+0x7c>
		LOG_ERR("Unexpected read value size.");
    d206:	2145      	movs	r1, #69	; 0x45
    d208:	480d      	ldr	r0, [pc, #52]	; (d240 <periodic_read_process+0xb0>)
    d20a:	e7c7      	b.n	d19c <periodic_read_process+0xc>
		battery_level = bdata[0];
    d20c:	7819      	ldrb	r1, [r3, #0]
		if (battery_level > BT_BAS_VAL_MAX) {
    d20e:	2964      	cmp	r1, #100	; 0x64
    d210:	d902      	bls.n	d218 <periodic_read_process+0x88>
			LOG_ERR("Unexpected read value.");
    d212:	2145      	movs	r1, #69	; 0x45
    d214:	480b      	ldr	r0, [pc, #44]	; (d244 <periodic_read_process+0xb4>)
    d216:	e7c1      	b.n	d19c <periodic_read_process+0xc>
		} else if (bas->battery_level != battery_level) {
    d218:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    d21c:	428b      	cmp	r3, r1
    d21e:	d0c6      	beq.n	d1ae <periodic_read_process+0x1e>
			bas->battery_level = battery_level;
    d220:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
			bas->notify_cb(bas, battery_level);
    d224:	f1a4 0060 	sub.w	r0, r4, #96	; 0x60
    d228:	4790      	blx	r2
    d22a:	e7c0      	b.n	d1ae <periodic_read_process+0x1e>
				      K_MSEC(atomic_get(
    d22c:	2000      	movs	r0, #0
    d22e:	4601      	mov	r1, r0
    d230:	e7cd      	b.n	d1ce <periodic_read_process+0x3e>
    d232:	bf00      	nop
    d234:	000207e3 	.word	0x000207e3
    d238:	00020758 	.word	0x00020758
    d23c:	2000a540 	.word	0x2000a540
    d240:	00020809 	.word	0x00020809
    d244:	00020772 	.word	0x00020772

0000d248 <bt_bas_client_init>:
	bas->notify = false;
}


void bt_bas_client_init(struct bt_bas_client *bas)
{
    d248:	b510      	push	{r4, lr}
	memset(bas, 0, sizeof(*bas));
    d24a:	2288      	movs	r2, #136	; 0x88
    d24c:	2100      	movs	r1, #0
{
    d24e:	4604      	mov	r4, r0
	memset(bas, 0, sizeof(*bas));
    d250:	f00e fd7d 	bl	1bd4e <memset>
	bas->battery_level = BT_BAS_VAL_INVALID;
    d254:	23ff      	movs	r3, #255	; 0xff
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    d256:	2230      	movs	r2, #48	; 0x30
    d258:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
    d25c:	2100      	movs	r1, #0
    d25e:	18a0      	adds	r0, r4, r2
    d260:	f00e fd75 	bl	1bd4e <memset>
    d264:	4b01      	ldr	r3, [pc, #4]	; (d26c <bt_bas_client_init+0x24>)
    d266:	6363      	str	r3, [r4, #52]	; 0x34

	k_delayed_work_init(&bas->periodic_read.read_work,
			    bas_read_value_handler);
}
    d268:	bd10      	pop	{r4, pc}
    d26a:	bf00      	nop
    d26c:	0000d145 	.word	0x0000d145

0000d270 <bt_bas_handles_assign>:


int bt_bas_handles_assign(struct bt_gatt_dm *dm,
				 struct bt_bas_client *bas)
{
    d270:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    d274:	460c      	mov	r4, r1
    d276:	4606      	mov	r6, r0
	const struct bt_gatt_dm_attr *gatt_service_attr =
			bt_gatt_dm_service_get(dm);
    d278:	f00d ff38 	bl	1b0ec <bt_gatt_dm_service_get>
	const struct bt_gatt_service_val *gatt_service =
			bt_gatt_dm_attr_service_val(gatt_service_attr);
    d27c:	f00d ff00 	bl	1b080 <bt_gatt_dm_attr_service_val>
	const struct bt_gatt_dm_attr *gatt_chrc;
	const struct bt_gatt_dm_attr *gatt_desc;
	const struct bt_gatt_chrc *chrc_val;

	if (bt_uuid_cmp(gatt_service->uuid, BT_UUID_BAS)) {
    d280:	2300      	movs	r3, #0
    d282:	6800      	ldr	r0, [r0, #0]
    d284:	f88d 300c 	strb.w	r3, [sp, #12]
    d288:	f641 030f 	movw	r3, #6159	; 0x180f
    d28c:	a903      	add	r1, sp, #12
    d28e:	f8ad 300e 	strh.w	r3, [sp, #14]
    d292:	f00e fda6 	bl	1bde2 <bt_uuid_cmp>
    d296:	4605      	mov	r5, r0
    d298:	b128      	cbz	r0, d2a6 <bt_bas_handles_assign+0x36>
		return -ENOTSUP;
    d29a:	f06f 0522 	mvn.w	r5, #34	; 0x22
	}

	/* Finally - save connection object */
	bas->conn = bt_gatt_dm_conn_get(dm);
	return 0;
}
    d29e:	4628      	mov	r0, r5
    d2a0:	b004      	add	sp, #16
    d2a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	k_delayed_work_cancel(&bas->periodic_read.read_work);
    d2a6:	f104 0030 	add.w	r0, r4, #48	; 0x30
    d2aa:	f00c fbdb 	bl	19a64 <k_delayed_work_cancel>
	bas->battery_level = BT_BAS_VAL_INVALID;
    d2ae:	23ff      	movs	r3, #255	; 0xff
    d2b0:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_BAS_BATTERY_LEVEL);
    d2b4:	f642 2319 	movw	r3, #10777	; 0x2a19
    d2b8:	4630      	mov	r0, r6
	bas->read_cb = NULL;
    d2ba:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
	bas->conn = NULL;
    d2be:	6025      	str	r5, [r4, #0]
	bas->val_handle = 0;
    d2c0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	bas->notify = false;
    d2c4:	f884 5086 	strb.w	r5, [r4, #134]	; 0x86
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_BAS_BATTERY_LEVEL);
    d2c8:	a901      	add	r1, sp, #4
    d2ca:	f88d 5004 	strb.w	r5, [sp, #4]
    d2ce:	f8ad 3006 	strh.w	r3, [sp, #6]
    d2d2:	f7ff faed 	bl	c8b0 <bt_gatt_dm_char_by_uuid>
	if (!gatt_chrc) {
    d2d6:	4607      	mov	r7, r0
    d2d8:	b930      	cbnz	r0, d2e8 <bt_bas_handles_assign+0x78>
		LOG_ERR("No battery level characteristic found.");
    d2da:	2145      	movs	r1, #69	; 0x45
    d2dc:	4824      	ldr	r0, [pc, #144]	; (d370 <bt_bas_handles_assign+0x100>)
		LOG_ERR("No battery level characteristic value found.");
    d2de:	f00d fac7 	bl	1a870 <printk>
		return -EINVAL;
    d2e2:	f06f 0515 	mvn.w	r5, #21
    d2e6:	e7da      	b.n	d29e <bt_bas_handles_assign+0x2e>
	chrc_val = bt_gatt_dm_attr_chrc_val(gatt_chrc);
    d2e8:	f00d feea 	bl	1b0c0 <bt_gatt_dm_attr_chrc_val>
	__ASSERT_NO_MSG(chrc_val); /* This is internal function and it has to
    d2ec:	4680      	mov	r8, r0
    d2ee:	b950      	cbnz	r0, d306 <bt_bas_handles_assign+0x96>
    d2f0:	4920      	ldr	r1, [pc, #128]	; (d374 <bt_bas_handles_assign+0x104>)
    d2f2:	4821      	ldr	r0, [pc, #132]	; (d378 <bt_bas_handles_assign+0x108>)
    d2f4:	f44f 7285 	mov.w	r2, #266	; 0x10a
    d2f8:	f00d faba 	bl	1a870 <printk>
    d2fc:	f44f 7185 	mov.w	r1, #266	; 0x10a
    d300:	481c      	ldr	r0, [pc, #112]	; (d374 <bt_bas_handles_assign+0x104>)
    d302:	f00d fd5b 	bl	1adbc <assert_post_action>
	bas->properties = chrc_val->properties;
    d306:	f898 3006 	ldrb.w	r3, [r8, #6]
					    BT_UUID_BAS_BATTERY_LEVEL);
    d30a:	f04f 0800 	mov.w	r8, #0
	bas->properties = chrc_val->properties;
    d30e:	f884 3085 	strb.w	r3, [r4, #133]	; 0x85
					    BT_UUID_BAS_BATTERY_LEVEL);
    d312:	f642 2319 	movw	r3, #10777	; 0x2a19
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    d316:	4639      	mov	r1, r7
    d318:	4630      	mov	r0, r6
    d31a:	aa02      	add	r2, sp, #8
					    BT_UUID_BAS_BATTERY_LEVEL);
    d31c:	f88d 8008 	strb.w	r8, [sp, #8]
    d320:	f8ad 300a 	strh.w	r3, [sp, #10]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    d324:	f00d ff2f 	bl	1b186 <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
    d328:	b910      	cbnz	r0, d330 <bt_bas_handles_assign+0xc0>
		LOG_ERR("No battery level characteristic value found.");
    d32a:	2145      	movs	r1, #69	; 0x45
    d32c:	4813      	ldr	r0, [pc, #76]	; (d37c <bt_bas_handles_assign+0x10c>)
    d32e:	e7d6      	b.n	d2de <bt_bas_handles_assign+0x6e>
	bas->val_handle = gatt_desc->handle;
    d330:	8883      	ldrh	r3, [r0, #4]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_GATT_CCC);
    d332:	4639      	mov	r1, r7
	bas->val_handle = gatt_desc->handle;
    d334:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_GATT_CCC);
    d338:	f642 1302 	movw	r3, #10498	; 0x2902
    d33c:	4630      	mov	r0, r6
    d33e:	aa03      	add	r2, sp, #12
    d340:	f88d 800c 	strb.w	r8, [sp, #12]
    d344:	f8ad 300e 	strh.w	r3, [sp, #14]
    d348:	f00d ff1d 	bl	1b186 <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
    d34c:	b940      	cbnz	r0, d360 <bt_bas_handles_assign+0xf0>
		LOG_INF("No battery CCC descriptor found. Battery service do not supported notification.");
    d34e:	2149      	movs	r1, #73	; 0x49
    d350:	480b      	ldr	r0, [pc, #44]	; (d380 <bt_bas_handles_assign+0x110>)
    d352:	f00d fa8d 	bl	1a870 <printk>
	bas->conn = bt_gatt_dm_conn_get(dm);
    d356:	4630      	mov	r0, r6
    d358:	f00d fec6 	bl	1b0e8 <bt_gatt_dm_conn_get>
    d35c:	6020      	str	r0, [r4, #0]
	return 0;
    d35e:	e79e      	b.n	d29e <bt_bas_handles_assign+0x2e>
		bas->notify = true;
    d360:	2301      	movs	r3, #1
    d362:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
		bas->ccc_handle = gatt_desc->handle;
    d366:	8883      	ldrh	r3, [r0, #4]
    d368:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
    d36c:	e7f3      	b.n	d356 <bt_bas_handles_assign+0xe6>
    d36e:	bf00      	nop
    d370:	0002082a 	.word	0x0002082a
    d374:	00020856 	.word	0x00020856
    d378:	0001fdfa 	.word	0x0001fdfa
    d37c:	0002088d 	.word	0x0002088d
    d380:	000208bf 	.word	0x000208bf

0000d384 <bt_bas_subscribe_battery_level>:

int bt_bas_subscribe_battery_level(struct bt_bas_client *bas,
				   bt_bas_notify_cb func)
{
    d384:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bas || !func) {
    d386:	4604      	mov	r4, r0
    d388:	b340      	cbz	r0, d3dc <bt_bas_subscribe_battery_level+0x58>
    d38a:	b339      	cbz	r1, d3dc <bt_bas_subscribe_battery_level+0x58>
		return -EINVAL;
	}
	if (!bas->conn) {
    d38c:	6803      	ldr	r3, [r0, #0]
    d38e:	b32b      	cbz	r3, d3dc <bt_bas_subscribe_battery_level+0x58>
		return -EINVAL;
	}
	if (!(bas->properties & BT_GATT_CHRC_NOTIFY)) {
    d390:	f890 3085 	ldrb.w	r3, [r0, #133]	; 0x85
    d394:	06db      	lsls	r3, r3, #27
    d396:	d524      	bpl.n	d3e2 <bt_bas_subscribe_battery_level+0x5e>
		return -ENOTSUP;
	}
	if (bas->notify_cb) {
    d398:	6f86      	ldr	r6, [r0, #120]	; 0x78
    d39a:	bb2e      	cbnz	r6, d3e8 <bt_bas_subscribe_battery_level+0x64>
		return -EALREADY;
	}

	bas->notify_cb = func;

	bas->notify_params.notify = notify_process;
    d39c:	4b14      	ldr	r3, [pc, #80]	; (d3f0 <bt_bas_subscribe_battery_level+0x6c>)
	bas->notify_cb = func;
    d39e:	6781      	str	r1, [r0, #120]	; 0x78
	bas->notify_params.notify = notify_process;
    d3a0:	6043      	str	r3, [r0, #4]
	bas->notify_params.value = BT_GATT_CCC_NOTIFY;
    d3a2:	2301      	movs	r3, #1
    d3a4:	8203      	strh	r3, [r0, #16]
	bas->notify_params.value_handle = bas->val_handle;
    d3a6:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    d3aa:	60c3      	str	r3, [r0, #12]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d3ac:	f100 0314 	add.w	r3, r0, #20
    d3b0:	e8d3 2fef 	ldaex	r2, [r3]
    d3b4:	f042 0201 	orr.w	r2, r2, #1
    d3b8:	e8c3 2fe1 	stlex	r1, r2, [r3]
    d3bc:	2900      	cmp	r1, #0
    d3be:	d1f7      	bne.n	d3b0 <bt_bas_subscribe_battery_level+0x2c>
		       BT_GATT_SUBSCRIBE_FLAG_VOLATILE);

	LOG_DBG("Subscribe: val: %u, ccc: %u",
		bas->notify_params.value_handle,
		bas->notify_params.ccc_handle);
	err = bt_gatt_subscribe(bas->conn, &bas->notify_params);
    d3c0:	6820      	ldr	r0, [r4, #0]
    d3c2:	1d21      	adds	r1, r4, #4
    d3c4:	f007 fd5c 	bl	14e80 <bt_gatt_subscribe>
	if (err) {
    d3c8:	4605      	mov	r5, r0
    d3ca:	b128      	cbz	r0, d3d8 <bt_bas_subscribe_battery_level+0x54>
		LOG_ERR("Report notification subscribe error: %d.", err);
    d3cc:	4602      	mov	r2, r0
    d3ce:	2145      	movs	r1, #69	; 0x45
    d3d0:	4808      	ldr	r0, [pc, #32]	; (d3f4 <bt_bas_subscribe_battery_level+0x70>)
    d3d2:	f00d fa4d 	bl	1a870 <printk>
		bas->notify_cb = NULL;
    d3d6:	67a6      	str	r6, [r4, #120]	; 0x78
		return err;
	}
	LOG_DBG("Report subscribed.");
	return err;
}
    d3d8:	4628      	mov	r0, r5
    d3da:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    d3dc:	f06f 0515 	mvn.w	r5, #21
    d3e0:	e7fa      	b.n	d3d8 <bt_bas_subscribe_battery_level+0x54>
		return -ENOTSUP;
    d3e2:	f06f 0522 	mvn.w	r5, #34	; 0x22
    d3e6:	e7f7      	b.n	d3d8 <bt_bas_subscribe_battery_level+0x54>
		return -EALREADY;
    d3e8:	f06f 0544 	mvn.w	r5, #68	; 0x44
    d3ec:	e7f4      	b.n	d3d8 <bt_bas_subscribe_battery_level+0x54>
    d3ee:	bf00      	nop
    d3f0:	0000d081 	.word	0x0000d081
    d3f4:	00020914 	.word	0x00020914

0000d3f8 <bt_bas_read_battery_level>:
	return bas->conn;
}


int bt_bas_read_battery_level(struct bt_bas_client *bas, bt_bas_read_cb func)
{
    d3f8:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!bas || !func) {
    d3fa:	4604      	mov	r4, r0
    d3fc:	b1a0      	cbz	r0, d428 <bt_bas_read_battery_level+0x30>
    d3fe:	b199      	cbz	r1, d428 <bt_bas_read_battery_level+0x30>
		return -EINVAL;
	}
	if (!bas->conn) {
    d400:	6800      	ldr	r0, [r0, #0]
    d402:	b188      	cbz	r0, d428 <bt_bas_read_battery_level+0x30>
		return -EINVAL;
	}
	if (bas->read_cb) {
    d404:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
    d406:	b995      	cbnz	r5, d42e <bt_bas_read_battery_level+0x36>
		return -EBUSY;
	}
	bas->read_cb = func;
	bas->read_params.func = read_process;
    d408:	4b0a      	ldr	r3, [pc, #40]	; (d434 <bt_bas_read_battery_level+0x3c>)
	bas->read_cb = func;
    d40a:	67e1      	str	r1, [r4, #124]	; 0x7c
	bas->read_params.func = read_process;
    d40c:	61e3      	str	r3, [r4, #28]
	bas->read_params.handle_count  = 1;
    d40e:	2301      	movs	r3, #1
    d410:	6223      	str	r3, [r4, #32]
	bas->read_params.single.handle = bas->val_handle;
    d412:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
	bas->read_params.single.offset = 0;
    d416:	84e5      	strh	r5, [r4, #38]	; 0x26
	bas->read_params.single.handle = bas->val_handle;
    d418:	84a3      	strh	r3, [r4, #36]	; 0x24

	err = bt_gatt_read(bas->conn, &bas->read_params);
    d41a:	f104 011c 	add.w	r1, r4, #28
    d41e:	f007 fc1b 	bl	14c58 <bt_gatt_read>
	if (err) {
    d422:	b100      	cbz	r0, d426 <bt_bas_read_battery_level+0x2e>
		bas->read_cb = NULL;
    d424:	67e5      	str	r5, [r4, #124]	; 0x7c
		return err;
	}
	return 0;
}
    d426:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    d428:	f06f 0015 	mvn.w	r0, #21
    d42c:	e7fb      	b.n	d426 <bt_bas_read_battery_level+0x2e>
		return -EBUSY;
    d42e:	f06f 000f 	mvn.w	r0, #15
    d432:	e7f8      	b.n	d426 <bt_bas_read_battery_level+0x2e>
    d434:	0000d0d5 	.word	0x0000d0d5

0000d438 <bt_bas_start_per_read_battery_level>:


int bt_bas_start_per_read_battery_level(struct bt_bas_client *bas,
					int32_t interval,
					bt_bas_notify_cb func)
{
    d438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!bas || !func) {
    d43a:	4605      	mov	r5, r0
    d43c:	b380      	cbz	r0, d4a0 <bt_bas_start_per_read_battery_level+0x68>
    d43e:	b37a      	cbz	r2, d4a0 <bt_bas_start_per_read_battery_level+0x68>
		return -EINVAL;
	}

	if (bt_bas_notify_supported(bas)) {
    d440:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    d444:	bb78      	cbnz	r0, d4a6 <bt_bas_start_per_read_battery_level+0x6e>
		return -ENOTSUP;
	}

	bas->notify_cb = func;
    d446:	67aa      	str	r2, [r5, #120]	; 0x78
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    d448:	f105 0370 	add.w	r3, r5, #112	; 0x70
    d44c:	e8d3 2fef 	ldaex	r2, [r3]
    d450:	e8c3 1fe4 	stlex	r4, r1, [r3]
    d454:	2c00      	cmp	r4, #0
    d456:	d1f9      	bne.n	d44c <bt_bas_start_per_read_battery_level+0x14>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d458:	f105 0374 	add.w	r3, r5, #116	; 0x74
    d45c:	e8d3 4fef 	ldaex	r4, [r3]
    d460:	f044 0202 	orr.w	r2, r4, #2
    d464:	e8c3 2fe6 	stlex	r6, r2, [r3]
    d468:	2e00      	cmp	r6, #0
    d46a:	d1f7      	bne.n	d45c <bt_bas_start_per_read_battery_level+0x24>
	atomic_set(&bas->periodic_read.interval, interval);

	if (!atomic_test_and_set_bit(&bas->periodic_read.process,
    d46c:	f014 0402 	ands.w	r4, r4, #2
    d470:	d11c      	bne.n	d4ac <bt_bas_start_per_read_battery_level+0x74>
				     BAS_PERIODIC_READ_PROC_BIT)) {
		k_delayed_work_submit(&bas->periodic_read.read_work,
				      K_MSEC(interval));
    d472:	ea21 76e1 	bic.w	r6, r1, r1, asr #31
    d476:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    d47a:	f240 30e7 	movw	r0, #999	; 0x3e7
    d47e:	4621      	mov	r1, r4
    d480:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d484:	2300      	movs	r3, #0
    d486:	fbc6 0107 	smlal	r0, r1, r6, r7
    d48a:	f7fb fb4f 	bl	8b2c <__aeabi_uldivmod>
    d48e:	4602      	mov	r2, r0
    d490:	460b      	mov	r3, r1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    d492:	4807      	ldr	r0, [pc, #28]	; (d4b0 <bt_bas_start_per_read_battery_level+0x78>)
    d494:	f105 0130 	add.w	r1, r5, #48	; 0x30
    d498:	f00c fa74 	bl	19984 <k_delayed_work_submit_to_queue>
	}

	return 0;
}
    d49c:	4620      	mov	r0, r4
    d49e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
    d4a0:	f06f 0415 	mvn.w	r4, #21
    d4a4:	e7fa      	b.n	d49c <bt_bas_start_per_read_battery_level+0x64>
		return -ENOTSUP;
    d4a6:	f06f 0422 	mvn.w	r4, #34	; 0x22
    d4aa:	e7f7      	b.n	d49c <bt_bas_start_per_read_battery_level+0x64>
	return 0;
    d4ac:	4604      	mov	r4, r0
    d4ae:	e7f5      	b.n	d49c <bt_bas_start_per_read_battery_level+0x64>
    d4b0:	2000a540 	.word	0x2000a540

0000d4b4 <lbslc_ccc_cfg_changed>:
static struct bt_lbs_cb       lbs_cb;

static void lbslc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	notify_enabled = (value == BT_GATT_CCC_NOTIFY);
    d4b4:	1e4b      	subs	r3, r1, #1
    d4b6:	4259      	negs	r1, r3
    d4b8:	4159      	adcs	r1, r3
    d4ba:	4b01      	ldr	r3, [pc, #4]	; (d4c0 <lbslc_ccc_cfg_changed+0xc>)
    d4bc:	7019      	strb	r1, [r3, #0]
}
    d4be:	4770      	bx	lr
    d4c0:	2000f502 	.word	0x2000f502

0000d4c4 <write_led>:

static ssize_t write_led(struct bt_conn *conn,
			 const struct bt_gatt_attr *attr,
			 const void *buf,
			 uint16_t len, uint16_t offset, uint8_t flags)
{
    d4c4:	b510      	push	{r4, lr}
    d4c6:	461c      	mov	r4, r3
	LOG_DBG("Attribute write, handle: %u, conn: %p", attr->handle, conn);

	if (lbs_cb.led_cb) {
    d4c8:	4b03      	ldr	r3, [pc, #12]	; (d4d8 <write_led+0x14>)
    d4ca:	681b      	ldr	r3, [r3, #0]
    d4cc:	b10b      	cbz	r3, d4d2 <write_led+0xe>
		lbs_cb.led_cb(*(bool *)buf);
    d4ce:	7810      	ldrb	r0, [r2, #0]
    d4d0:	4798      	blx	r3
	}

	return len;
}
    d4d2:	4620      	mov	r0, r4
    d4d4:	bd10      	pop	{r4, pc}
    d4d6:	bf00      	nop
    d4d8:	2000aa9c 	.word	0x2000aa9c

0000d4dc <read_button>:
static ssize_t read_button(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr,
			  void *buf,
			  uint16_t len,
			  uint16_t offset)
{
    d4dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    d4e0:	461f      	mov	r7, r3
	const char *value = attr->user_data;

	LOG_DBG("Attribute read, handle: %u, conn: %p", attr->handle, conn);

	if (lbs_cb.button_cb) {
    d4e2:	4b0d      	ldr	r3, [pc, #52]	; (d518 <read_button+0x3c>)
{
    d4e4:	4605      	mov	r5, r0
	if (lbs_cb.button_cb) {
    d4e6:	6858      	ldr	r0, [r3, #4]
{
    d4e8:	460c      	mov	r4, r1
    d4ea:	4616      	mov	r6, r2
	if (lbs_cb.button_cb) {
    d4ec:	b180      	cbz	r0, d510 <read_button+0x34>
	const char *value = attr->user_data;
    d4ee:	f8d1 800c 	ldr.w	r8, [r1, #12]
		button_state = lbs_cb.button_cb();
    d4f2:	4780      	blx	r0
    d4f4:	4b09      	ldr	r3, [pc, #36]	; (d51c <read_button+0x40>)
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
    d4f6:	4632      	mov	r2, r6
		button_state = lbs_cb.button_cb();
    d4f8:	7018      	strb	r0, [r3, #0]
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
    d4fa:	2301      	movs	r3, #1
    d4fc:	e9cd 8301 	strd	r8, r3, [sp, #4]
    d500:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    d504:	4621      	mov	r1, r4
    d506:	9300      	str	r3, [sp, #0]
    d508:	4628      	mov	r0, r5
    d50a:	463b      	mov	r3, r7
    d50c:	f00f fd84 	bl	1d018 <bt_gatt_attr_read>
					 sizeof(*value));
	}

	return 0;
}
    d510:	b004      	add	sp, #16
    d512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d516:	bf00      	nop
    d518:	2000aa9c 	.word	0x2000aa9c
    d51c:	2000f501 	.word	0x2000f501

0000d520 <bt_lbs_init>:
			       NULL, write_led, NULL),
);

int bt_lbs_init(struct bt_lbs_cb *callbacks)
{
	if (callbacks) {
    d520:	b120      	cbz	r0, d52c <bt_lbs_init+0xc>
		lbs_cb.led_cb    = callbacks->led_cb;
    d522:	4b03      	ldr	r3, [pc, #12]	; (d530 <bt_lbs_init+0x10>)
    d524:	6802      	ldr	r2, [r0, #0]
    d526:	601a      	str	r2, [r3, #0]
		lbs_cb.button_cb = callbacks->button_cb;
    d528:	6842      	ldr	r2, [r0, #4]
    d52a:	605a      	str	r2, [r3, #4]
	}

	return 0;
}
    d52c:	2000      	movs	r0, #0
    d52e:	4770      	bx	lr
    d530:	2000aa9c 	.word	0x2000aa9c

0000d534 <bt_lbs_send_button_state>:

int bt_lbs_send_button_state(bool button_state)
{
    d534:	b500      	push	{lr}
	if (!notify_enabled) {
    d536:	4b0e      	ldr	r3, [pc, #56]	; (d570 <bt_lbs_send_button_state+0x3c>)
{
    d538:	b089      	sub	sp, #36	; 0x24
	if (!notify_enabled) {
    d53a:	781b      	ldrb	r3, [r3, #0]
{
    d53c:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!notify_enabled) {
    d540:	b19b      	cbz	r3, d56a <bt_lbs_send_button_state+0x36>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    d542:	2100      	movs	r1, #0
    d544:	2218      	movs	r2, #24
    d546:	a802      	add	r0, sp, #8
    d548:	f00e fc01 	bl	1bd4e <memset>

	params.attr = attr;
    d54c:	4b09      	ldr	r3, [pc, #36]	; (d574 <bt_lbs_send_button_state+0x40>)
	params.data = data;
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
    d54e:	2000      	movs	r0, #0
	params.attr = attr;
    d550:	9303      	str	r3, [sp, #12]
	params.data = data;
    d552:	f10d 0307 	add.w	r3, sp, #7
    d556:	9304      	str	r3, [sp, #16]
	params.len = len;
    d558:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
    d55a:	a902      	add	r1, sp, #8
	params.len = len;
    d55c:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
    d560:	f006 fd84 	bl	1406c <bt_gatt_notify_cb>
	}

	return bt_gatt_notify(NULL, &lbs_svc.attrs[2],
			      &button_state,
			      sizeof(button_state));
}
    d564:	b009      	add	sp, #36	; 0x24
    d566:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
    d56a:	f06f 000c 	mvn.w	r0, #12
    d56e:	e7f9      	b.n	d564 <bt_lbs_send_button_state+0x30>
    d570:	2000f502 	.word	0x2000f502
    d574:	0001ea2c 	.word	0x0001ea2c

0000d578 <_DoInit>:
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    d578:	2303      	movs	r3, #3
static void _DoInit(void) {
    d57a:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    d57c:	4c10      	ldr	r4, [pc, #64]	; (d5c0 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    d57e:	4a11      	ldr	r2, [pc, #68]	; (d5c4 <_DoInit+0x4c>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    d580:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    d584:	4b10      	ldr	r3, [pc, #64]	; (d5c8 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
    d586:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    d588:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    d58a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    d58e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    d590:	4a0e      	ldr	r2, [pc, #56]	; (d5cc <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    d592:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    d594:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    d596:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    d598:	2210      	movs	r2, #16
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    d59a:	490d      	ldr	r1, [pc, #52]	; (d5d0 <_DoInit+0x58>)
    d59c:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    d59e:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    d5a0:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    d5a2:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    d5a4:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    d5a6:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    d5a8:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    d5aa:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    d5ac:	f00e fb4a 	bl	1bc44 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    d5b0:	4620      	mov	r0, r4
    d5b2:	4908      	ldr	r1, [pc, #32]	; (d5d4 <_DoInit+0x5c>)
    d5b4:	f00e fb46 	bl	1bc44 <strcpy>
  p->acID[6] = ' ';
    d5b8:	2320      	movs	r3, #32
    d5ba:	71a3      	strb	r3, [r4, #6]
}
    d5bc:	bd10      	pop	{r4, pc}
    d5be:	bf00      	nop
    d5c0:	2000aaa4 	.word	0x2000aaa4
    d5c4:	000209a9 	.word	0x000209a9
    d5c8:	2000f513 	.word	0x2000f513
    d5cc:	2000f503 	.word	0x2000f503
    d5d0:	000209b2 	.word	0x000209b2
    d5d4:	000209b6 	.word	0x000209b6

0000d5d8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    d5d8:	b570      	push	{r4, r5, r6, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    d5da:	2418      	movs	r4, #24
    d5dc:	fb00 4504 	mla	r5, r0, r4, r4
    d5e0:	4b14      	ldr	r3, [pc, #80]	; (d634 <SEGGER_RTT_WriteNoLock+0x5c>)
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    d5e2:	4616      	mov	r6, r2
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    d5e4:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    d5e6:	fb04 3300 	mla	r3, r4, r0, r3
    d5ea:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    d5ec:	2c01      	cmp	r4, #1
    d5ee:	d00e      	beq.n	d60e <SEGGER_RTT_WriteNoLock+0x36>
    d5f0:	2c02      	cmp	r4, #2
    d5f2:	d018      	beq.n	d626 <SEGGER_RTT_WriteNoLock+0x4e>
    d5f4:	b9e4      	cbnz	r4, d630 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    d5f6:	4628      	mov	r0, r5
    d5f8:	f00d fdf3 	bl	1b1e2 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    d5fc:	4286      	cmp	r6, r0
    d5fe:	d804      	bhi.n	d60a <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    d600:	4632      	mov	r2, r6
    d602:	4628      	mov	r0, r5
    d604:	f00d fdf6 	bl	1b1f4 <_WriteNoCheck>
    d608:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    d60a:	4620      	mov	r0, r4
    d60c:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
    d60e:	4628      	mov	r0, r5
    d610:	f00d fde7 	bl	1b1e2 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    d614:	4286      	cmp	r6, r0
    d616:	4634      	mov	r4, r6
    d618:	bf28      	it	cs
    d61a:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    d61c:	4628      	mov	r0, r5
    d61e:	4622      	mov	r2, r4
    d620:	f00d fde8 	bl	1b1f4 <_WriteNoCheck>
    break;
    d624:	e7f1      	b.n	d60a <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    d626:	4628      	mov	r0, r5
}
    d628:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    d62c:	f00d bdfe 	b.w	1b22c <_WriteBlocking>
  switch (pRing->Flags) {
    d630:	2400      	movs	r4, #0
  return Status;
    d632:	e7ea      	b.n	d60a <SEGGER_RTT_WriteNoLock+0x32>
    d634:	2000aaa4 	.word	0x2000aaa4

0000d638 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    d638:	4904      	ldr	r1, [pc, #16]	; (d64c <sub_bytes+0x14>)
    d63a:	1e43      	subs	r3, r0, #1
    d63c:	300f      	adds	r0, #15
    d63e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    d642:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
    d644:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
    d646:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    d648:	d1f9      	bne.n	d63e <sub_bytes+0x6>
	}
}
    d64a:	4770      	bx	lr
    d64c:	000209bd 	.word	0x000209bd

0000d650 <tc_aes128_set_encrypt_key>:
{
    d650:	b5f0      	push	{r4, r5, r6, r7, lr}
    d652:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    d654:	4e26      	ldr	r6, [pc, #152]	; (d6f0 <tc_aes128_set_encrypt_key+0xa0>)
{
    d656:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    d658:	ad01      	add	r5, sp, #4
{
    d65a:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    d65c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    d65e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d660:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    d662:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d664:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    d668:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    d66c:	4638      	mov	r0, r7
    d66e:	2f00      	cmp	r7, #0
    d670:	d039      	beq.n	d6e6 <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
    d672:	2c00      	cmp	r4, #0
    d674:	d039      	beq.n	d6ea <tc_aes128_set_encrypt_key+0x9a>
    d676:	1f38      	subs	r0, r7, #4
    d678:	4602      	mov	r2, r0
    d67a:	4621      	mov	r1, r4
    d67c:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    d67e:	784b      	ldrb	r3, [r1, #1]
    d680:	780d      	ldrb	r5, [r1, #0]
    d682:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    d684:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    d688:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
    d68a:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    d68c:	432b      	orrs	r3, r5
    d68e:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    d692:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    d694:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    d698:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    d69c:	d1ef      	bne.n	d67e <tc_aes128_set_encrypt_key+0x2e>
    d69e:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
    d6a0:	4c14      	ldr	r4, [pc, #80]	; (d6f4 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    d6a2:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    d6a4:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    d6a6:	d116      	bne.n	d6d6 <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    d6a8:	f3c3 4207 	ubfx	r2, r3, #16, #8
    d6ac:	5ca5      	ldrb	r5, [r4, r2]
    d6ae:	0e1a      	lsrs	r2, r3, #24
    d6b0:	5ca2      	ldrb	r2, [r4, r2]
    d6b2:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    d6b6:	f3c3 2507 	ubfx	r5, r3, #8, #8
    d6ba:	5d65      	ldrb	r5, [r4, r5]
    d6bc:	b2db      	uxtb	r3, r3
    d6be:	5ce3      	ldrb	r3, [r4, r3]
    d6c0:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    d6c4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    d6c8:	ad0c      	add	r5, sp, #48	; 0x30
    d6ca:	f021 0303 	bic.w	r3, r1, #3
    d6ce:	442b      	add	r3, r5
    d6d0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    d6d4:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    d6d6:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    d6da:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    d6dc:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    d6de:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    d6e0:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    d6e2:	d1de      	bne.n	d6a2 <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
    d6e4:	2001      	movs	r0, #1
}
    d6e6:	b00d      	add	sp, #52	; 0x34
    d6e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    d6ea:	4620      	mov	r0, r4
    d6ec:	e7fb      	b.n	d6e6 <tc_aes128_set_encrypt_key+0x96>
    d6ee:	bf00      	nop
    d6f0:	0001e794 	.word	0x0001e794
    d6f4:	000209bd 	.word	0x000209bd

0000d6f8 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    d6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    d6fc:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d6fe:	6803      	ldr	r3, [r0, #0]
{
    d700:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d702:	9302      	str	r3, [sp, #8]
    d704:	6843      	ldr	r3, [r0, #4]
    d706:	f8df a1b8 	ldr.w	sl, [pc, #440]	; d8c0 <compress+0x1c8>
    d70a:	9303      	str	r3, [sp, #12]
    d70c:	6883      	ldr	r3, [r0, #8]
    d70e:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
    d712:	9304      	str	r3, [sp, #16]
    d714:	68c3      	ldr	r3, [r0, #12]
    d716:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    d718:	6903      	ldr	r3, [r0, #16]
    d71a:	9306      	str	r3, [sp, #24]
    d71c:	6943      	ldr	r3, [r0, #20]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d71e:	e9dd e205 	ldrd	lr, r2, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    d722:	9307      	str	r3, [sp, #28]
    d724:	6983      	ldr	r3, [r0, #24]
    d726:	9308      	str	r3, [sp, #32]
    d728:	69c3      	ldr	r3, [r0, #28]
    d72a:	e9dd cb07 	ldrd	ip, fp, [sp, #28]
    d72e:	4698      	mov	r8, r3
    d730:	9309      	str	r3, [sp, #36]	; 0x24
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d732:	9b04      	ldr	r3, [sp, #16]
    d734:	9300      	str	r3, [sp, #0]
	n = (((unsigned int)(*((*c)++))) << 24);
    d736:	59cd      	ldr	r5, [r1, r7]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
    d738:	ab0c      	add	r3, sp, #48	; 0x30
    d73a:	ba2d      	rev	r5, r5
    d73c:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    d73e:	f85a 3b04 	ldr.w	r3, [sl], #4
	for (i = 0; i < 16; ++i) {
    d742:	3704      	adds	r7, #4
    d744:	eb05 0903 	add.w	r9, r5, r3
	return (((a) >> n) | ((a) << (32 - n)));
    d748:	ea4f 25f2 	mov.w	r5, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d74c:	ea85 15b2 	eor.w	r5, r5, r2, ror #6
    d750:	ea85 6572 	eor.w	r5, r5, r2, ror #25
    d754:	444d      	add	r5, r9
    d756:	ea2b 0302 	bic.w	r3, fp, r2
    d75a:	ea02 090c 	and.w	r9, r2, ip
    d75e:	ea83 0309 	eor.w	r3, r3, r9
    d762:	442b      	add	r3, r5
		t2 = Sigma0(a) + Maj(a, b, c);
    d764:	9d00      	ldr	r5, [sp, #0]
    d766:	f8dd 9000 	ldr.w	r9, [sp]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d76a:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    d76c:	4075      	eors	r5, r6
	return (((a) >> n) | ((a) << (32 - n)));
    d76e:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    d772:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    d776:	4025      	ands	r5, r4
    d778:	ea06 0909 	and.w	r9, r6, r9
    d77c:	ea85 0509 	eor.w	r5, r5, r9
    d780:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
    d784:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    d786:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    d788:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    d78c:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    d78e:	f8dd e000 	ldr.w	lr, [sp]
    d792:	46d8      	mov	r8, fp
    d794:	f040 8085 	bne.w	d8a2 <compress+0x1aa>
    d798:	f04f 0a10 	mov.w	sl, #16
    d79c:	4949      	ldr	r1, [pc, #292]	; (d8c4 <compress+0x1cc>)
    d79e:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    d7a0:	4651      	mov	r1, sl
    d7a2:	f10a 0a01 	add.w	sl, sl, #1
    d7a6:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    d7aa:	f00a 070f 	and.w	r7, sl, #15
    d7ae:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    d7b2:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d7b6:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    d7ba:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
    d7be:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
    d7c0:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
    d7c4:	f101 070e 	add.w	r7, r1, #14
    d7c8:	f007 070f 	and.w	r7, r7, #15
    d7cc:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    d7d0:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d7d4:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
    d7d6:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
    d7da:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    d7de:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d7e2:	f001 010f 	and.w	r1, r1, #15
    d7e6:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    d7ea:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
    d7ee:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    d7f2:	f851 1c40 	ldr.w	r1, [r1, #-64]
    d7f6:	f859 ec40 	ldr.w	lr, [r9, #-64]
	for ( ; i < 64; ++i) {
    d7fa:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d7fe:	4471      	add	r1, lr
		s0 = sigma0(s0);
    d800:	f8dd e004 	ldr.w	lr, [sp, #4]
    d804:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
    d808:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d80c:	4441      	add	r1, r8
		s1 = sigma1(s1);
    d80e:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d812:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d814:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d816:	f857 eb04 	ldr.w	lr, [r7], #4
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d81a:	f849 1c40 	str.w	r1, [r9, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
    d81e:	ea4f 29f5 	mov.w	r9, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d822:	ea05 0802 	and.w	r8, r5, r2
    d826:	970a      	str	r7, [sp, #40]	; 0x28
    d828:	ea89 19b5 	eor.w	r9, r9, r5, ror #6
    d82c:	ea2c 0705 	bic.w	r7, ip, r5
    d830:	ea87 0708 	eor.w	r7, r7, r8
    d834:	ea89 6975 	eor.w	r9, r9, r5, ror #25
    d838:	444f      	add	r7, r9
    d83a:	4477      	add	r7, lr
    d83c:	4439      	add	r1, r7
    d83e:	4459      	add	r1, fp
	return (((a) >> n) | ((a) << (32 - n)));
    d840:	ea4f 3773 	mov.w	r7, r3, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    d844:	ea84 0b06 	eor.w	fp, r4, r6
    d848:	ea0b 0b03 	and.w	fp, fp, r3
    d84c:	ea87 07b3 	eor.w	r7, r7, r3, ror #2
    d850:	ea04 0e06 	and.w	lr, r4, r6
		h = g; g = f; f = e; e = d + t1;
    d854:	f8dd 8000 	ldr.w	r8, [sp]
		t2 = Sigma0(a) + Maj(a, b, c);
    d858:	ea8b 0e0e 	eor.w	lr, fp, lr
    d85c:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
    d860:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
    d862:	4488      	add	r8, r1
		d = c; c = b; b = a; a = t1 + t2;
    d864:	46e3      	mov	fp, ip
    d866:	4439      	add	r1, r7
	for ( ; i < 64; ++i) {
    d868:	9600      	str	r6, [sp, #0]
    d86a:	d121      	bne.n	d8b0 <compress+0x1b8>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    d86c:	9f02      	ldr	r7, [sp, #8]
    d86e:	440f      	add	r7, r1
    d870:	9903      	ldr	r1, [sp, #12]
    d872:	6007      	str	r7, [r0, #0]
    d874:	4419      	add	r1, r3
    d876:	9b04      	ldr	r3, [sp, #16]
    d878:	6041      	str	r1, [r0, #4]
    d87a:	4423      	add	r3, r4
    d87c:	6083      	str	r3, [r0, #8]
    d87e:	9b05      	ldr	r3, [sp, #20]
    d880:	4433      	add	r3, r6
    d882:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    d884:	9b06      	ldr	r3, [sp, #24]
    d886:	4443      	add	r3, r8
    d888:	6103      	str	r3, [r0, #16]
    d88a:	9b07      	ldr	r3, [sp, #28]
    d88c:	442b      	add	r3, r5
    d88e:	6143      	str	r3, [r0, #20]
    d890:	9b08      	ldr	r3, [sp, #32]
    d892:	4413      	add	r3, r2
    d894:	6183      	str	r3, [r0, #24]
    d896:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d898:	4463      	add	r3, ip
    d89a:	61c3      	str	r3, [r0, #28]
}
    d89c:	b01d      	add	sp, #116	; 0x74
    d89e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d8a2:	46e3      	mov	fp, ip
    d8a4:	9600      	str	r6, [sp, #0]
    d8a6:	4694      	mov	ip, r2
    d8a8:	4626      	mov	r6, r4
		h = g; g = f; f = e; e = d + t1;
    d8aa:	462a      	mov	r2, r5
		d = c; c = b; b = a; a = t1 + t2;
    d8ac:	461c      	mov	r4, r3
    d8ae:	e742      	b.n	d736 <compress+0x3e>
    d8b0:	4694      	mov	ip, r2
    d8b2:	4626      	mov	r6, r4
    d8b4:	462a      	mov	r2, r5
    d8b6:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    d8b8:	4645      	mov	r5, r8
		d = c; c = b; b = a; a = t1 + t2;
    d8ba:	460b      	mov	r3, r1
    d8bc:	e770      	b.n	d7a0 <compress+0xa8>
    d8be:	bf00      	nop
    d8c0:	0001ea7c 	.word	0x0001ea7c
    d8c4:	0001eabc 	.word	0x0001eabc

0000d8c8 <tc_sha256_init>:
{
    d8c8:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    d8ca:	4604      	mov	r4, r0
    d8cc:	b1c8      	cbz	r0, d902 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    d8ce:	2270      	movs	r2, #112	; 0x70
    d8d0:	2100      	movs	r1, #0
    d8d2:	f00d fce8 	bl	1b2a6 <_set>
	s->iv[1] = 0xbb67ae85;
    d8d6:	4b0b      	ldr	r3, [pc, #44]	; (d904 <tc_sha256_init+0x3c>)
    d8d8:	4a0b      	ldr	r2, [pc, #44]	; (d908 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    d8da:	490c      	ldr	r1, [pc, #48]	; (d90c <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
    d8dc:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    d8e0:	4b0b      	ldr	r3, [pc, #44]	; (d910 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
    d8e2:	480c      	ldr	r0, [pc, #48]	; (d914 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
    d8e4:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    d8e8:	4b0b      	ldr	r3, [pc, #44]	; (d918 <tc_sha256_init+0x50>)
    d8ea:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
    d8ee:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
    d8f0:	4b0a      	ldr	r3, [pc, #40]	; (d91c <tc_sha256_init+0x54>)
    d8f2:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    d8f4:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    d8f8:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    d8fc:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    d900:	61e3      	str	r3, [r4, #28]
}
    d902:	bd10      	pop	{r4, pc}
    d904:	bb67ae85 	.word	0xbb67ae85
    d908:	6a09e667 	.word	0x6a09e667
    d90c:	3c6ef372 	.word	0x3c6ef372
    d910:	a54ff53a 	.word	0xa54ff53a
    d914:	510e527f 	.word	0x510e527f
    d918:	9b05688c 	.word	0x9b05688c
    d91c:	1f83d9ab 	.word	0x1f83d9ab

0000d920 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    d920:	4a0a      	ldr	r2, [pc, #40]	; (d94c <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    d922:	490b      	ldr	r1, [pc, #44]	; (d950 <arch_swap+0x30>)
	_current->arch.basepri = key;
    d924:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    d926:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    d928:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	_current->arch.swap_return_value = _k_neg_eagain;
    d92c:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    d930:	4908      	ldr	r1, [pc, #32]	; (d954 <arch_swap+0x34>)
    d932:	684b      	ldr	r3, [r1, #4]
    d934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    d938:	604b      	str	r3, [r1, #4]
    d93a:	2300      	movs	r3, #0
    d93c:	f383 8811 	msr	BASEPRI, r3
    d940:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    d944:	6893      	ldr	r3, [r2, #8]
}
    d946:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    d94a:	4770      	bx	lr
    d94c:	2000b14c 	.word	0x2000b14c
    d950:	0001f0e8 	.word	0x0001f0e8
    d954:	e000ed00 	.word	0xe000ed00

0000d958 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    d958:	4914      	ldr	r1, [pc, #80]	; (d9ac <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    d95a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    d95c:	f04f 0040 	mov.w	r0, #64	; 0x40
    add r0, r2
    d960:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    d962:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    d966:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    d96a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    d96c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    d970:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    d974:	4f0e      	ldr	r7, [pc, #56]	; (d9b0 <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    d976:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    d97a:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    d97c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    d97e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    d980:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    movs r3, #0
    d984:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    d986:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    d98a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    d98e:	f102 0040 	add.w	r0, r2, #64	; 0x40
    ldmia r0, {v1-v8, ip}
    d992:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    d996:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    d99a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    d99e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    d9a0:	f00e f8c4 	bl	1bb2c <configure_builtin_stack_guard>
    pop {r2, lr}
    d9a4:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    d9a8:	4770      	bx	lr
    d9aa:	0000      	.short	0x0000
    ldr r1, =_kernel
    d9ac:	2000b14c 	.word	0x2000b14c
    ldr v4, =_SCS_ICSR
    d9b0:	e000ed04 	.word	0xe000ed04

0000d9b4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    d9b4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    d9b8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    d9ba:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    d9be:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    d9c2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    d9c4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    d9c8:	2902      	cmp	r1, #2
    beq _oops
    d9ca:	d0ff      	beq.n	d9cc <_oops>

0000d9cc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    d9cc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    d9ce:	f00e f8b1 	bl	1bb34 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    d9d2:	bd01      	pop	{r0, pc}

0000d9d4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    d9d4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    d9d6:	2b00      	cmp	r3, #0
    d9d8:	db08      	blt.n	d9ec <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d9da:	2201      	movs	r2, #1
    d9dc:	f000 001f 	and.w	r0, r0, #31
    d9e0:	fa02 f000 	lsl.w	r0, r2, r0
    d9e4:	4a02      	ldr	r2, [pc, #8]	; (d9f0 <arch_irq_enable+0x1c>)
    d9e6:	095b      	lsrs	r3, r3, #5
    d9e8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    d9ec:	4770      	bx	lr
    d9ee:	bf00      	nop
    d9f0:	e000e100 	.word	0xe000e100

0000d9f4 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    d9f4:	4b05      	ldr	r3, [pc, #20]	; (da0c <arch_irq_is_enabled+0x18>)
    d9f6:	0942      	lsrs	r2, r0, #5
    d9f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    d9fc:	2301      	movs	r3, #1
    d9fe:	f000 001f 	and.w	r0, r0, #31
    da02:	fa03 f000 	lsl.w	r0, r3, r0
}
    da06:	4010      	ands	r0, r2
    da08:	4770      	bx	lr
    da0a:	bf00      	nop
    da0c:	e000e100 	.word	0xe000e100

0000da10 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    da10:	b538      	push	{r3, r4, r5, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    da12:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    da14:	2c07      	cmp	r4, #7
{
    da16:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    da18:	d908      	bls.n	da2c <z_arm_irq_priority_set+0x1c>
    da1a:	490d      	ldr	r1, [pc, #52]	; (da50 <z_arm_irq_priority_set+0x40>)
    da1c:	480d      	ldr	r0, [pc, #52]	; (da54 <z_arm_irq_priority_set+0x44>)
    da1e:	225c      	movs	r2, #92	; 0x5c
    da20:	f00c ff26 	bl	1a870 <printk>
    da24:	215c      	movs	r1, #92	; 0x5c
    da26:	480a      	ldr	r0, [pc, #40]	; (da50 <z_arm_irq_priority_set+0x40>)
    da28:	f00d f9c8 	bl	1adbc <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    da2c:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    da2e:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    da30:	bfac      	ite	ge
    da32:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    da36:	4b08      	ldrlt	r3, [pc, #32]	; (da58 <z_arm_irq_priority_set+0x48>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    da38:	ea4f 1444 	mov.w	r4, r4, lsl #5
    da3c:	b2e4      	uxtb	r4, r4
    da3e:	bfab      	itete	ge
    da40:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    da44:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    da48:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    da4c:	555c      	strblt	r4, [r3, r5]
}
    da4e:	bd38      	pop	{r3, r4, r5, pc}
    da50:	00020abd 	.word	0x00020abd
    da54:	0001fdfa 	.word	0x0001fdfa
    da58:	e000ed14 	.word	0xe000ed14

0000da5c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    da5c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    da60:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    da62:	490b      	ldr	r1, [pc, #44]	; (da90 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    da64:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    da68:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    da6a:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    da6e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    da72:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    da74:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    da78:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    da7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    da80:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    da84:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    da86:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    da88:	6602      	str	r2, [r0, #96]	; 0x60
	thread->arch.basepri = 0;
    da8a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    da8e:	4770      	bx	lr
    da90:	0001a94d 	.word	0x0001a94d

0000da94 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    da94:	4604      	mov	r4, r0
    da96:	b508      	push	{r3, lr}
    da98:	460e      	mov	r6, r1
    da9a:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    da9c:	f000 faf6 	bl	e08c <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    daa0:	4b08      	ldr	r3, [pc, #32]	; (dac4 <arch_switch_to_main_thread+0x30>)
    daa2:	609c      	str	r4, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    daa4:	6f63      	ldr	r3, [r4, #116]	; 0x74
    daa6:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    daaa:	4628      	mov	r0, r5
    daac:	f386 8809 	msr	PSP, r6
    dab0:	2100      	movs	r1, #0
    dab2:	b663      	cpsie	if
    dab4:	f381 8811 	msr	BASEPRI, r1
    dab8:	f3bf 8f6f 	isb	sy
    dabc:	2200      	movs	r2, #0
    dabe:	2300      	movs	r3, #0
    dac0:	f00c ff44 	bl	1a94c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    dac4:	2000b14c 	.word	0x2000b14c

0000dac8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    dac8:	4901      	ldr	r1, [pc, #4]	; (dad0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    daca:	2210      	movs	r2, #16
	str	r2, [r1]
    dacc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    dace:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    dad0:	e000ed10 	.word	0xe000ed10

0000dad4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    dad4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    dad6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    dad8:	f380 8811 	msr	BASEPRI, r0
	isb
    dadc:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    dae0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    dae4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    dae6:	b662      	cpsie	i
	isb
    dae8:	f3bf 8f6f 	isb	sy

	bx	lr
    daec:	4770      	bx	lr
    daee:	bf00      	nop

0000daf0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    daf0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    daf2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    daf4:	f381 8811 	msr	BASEPRI, r1

	wfe
    daf8:	bf20      	wfe

	msr	BASEPRI, r0
    dafa:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    dafe:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    db00:	4770      	bx	lr
    db02:	bf00      	nop

0000db04 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    db04:	b537      	push	{r0, r1, r2, r4, r5, lr}
    db06:	4605      	mov	r5, r0

	if (esf != NULL) {
    db08:	460c      	mov	r4, r1
    db0a:	b1c9      	cbz	r1, db40 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    db0c:	688b      	ldr	r3, [r1, #8]
    db0e:	4810      	ldr	r0, [pc, #64]	; (db50 <z_arm_fatal_error+0x4c>)
    db10:	9300      	str	r3, [sp, #0]
    db12:	e9d1 2300 	ldrd	r2, r3, [r1]
    db16:	2145      	movs	r1, #69	; 0x45
    db18:	f00c feaa 	bl	1a870 <printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    db1c:	6963      	ldr	r3, [r4, #20]
    db1e:	2145      	movs	r1, #69	; 0x45
    db20:	9300      	str	r3, [sp, #0]
    db22:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    db26:	480b      	ldr	r0, [pc, #44]	; (db54 <z_arm_fatal_error+0x50>)
    db28:	f00c fea2 	bl	1a870 <printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    db2c:	2145      	movs	r1, #69	; 0x45
    db2e:	69e2      	ldr	r2, [r4, #28]
    db30:	4809      	ldr	r0, [pc, #36]	; (db58 <z_arm_fatal_error+0x54>)
    db32:	f00c fe9d 	bl	1a870 <printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    db36:	2145      	movs	r1, #69	; 0x45
    db38:	69a2      	ldr	r2, [r4, #24]
    db3a:	4808      	ldr	r0, [pc, #32]	; (db5c <z_arm_fatal_error+0x58>)
    db3c:	f00c fe98 	bl	1a870 <printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    db40:	4621      	mov	r1, r4
    db42:	4628      	mov	r0, r5
}
    db44:	b003      	add	sp, #12
    db46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    db4a:	f009 bf0f 	b.w	1796c <z_fatal_error>
    db4e:	bf00      	nop
    db50:	00020af3 	.word	0x00020af3
    db54:	00020b27 	.word	0x00020b27
    db58:	00020b5b 	.word	0x00020b5b
    db5c:	00020b6f 	.word	0x00020b6f

0000db60 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    db60:	bf30      	wfi
    b z_SysNmiOnReset
    db62:	f7ff bffd 	b.w	db60 <z_SysNmiOnReset>
    db66:	bf00      	nop

0000db68 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    db68:	4a0e      	ldr	r2, [pc, #56]	; (dba4 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    db6a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    db6c:	4b0e      	ldr	r3, [pc, #56]	; (dba8 <z_arm_prep_c+0x40>)
    db6e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    db72:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    db74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    db78:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    db7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    db80:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    db84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    db88:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    db8c:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    db90:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    db94:	f009 ff76 	bl	17a84 <z_bss_zero>
	z_data_copy();
    db98:	f00b ffac 	bl	19af4 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    db9c:	f000 fa48 	bl	e030 <z_arm_interrupt_init>
	z_cstart();
    dba0:	f009 ff94 	bl	17acc <z_cstart>
    dba4:	00008000 	.word	0x00008000
    dba8:	e000ed00 	.word	0xe000ed00

0000dbac <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    dbac:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    dbae:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    dbb0:	4a0b      	ldr	r2, [pc, #44]	; (dbe0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    dbb2:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    dbb4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    dbb6:	bf1e      	ittt	ne
	movne	r1, #0
    dbb8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    dbba:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    dbbc:	f010 f9e3 	blne	1df86 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    dbc0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    dbc2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    dbc6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    dbca:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    dbce:	4905      	ldr	r1, [pc, #20]	; (dbe4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    dbd0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    dbd2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    dbd4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    dbd6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    dbda:	4903      	ldr	r1, [pc, #12]	; (dbe8 <_isr_wrapper+0x3c>)
	bx r1
    dbdc:	4708      	bx	r1
    dbde:	0000      	.short	0x0000
	ldr r2, =_kernel
    dbe0:	2000b14c 	.word	0x2000b14c
	ldr r1, =_sw_isr_table
    dbe4:	0001e388 	.word	0x0001e388
	ldr r1, =z_arm_int_exit
    dbe8:	0000dff1 	.word	0x0000dff1

0000dbec <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    dbec:	f00d f905 	bl	1adfa <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    dbf0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    dbf2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    dbf6:	4808      	ldr	r0, [pc, #32]	; (dc18 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    dbf8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    dbfc:	1840      	adds	r0, r0, r1
    msr PSP, r0
    dbfe:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    dc02:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    dc06:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    dc08:	4308      	orrs	r0, r1
    msr CONTROL, r0
    dc0a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    dc0e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    dc12:	f7ff ffa9 	bl	db68 <z_arm_prep_c>
    dc16:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    dc18:	20013c50 	.word	0x20013c50

0000dc1c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    dc1c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    dc20:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    dc24:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    dc26:	4672      	mov	r2, lr
	bl z_arm_fault
    dc28:	f000 f91a 	bl	de60 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    dc2c:	bd01      	pop	{r0, pc}
    dc2e:	bf00      	nop

0000dc30 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    dc30:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    dc32:	4c21      	ldr	r4, [pc, #132]	; (dcb8 <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    dc34:	2145      	movs	r1, #69	; 0x45
    dc36:	4821      	ldr	r0, [pc, #132]	; (dcbc <usage_fault.constprop.0+0x8c>)
    dc38:	f00c fe1a 	bl	1a870 <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    dc3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dc3e:	019d      	lsls	r5, r3, #6
    dc40:	d503      	bpl.n	dc4a <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    dc42:	2145      	movs	r1, #69	; 0x45
    dc44:	481e      	ldr	r0, [pc, #120]	; (dcc0 <usage_fault.constprop.0+0x90>)
    dc46:	f00c fe13 	bl	1a870 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    dc4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dc4c:	01dc      	lsls	r4, r3, #7
    dc4e:	d503      	bpl.n	dc58 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    dc50:	2145      	movs	r1, #69	; 0x45
    dc52:	481c      	ldr	r0, [pc, #112]	; (dcc4 <usage_fault.constprop.0+0x94>)
    dc54:	f00c fe0c 	bl	1a870 <printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    dc58:	4d17      	ldr	r5, [pc, #92]	; (dcb8 <usage_fault.constprop.0+0x88>)
    dc5a:	6aac      	ldr	r4, [r5, #40]	; 0x28
    dc5c:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    dc60:	d004      	beq.n	dc6c <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    dc62:	2145      	movs	r1, #69	; 0x45
    dc64:	4818      	ldr	r0, [pc, #96]	; (dcc8 <usage_fault.constprop.0+0x98>)
    dc66:	f00c fe03 	bl	1a870 <printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    dc6a:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    dc6c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dc6e:	0318      	lsls	r0, r3, #12
    dc70:	d503      	bpl.n	dc7a <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    dc72:	2145      	movs	r1, #69	; 0x45
    dc74:	4815      	ldr	r0, [pc, #84]	; (dccc <usage_fault.constprop.0+0x9c>)
    dc76:	f00c fdfb 	bl	1a870 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    dc7a:	4d0f      	ldr	r5, [pc, #60]	; (dcb8 <usage_fault.constprop.0+0x88>)
    dc7c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dc7e:	0359      	lsls	r1, r3, #13
    dc80:	d503      	bpl.n	dc8a <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    dc82:	2145      	movs	r1, #69	; 0x45
    dc84:	4812      	ldr	r0, [pc, #72]	; (dcd0 <usage_fault.constprop.0+0xa0>)
    dc86:	f00c fdf3 	bl	1a870 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    dc8a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dc8c:	039a      	lsls	r2, r3, #14
    dc8e:	d503      	bpl.n	dc98 <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    dc90:	2145      	movs	r1, #69	; 0x45
    dc92:	4810      	ldr	r0, [pc, #64]	; (dcd4 <usage_fault.constprop.0+0xa4>)
    dc94:	f00c fdec 	bl	1a870 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    dc98:	4d07      	ldr	r5, [pc, #28]	; (dcb8 <usage_fault.constprop.0+0x88>)
    dc9a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dc9c:	03db      	lsls	r3, r3, #15
    dc9e:	d503      	bpl.n	dca8 <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    dca0:	2145      	movs	r1, #69	; 0x45
    dca2:	480d      	ldr	r0, [pc, #52]	; (dcd8 <usage_fault.constprop.0+0xa8>)
    dca4:	f00c fde4 	bl	1a870 <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    dca8:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    dcaa:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    dcac:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    dcb0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    dcb4:	62ab      	str	r3, [r5, #40]	; 0x28
}
    dcb6:	bd38      	pop	{r3, r4, r5, pc}
    dcb8:	e000ed00 	.word	0xe000ed00
    dcbc:	00020ba2 	.word	0x00020ba2
    dcc0:	00020bbf 	.word	0x00020bbf
    dcc4:	00020bd7 	.word	0x00020bd7
    dcc8:	00020bf6 	.word	0x00020bf6
    dccc:	00020c25 	.word	0x00020c25
    dcd0:	00020c48 	.word	0x00020c48
    dcd4:	00020c72 	.word	0x00020c72
    dcd8:	00020c91 	.word	0x00020c91

0000dcdc <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    dcdc:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    dcde:	4c23      	ldr	r4, [pc, #140]	; (dd6c <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    dce0:	4606      	mov	r6, r0
    dce2:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    dce4:	4822      	ldr	r0, [pc, #136]	; (dd70 <bus_fault.constprop.0+0x94>)
    dce6:	2145      	movs	r1, #69	; 0x45
    dce8:	f00c fdc2 	bl	1a870 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    dcec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dcee:	04d9      	lsls	r1, r3, #19
    dcf0:	d503      	bpl.n	dcfa <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    dcf2:	2145      	movs	r1, #69	; 0x45
    dcf4:	481f      	ldr	r0, [pc, #124]	; (dd74 <bus_fault.constprop.0+0x98>)
    dcf6:	f00c fdbb 	bl	1a870 <printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    dcfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dcfc:	051a      	lsls	r2, r3, #20
    dcfe:	d503      	bpl.n	dd08 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    dd00:	2145      	movs	r1, #69	; 0x45
    dd02:	481d      	ldr	r0, [pc, #116]	; (dd78 <bus_fault.constprop.0+0x9c>)
    dd04:	f00c fdb4 	bl	1a870 <printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    dd08:	4c18      	ldr	r4, [pc, #96]	; (dd6c <bus_fault.constprop.0+0x90>)
    dd0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dd0c:	059b      	lsls	r3, r3, #22
    dd0e:	d510      	bpl.n	dd32 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    dd10:	481a      	ldr	r0, [pc, #104]	; (dd7c <bus_fault.constprop.0+0xa0>)
    dd12:	2145      	movs	r1, #69	; 0x45
    dd14:	f00c fdac 	bl	1a870 <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    dd18:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    dd1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dd1c:	0418      	lsls	r0, r3, #16
    dd1e:	d508      	bpl.n	dd32 <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    dd20:	2145      	movs	r1, #69	; 0x45
    dd22:	4817      	ldr	r0, [pc, #92]	; (dd80 <bus_fault.constprop.0+0xa4>)
    dd24:	f00c fda4 	bl	1a870 <printk>
			if (from_hard_fault) {
    dd28:	b11e      	cbz	r6, dd32 <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    dd2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dd2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    dd30:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    dd32:	4c0e      	ldr	r4, [pc, #56]	; (dd6c <bus_fault.constprop.0+0x90>)
    dd34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dd36:	0559      	lsls	r1, r3, #21
    dd38:	d503      	bpl.n	dd42 <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    dd3a:	2145      	movs	r1, #69	; 0x45
    dd3c:	4811      	ldr	r0, [pc, #68]	; (dd84 <bus_fault.constprop.0+0xa8>)
    dd3e:	f00c fd97 	bl	1a870 <printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    dd42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dd44:	05da      	lsls	r2, r3, #23
    dd46:	d50b      	bpl.n	dd60 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    dd48:	2145      	movs	r1, #69	; 0x45
    dd4a:	480f      	ldr	r0, [pc, #60]	; (dd88 <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    dd4c:	f00c fd90 	bl	1a870 <printk>
	*recoverable = memory_fault_recoverable(esf);
    dd50:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    dd52:	4a06      	ldr	r2, [pc, #24]	; (dd6c <bus_fault.constprop.0+0x90>)
    dd54:	6a93      	ldr	r3, [r2, #40]	; 0x28
    dd56:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    dd5a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    dd5c:	7028      	strb	r0, [r5, #0]
}
    dd5e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    dd60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dd62:	049b      	lsls	r3, r3, #18
    dd64:	d5f4      	bpl.n	dd50 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    dd66:	2145      	movs	r1, #69	; 0x45
    dd68:	4808      	ldr	r0, [pc, #32]	; (dd8c <bus_fault.constprop.0+0xb0>)
    dd6a:	e7ef      	b.n	dd4c <bus_fault.constprop.0+0x70>
    dd6c:	e000ed00 	.word	0xe000ed00
    dd70:	00020cc1 	.word	0x00020cc1
    dd74:	00020cdc 	.word	0x00020cdc
    dd78:	00020cf2 	.word	0x00020cf2
    dd7c:	00020d0a 	.word	0x00020d0a
    dd80:	00020d28 	.word	0x00020d28
    dd84:	00020d42 	.word	0x00020d42
    dd88:	00020d62 	.word	0x00020d62
    dd8c:	00020d7f 	.word	0x00020d7f

0000dd90 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    dd90:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    dd92:	4c29      	ldr	r4, [pc, #164]	; (de38 <mem_manage_fault.constprop.0+0xa8>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    dd94:	4606      	mov	r6, r0
    dd96:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    dd98:	4828      	ldr	r0, [pc, #160]	; (de3c <mem_manage_fault.constprop.0+0xac>)
    dd9a:	2145      	movs	r1, #69	; 0x45
    dd9c:	f00c fd68 	bl	1a870 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    dda0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dda2:	06d8      	lsls	r0, r3, #27
    dda4:	d503      	bpl.n	ddae <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    dda6:	2145      	movs	r1, #69	; 0x45
    dda8:	4825      	ldr	r0, [pc, #148]	; (de40 <mem_manage_fault.constprop.0+0xb0>)
    ddaa:	f00c fd61 	bl	1a870 <printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    ddae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ddb0:	0719      	lsls	r1, r3, #28
    ddb2:	d503      	bpl.n	ddbc <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    ddb4:	2145      	movs	r1, #69	; 0x45
    ddb6:	4823      	ldr	r0, [pc, #140]	; (de44 <mem_manage_fault.constprop.0+0xb4>)
    ddb8:	f00c fd5a 	bl	1a870 <printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    ddbc:	4c1e      	ldr	r4, [pc, #120]	; (de38 <mem_manage_fault.constprop.0+0xa8>)
    ddbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ddc0:	079a      	lsls	r2, r3, #30
    ddc2:	d510      	bpl.n	dde6 <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    ddc4:	2145      	movs	r1, #69	; 0x45
    ddc6:	4820      	ldr	r0, [pc, #128]	; (de48 <mem_manage_fault.constprop.0+0xb8>)
    ddc8:	f00c fd52 	bl	1a870 <printk>
		uint32_t temp = SCB->MMFAR;
    ddcc:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    ddce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ddd0:	061b      	lsls	r3, r3, #24
    ddd2:	d508      	bpl.n	dde6 <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    ddd4:	2145      	movs	r1, #69	; 0x45
    ddd6:	481d      	ldr	r0, [pc, #116]	; (de4c <mem_manage_fault.constprop.0+0xbc>)
    ddd8:	f00c fd4a 	bl	1a870 <printk>
			if (from_hard_fault) {
    dddc:	b11e      	cbz	r6, dde6 <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    ddde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dde0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    dde4:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    dde6:	4c14      	ldr	r4, [pc, #80]	; (de38 <mem_manage_fault.constprop.0+0xa8>)
    dde8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ddea:	07d8      	lsls	r0, r3, #31
    ddec:	d503      	bpl.n	ddf6 <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    ddee:	2145      	movs	r1, #69	; 0x45
    ddf0:	4817      	ldr	r0, [pc, #92]	; (de50 <mem_manage_fault.constprop.0+0xc0>)
    ddf2:	f00c fd3d 	bl	1a870 <printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    ddf6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    ddf8:	0699      	lsls	r1, r3, #26
    ddfa:	d503      	bpl.n	de04 <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
    ddfc:	2145      	movs	r1, #69	; 0x45
    ddfe:	4815      	ldr	r0, [pc, #84]	; (de54 <mem_manage_fault.constprop.0+0xc4>)
    de00:	f00c fd36 	bl	1a870 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    de04:	4b0c      	ldr	r3, [pc, #48]	; (de38 <mem_manage_fault.constprop.0+0xa8>)
    de06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    de08:	06d2      	lsls	r2, r2, #27
    de0a:	d402      	bmi.n	de12 <mem_manage_fault.constprop.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    de0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    de0e:	079b      	lsls	r3, r3, #30
    de10:	d50a      	bpl.n	de28 <mem_manage_fault.constprop.0+0x98>
	__ASSERT(0,
    de12:	4911      	ldr	r1, [pc, #68]	; (de58 <mem_manage_fault.constprop.0+0xc8>)
    de14:	4811      	ldr	r0, [pc, #68]	; (de5c <mem_manage_fault.constprop.0+0xcc>)
    de16:	f240 1247 	movw	r2, #327	; 0x147
    de1a:	f00c fd29 	bl	1a870 <printk>
    de1e:	f240 1147 	movw	r1, #327	; 0x147
    de22:	480d      	ldr	r0, [pc, #52]	; (de58 <mem_manage_fault.constprop.0+0xc8>)
    de24:	f00c ffca 	bl	1adbc <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
    de28:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    de2a:	4a03      	ldr	r2, [pc, #12]	; (de38 <mem_manage_fault.constprop.0+0xa8>)
    de2c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    de2e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    de32:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    de34:	7028      	strb	r0, [r5, #0]
}
    de36:	bd70      	pop	{r4, r5, r6, pc}
    de38:	e000ed00 	.word	0xe000ed00
    de3c:	00020db3 	.word	0x00020db3
    de40:	00020dce 	.word	0x00020dce
    de44:	00020cf2 	.word	0x00020cf2
    de48:	00020e06 	.word	0x00020e06
    de4c:	00020e23 	.word	0x00020e23
    de50:	00020e3e 	.word	0x00020e3e
    de54:	00020d7f 	.word	0x00020d7f
    de58:	00020e62 	.word	0x00020e62
    de5c:	0001fdfa 	.word	0x0001fdfa

0000de60 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    de60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    de64:	4b51      	ldr	r3, [pc, #324]	; (dfac <z_arm_fault+0x14c>)
{
    de66:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    de68:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    de6c:	4689      	mov	r9, r1
    de6e:	4614      	mov	r4, r2
    de70:	2600      	movs	r6, #0
    de72:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    de74:	f3c8 0708 	ubfx	r7, r8, #0, #9
    de78:	f386 8811 	msr	BASEPRI, r6
    de7c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    de80:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    de84:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    de88:	d111      	bne.n	deae <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    de8a:	07d0      	lsls	r0, r2, #31
    de8c:	d40f      	bmi.n	deae <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    de8e:	0651      	lsls	r1, r2, #25
    de90:	d403      	bmi.n	de9a <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    de92:	0722      	lsls	r2, r4, #28
    de94:	d408      	bmi.n	dea8 <z_arm_fault+0x48>
			*nested_exc = true;
    de96:	2601      	movs	r6, #1
    de98:	e008      	b.n	deac <z_arm_fault+0x4c>
		PR_FAULT_INFO("Exception occurred in Secure State");
    de9a:	2145      	movs	r1, #69	; 0x45
    de9c:	4844      	ldr	r0, [pc, #272]	; (dfb0 <z_arm_fault+0x150>)
    de9e:	f00c fce7 	bl	1a870 <printk>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    dea2:	f014 0404 	ands.w	r4, r4, #4
    dea6:	d000      	beq.n	deaa <z_arm_fault+0x4a>
			ptr_esf = (z_arch_esf_t *)psp;
    dea8:	464d      	mov	r5, r9
	*nested_exc = false;
    deaa:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    deac:	b95d      	cbnz	r5, dec6 <z_arm_fault+0x66>
    deae:	f44f 7271 	mov.w	r2, #964	; 0x3c4
    deb2:	4940      	ldr	r1, [pc, #256]	; (dfb4 <z_arm_fault+0x154>)
    deb4:	4840      	ldr	r0, [pc, #256]	; (dfb8 <z_arm_fault+0x158>)
    deb6:	f00c fcdb 	bl	1a870 <printk>
    deba:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    debe:	483d      	ldr	r0, [pc, #244]	; (dfb4 <z_arm_fault+0x154>)
    dec0:	f00c ff7c 	bl	1adbc <assert_post_action>
    dec4:	2500      	movs	r5, #0
	*recoverable = false;
    dec6:	2400      	movs	r4, #0
    dec8:	1efb      	subs	r3, r7, #3
    deca:	f88d 4007 	strb.w	r4, [sp, #7]
	switch (fault) {
    dece:	2b09      	cmp	r3, #9
    ded0:	d85a      	bhi.n	df88 <z_arm_fault+0x128>
    ded2:	e8df f003 	tbb	[pc, r3]
    ded6:	4e05      	.short	0x4e05
    ded8:	59593252 	.word	0x59593252
    dedc:	56595959 	.word	0x56595959
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    dee0:	4f32      	ldr	r7, [pc, #200]	; (dfac <z_arm_fault+0x14c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    dee2:	2145      	movs	r1, #69	; 0x45
    dee4:	4835      	ldr	r0, [pc, #212]	; (dfbc <z_arm_fault+0x15c>)
    dee6:	f00c fcc3 	bl	1a870 <printk>
	*recoverable = false;
    deea:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    deee:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    def0:	f014 0402 	ands.w	r4, r4, #2
    def4:	d005      	beq.n	df02 <z_arm_fault+0xa2>
		PR_EXC("  Bus fault on vector table read");
    def6:	2145      	movs	r1, #69	; 0x45
    def8:	4831      	ldr	r0, [pc, #196]	; (dfc0 <z_arm_fault+0x160>)
	PR_FAULT_INFO(
    defa:	f00c fcb9 	bl	1a870 <printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    defe:	2400      	movs	r4, #0
}
    df00:	e01e      	b.n	df40 <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    df02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    df04:	005b      	lsls	r3, r3, #1
    df06:	d51b      	bpl.n	df40 <z_arm_fault+0xe0>
		PR_EXC("  Fault escalation (see below)");
    df08:	2145      	movs	r1, #69	; 0x45
    df0a:	482e      	ldr	r0, [pc, #184]	; (dfc4 <z_arm_fault+0x164>)
    df0c:	f00c fcb0 	bl	1a870 <printk>
		if (SCB_MMFSR != 0) {
    df10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    df14:	b12b      	cbz	r3, df22 <z_arm_fault+0xc2>
			reason = mem_manage_fault(esf, 1, recoverable);
    df16:	2001      	movs	r0, #1
    df18:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    df1c:	f7ff ff38 	bl	dd90 <mem_manage_fault.constprop.0>
    df20:	e00d      	b.n	df3e <z_arm_fault+0xde>
		} else if (SCB_BFSR != 0) {
    df22:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    df26:	b12b      	cbz	r3, df34 <z_arm_fault+0xd4>
			reason = bus_fault(esf, 1, recoverable);
    df28:	2001      	movs	r0, #1
    df2a:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    df2e:	f7ff fed5 	bl	dcdc <bus_fault.constprop.0>
    df32:	e004      	b.n	df3e <z_arm_fault+0xde>
		} else if (SCB_UFSR != 0) {
    df34:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    df36:	b29b      	uxth	r3, r3
    df38:	b113      	cbz	r3, df40 <z_arm_fault+0xe0>
			reason = usage_fault(esf);
    df3a:	f7ff fe79 	bl	dc30 <usage_fault.constprop.0>
    df3e:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    df40:	f89d 3007 	ldrb.w	r3, [sp, #7]
    df44:	b993      	cbnz	r3, df6c <z_arm_fault+0x10c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    df46:	2220      	movs	r2, #32
    df48:	4629      	mov	r1, r5
    df4a:	a802      	add	r0, sp, #8
    df4c:	f00d fed4 	bl	1bcf8 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    df50:	9b09      	ldr	r3, [sp, #36]	; 0x24
    df52:	b336      	cbz	r6, dfa2 <z_arm_fault+0x142>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    df54:	f3c3 0208 	ubfx	r2, r3, #0, #9
    df58:	b922      	cbnz	r2, df64 <z_arm_fault+0x104>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    df5a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    df5e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    df62:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    df64:	4620      	mov	r0, r4
    df66:	a902      	add	r1, sp, #8
    df68:	f7ff fdcc 	bl	db04 <z_arm_fatal_error>
}
    df6c:	b00b      	add	sp, #44	; 0x2c
    df6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    df72:	2000      	movs	r0, #0
    df74:	f10d 0107 	add.w	r1, sp, #7
    df78:	e7d0      	b.n	df1c <z_arm_fault+0xbc>
		reason = bus_fault(esf, 0, recoverable);
    df7a:	2000      	movs	r0, #0
    df7c:	f10d 0107 	add.w	r1, sp, #7
    df80:	e7d5      	b.n	df2e <z_arm_fault+0xce>
	PR_FAULT_INFO(
    df82:	2145      	movs	r1, #69	; 0x45
    df84:	4810      	ldr	r0, [pc, #64]	; (dfc8 <z_arm_fault+0x168>)
    df86:	e7b8      	b.n	defa <z_arm_fault+0x9a>
	PR_FAULT_INFO("***** %s %d) *****",
    df88:	4910      	ldr	r1, [pc, #64]	; (dfcc <z_arm_fault+0x16c>)
    df8a:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    df8e:	4a10      	ldr	r2, [pc, #64]	; (dfd0 <z_arm_fault+0x170>)
    df90:	4810      	ldr	r0, [pc, #64]	; (dfd4 <z_arm_fault+0x174>)
    df92:	bf08      	it	eq
    df94:	460a      	moveq	r2, r1
    df96:	f1a7 0310 	sub.w	r3, r7, #16
    df9a:	2145      	movs	r1, #69	; 0x45
    df9c:	f00c fc68 	bl	1a870 <printk>
    dfa0:	e7ad      	b.n	defe <z_arm_fault+0x9e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    dfa2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    dfa6:	f023 0301 	bic.w	r3, r3, #1
    dfaa:	e7da      	b.n	df62 <z_arm_fault+0x102>
    dfac:	e000ed00 	.word	0xe000ed00
    dfb0:	00020eca 	.word	0x00020eca
    dfb4:	00020e62 	.word	0x00020e62
    dfb8:	0001fdfa 	.word	0x0001fdfa
    dfbc:	00020ef2 	.word	0x00020ef2
    dfc0:	00020f0e 	.word	0x00020f0e
    dfc4:	00020f34 	.word	0x00020f34
    dfc8:	00020f58 	.word	0x00020f58
    dfcc:	00020e9c 	.word	0x00020e9c
    dfd0:	00020eb1 	.word	0x00020eb1
    dfd4:	00020f93 	.word	0x00020f93

0000dfd8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    dfd8:	4b04      	ldr	r3, [pc, #16]	; (dfec <z_arm_fault_init+0x14>)
    dfda:	695a      	ldr	r2, [r3, #20]
    dfdc:	f042 0210 	orr.w	r2, r2, #16
    dfe0:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    dfe2:	695a      	ldr	r2, [r3, #20]
    dfe4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    dfe8:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    dfea:	4770      	bx	lr
    dfec:	e000ed00 	.word	0xe000ed00

0000dff0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    dff0:	4b04      	ldr	r3, [pc, #16]	; (e004 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    dff2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    dff4:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    dff6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    dff8:	d003      	beq.n	e002 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    dffa:	4903      	ldr	r1, [pc, #12]	; (e008 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    dffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    e000:	600a      	str	r2, [r1, #0]

0000e002 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    e002:	4770      	bx	lr
	ldr r3, =_kernel
    e004:	2000b14c 	.word	0x2000b14c
	ldr r1, =_SCS_ICSR
    e008:	e000ed04 	.word	0xe000ed04

0000e00c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    e00c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    e010:	4905      	ldr	r1, [pc, #20]	; (e028 <sys_arch_reboot+0x1c>)
    e012:	4b06      	ldr	r3, [pc, #24]	; (e02c <sys_arch_reboot+0x20>)
    e014:	68ca      	ldr	r2, [r1, #12]
    e016:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    e01a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    e01c:	60cb      	str	r3, [r1, #12]
    e01e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    e022:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    e024:	e7fd      	b.n	e022 <sys_arch_reboot+0x16>
    e026:	bf00      	nop
    e028:	e000ed00 	.word	0xe000ed00
    e02c:	05fa0004 	.word	0x05fa0004

0000e030 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    e030:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e032:	2120      	movs	r1, #32
    e034:	4803      	ldr	r0, [pc, #12]	; (e044 <z_arm_interrupt_init+0x14>)
    e036:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    e038:	3301      	adds	r3, #1
    e03a:	2b45      	cmp	r3, #69	; 0x45
    e03c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    e040:	d1f9      	bne.n	e036 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    e042:	4770      	bx	lr
    e044:	e000e100 	.word	0xe000e100

0000e048 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    e048:	b508      	push	{r3, lr}
	if (_current == thread) {
    e04a:	4b0e      	ldr	r3, [pc, #56]	; (e084 <z_impl_k_thread_abort+0x3c>)
    e04c:	689b      	ldr	r3, [r3, #8]
    e04e:	4283      	cmp	r3, r0
    e050:	d107      	bne.n	e062 <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e052:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    e056:	b193      	cbz	r3, e07e <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    e058:	4a0b      	ldr	r2, [pc, #44]	; (e088 <z_impl_k_thread_abort+0x40>)
    e05a:	6853      	ldr	r3, [r2, #4]
    e05c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    e060:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    e062:	f00a fe2f 	bl	18cc4 <z_thread_single_abort>
	__asm__ volatile(
    e066:	f04f 0320 	mov.w	r3, #32
    e06a:	f3ef 8011 	mrs	r0, BASEPRI
    e06e:	f383 8811 	msr	BASEPRI, r3
    e072:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    e076:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    e07a:	f00f bfd4 	b.w	1e026 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    e07e:	f00b fc2f 	bl	198e0 <z_self_abort>
    e082:	bf00      	nop
    e084:	2000b14c 	.word	0x2000b14c
    e088:	e000ed00 	.word	0xe000ed00

0000e08c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    e08c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e08e:	4c09      	ldr	r4, [pc, #36]	; (e0b4 <z_arm_configure_static_mpu_regions+0x28>)
    e090:	4a09      	ldr	r2, [pc, #36]	; (e0b8 <z_arm_configure_static_mpu_regions+0x2c>)
    e092:	4623      	mov	r3, r4
    e094:	2101      	movs	r1, #1
    e096:	4809      	ldr	r0, [pc, #36]	; (e0bc <z_arm_configure_static_mpu_regions+0x30>)
    e098:	f000 f976 	bl	e388 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    e09c:	2300      	movs	r3, #0
    e09e:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    e0a0:	4b07      	ldr	r3, [pc, #28]	; (e0c0 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e0a2:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    e0a4:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e0a6:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    e0a8:	9301      	str	r3, [sp, #4]
    e0aa:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e0ac:	f000 f988 	bl	e3c0 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    e0b0:	b004      	add	sp, #16
    e0b2:	bd10      	pop	{r4, pc}
    e0b4:	20070000 	.word	0x20070000
    e0b8:	20008000 	.word	0x20008000
    e0bc:	0001eb7c 	.word	0x0001eb7c
    e0c0:	200087d8 	.word	0x200087d8

0000e0c4 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    e0c4:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e0c6:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    e0c8:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e0ca:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    e0ce:	f004 031f 	and.w	r3, r4, #31
    e0d2:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e0d4:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e0d6:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e0d8:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    e0dc:	4905      	ldr	r1, [pc, #20]	; (e0f4 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e0de:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    e0e2:	f043 0301 	orr.w	r3, r3, #1
    e0e6:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
    e0ea:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
    e0ee:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    e0f2:	bd10      	pop	{r4, pc}
    e0f4:	e000ed00 	.word	0xe000ed00

0000e0f8 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    e0f8:	b530      	push	{r4, r5, lr}

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    e0fa:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    e0fc:	680c      	ldr	r4, [r1, #0]
{
    e0fe:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    e100:	890a      	ldrh	r2, [r1, #8]
    e102:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
    e104:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    e106:	3b01      	subs	r3, #1
    e108:	f024 041f 	bic.w	r4, r4, #31
    e10c:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    e10e:	f002 021f 	and.w	r2, r2, #31
    e112:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    e116:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    e11a:	2807      	cmp	r0, #7
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e11c:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    e11e:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    e122:	9303      	str	r3, [sp, #12]
	if (index > (get_num_regions() - 1U)) {
    e124:	d909      	bls.n	e13a <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e126:	4602      	mov	r2, r0
    e128:	2145      	movs	r1, #69	; 0x45
    e12a:	4806      	ldr	r0, [pc, #24]	; (e144 <mpu_configure_region+0x4c>)
    e12c:	f00c fba0 	bl	1a870 <printk>
    e130:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    e134:	4620      	mov	r0, r4
    e136:	b005      	add	sp, #20
    e138:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    e13a:	4669      	mov	r1, sp
    e13c:	f7ff ffc2 	bl	e0c4 <region_init>
	return region_allocate_and_init(index,
    e140:	e7f8      	b.n	e134 <mpu_configure_region+0x3c>
    e142:	bf00      	nop
    e144:	00020faf 	.word	0x00020faf

0000e148 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    e148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e14c:	4689      	mov	r9, r1
    e14e:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    e150:	4606      	mov	r6, r0
    e152:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    e156:	4d59      	ldr	r5, [pc, #356]	; (e2bc <mpu_configure_regions_and_partition.constprop.0+0x174>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    e158:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    e15a:	45c8      	cmp	r8, r9
    e15c:	da27      	bge.n	e1ae <mpu_configure_regions_and_partition.constprop.0+0x66>
		if (regions[i].size == 0U) {
    e15e:	f8d6 a004 	ldr.w	sl, [r6, #4]
    e162:	f1ba 0f00 	cmp.w	sl, #0
    e166:	d045      	beq.n	e1f4 <mpu_configure_regions_and_partition.constprop.0+0xac>
		&&
    e168:	f1ba 0f1f 	cmp.w	sl, #31
    e16c:	d918      	bls.n	e1a0 <mpu_configure_regions_and_partition.constprop.0+0x58>
		&&
    e16e:	f01a 0f1f 	tst.w	sl, #31
    e172:	d115      	bne.n	e1a0 <mpu_configure_regions_and_partition.constprop.0+0x58>
		((part->start &
    e174:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    e178:	f01b 0f1f 	tst.w	fp, #31
    e17c:	d110      	bne.n	e1a0 <mpu_configure_regions_and_partition.constprop.0+0x58>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e17e:	4658      	mov	r0, fp
    e180:	f00d fce3 	bl	1bb4a <arm_cmse_mpu_region_get>
    e184:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e186:	eb0a 000b 	add.w	r0, sl, fp
    e18a:	3801      	subs	r0, #1
    e18c:	f00d fcdd 	bl	1bb4a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e190:	4287      	cmp	r7, r0
    e192:	d010      	beq.n	e1b6 <mpu_configure_regions_and_partition.constprop.0+0x6e>
	return -EINVAL;
    e194:	f06f 0715 	mvn.w	r7, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    e198:	463a      	mov	r2, r7
    e19a:	2145      	movs	r1, #69	; 0x45
    e19c:	4848      	ldr	r0, [pc, #288]	; (e2c0 <mpu_configure_regions_and_partition.constprop.0+0x178>)
    e19e:	e002      	b.n	e1a6 <mpu_configure_regions_and_partition.constprop.0+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    e1a0:	4642      	mov	r2, r8
    e1a2:	2145      	movs	r1, #69	; 0x45
    e1a4:	4847      	ldr	r0, [pc, #284]	; (e2c4 <mpu_configure_regions_and_partition.constprop.0+0x17c>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e1a6:	f00c fb63 	bl	1a870 <printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    e1aa:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    e1ae:	4620      	mov	r0, r4
    e1b0:	b005      	add	sp, #20
    e1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    e1b6:	f117 0f16 	cmn.w	r7, #22
    e1ba:	d0ed      	beq.n	e198 <mpu_configure_regions_and_partition.constprop.0+0x50>
			(u_reg_index > (reg_index - 1))) {
    e1bc:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    e1be:	42bb      	cmp	r3, r7
    e1c0:	dbea      	blt.n	e198 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
    e1c2:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e1c6:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
    e1ca:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e1ce:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e1d2:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e1d6:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    e1da:	e9d6 3200 	ldrd	r3, r2, [r6]
    e1de:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    e1e0:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    e1e2:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    e1e6:	d11d      	bne.n	e224 <mpu_configure_regions_and_partition.constprop.0+0xdc>
    e1e8:	45d3      	cmp	fp, sl
    e1ea:	d107      	bne.n	e1fc <mpu_configure_regions_and_partition.constprop.0+0xb4>
			mpu_configure_region(u_reg_index, &regions[i]);
    e1ec:	4631      	mov	r1, r6
    e1ee:	b2f8      	uxtb	r0, r7
    e1f0:	f7ff ff82 	bl	e0f8 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    e1f4:	f108 0801 	add.w	r8, r8, #1
    e1f8:	360c      	adds	r6, #12
    e1fa:	e7ae      	b.n	e15a <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    e1fc:	4631      	mov	r1, r6
	MPU->RNR = index;
    e1fe:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e202:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
    e206:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e20a:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    e20e:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e210:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    e214:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    e216:	f7ff ff6f 	bl	e0f8 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e21a:	f110 0f16 	cmn.w	r0, #22
    e21e:	d0c4      	beq.n	e1aa <mpu_configure_regions_and_partition.constprop.0+0x62>
			reg_index++;
    e220:	1c44      	adds	r4, r0, #1
    e222:	e7e7      	b.n	e1f4 <mpu_configure_regions_and_partition.constprop.0+0xac>
				regions[i].start - 1);
    e224:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
    e226:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
    e228:	b2e0      	uxtb	r0, r4
		| (limit & MPU_RLAR_LIMIT_Msk);
    e22a:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    e22e:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    e232:	d108      	bne.n	e246 <mpu_configure_regions_and_partition.constprop.0+0xfe>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e234:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    e238:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e23a:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    e23e:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e240:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    e244:	e7e7      	b.n	e216 <mpu_configure_regions_and_partition.constprop.0+0xce>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e246:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
    e24a:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    e24e:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e250:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    e254:	4631      	mov	r1, r6
    e256:	f7ff ff4f 	bl	e0f8 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e25a:	f110 0f16 	cmn.w	r0, #22
    e25e:	d0a4      	beq.n	e1aa <mpu_configure_regions_and_partition.constprop.0+0x62>
	MPU->RNR = index;
    e260:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    e264:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
    e268:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    e26c:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
    e270:	f362 0304 	bfi	r3, r2, #0, #5
    e274:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e278:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    e27c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e280:	085b      	lsrs	r3, r3, #1
    e282:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
    e286:	e9d6 3100 	ldrd	r3, r1, [r6]
    e28a:	440b      	add	r3, r1
    e28c:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    e28e:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    e292:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    e294:	445b      	add	r3, fp
    e296:	eba3 030a 	sub.w	r3, r3, sl
    e29a:	b2c0      	uxtb	r0, r0
    e29c:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    e2a0:	2807      	cmp	r0, #7
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e2a2:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
    e2a6:	9303      	str	r3, [sp, #12]
    e2a8:	d903      	bls.n	e2b2 <mpu_configure_regions_and_partition.constprop.0+0x16a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e2aa:	4602      	mov	r2, r0
    e2ac:	2145      	movs	r1, #69	; 0x45
    e2ae:	4806      	ldr	r0, [pc, #24]	; (e2c8 <mpu_configure_regions_and_partition.constprop.0+0x180>)
    e2b0:	e779      	b.n	e1a6 <mpu_configure_regions_and_partition.constprop.0+0x5e>
	region_init(index, region_conf);
    e2b2:	4669      	mov	r1, sp
    e2b4:	f7ff ff06 	bl	e0c4 <region_init>
    e2b8:	e7b2      	b.n	e220 <mpu_configure_regions_and_partition.constprop.0+0xd8>
    e2ba:	bf00      	nop
    e2bc:	e000ed00 	.word	0xe000ed00
    e2c0:	00021002 	.word	0x00021002
    e2c4:	00020fda 	.word	0x00020fda
    e2c8:	00020faf 	.word	0x00020faf

0000e2cc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    e2cc:	2205      	movs	r2, #5
    e2ce:	4b04      	ldr	r3, [pc, #16]	; (e2e0 <arm_core_mpu_enable+0x14>)
    e2d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    e2d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e2d8:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    e2dc:	4770      	bx	lr
    e2de:	bf00      	nop
    e2e0:	e000ed00 	.word	0xe000ed00

0000e2e4 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    e2e4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    e2e8:	2200      	movs	r2, #0
    e2ea:	4b02      	ldr	r3, [pc, #8]	; (e2f4 <arm_core_mpu_disable+0x10>)
    e2ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    e2f0:	4770      	bx	lr
    e2f2:	bf00      	nop
    e2f4:	e000ed00 	.word	0xe000ed00

0000e2f8 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    e2f8:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    e2fa:	4d1d      	ldr	r5, [pc, #116]	; (e370 <arm_mpu_init+0x78>)
    e2fc:	682c      	ldr	r4, [r5, #0]
    e2fe:	2c08      	cmp	r4, #8
    e300:	d90d      	bls.n	e31e <arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    e302:	f240 123b 	movw	r2, #315	; 0x13b
    e306:	491b      	ldr	r1, [pc, #108]	; (e374 <arm_mpu_init+0x7c>)
    e308:	481b      	ldr	r0, [pc, #108]	; (e378 <arm_mpu_init+0x80>)
    e30a:	f00c fab1 	bl	1a870 <printk>
    e30e:	4819      	ldr	r0, [pc, #100]	; (e374 <arm_mpu_init+0x7c>)
    e310:	f240 113b 	movw	r1, #315	; 0x13b
    e314:	f00c fd52 	bl	1adbc <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    e318:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
    e31c:	bd38      	pop	{r3, r4, r5, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e31e:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    e320:	f7ff ffe0 	bl	e2e4 <arm_core_mpu_disable>
	MPU->MAIR0 =
    e324:	4b15      	ldr	r3, [pc, #84]	; (e37c <arm_mpu_init+0x84>)
    e326:	4a16      	ldr	r2, [pc, #88]	; (e380 <arm_mpu_init+0x88>)
    e328:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e32c:	4284      	cmp	r4, r0
    e32e:	d117      	bne.n	e360 <arm_mpu_init+0x68>
	static_regions_num = mpu_config.num_regions;
    e330:	4b14      	ldr	r3, [pc, #80]	; (e384 <arm_mpu_init+0x8c>)
    e332:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    e334:	f7ff ffca 	bl	e2cc <arm_core_mpu_enable>
	__ASSERT(
    e338:	4b10      	ldr	r3, [pc, #64]	; (e37c <arm_mpu_init+0x84>)
    e33a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    e33e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e342:	2b08      	cmp	r3, #8
    e344:	d00a      	beq.n	e35c <arm_mpu_init+0x64>
    e346:	490b      	ldr	r1, [pc, #44]	; (e374 <arm_mpu_init+0x7c>)
    e348:	480b      	ldr	r0, [pc, #44]	; (e378 <arm_mpu_init+0x80>)
    e34a:	f44f 72b3 	mov.w	r2, #358	; 0x166
    e34e:	f00c fa8f 	bl	1a870 <printk>
    e352:	f44f 71b3 	mov.w	r1, #358	; 0x166
    e356:	4807      	ldr	r0, [pc, #28]	; (e374 <arm_mpu_init+0x7c>)
    e358:	f00c fd30 	bl	1adbc <assert_post_action>
	return 0;
    e35c:	2000      	movs	r0, #0
    e35e:	e7dd      	b.n	e31c <arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    e360:	6869      	ldr	r1, [r5, #4]
    e362:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    e366:	f7ff fead 	bl	e0c4 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e36a:	3001      	adds	r0, #1
    e36c:	e7de      	b.n	e32c <arm_mpu_init+0x34>
    e36e:	bf00      	nop
    e370:	0001eb88 	.word	0x0001eb88
    e374:	0002102a 	.word	0x0002102a
    e378:	0001fdfa 	.word	0x0001fdfa
    e37c:	e000ed00 	.word	0xe000ed00
    e380:	0044ffaa 	.word	0x0044ffaa
    e384:	2000f913 	.word	0x2000f913

0000e388 <arm_core_mpu_configure_static_mpu_regions>:
{
    e388:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    e38a:	4c0a      	ldr	r4, [pc, #40]	; (e3b4 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    e38c:	7822      	ldrb	r2, [r4, #0]
    e38e:	f7ff fedb 	bl	e148 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    e392:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    e394:	3016      	adds	r0, #22
    e396:	d10c      	bne.n	e3b2 <arm_core_mpu_configure_static_mpu_regions+0x2a>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    e398:	4907      	ldr	r1, [pc, #28]	; (e3b8 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    e39a:	4808      	ldr	r0, [pc, #32]	; (e3bc <arm_core_mpu_configure_static_mpu_regions+0x34>)
    e39c:	f44f 7282 	mov.w	r2, #260	; 0x104
    e3a0:	f00c fa66 	bl	1a870 <printk>
}
    e3a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    e3a8:	f44f 7182 	mov.w	r1, #260	; 0x104
    e3ac:	4802      	ldr	r0, [pc, #8]	; (e3b8 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    e3ae:	f00c bd05 	b.w	1adbc <assert_post_action>
}
    e3b2:	bd10      	pop	{r4, pc}
    e3b4:	2000f913 	.word	0x2000f913
    e3b8:	0002102a 	.word	0x0002102a
    e3bc:	0001fdfa 	.word	0x0001fdfa

0000e3c0 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    e3c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e3c4:	4d30      	ldr	r5, [pc, #192]	; (e488 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
    e3c6:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e3c8:	4606      	mov	r6, r0
    e3ca:	f04f 0800 	mov.w	r8, #0
    e3ce:	46ab      	mov	fp, r5
	MPU->RNR = index;
    e3d0:	4f2e      	ldr	r7, [pc, #184]	; (e48c <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e3d2:	45d0      	cmp	r8, sl
    e3d4:	db02      	blt.n	e3dc <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
}
    e3d6:	b003      	add	sp, #12
    e3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    e3dc:	f8d6 9004 	ldr.w	r9, [r6, #4]
    e3e0:	f1b9 0f00 	cmp.w	r9, #0
    e3e4:	d04a      	beq.n	e47c <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    e3e6:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e3e8:	4608      	mov	r0, r1
    e3ea:	9101      	str	r1, [sp, #4]
    e3ec:	f00d fbad 	bl	1bb4a <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e3f0:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e3f2:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e3f4:	eb09 0001 	add.w	r0, r9, r1
    e3f8:	3801      	subs	r0, #1
    e3fa:	f00d fba6 	bl	1bb4a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e3fe:	4284      	cmp	r4, r0
    e400:	f04f 0214 	mov.w	r2, #20
    e404:	4b22      	ldr	r3, [pc, #136]	; (e490 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
    e406:	d013      	beq.n	e430 <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
    e408:	f06f 0315 	mvn.w	r3, #21
    e40c:	fb02 f808 	mul.w	r8, r2, r8
    e410:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    e414:	f44f 728a 	mov.w	r2, #276	; 0x114
    e418:	491e      	ldr	r1, [pc, #120]	; (e494 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
    e41a:	481f      	ldr	r0, [pc, #124]	; (e498 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
    e41c:	f00c fa28 	bl	1a870 <printk>
    e420:	f44f 718a 	mov.w	r1, #276	; 0x114
    e424:	481b      	ldr	r0, [pc, #108]	; (e494 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
}
    e426:	b003      	add	sp, #12
    e428:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    e42c:	f00c bcc6 	b.w	1adbc <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    e430:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    e434:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    e436:	d0ed      	beq.n	e414 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    e438:	7819      	ldrb	r1, [r3, #0]
    e43a:	42a1      	cmp	r1, r4
    e43c:	ddea      	ble.n	e414 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    e43e:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    e442:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	MPU->RNR = index;
    e446:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    e44a:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
    e44e:	f100 0108 	add.w	r1, r0, #8
    e452:	7b00      	ldrb	r0, [r0, #12]
    e454:	f364 0004 	bfi	r0, r4, #0, #5
    e458:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e45a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
    e45e:	790c      	ldrb	r4, [r1, #4]
    e460:	0840      	lsrs	r0, r0, #1
    e462:	f360 1447 	bfi	r4, r0, #5, #3
    e466:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    e468:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
    e46c:	f021 011f 	bic.w	r1, r1, #31
    e470:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    e472:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
    e476:	f021 011f 	bic.w	r1, r1, #31
    e47a:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e47c:	f108 0801 	add.w	r8, r8, #1
    e480:	3514      	adds	r5, #20
    e482:	360c      	adds	r6, #12
    e484:	e7a5      	b.n	e3d2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    e486:	bf00      	nop
    e488:	2000ab4c 	.word	0x2000ab4c
    e48c:	e000ed00 	.word	0xe000ed00
    e490:	2000f913 	.word	0x2000f913
    e494:	0002102a 	.word	0x0002102a
    e498:	0001fdfa 	.word	0x0001fdfa

0000e49c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    e49c:	4b01      	ldr	r3, [pc, #4]	; (e4a4 <__stdout_hook_install+0x8>)
    e49e:	6018      	str	r0, [r3, #0]
}
    e4a0:	4770      	bx	lr
    e4a2:	bf00      	nop
    e4a4:	2000831c 	.word	0x2000831c

0000e4a8 <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    e4a8:	2000      	movs	r0, #0
    e4aa:	4b02      	ldr	r3, [pc, #8]	; (e4b4 <remoteproc_mgr_boot+0xc>)
    e4ac:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
    e4b0:	4770      	bx	lr
    e4b2:	bf00      	nop
    e4b4:	40005000 	.word	0x40005000

0000e4b8 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    e4b8:	4b0e      	ldr	r3, [pc, #56]	; (e4f4 <bt_hex_real+0x3c>)
    e4ba:	2940      	cmp	r1, #64	; 0x40
    e4bc:	bf28      	it	cs
    e4be:	2140      	movcs	r1, #64	; 0x40
{
    e4c0:	b570      	push	{r4, r5, r6, lr}
    e4c2:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    e4c4:	4c0c      	ldr	r4, [pc, #48]	; (e4f8 <bt_hex_real+0x40>)
    e4c6:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
    e4c8:	42b0      	cmp	r0, r6
    e4ca:	f103 0302 	add.w	r3, r3, #2
    e4ce:	d104      	bne.n	e4da <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    e4d0:	2300      	movs	r3, #0
    e4d2:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    e4d6:	4807      	ldr	r0, [pc, #28]	; (e4f4 <bt_hex_real+0x3c>)
    e4d8:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    e4da:	7802      	ldrb	r2, [r0, #0]
    e4dc:	0912      	lsrs	r2, r2, #4
    e4de:	5ca2      	ldrb	r2, [r4, r2]
    e4e0:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    e4e4:	f810 2b01 	ldrb.w	r2, [r0], #1
    e4e8:	f002 020f 	and.w	r2, r2, #15
    e4ec:	5ca2      	ldrb	r2, [r4, r2]
    e4ee:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    e4f2:	e7e9      	b.n	e4c8 <bt_hex_real+0x10>
    e4f4:	2000f932 	.word	0x2000f932
    e4f8:	00021093 	.word	0x00021093

0000e4fc <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    e4fc:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    e4fe:	7803      	ldrb	r3, [r0, #0]
    e500:	b08b      	sub	sp, #44	; 0x2c
    e502:	4604      	mov	r4, r0
    e504:	ad07      	add	r5, sp, #28
    e506:	2b03      	cmp	r3, #3
    e508:	d821      	bhi.n	e54e <bt_addr_le_str_real+0x52>
    e50a:	e8df f003 	tbb	[pc, r3]
    e50e:	1a02      	.short	0x1a02
    e510:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    e512:	4912      	ldr	r1, [pc, #72]	; (e55c <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
    e514:	4628      	mov	r0, r5
    e516:	f00d fb95 	bl	1bc44 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    e51a:	7863      	ldrb	r3, [r4, #1]
    e51c:	211e      	movs	r1, #30
    e51e:	9304      	str	r3, [sp, #16]
    e520:	78a3      	ldrb	r3, [r4, #2]
    e522:	4a0f      	ldr	r2, [pc, #60]	; (e560 <bt_addr_le_str_real+0x64>)
    e524:	9303      	str	r3, [sp, #12]
    e526:	78e3      	ldrb	r3, [r4, #3]
    e528:	9505      	str	r5, [sp, #20]
    e52a:	9302      	str	r3, [sp, #8]
    e52c:	7923      	ldrb	r3, [r4, #4]
    e52e:	480d      	ldr	r0, [pc, #52]	; (e564 <bt_addr_le_str_real+0x68>)
    e530:	9301      	str	r3, [sp, #4]
    e532:	7963      	ldrb	r3, [r4, #5]
    e534:	9300      	str	r3, [sp, #0]
    e536:	79a3      	ldrb	r3, [r4, #6]
    e538:	f00c f9a7 	bl	1a88a <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    e53c:	4809      	ldr	r0, [pc, #36]	; (e564 <bt_addr_le_str_real+0x68>)
    e53e:	b00b      	add	sp, #44	; 0x2c
    e540:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    e542:	4909      	ldr	r1, [pc, #36]	; (e568 <bt_addr_le_str_real+0x6c>)
    e544:	e7e6      	b.n	e514 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    e546:	4909      	ldr	r1, [pc, #36]	; (e56c <bt_addr_le_str_real+0x70>)
    e548:	e7e4      	b.n	e514 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    e54a:	4909      	ldr	r1, [pc, #36]	; (e570 <bt_addr_le_str_real+0x74>)
    e54c:	e7e2      	b.n	e514 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    e54e:	210a      	movs	r1, #10
    e550:	4628      	mov	r0, r5
    e552:	4a08      	ldr	r2, [pc, #32]	; (e574 <bt_addr_le_str_real+0x78>)
    e554:	f00c f999 	bl	1a88a <snprintk>
		break;
    e558:	e7df      	b.n	e51a <bt_addr_le_str_real+0x1e>
    e55a:	bf00      	nop
    e55c:	0001f466 	.word	0x0001f466
    e560:	0001f48f 	.word	0x0001f48f
    e564:	2000f914 	.word	0x2000f914
    e568:	0001f46d 	.word	0x0001f46d
    e56c:	0001f474 	.word	0x0001f474
    e570:	0001f47e 	.word	0x0001f47e
    e574:	0001f488 	.word	0x0001f488

0000e578 <save_id>:
#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
	int err;
	BT_INFO("Saving ID");
    e578:	2149      	movs	r1, #73	; 0x49
{
    e57a:	b508      	push	{r3, lr}
	BT_INFO("Saving ID");
    e57c:	4809      	ldr	r0, [pc, #36]	; (e5a4 <save_id+0x2c>)
    e57e:	f00c f977 	bl	1a870 <printk>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    e582:	4909      	ldr	r1, [pc, #36]	; (e5a8 <save_id+0x30>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    e584:	4809      	ldr	r0, [pc, #36]	; (e5ac <save_id+0x34>)
    e586:	79ca      	ldrb	r2, [r1, #7]
    e588:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    e58c:	f7fd fa26 	bl	b9dc <settings_save_one>
	if (err) {
    e590:	4602      	mov	r2, r0
    e592:	b128      	cbz	r0, e5a0 <save_id+0x28>
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
    e594:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save ID (err %d)", err);
    e598:	2145      	movs	r1, #69	; 0x45
    e59a:	4805      	ldr	r0, [pc, #20]	; (e5b0 <save_id+0x38>)
    e59c:	f00c b968 	b.w	1a870 <printk>
}
    e5a0:	bd08      	pop	{r3, pc}
    e5a2:	bf00      	nop
    e5a4:	000210a4 	.word	0x000210a4
    e5a8:	20008000 	.word	0x20008000
    e5ac:	000210b3 	.word	0x000210b3
    e5b0:	000210b9 	.word	0x000210b9

0000e5b4 <set>:
{
    e5b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e5b6:	4616      	mov	r6, r2
    e5b8:	461f      	mov	r7, r3
	if (!name) {
    e5ba:	4604      	mov	r4, r0
    e5bc:	b930      	cbnz	r0, e5cc <set+0x18>
		BT_ERR("Insufficient number of arguments");
    e5be:	2145      	movs	r1, #69	; 0x45
    e5c0:	4819      	ldr	r0, [pc, #100]	; (e628 <set+0x74>)
    e5c2:	f00c f955 	bl	1a870 <printk>
	return -ENOENT;
    e5c6:	f06f 0401 	mvn.w	r4, #1
    e5ca:	e013      	b.n	e5f4 <set+0x40>
	len = settings_name_next(name, &next);
    e5cc:	a901      	add	r1, sp, #4
    e5ce:	f00c fc6e 	bl	1aeae <settings_name_next>
	if (!strncmp(name, "id", len)) {
    e5d2:	4916      	ldr	r1, [pc, #88]	; (e62c <set+0x78>)
	len = settings_name_next(name, &next);
    e5d4:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
    e5d6:	4620      	mov	r0, r4
    e5d8:	f00d fb6c 	bl	1bcb4 <strncmp>
    e5dc:	4604      	mov	r4, r0
    e5de:	2800      	cmp	r0, #0
    e5e0:	d1f1      	bne.n	e5c6 <set+0x12>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e5e2:	4d13      	ldr	r5, [pc, #76]	; (e630 <set+0x7c>)
    e5e4:	e8d5 3faf 	lda	r3, [r5]
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    e5e8:	075b      	lsls	r3, r3, #29
    e5ea:	d506      	bpl.n	e5fa <set+0x46>
			BT_WARN("Ignoring identities stored in flash");
    e5ec:	2157      	movs	r1, #87	; 0x57
    e5ee:	4811      	ldr	r0, [pc, #68]	; (e634 <set+0x80>)
    e5f0:	f00c f93e 	bl	1a870 <printk>
}
    e5f4:	4620      	mov	r0, r4
    e5f6:	b003      	add	sp, #12
    e5f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    e5fa:	3d94      	subs	r5, #148	; 0x94
    e5fc:	2207      	movs	r2, #7
    e5fe:	4629      	mov	r1, r5
    e600:	4638      	mov	r0, r7
    e602:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    e604:	2806      	cmp	r0, #6
    e606:	d80a      	bhi.n	e61e <set+0x6a>
				BT_ERR("Invalid length ID address in storage");
    e608:	2145      	movs	r1, #69	; 0x45
    e60a:	480b      	ldr	r0, [pc, #44]	; (e638 <set+0x84>)
    e60c:	f00c f930 	bl	1a870 <printk>
			(void)memset(bt_dev.id_addr, 0,
    e610:	2207      	movs	r2, #7
    e612:	4621      	mov	r1, r4
    e614:	4628      	mov	r0, r5
    e616:	f00d fb9a 	bl	1bd4e <memset>
			bt_dev.id_count = 0U;
    e61a:	71ec      	strb	r4, [r5, #7]
    e61c:	e7ea      	b.n	e5f4 <set+0x40>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    e61e:	2307      	movs	r3, #7
    e620:	fbb0 f0f3 	udiv	r0, r0, r3
    e624:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    e626:	e7e5      	b.n	e5f4 <set+0x40>
    e628:	000210d9 	.word	0x000210d9
    e62c:	0001f47b 	.word	0x0001f47b
    e630:	20008094 	.word	0x20008094
    e634:	000210ff 	.word	0x000210ff
    e638:	00021128 	.word	0x00021128

0000e63c <bt_settings_encode_key>:
{
    e63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e640:	b088      	sub	sp, #32
    e642:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
    e646:	799c      	ldrb	r4, [r3, #6]
    e648:	795d      	ldrb	r5, [r3, #5]
    e64a:	791e      	ldrb	r6, [r3, #4]
    e64c:	78df      	ldrb	r7, [r3, #3]
    e64e:	f893 c002 	ldrb.w	ip, [r3, #2]
    e652:	f893 e001 	ldrb.w	lr, [r3, #1]
    e656:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    e658:	f1b8 0f00 	cmp.w	r8, #0
    e65c:	d00e      	beq.n	e67c <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    e65e:	e9cd 3806 	strd	r3, r8, [sp, #24]
    e662:	e9cd ce04 	strd	ip, lr, [sp, #16]
    e666:	4613      	mov	r3, r2
    e668:	e9cd 6702 	strd	r6, r7, [sp, #8]
    e66c:	e9cd 4500 	strd	r4, r5, [sp]
    e670:	4a08      	ldr	r2, [pc, #32]	; (e694 <bt_settings_encode_key+0x58>)
    e672:	f00c f90a 	bl	1a88a <snprintk>
}
    e676:	b008      	add	sp, #32
    e678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    e67c:	e9cd e305 	strd	lr, r3, [sp, #20]
    e680:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    e684:	4613      	mov	r3, r2
    e686:	e9cd 5601 	strd	r5, r6, [sp, #4]
    e68a:	4a03      	ldr	r2, [pc, #12]	; (e698 <bt_settings_encode_key+0x5c>)
    e68c:	9400      	str	r4, [sp, #0]
    e68e:	f00c f8fc 	bl	1a88a <snprintk>
}
    e692:	e7f0      	b.n	e676 <bt_settings_encode_key+0x3a>
    e694:	00021152 	.word	0x00021152
    e698:	00021176 	.word	0x00021176

0000e69c <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e69c:	4907      	ldr	r1, [pc, #28]	; (e6bc <bt_settings_save_id+0x20>)
    e69e:	e8d1 3fef 	ldaex	r3, [r1]
    e6a2:	f043 0201 	orr.w	r2, r3, #1
    e6a6:	e8c1 2fe0 	stlex	r0, r2, [r1]
    e6aa:	2800      	cmp	r0, #0
    e6ac:	d1f7      	bne.n	e69e <bt_settings_save_id+0x2>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    e6ae:	07db      	lsls	r3, r3, #31
    e6b0:	d403      	bmi.n	e6ba <bt_settings_save_id+0x1e>
		k_queue_append(&work_q->queue, work);
    e6b2:	4803      	ldr	r0, [pc, #12]	; (e6c0 <bt_settings_save_id+0x24>)
    e6b4:	3908      	subs	r1, #8
    e6b6:	f00f bc98 	b.w	1dfea <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    e6ba:	4770      	bx	lr
    e6bc:	20008328 	.word	0x20008328
    e6c0:	2000a540 	.word	0x2000a540

0000e6c4 <commit>:

static int commit(void)
{
    e6c4:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
    e6c6:	4c13      	ldr	r4, [pc, #76]	; (e714 <commit+0x50>)
    e6c8:	79e3      	ldrb	r3, [r4, #7]
    e6ca:	b96b      	cbnz	r3, e6e8 <commit+0x24>
		bt_setup_public_id_addr();
    e6cc:	f001 ffc0 	bl	10650 <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
    e6d0:	79e3      	ldrb	r3, [r4, #7]
    e6d2:	b94b      	cbnz	r3, e6e8 <commit+0x24>
		int err;

		err = bt_setup_random_id_addr();
    e6d4:	f002 f84a 	bl	1076c <bt_setup_random_id_addr>
		if (err) {
    e6d8:	4604      	mov	r4, r0
    e6da:	b128      	cbz	r0, e6e8 <commit+0x24>
			BT_ERR("Unable to setup an identity address");
    e6dc:	2145      	movs	r1, #69	; 0x45
    e6de:	480e      	ldr	r0, [pc, #56]	; (e718 <commit+0x54>)
    e6e0:	f00c f8c6 	bl	1a870 <printk>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    e6e4:	4620      	mov	r0, r4
    e6e6:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e6e8:	4d0c      	ldr	r5, [pc, #48]	; (e71c <commit+0x58>)
    e6ea:	e8d5 3faf 	lda	r3, [r5]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    e6ee:	079b      	lsls	r3, r3, #30
    e6f0:	d401      	bmi.n	e6f6 <commit+0x32>
		bt_finalize_init();
    e6f2:	f001 fc95 	bl	10020 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e6f6:	e8d5 4fef 	ldaex	r4, [r5]
    e6fa:	f424 4300 	bic.w	r3, r4, #32768	; 0x8000
    e6fe:	e8c5 3fe2 	stlex	r2, r3, [r5]
    e702:	2a00      	cmp	r2, #0
    e704:	d1f7      	bne.n	e6f6 <commit+0x32>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    e706:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
    e70a:	d0eb      	beq.n	e6e4 <commit+0x20>
		bt_settings_save_id();
    e70c:	f7ff ffc6 	bl	e69c <bt_settings_save_id>
	return 0;
    e710:	2400      	movs	r4, #0
    e712:	e7e7      	b.n	e6e4 <commit+0x20>
    e714:	20008000 	.word	0x20008000
    e718:	00021197 	.word	0x00021197
    e71c:	20008094 	.word	0x20008094

0000e720 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
    e720:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    e722:	f7fd fa25 	bl	bb70 <settings_subsys_init>
	if (err) {
    e726:	4604      	mov	r4, r0
    e728:	b120      	cbz	r0, e734 <bt_settings_init+0x14>
		BT_ERR("settings_subsys_init failed (err %d)", err);
    e72a:	4602      	mov	r2, r0
    e72c:	2145      	movs	r1, #69	; 0x45
    e72e:	4802      	ldr	r0, [pc, #8]	; (e738 <bt_settings_init+0x18>)
    e730:	f00c f89e 	bl	1a870 <printk>
		return err;
	}

	return 0;
}
    e734:	4620      	mov	r0, r4
    e736:	bd10      	pop	{r4, pc}
    e738:	000211c0 	.word	0x000211c0

0000e73c <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    e73c:	4603      	mov	r3, r0
    e73e:	b430      	push	{r4, r5}
	switch (src->type) {
    e740:	781a      	ldrb	r2, [r3, #0]
{
    e742:	4608      	mov	r0, r1
	switch (src->type) {
    e744:	2a01      	cmp	r2, #1
    e746:	d013      	beq.n	e770 <uuid_to_uuid128+0x34>
    e748:	2a02      	cmp	r2, #2
    e74a:	d026      	beq.n	e79a <uuid_to_uuid128+0x5e>
    e74c:	b972      	cbnz	r2, e76c <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    e74e:	4a15      	ldr	r2, [pc, #84]	; (e7a4 <uuid_to_uuid128+0x68>)
    e750:	f102 0410 	add.w	r4, r2, #16
    e754:	f852 5b04 	ldr.w	r5, [r2], #4
    e758:	42a2      	cmp	r2, r4
    e75a:	f841 5b04 	str.w	r5, [r1], #4
    e75e:	d1f9      	bne.n	e754 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    e760:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    e762:	7812      	ldrb	r2, [r2, #0]
    e764:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
    e766:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    e768:	0a1b      	lsrs	r3, r3, #8
    e76a:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    e76c:	bc30      	pop	{r4, r5}
    e76e:	4770      	bx	lr
		*dst = uuid128_base;
    e770:	4a0c      	ldr	r2, [pc, #48]	; (e7a4 <uuid_to_uuid128+0x68>)
    e772:	f102 0410 	add.w	r4, r2, #16
    e776:	f852 5b04 	ldr.w	r5, [r2], #4
    e77a:	42a2      	cmp	r2, r4
    e77c:	f841 5b04 	str.w	r5, [r1], #4
    e780:	d1f9      	bne.n	e776 <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    e782:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    e784:	7812      	ldrb	r2, [r2, #0]
    e786:	700a      	strb	r2, [r1, #0]
    e788:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    e78c:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
    e78e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    e790:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    e792:	0a1b      	lsrs	r3, r3, #8
    e794:	7382      	strb	r2, [r0, #14]
    e796:	7403      	strb	r3, [r0, #16]
}
    e798:	e7e8      	b.n	e76c <uuid_to_uuid128+0x30>
		memcpy(dst, src, sizeof(*dst));
    e79a:	2211      	movs	r2, #17
}
    e79c:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    e79e:	4619      	mov	r1, r3
    e7a0:	f00d baaa 	b.w	1bcf8 <memcpy>
    e7a4:	000211f9 	.word	0x000211f9

0000e7a8 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    e7a8:	2801      	cmp	r0, #1
{
    e7aa:	b570      	push	{r4, r5, r6, lr}
    e7ac:	4605      	mov	r5, r0
    e7ae:	4616      	mov	r6, r2
    e7b0:	461c      	mov	r4, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    e7b2:	d010      	beq.n	e7d6 <bt_buf_get_rx+0x2e>
    e7b4:	2803      	cmp	r0, #3
    e7b6:	d00a      	beq.n	e7ce <bt_buf_get_rx+0x26>
    e7b8:	2805      	cmp	r0, #5
    e7ba:	d008      	beq.n	e7ce <bt_buf_get_rx+0x26>
    e7bc:	490c      	ldr	r1, [pc, #48]	; (e7f0 <bt_buf_get_rx+0x48>)
    e7be:	480d      	ldr	r0, [pc, #52]	; (e7f4 <bt_buf_get_rx+0x4c>)
    e7c0:	2233      	movs	r2, #51	; 0x33
    e7c2:	f00c f855 	bl	1a870 <printk>
    e7c6:	2133      	movs	r1, #51	; 0x33
    e7c8:	4809      	ldr	r0, [pc, #36]	; (e7f0 <bt_buf_get_rx+0x48>)
    e7ca:	f00c faf7 	bl	1adbc <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
    e7ce:	4632      	mov	r2, r6
    e7d0:	4623      	mov	r3, r4
    e7d2:	4809      	ldr	r0, [pc, #36]	; (e7f8 <bt_buf_get_rx+0x50>)
    e7d4:	e000      	b.n	e7d8 <bt_buf_get_rx+0x30>
    e7d6:	4809      	ldr	r0, [pc, #36]	; (e7fc <bt_buf_get_rx+0x54>)
    e7d8:	f00e fd9e 	bl	1d318 <net_buf_alloc_fixed>
    e7dc:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    e7de:	b12c      	cbz	r4, e7ec <bt_buf_get_rx+0x44>
	net_buf_simple_reserve(&buf->b, reserve);
    e7e0:	2101      	movs	r1, #1
    e7e2:	f104 0008 	add.w	r0, r4, #8
    e7e6:	f006 ff7b 	bl	156e0 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    e7ea:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    e7ec:	4620      	mov	r0, r4
    e7ee:	bd70      	pop	{r4, r5, r6, pc}
    e7f0:	0002120a 	.word	0x0002120a
    e7f4:	0001fdfa 	.word	0x0001fdfa
    e7f8:	200086a4 	.word	0x200086a4
    e7fc:	20008780 	.word	0x20008780

0000e800 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    e800:	4602      	mov	r2, r0
    e802:	460b      	mov	r3, r1
    e804:	b570      	push	{r4, r5, r6, lr}
    e806:	f04f 0120 	mov.w	r1, #32
    e80a:	f3ef 8511 	mrs	r5, BASEPRI
    e80e:	f381 8811 	msr	BASEPRI, r1
    e812:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
    e816:	2000      	movs	r0, #0
	buf = bt_dev.sent_cmd;
    e818:	490b      	ldr	r1, [pc, #44]	; (e848 <bt_buf_get_cmd_complete+0x48>)
    e81a:	f8d1 40f8 	ldr.w	r4, [r1, #248]	; 0xf8
	bt_dev.sent_cmd = NULL;
    e81e:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
	__asm__ volatile(
    e822:	f385 8811 	msr	BASEPRI, r5
    e826:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    e82a:	b924      	cbnz	r4, e836 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    e82c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    e830:	2001      	movs	r0, #1
    e832:	f7ff bfb9 	b.w	e7a8 <bt_buf_get_rx>
    e836:	2101      	movs	r1, #1
		buf->len = 0U;
    e838:	81a0      	strh	r0, [r4, #12]
    e83a:	7521      	strb	r1, [r4, #20]
    e83c:	f104 0008 	add.w	r0, r4, #8
    e840:	f006 ff4e 	bl	156e0 <net_buf_simple_reserve>
}
    e844:	4620      	mov	r0, r4
    e846:	bd70      	pop	{r4, r5, r6, pc}
    e848:	20008000 	.word	0x20008000

0000e84c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    e84c:	b570      	push	{r4, r5, r6, lr}
    e84e:	4604      	mov	r4, r0
	switch (evt) {
    e850:	2c0f      	cmp	r4, #15
{
    e852:	460d      	mov	r5, r1
    e854:	4610      	mov	r0, r2
    e856:	4619      	mov	r1, r3
	switch (evt) {
    e858:	d805      	bhi.n	e866 <bt_buf_get_evt+0x1a>
    e85a:	2c0d      	cmp	r4, #13
    e85c:	d912      	bls.n	e884 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    e85e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    e862:	f7ff bfcd 	b.w	e800 <bt_buf_get_cmd_complete>
	switch (evt) {
    e866:	2c13      	cmp	r4, #19
    e868:	d10c      	bne.n	e884 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    e86a:	480b      	ldr	r0, [pc, #44]	; (e898 <bt_buf_get_evt+0x4c>)
    e86c:	f00e fd54 	bl	1d318 <net_buf_alloc_fixed>
			if (buf) {
    e870:	4604      	mov	r4, r0
    e872:	b128      	cbz	r0, e880 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    e874:	2101      	movs	r1, #1
    e876:	3008      	adds	r0, #8
    e878:	f006 ff32 	bl	156e0 <net_buf_simple_reserve>
    e87c:	2301      	movs	r3, #1
    e87e:	7523      	strb	r3, [r4, #20]
}
    e880:	4620      	mov	r0, r4
    e882:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    e884:	4602      	mov	r2, r0
    e886:	460b      	mov	r3, r1
		if (discardable) {
    e888:	b10d      	cbz	r5, e88e <bt_buf_get_evt+0x42>
    e88a:	4804      	ldr	r0, [pc, #16]	; (e89c <bt_buf_get_evt+0x50>)
    e88c:	e7ee      	b.n	e86c <bt_buf_get_evt+0x20>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    e88e:	2001      	movs	r0, #1
}
    e890:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    e894:	f7ff bf88 	b.w	e7a8 <bt_buf_get_rx>
    e898:	200087ac 	.word	0x200087ac
    e89c:	200086fc 	.word	0x200086fc

0000e8a0 <hci_data_buf_overflow>:

static void hci_data_buf_overflow(struct net_buf *buf)
{
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;

	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    e8a0:	6883      	ldr	r3, [r0, #8]
    e8a2:	2157      	movs	r1, #87	; 0x57
    e8a4:	781a      	ldrb	r2, [r3, #0]
    e8a6:	4801      	ldr	r0, [pc, #4]	; (e8ac <hci_data_buf_overflow+0xc>)
    e8a8:	f00b bfe2 	b.w	1a870 <printk>
    e8ac:	00021240 	.word	0x00021240

0000e8b0 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    e8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e8b2:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    e8b4:	2500      	movs	r5, #0
    e8b6:	4f09      	ldr	r7, [pc, #36]	; (e8dc <id_find+0x2c>)
    e8b8:	79fb      	ldrb	r3, [r7, #7]
    e8ba:	b2ec      	uxtb	r4, r5
    e8bc:	42a3      	cmp	r3, r4
    e8be:	d802      	bhi.n	e8c6 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    e8c0:	f06f 0401 	mvn.w	r4, #1
    e8c4:	e008      	b.n	e8d8 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    e8c6:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    e8ca:	4630      	mov	r0, r6
    e8cc:	4439      	add	r1, r7
    e8ce:	f00d fb11 	bl	1bef4 <bt_addr_le_cmp>
    e8d2:	3501      	adds	r5, #1
    e8d4:	2800      	cmp	r0, #0
    e8d6:	d1ef      	bne.n	e8b8 <id_find+0x8>
}
    e8d8:	4620      	mov	r0, r4
    e8da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e8dc:	20008000 	.word	0x20008000

0000e8e0 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    e8e0:	6843      	ldr	r3, [r0, #4]
{
    e8e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e8e4:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    e8e6:	0558      	lsls	r0, r3, #21
    e8e8:	d502      	bpl.n	e8f0 <valid_adv_param+0x10>
		return false;
    e8ea:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    e8ec:	b003      	add	sp, #12
    e8ee:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    e8f0:	6922      	ldr	r2, [r4, #16]
    e8f2:	b10a      	cbz	r2, e8f8 <valid_adv_param+0x18>
    e8f4:	07d9      	lsls	r1, r3, #31
    e8f6:	d5f8      	bpl.n	e8ea <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    e8f8:	4d1a      	ldr	r5, [pc, #104]	; (e964 <valid_adv_param+0x84>)
    e8fa:	7820      	ldrb	r0, [r4, #0]
    e8fc:	79eb      	ldrb	r3, [r5, #7]
    e8fe:	4283      	cmp	r3, r0
    e900:	d9f3      	bls.n	e8ea <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    e902:	2300      	movs	r3, #0
    e904:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    e908:	4669      	mov	r1, sp
    e90a:	4428      	add	r0, r5
    e90c:	9300      	str	r3, [sp, #0]
    e90e:	f8cd 3003 	str.w	r3, [sp, #3]
    e912:	f00d faef 	bl	1bef4 <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    e916:	2800      	cmp	r0, #0
    e918:	d0e7      	beq.n	e8ea <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    e91a:	6860      	ldr	r0, [r4, #4]
    e91c:	07c2      	lsls	r2, r0, #31
    e91e:	d406      	bmi.n	e92e <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    e920:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    e924:	2b08      	cmp	r3, #8
    e926:	d802      	bhi.n	e92e <valid_adv_param+0x4e>
    e928:	68a3      	ldr	r3, [r4, #8]
    e92a:	2b9f      	cmp	r3, #159	; 0x9f
    e92c:	d9dd      	bls.n	e8ea <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    e92e:	f010 0f30 	tst.w	r0, #48	; 0x30
    e932:	d002      	beq.n	e93a <valid_adv_param+0x5a>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    e934:	6923      	ldr	r3, [r4, #16]
    e936:	2b00      	cmp	r3, #0
    e938:	d0d7      	beq.n	e8ea <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    e93a:	06c3      	lsls	r3, r0, #27
    e93c:	d401      	bmi.n	e942 <valid_adv_param+0x62>
    e93e:	6923      	ldr	r3, [r4, #16]
    e940:	b943      	cbnz	r3, e954 <valid_adv_param+0x74>
		if (param->interval_min > param->interval_max ||
    e942:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    e946:	429a      	cmp	r2, r3
    e948:	d8cf      	bhi.n	e8ea <valid_adv_param+0xa>
    e94a:	2a1f      	cmp	r2, #31
    e94c:	d9cd      	bls.n	e8ea <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    e94e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    e952:	d8ca      	bhi.n	e8ea <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    e954:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    e958:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    e95c:	bf18      	it	ne
    e95e:	2001      	movne	r0, #1
    e960:	e7c4      	b.n	e8ec <valid_adv_param+0xc>
    e962:	bf00      	nop
    e964:	20008000 	.word	0x20008000

0000e968 <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e968:	6883      	ldr	r3, [r0, #8]
{
    e96a:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e96c:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    e96e:	4620      	mov	r0, r4
    e970:	f002 fd98 	bl	114a4 <bt_conn_lookup_handle>
	if (!conn) {
    e974:	b930      	cbnz	r0, e984 <le_data_len_change+0x1c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    e976:	4622      	mov	r2, r4
}
    e978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    e97c:	2145      	movs	r1, #69	; 0x45
    e97e:	4803      	ldr	r0, [pc, #12]	; (e98c <le_data_len_change+0x24>)
    e980:	f00b bf76 	b.w	1a870 <printk>
}
    e984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    e988:	f002 bd68 	b.w	1145c <bt_conn_unref>
    e98c:	0002126d 	.word	0x0002126d

0000e990 <hci_disconn_complete_prio>:
{
    e990:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    e992:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    e994:	781a      	ldrb	r2, [r3, #0]
    e996:	b9aa      	cbnz	r2, e9c4 <hci_disconn_complete_prio+0x34>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e998:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    e99c:	4628      	mov	r0, r5
    e99e:	f002 fd81 	bl	114a4 <bt_conn_lookup_handle>
	if (!conn) {
    e9a2:	4604      	mov	r4, r0
    e9a4:	b930      	cbnz	r0, e9b4 <hci_disconn_complete_prio+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    e9a6:	462a      	mov	r2, r5
}
    e9a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    e9ac:	2145      	movs	r1, #69	; 0x45
    e9ae:	4806      	ldr	r0, [pc, #24]	; (e9c8 <hci_disconn_complete_prio+0x38>)
    e9b0:	f00b bf5e 	b.w	1a870 <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    e9b4:	2101      	movs	r1, #1
    e9b6:	f002 fd7d 	bl	114b4 <bt_conn_set_state>
	bt_conn_unref(conn);
    e9ba:	4620      	mov	r0, r4
}
    e9bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    e9c0:	f002 bd4c 	b.w	1145c <bt_conn_unref>
}
    e9c4:	bd38      	pop	{r3, r4, r5, pc}
    e9c6:	bf00      	nop
    e9c8:	00021296 	.word	0x00021296

0000e9cc <hci_hardware_error>:
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    e9cc:	2101      	movs	r1, #1
{
    e9ce:	b508      	push	{r3, lr}
    e9d0:	3008      	adds	r0, #8
    e9d2:	f006 ffcf 	bl	15974 <net_buf_simple_pull_mem>
}
    e9d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    e9da:	7802      	ldrb	r2, [r0, #0]
    e9dc:	2145      	movs	r1, #69	; 0x45
    e9de:	4801      	ldr	r0, [pc, #4]	; (e9e4 <hci_hardware_error+0x18>)
    e9e0:	f00b bf46 	b.w	1a870 <printk>
    e9e4:	000212c1 	.word	0x000212c1

0000e9e8 <hci_vendor_event>:
		BT_WARN("Unhandled vendor-specific event: %s",
    e9e8:	8981      	ldrh	r1, [r0, #12]
{
    e9ea:	b508      	push	{r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    e9ec:	6880      	ldr	r0, [r0, #8]
    e9ee:	f7ff fd63 	bl	e4b8 <bt_hex_real>
}
    e9f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    e9f6:	4602      	mov	r2, r0
    e9f8:	2157      	movs	r1, #87	; 0x57
    e9fa:	4801      	ldr	r0, [pc, #4]	; (ea00 <hci_vendor_event+0x18>)
    e9fc:	f00b bf38 	b.w	1a870 <printk>
    ea00:	000212e8 	.word	0x000212e8

0000ea04 <le_conn_update_complete>:
{
    ea04:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    ea06:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    ea08:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    ea0c:	4630      	mov	r0, r6
    ea0e:	f002 fd49 	bl	114a4 <bt_conn_lookup_handle>
	if (!conn) {
    ea12:	4604      	mov	r4, r0
    ea14:	b938      	cbnz	r0, ea26 <le_conn_update_complete+0x22>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    ea16:	4632      	mov	r2, r6
    ea18:	2145      	movs	r1, #69	; 0x45
    ea1a:	4821      	ldr	r0, [pc, #132]	; (eaa0 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x40>)
}
    ea1c:	b002      	add	sp, #8
    ea1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    ea22:	f00b bf25 	b.w	1a870 <printk>
	if (!evt->status) {
    ea26:	782b      	ldrb	r3, [r5, #0]
    ea28:	b9cb      	cbnz	r3, ea5e <le_conn_update_complete+0x5a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    ea2a:	792a      	ldrb	r2, [r5, #4]
    ea2c:	78eb      	ldrb	r3, [r5, #3]
    ea2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ea32:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    ea36:	79aa      	ldrb	r2, [r5, #6]
    ea38:	796b      	ldrb	r3, [r5, #5]
    ea3a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ea3e:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    ea42:	79eb      	ldrb	r3, [r5, #7]
    ea44:	7a2a      	ldrb	r2, [r5, #8]
    ea46:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ea4a:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    ea4e:	f002 fb47 	bl	110e0 <notify_le_param_updated>
	bt_conn_unref(conn);
    ea52:	4620      	mov	r0, r4
}
    ea54:	b002      	add	sp, #8
    ea56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    ea5a:	f002 bcff 	b.w	1145c <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    ea5e:	2b1a      	cmp	r3, #26
    ea60:	d1f7      	bne.n	ea52 <le_conn_update_complete+0x4e>
    ea62:	78c3      	ldrb	r3, [r0, #3]
    ea64:	2b01      	cmp	r3, #1
    ea66:	d1f4      	bne.n	ea52 <le_conn_update_complete+0x4e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    ea68:	f44f 6180 	mov.w	r1, #1024	; 0x400
    ea6c:	3004      	adds	r0, #4
    ea6e:	f00d fa36 	bl	1bede <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    ea72:	0543      	lsls	r3, r0, #21
    ea74:	d4ed      	bmi.n	ea52 <le_conn_update_complete+0x4e>
		param.interval_min = conn->le.interval_min;
    ea76:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
		bt_l2cap_update_conn_param(conn, &param);
    ea7a:	4669      	mov	r1, sp
		param.interval_min = conn->le.interval_min;
    ea7c:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
    ea80:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
		bt_l2cap_update_conn_param(conn, &param);
    ea84:	4620      	mov	r0, r4
		param.interval_max = conn->le.interval_max;
    ea86:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
    ea8a:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    ea8e:	f8ad 3004 	strh.w	r3, [sp, #4]
		param.timeout = conn->le.pending_timeout;
    ea92:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    ea96:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
    ea9a:	f003 fb09 	bl	120b0 <bt_l2cap_update_conn_param>
    ea9e:	e7d8      	b.n	ea52 <le_conn_update_complete+0x4e>
    eaa0:	0002126d 	.word	0x0002126d

0000eaa4 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    eaa4:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    eaa6:	4c0c      	ldr	r4, [pc, #48]	; (ead8 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    eaa8:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    eaaa:	2205      	movs	r2, #5
    eaac:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    eab0:	f002 fe36 	bl	11720 <bt_conn_lookup_state_le>
		if (!conn) {
    eab4:	b970      	cbnz	r0, ead4 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    eab6:	4b09      	ldr	r3, [pc, #36]	; (eadc <find_pending_connect.part.0+0x38>)
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    eab8:	4669      	mov	r1, sp
						       BT_ADDR_LE_NONE,
    eaba:	6818      	ldr	r0, [r3, #0]
    eabc:	889a      	ldrh	r2, [r3, #4]
    eabe:	799b      	ldrb	r3, [r3, #6]
    eac0:	9000      	str	r0, [sp, #0]
    eac2:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    eac6:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    eaca:	2204      	movs	r2, #4
						       BT_ADDR_LE_NONE,
    eacc:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    ead0:	f002 fe26 	bl	11720 <bt_conn_lookup_state_le>
}
    ead4:	b002      	add	sp, #8
    ead6:	bd10      	pop	{r4, pc}
    ead8:	20008000 	.word	0x20008000
    eadc:	0001e7e0 	.word	0x0001e7e0

0000eae0 <handle_event>:
{
    eae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    eae2:	4605      	mov	r5, r0
    eae4:	4614      	mov	r4, r2
    eae6:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
    eae8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (handler->event != event) {
    eaec:	7822      	ldrb	r2, [r4, #0]
    eaee:	42aa      	cmp	r2, r5
    eaf0:	d010      	beq.n	eb14 <handle_event+0x34>
	for (i = 0; i < num_handlers; i++) {
    eaf2:	3408      	adds	r4, #8
    eaf4:	429c      	cmp	r4, r3
    eaf6:	d1f9      	bne.n	eaec <handle_event+0xc>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    eaf8:	8984      	ldrh	r4, [r0, #12]
    eafa:	6880      	ldr	r0, [r0, #8]
    eafc:	4621      	mov	r1, r4
    eafe:	f7ff fcdb 	bl	e4b8 <bt_hex_real>
    eb02:	4623      	mov	r3, r4
    eb04:	9000      	str	r0, [sp, #0]
    eb06:	462a      	mov	r2, r5
    eb08:	2157      	movs	r1, #87	; 0x57
    eb0a:	480b      	ldr	r0, [pc, #44]	; (eb38 <handle_event+0x58>)
    eb0c:	f00b feb0 	bl	1a870 <printk>
}
    eb10:	b003      	add	sp, #12
    eb12:	bd30      	pop	{r4, r5, pc}
		if (buf->len < handler->min_len) {
    eb14:	8982      	ldrh	r2, [r0, #12]
    eb16:	7863      	ldrb	r3, [r4, #1]
    eb18:	4293      	cmp	r3, r2
    eb1a:	d907      	bls.n	eb2c <handle_event+0x4c>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    eb1c:	462b      	mov	r3, r5
    eb1e:	2145      	movs	r1, #69	; 0x45
    eb20:	4806      	ldr	r0, [pc, #24]	; (eb3c <handle_event+0x5c>)
}
    eb22:	b003      	add	sp, #12
    eb24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    eb28:	f00b bea2 	b.w	1a870 <printk>
		handler->handler(buf);
    eb2c:	6863      	ldr	r3, [r4, #4]
}
    eb2e:	b003      	add	sp, #12
    eb30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
    eb34:	4718      	bx	r3
    eb36:	bf00      	nop
    eb38:	00021338 	.word	0x00021338
    eb3c:	00021311 	.word	0x00021311

0000eb40 <hci_le_meta_event>:
{
    eb40:	b510      	push	{r4, lr}
    eb42:	2101      	movs	r1, #1
    eb44:	4604      	mov	r4, r0
    eb46:	3008      	adds	r0, #8
    eb48:	f006 ff14 	bl	15974 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    eb4c:	4621      	mov	r1, r4
}
    eb4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    eb52:	2308      	movs	r3, #8
    eb54:	4a01      	ldr	r2, [pc, #4]	; (eb5c <hci_le_meta_event+0x1c>)
    eb56:	7800      	ldrb	r0, [r0, #0]
    eb58:	f7ff bfc2 	b.w	eae0 <handle_event>
    eb5c:	0001ebf0 	.word	0x0001ebf0

0000eb60 <id_create.constprop.0>:
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    eb60:	b530      	push	{r4, r5, lr}
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    eb62:	4d18      	ldr	r5, [pc, #96]	; (ebc4 <id_create.constprop.0+0x64>)
    eb64:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    eb68:	460c      	mov	r4, r1
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    eb6a:	b085      	sub	sp, #20
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    eb6c:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    eb6e:	b1b1      	cbz	r1, eb9e <id_create.constprop.0+0x3e>
    eb70:	2300      	movs	r3, #0
    eb72:	4620      	mov	r0, r4
    eb74:	a902      	add	r1, sp, #8
    eb76:	9302      	str	r3, [sp, #8]
    eb78:	f8cd 300b 	str.w	r3, [sp, #11]
    eb7c:	f00d f9ba 	bl	1bef4 <bt_addr_le_cmp>
    eb80:	b168      	cbz	r0, eb9e <id_create.constprop.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    eb82:	4621      	mov	r1, r4
    eb84:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    eb86:	f00d f9a7 	bl	1bed8 <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    eb8a:	480f      	ldr	r0, [pc, #60]	; (ebc8 <id_create.constprop.0+0x68>)
    eb8c:	f00d f9a1 	bl	1bed2 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    eb90:	0783      	lsls	r3, r0, #30
    eb92:	d515      	bpl.n	ebc0 <id_create.constprop.0+0x60>
}
    eb94:	b005      	add	sp, #20
    eb96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		bt_settings_save_id();
    eb9a:	f7ff bd7f 	b.w	e69c <bt_settings_save_id>
			bt_addr_le_create_static(&new_addr);
    eb9e:	4668      	mov	r0, sp
    eba0:	f00d f968 	bl	1be74 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    eba4:	4668      	mov	r0, sp
    eba6:	f7ff fe83 	bl	e8b0 <id_find>
    ebaa:	2800      	cmp	r0, #0
    ebac:	daf7      	bge.n	eb9e <id_create.constprop.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    ebae:	4669      	mov	r1, sp
    ebb0:	4628      	mov	r0, r5
    ebb2:	f00d f991 	bl	1bed8 <bt_addr_le_copy>
		if (addr) {
    ebb6:	2c00      	cmp	r4, #0
    ebb8:	d0e7      	beq.n	eb8a <id_create.constprop.0+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    ebba:	4629      	mov	r1, r5
    ebbc:	4620      	mov	r0, r4
    ebbe:	e7e2      	b.n	eb86 <id_create.constprop.0+0x26>
}
    ebc0:	b005      	add	sp, #20
    ebc2:	bd30      	pop	{r4, r5, pc}
    ebc4:	20008000 	.word	0x20008000
    ebc8:	20008094 	.word	0x20008094

0000ebcc <hci_rx_thread>:
{
    ebcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    ebd0:	4f40      	ldr	r7, [pc, #256]	; (ecd4 <hci_rx_thread+0x108>)
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    ebd2:	f8df 8104 	ldr.w	r8, [pc, #260]	; ecd8 <hci_rx_thread+0x10c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    ebd6:	4e41      	ldr	r6, [pc, #260]	; (ecdc <hci_rx_thread+0x110>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    ebd8:	f04f 32ff 	mov.w	r2, #4294967295
    ebdc:	f04f 33ff 	mov.w	r3, #4294967295
    ebe0:	4638      	mov	r0, r7
    ebe2:	f006 fd4d 	bl	15680 <net_buf_get>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    ebe6:	7d02      	ldrb	r2, [r0, #20]
    ebe8:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
    ebea:	2a01      	cmp	r2, #1
    ebec:	d041      	beq.n	ec72 <hci_rx_thread+0xa6>
    ebee:	2a03      	cmp	r2, #3
    ebf0:	d16c      	bne.n	eccc <hci_rx_thread+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    ebf2:	8983      	ldrh	r3, [r0, #12]
    ebf4:	2b03      	cmp	r3, #3
    ebf6:	d80b      	bhi.n	ec10 <hci_rx_thread+0x44>
    ebf8:	f240 42ac 	movw	r2, #1196	; 0x4ac
    ebfc:	4631      	mov	r1, r6
    ebfe:	4838      	ldr	r0, [pc, #224]	; (ece0 <hci_rx_thread+0x114>)
    ec00:	f00b fe36 	bl	1a870 <printk>
    ec04:	4040      	eors	r0, r0
    ec06:	f380 8811 	msr	BASEPRI, r0
    ec0a:	f04f 0003 	mov.w	r0, #3
    ec0e:	df02      	svc	2
    ec10:	2104      	movs	r1, #4
    ec12:	f104 0008 	add.w	r0, r4, #8
    ec16:	f006 fead 	bl	15974 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    ec1a:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    ec1c:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    ec1e:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    ec22:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    ec24:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    ec26:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
    ec2a:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
    ec2c:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    ec2e:	d007      	beq.n	ec40 <hci_rx_thread+0x74>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    ec30:	2145      	movs	r1, #69	; 0x45
    ec32:	482c      	ldr	r0, [pc, #176]	; (ece4 <hci_rx_thread+0x118>)
    ec34:	f00b fe1c 	bl	1a870 <printk>
			net_buf_unref(buf);
    ec38:	4620      	mov	r0, r4
    ec3a:	f006 fda3 	bl	15784 <net_buf_unref>
			break;
    ec3e:	e015      	b.n	ec6c <hci_rx_thread+0xa0>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    ec40:	f002 fc30 	bl	114a4 <bt_conn_lookup_handle>
	if (!conn) {
    ec44:	4605      	mov	r5, r0
    ec46:	b928      	cbnz	r0, ec54 <hci_rx_thread+0x88>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    ec48:	2145      	movs	r1, #69	; 0x45
    ec4a:	8ae2      	ldrh	r2, [r4, #22]
    ec4c:	4826      	ldr	r0, [pc, #152]	; (ece8 <hci_rx_thread+0x11c>)
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    ec4e:	f00b fe0f 	bl	1a870 <printk>
    ec52:	e7f1      	b.n	ec38 <hci_rx_thread+0x6c>
	acl(buf)->index = bt_conn_index(conn);
    ec54:	f003 f85a 	bl	11d0c <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    ec58:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
    ec5a:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    ec5c:	ea4f 3219 	mov.w	r2, r9, lsr #12
    ec60:	4628      	mov	r0, r5
    ec62:	f002 fad5 	bl	11210 <bt_conn_recv>
	bt_conn_unref(conn);
    ec66:	4628      	mov	r0, r5
    ec68:	f002 fbf8 	bl	1145c <bt_conn_unref>
	z_impl_k_yield();
    ec6c:	f00a fae6 	bl	1923c <z_impl_k_yield>
	while (1) {
    ec70:	e7b2      	b.n	ebd8 <hci_rx_thread+0xc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    ec72:	8983      	ldrh	r3, [r0, #12]
    ec74:	2b01      	cmp	r3, #1
    ec76:	d80b      	bhi.n	ec90 <hci_rx_thread+0xc4>
    ec78:	f241 32fb 	movw	r2, #5115	; 0x13fb
    ec7c:	4631      	mov	r1, r6
    ec7e:	4818      	ldr	r0, [pc, #96]	; (ece0 <hci_rx_thread+0x114>)
    ec80:	f00b fdf6 	bl	1a870 <printk>
    ec84:	4040      	eors	r0, r0
    ec86:	f380 8811 	msr	BASEPRI, r0
    ec8a:	f04f 0003 	mov.w	r0, #3
    ec8e:	df02      	svc	2
    ec90:	2102      	movs	r1, #2
    ec92:	f104 0008 	add.w	r0, r4, #8
    ec96:	f006 fe6d 	bl	15974 <net_buf_simple_pull_mem>
    ec9a:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    ec9c:	7800      	ldrb	r0, [r0, #0]
    ec9e:	f00d f8f7 	bl	1be90 <bt_hci_evt_get_flags>
    eca2:	0783      	lsls	r3, r0, #30
    eca4:	d40b      	bmi.n	ecbe <hci_rx_thread+0xf2>
    eca6:	f241 32ff 	movw	r2, #5119	; 0x13ff
    ecaa:	4631      	mov	r1, r6
    ecac:	480c      	ldr	r0, [pc, #48]	; (ece0 <hci_rx_thread+0x114>)
    ecae:	f00b fddf 	bl	1a870 <printk>
    ecb2:	4040      	eors	r0, r0
    ecb4:	f380 8811 	msr	BASEPRI, r0
    ecb8:	f04f 0003 	mov.w	r0, #3
    ecbc:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    ecbe:	2304      	movs	r3, #4
    ecc0:	4642      	mov	r2, r8
    ecc2:	4621      	mov	r1, r4
    ecc4:	7828      	ldrb	r0, [r5, #0]
    ecc6:	f7ff ff0b 	bl	eae0 <handle_event>
	net_buf_unref(buf);
    ecca:	e7b5      	b.n	ec38 <hci_rx_thread+0x6c>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    eccc:	2145      	movs	r1, #69	; 0x45
    ecce:	4807      	ldr	r0, [pc, #28]	; (ecec <hci_rx_thread+0x120>)
    ecd0:	e7bd      	b.n	ec4e <hci_rx_thread+0x82>
    ecd2:	bf00      	nop
    ecd4:	200080fc 	.word	0x200080fc
    ecd8:	0001ec40 	.word	0x0001ec40
    ecdc:	0002135f 	.word	0x0002135f
    ece0:	0001fdfa 	.word	0x0001fdfa
    ece4:	00021393 	.word	0x00021393
    ece8:	000213bc 	.word	0x000213bc
    ecec:	000213e3 	.word	0x000213e3

0000ecf0 <hci_cmd_done>:
{
    ecf0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    ecf4:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    ecf6:	7990      	ldrb	r0, [r2, #6]
{
    ecf8:	460f      	mov	r7, r1
    ecfa:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    ecfc:	f006 fbc2 	bl	15484 <net_buf_pool_get>
    ed00:	4d2a      	ldr	r5, [pc, #168]	; (edac <hci_cmd_done+0xbc>)
    ed02:	4285      	cmp	r5, r0
    ed04:	d00e      	beq.n	ed24 <hci_cmd_done+0x34>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    ed06:	79a4      	ldrb	r4, [r4, #6]
    ed08:	4620      	mov	r0, r4
    ed0a:	f006 fbbb 	bl	15484 <net_buf_pool_get>
    ed0e:	4623      	mov	r3, r4
    ed10:	e9cd 0500 	strd	r0, r5, [sp]
    ed14:	4632      	mov	r2, r6
    ed16:	2157      	movs	r1, #87	; 0x57
    ed18:	4825      	ldr	r0, [pc, #148]	; (edb0 <hci_cmd_done+0xc0>)
    ed1a:	f00b fda9 	bl	1a870 <printk>
}
    ed1e:	b002      	add	sp, #8
    ed20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    ed24:	4620      	mov	r0, r4
    ed26:	f006 fbb5 	bl	15494 <net_buf_id>
    ed2a:	f04f 080c 	mov.w	r8, #12
    ed2e:	4d21      	ldr	r5, [pc, #132]	; (edb4 <hci_cmd_done+0xc4>)
    ed30:	fb08 5000 	mla	r0, r8, r0, r5
    ed34:	8843      	ldrh	r3, [r0, #2]
    ed36:	42b3      	cmp	r3, r6
    ed38:	d00a      	beq.n	ed50 <hci_cmd_done+0x60>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    ed3a:	4620      	mov	r0, r4
    ed3c:	f006 fbaa 	bl	15494 <net_buf_id>
    ed40:	fb08 5000 	mla	r0, r8, r0, r5
    ed44:	4632      	mov	r2, r6
    ed46:	8843      	ldrh	r3, [r0, #2]
    ed48:	2157      	movs	r1, #87	; 0x57
    ed4a:	481b      	ldr	r0, [pc, #108]	; (edb8 <hci_cmd_done+0xc8>)
    ed4c:	f00b fd90 	bl	1a870 <printk>
	if (cmd(buf)->state && !status) {
    ed50:	4620      	mov	r0, r4
    ed52:	f006 fb9f 	bl	15494 <net_buf_id>
    ed56:	260c      	movs	r6, #12
    ed58:	fb06 5000 	mla	r0, r6, r0, r5
    ed5c:	6843      	ldr	r3, [r0, #4]
    ed5e:	b15b      	cbz	r3, ed78 <hci_cmd_done+0x88>
    ed60:	b957      	cbnz	r7, ed78 <hci_cmd_done+0x88>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    ed62:	4620      	mov	r0, r4
    ed64:	f006 fb96 	bl	15494 <net_buf_id>
    ed68:	fb06 5000 	mla	r0, r6, r0, r5
    ed6c:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    ed6e:	7a1a      	ldrb	r2, [r3, #8]
    ed70:	e9d3 0100 	ldrd	r0, r1, [r3]
    ed74:	f00d f8cc 	bl	1bf10 <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    ed78:	4620      	mov	r0, r4
    ed7a:	f006 fb8b 	bl	15494 <net_buf_id>
    ed7e:	260c      	movs	r6, #12
    ed80:	fb06 5000 	mla	r0, r6, r0, r5
    ed84:	6883      	ldr	r3, [r0, #8]
    ed86:	2b00      	cmp	r3, #0
    ed88:	d0c9      	beq.n	ed1e <hci_cmd_done+0x2e>
		cmd(buf)->status = status;
    ed8a:	4620      	mov	r0, r4
    ed8c:	f006 fb82 	bl	15494 <net_buf_id>
    ed90:	4370      	muls	r0, r6
    ed92:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    ed94:	4620      	mov	r0, r4
    ed96:	f006 fb7d 	bl	15494 <net_buf_id>
    ed9a:	fb06 5500 	mla	r5, r6, r0, r5
    ed9e:	68a8      	ldr	r0, [r5, #8]
}
    eda0:	b002      	add	sp, #8
    eda2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
    eda6:	f00a bb8b 	b.w	194c0 <z_impl_k_sem_give>
    edaa:	bf00      	nop
    edac:	20008754 	.word	0x20008754
    edb0:	000213fc 	.word	0x000213fc
    edb4:	2000ab60 	.word	0x2000ab60
    edb8:	00021436 	.word	0x00021436

0000edbc <hci_cmd_status>:
{
    edbc:	b538      	push	{r3, r4, r5, lr}
    edbe:	2104      	movs	r1, #4
    edc0:	4604      	mov	r4, r0
    edc2:	3008      	adds	r0, #8
    edc4:	f006 fdd6 	bl	15974 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    edc8:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    edca:	7801      	ldrb	r1, [r0, #0]
    edcc:	4622      	mov	r2, r4
    edce:	8840      	ldrh	r0, [r0, #2]
    edd0:	f7ff ff8e 	bl	ecf0 <hci_cmd_done>
	if (ncmd) {
    edd4:	b125      	cbz	r5, ede0 <hci_cmd_status+0x24>
}
    edd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    edda:	4802      	ldr	r0, [pc, #8]	; (ede4 <hci_cmd_status+0x28>)
    eddc:	f00a bb70 	b.w	194c0 <z_impl_k_sem_give>
    ede0:	bd38      	pop	{r3, r4, r5, pc}
    ede2:	bf00      	nop
    ede4:	200080e0 	.word	0x200080e0

0000ede8 <hci_cmd_complete>:
{
    ede8:	b538      	push	{r3, r4, r5, lr}
    edea:	2103      	movs	r1, #3
    edec:	4604      	mov	r4, r0
    edee:	3008      	adds	r0, #8
    edf0:	f006 fdc0 	bl	15974 <net_buf_simple_pull_mem>
	status = buf->data[0];
    edf4:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    edf6:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    edf8:	4622      	mov	r2, r4
    edfa:	7819      	ldrb	r1, [r3, #0]
    edfc:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    ee00:	f7ff ff76 	bl	ecf0 <hci_cmd_done>
	if (ncmd) {
    ee04:	b125      	cbz	r5, ee10 <hci_cmd_complete+0x28>
}
    ee06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ee0a:	4802      	ldr	r0, [pc, #8]	; (ee14 <hci_cmd_complete+0x2c>)
    ee0c:	f00a bb58 	b.w	194c0 <z_impl_k_sem_give>
    ee10:	bd38      	pop	{r3, r4, r5, pc}
    ee12:	bf00      	nop
    ee14:	200080e0 	.word	0x200080e0

0000ee18 <hci_num_completed_packets>:
{
    ee18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
    ee1c:	2500      	movs	r5, #0
			tx->pending_no_cb = 0U;
    ee1e:	46a8      	mov	r8, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    ee20:	6887      	ldr	r7, [r0, #8]
    ee22:	f8df 90dc 	ldr.w	r9, [pc, #220]	; ef00 <hci_num_completed_packets+0xe8>
	for (i = 0; i < evt->num_handles; i++) {
    ee26:	783b      	ldrb	r3, [r7, #0]
    ee28:	429d      	cmp	r5, r3
    ee2a:	db01      	blt.n	ee30 <hci_num_completed_packets+0x18>
}
    ee2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    ee30:	eb07 0385 	add.w	r3, r7, r5, lsl #2
    ee34:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    ee38:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    ee3c:	4650      	mov	r0, sl
    ee3e:	f002 fb31 	bl	114a4 <bt_conn_lookup_handle>
		if (!conn) {
    ee42:	4604      	mov	r4, r0
    ee44:	b1d0      	cbz	r0, ee7c <hci_num_completed_packets+0x64>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    ee46:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
    ee4a:	b37e      	cbz	r6, eeac <hci_num_completed_packets+0x94>
	__asm__ volatile(
    ee4c:	f04f 0320 	mov.w	r3, #32
    ee50:	f3ef 8211 	mrs	r2, BASEPRI
    ee54:	f383 8811 	msr	BASEPRI, r3
    ee58:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    ee5c:	69e3      	ldr	r3, [r4, #28]
    ee5e:	b1a3      	cbz	r3, ee8a <hci_num_completed_packets+0x72>
				conn->pending_no_cb--;
    ee60:	3b01      	subs	r3, #1
    ee62:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    ee64:	f382 8811 	msr	BASEPRI, r2
    ee68:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    ee6c:	4620      	mov	r0, r4
    ee6e:	f002 f933 	bl	110d8 <bt_conn_get_pkts>
    ee72:	3e01      	subs	r6, #1
    ee74:	f00a fb24 	bl	194c0 <z_impl_k_sem_give>
    ee78:	b2b6      	uxth	r6, r6
    ee7a:	e7e6      	b.n	ee4a <hci_num_completed_packets+0x32>
			BT_ERR("No connection for handle %u", handle);
    ee7c:	4652      	mov	r2, sl
    ee7e:	2145      	movs	r1, #69	; 0x45
    ee80:	4820      	ldr	r0, [pc, #128]	; (ef04 <hci_num_completed_packets+0xec>)
    ee82:	f00b fcf5 	bl	1a870 <printk>
	for (i = 0; i < evt->num_handles; i++) {
    ee86:	3501      	adds	r5, #1
    ee88:	e7cd      	b.n	ee26 <hci_num_completed_packets+0xe>
	return list->head;
    ee8a:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    ee8c:	b12b      	cbz	r3, ee9a <hci_num_completed_packets+0x82>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ee8e:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    ee90:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ee92:	428b      	cmp	r3, r1
	list->head = node;
    ee94:	6160      	str	r0, [r4, #20]
	list->tail = node;
    ee96:	bf08      	it	eq
    ee98:	61a0      	streq	r0, [r4, #24]
    ee9a:	f382 8811 	msr	BASEPRI, r2
    ee9e:	f3bf 8f6f 	isb	sy
			if (!node) {
    eea2:	b93b      	cbnz	r3, eeb4 <hci_num_completed_packets+0x9c>
				BT_ERR("packets count mismatch");
    eea4:	2145      	movs	r1, #69	; 0x45
    eea6:	4818      	ldr	r0, [pc, #96]	; (ef08 <hci_num_completed_packets+0xf0>)
    eea8:	f00b fce2 	bl	1a870 <printk>
		bt_conn_unref(conn);
    eeac:	4620      	mov	r0, r4
    eeae:	f002 fad5 	bl	1145c <bt_conn_unref>
    eeb2:	e7e8      	b.n	ee86 <hci_num_completed_packets+0x6e>
	__asm__ volatile(
    eeb4:	f04f 0220 	mov.w	r2, #32
    eeb8:	f3ef 8111 	mrs	r1, BASEPRI
    eebc:	f382 8811 	msr	BASEPRI, r2
    eec0:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    eec4:	68da      	ldr	r2, [r3, #12]
    eec6:	61e2      	str	r2, [r4, #28]
	return list->tail;
    eec8:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    eeca:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
    eece:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
    eed2:	b98a      	cbnz	r2, eef8 <hci_num_completed_packets+0xe0>
	list->head = node;
    eed4:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    eed8:	f381 8811 	msr	BASEPRI, r1
    eedc:	f3bf 8f6f 	isb	sy
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    eee0:	2101      	movs	r1, #1
    eee2:	f104 0030 	add.w	r0, r4, #48	; 0x30
    eee6:	f00c fffa 	bl	1bede <atomic_or>
    eeea:	07c3      	lsls	r3, r0, #31
    eeec:	d4be      	bmi.n	ee6c <hci_num_completed_packets+0x54>
		k_queue_append(&work_q->queue, work);
    eeee:	4651      	mov	r1, sl
    eef0:	4648      	mov	r0, r9
    eef2:	f00f f87a 	bl	1dfea <k_queue_append>
    eef6:	e7b9      	b.n	ee6c <hci_num_completed_packets+0x54>
	parent->next = child;
    eef8:	6013      	str	r3, [r2, #0]
	list->tail = node;
    eefa:	6263      	str	r3, [r4, #36]	; 0x24
}
    eefc:	e7ec      	b.n	eed8 <hci_num_completed_packets+0xc0>
    eefe:	bf00      	nop
    ef00:	2000a540 	.word	0x2000a540
    ef04:	0002146e 	.word	0x0002146e
    ef08:	0002148f 	.word	0x0002148f

0000ef0c <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    ef0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct adv_id_check_data check_data = {
    ef0e:	7803      	ldrb	r3, [r0, #0]
{
    ef10:	b087      	sub	sp, #28
	struct adv_id_check_data check_data = {
    ef12:	f88d 3004 	strb.w	r3, [sp, #4]
    ef16:	2300      	movs	r3, #0
	func(&bt_dev.adv, data);
    ef18:	4c24      	ldr	r4, [pc, #144]	; (efac <le_adv_start_add_conn+0xa0>)
{
    ef1a:	4605      	mov	r5, r0
    ef1c:	460f      	mov	r7, r1
	func(&bt_dev.adv, data);
    ef1e:	f104 0018 	add.w	r0, r4, #24
    ef22:	a901      	add	r1, sp, #4
	struct adv_id_check_data check_data = {
    ef24:	f88d 3005 	strb.w	r3, [sp, #5]
	func(&bt_dev.adv, data);
    ef28:	f00d f803 	bl	1bf32 <adv_id_check_connectable_func>
		.adv_enabled = false
	};
	struct bt_conn *conn;

	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
    ef2c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    ef30:	bb93      	cbnz	r3, ef98 <le_adv_start_add_conn+0x8c>
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    ef32:	462e      	mov	r6, r5
    ef34:	f816 2b09 	ldrb.w	r2, [r6], #9

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    ef38:	a902      	add	r1, sp, #8
    ef3a:	4630      	mov	r0, r6
	bt_dev.adv_conn_id = adv->id;
    ef3c:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    ef40:	9302      	str	r3, [sp, #8]
    ef42:	f8cd 300b 	str.w	r3, [sp, #11]
    ef46:	f00c ffd5 	bl	1bef4 <bt_addr_le_cmp>
    ef4a:	782a      	ldrb	r2, [r5, #0]
    ef4c:	4604      	mov	r4, r0
    ef4e:	b9a8      	cbnz	r0, ef7c <le_adv_start_add_conn+0x70>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    ef50:	4b17      	ldr	r3, [pc, #92]	; (efb0 <le_adv_start_add_conn+0xa4>)
    ef52:	6818      	ldr	r0, [r3, #0]
    ef54:	8899      	ldrh	r1, [r3, #4]
    ef56:	799b      	ldrb	r3, [r3, #6]
    ef58:	9004      	str	r0, [sp, #16]
    ef5a:	f8ad 1014 	strh.w	r1, [sp, #20]
    ef5e:	4610      	mov	r0, r2
    ef60:	a904      	add	r1, sp, #16
    ef62:	f88d 3016 	strb.w	r3, [sp, #22]
    ef66:	f002 fa4d 	bl	11404 <bt_conn_add_le>
		if (!conn) {
    ef6a:	4605      	mov	r5, r0
    ef6c:	b1d0      	cbz	r0, efa4 <le_adv_start_add_conn+0x98>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    ef6e:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    ef70:	f002 faa0 	bl	114b4 <bt_conn_set_state>
	*out_conn = conn;
    ef74:	603d      	str	r5, [r7, #0]
	return 0;
}
    ef76:	4620      	mov	r0, r4
    ef78:	b007      	add	sp, #28
    ef7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    ef7c:	4631      	mov	r1, r6
    ef7e:	4610      	mov	r0, r2
    ef80:	f002 fbb2 	bl	116e8 <bt_conn_exists_le>
    ef84:	4604      	mov	r4, r0
    ef86:	b950      	cbnz	r0, ef9e <le_adv_start_add_conn+0x92>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    ef88:	7828      	ldrb	r0, [r5, #0]
    ef8a:	4631      	mov	r1, r6
    ef8c:	f002 fa3a 	bl	11404 <bt_conn_add_le>
	if (!conn) {
    ef90:	4605      	mov	r5, r0
    ef92:	b138      	cbz	r0, efa4 <le_adv_start_add_conn+0x98>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    ef94:	2105      	movs	r1, #5
    ef96:	e7eb      	b.n	ef70 <le_adv_start_add_conn+0x64>
		return -ENOTSUP;
    ef98:	f06f 0422 	mvn.w	r4, #34	; 0x22
    ef9c:	e7eb      	b.n	ef76 <le_adv_start_add_conn+0x6a>
		return -EINVAL;
    ef9e:	f06f 0415 	mvn.w	r4, #21
    efa2:	e7e8      	b.n	ef76 <le_adv_start_add_conn+0x6a>
		return -ENOMEM;
    efa4:	f06f 040b 	mvn.w	r4, #11
    efa8:	e7e5      	b.n	ef76 <le_adv_start_add_conn+0x6a>
    efaa:	bf00      	nop
    efac:	20008000 	.word	0x20008000
    efb0:	0001e7e0 	.word	0x0001e7e0

0000efb4 <bt_hci_cmd_create>:
{
    efb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    efb8:	f04f 32ff 	mov.w	r2, #4294967295
    efbc:	4606      	mov	r6, r0
    efbe:	f04f 33ff 	mov.w	r3, #4294967295
    efc2:	481d      	ldr	r0, [pc, #116]	; (f038 <bt_hci_cmd_create+0x84>)
    efc4:	460f      	mov	r7, r1
    efc6:	f00e f9a7 	bl	1d318 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
    efca:	4604      	mov	r4, r0
    efcc:	b950      	cbnz	r0, efe4 <bt_hci_cmd_create+0x30>
    efce:	491b      	ldr	r1, [pc, #108]	; (f03c <bt_hci_cmd_create+0x88>)
    efd0:	481b      	ldr	r0, [pc, #108]	; (f040 <bt_hci_cmd_create+0x8c>)
    efd2:	f44f 7281 	mov.w	r2, #258	; 0x102
    efd6:	f00b fc4b 	bl	1a870 <printk>
    efda:	f44f 7181 	mov.w	r1, #258	; 0x102
    efde:	4817      	ldr	r0, [pc, #92]	; (f03c <bt_hci_cmd_create+0x88>)
    efe0:	f00b feec 	bl	1adbc <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    efe4:	f04f 0800 	mov.w	r8, #0
	net_buf_simple_reserve(&buf->b, reserve);
    efe8:	f104 0a08 	add.w	sl, r4, #8
    efec:	2101      	movs	r1, #1
    efee:	4650      	mov	r0, sl
    eff0:	f006 fb76 	bl	156e0 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
    eff4:	4620      	mov	r0, r4
    eff6:	f884 8014 	strb.w	r8, [r4, #20]
    effa:	f006 fa4b 	bl	15494 <net_buf_id>
    effe:	f04f 090c 	mov.w	r9, #12
    f002:	4d10      	ldr	r5, [pc, #64]	; (f044 <bt_hci_cmd_create+0x90>)
    f004:	fb09 5000 	mla	r0, r9, r0, r5
    f008:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    f00a:	4620      	mov	r0, r4
    f00c:	f006 fa42 	bl	15494 <net_buf_id>
    f010:	fb09 5000 	mla	r0, r9, r0, r5
    f014:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    f018:	4620      	mov	r0, r4
    f01a:	f006 fa3b 	bl	15494 <net_buf_id>
    f01e:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    f022:	2103      	movs	r1, #3
    f024:	4650      	mov	r0, sl
    f026:	f8c5 8004 	str.w	r8, [r5, #4]
    f02a:	f006 fcc1 	bl	159b0 <net_buf_simple_add>
	hdr->param_len = param_len;
    f02e:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    f030:	8006      	strh	r6, [r0, #0]
}
    f032:	4620      	mov	r0, r4
    f034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f038:	20008754 	.word	0x20008754
    f03c:	0002135f 	.word	0x0002135f
    f040:	0001fdfa 	.word	0x0001fdfa
    f044:	2000ab60 	.word	0x2000ab60

0000f048 <bt_hci_cmd_send_sync>:
{
    f048:	b5f0      	push	{r4, r5, r6, r7, lr}
    f04a:	4607      	mov	r7, r0
    f04c:	4615      	mov	r5, r2
	if (!buf) {
    f04e:	460c      	mov	r4, r1
{
    f050:	b087      	sub	sp, #28
	if (!buf) {
    f052:	b921      	cbnz	r1, f05e <bt_hci_cmd_send_sync+0x16>
		buf = bt_hci_cmd_create(opcode, 0);
    f054:	f7ff ffae 	bl	efb4 <bt_hci_cmd_create>
		if (!buf) {
    f058:	4604      	mov	r4, r0
    f05a:	2800      	cmp	r0, #0
    f05c:	d048      	beq.n	f0f0 <bt_hci_cmd_send_sync+0xa8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    f05e:	2201      	movs	r2, #1
    f060:	2100      	movs	r1, #0
    f062:	4668      	mov	r0, sp
    f064:	f00f f819 	bl	1e09a <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    f068:	4620      	mov	r0, r4
    f06a:	f006 fa13 	bl	15494 <net_buf_id>
    f06e:	230c      	movs	r3, #12
    f070:	4e21      	ldr	r6, [pc, #132]	; (f0f8 <bt_hci_cmd_send_sync+0xb0>)
    f072:	fb03 6000 	mla	r0, r3, r0, r6
    f076:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    f07a:	4620      	mov	r0, r4
    f07c:	f006 fbc6 	bl	1580c <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    f080:	4621      	mov	r1, r4
    f082:	481e      	ldr	r0, [pc, #120]	; (f0fc <bt_hci_cmd_send_sync+0xb4>)
    f084:	f006 fb50 	bl	15728 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    f088:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    f08c:	2300      	movs	r3, #0
    f08e:	4668      	mov	r0, sp
    f090:	f00a fa52 	bl	19538 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    f094:	b158      	cbz	r0, f0ae <bt_hci_cmd_send_sync+0x66>
    f096:	f240 124d 	movw	r2, #333	; 0x14d
    f09a:	4919      	ldr	r1, [pc, #100]	; (f100 <bt_hci_cmd_send_sync+0xb8>)
    f09c:	4819      	ldr	r0, [pc, #100]	; (f104 <bt_hci_cmd_send_sync+0xbc>)
    f09e:	f00b fbe7 	bl	1a870 <printk>
    f0a2:	4040      	eors	r0, r0
    f0a4:	f380 8811 	msr	BASEPRI, r0
    f0a8:	f04f 0003 	mov.w	r0, #3
    f0ac:	df02      	svc	2
	status = cmd(buf)->status;
    f0ae:	4620      	mov	r0, r4
    f0b0:	f006 f9f0 	bl	15494 <net_buf_id>
    f0b4:	230c      	movs	r3, #12
    f0b6:	4358      	muls	r0, r3
    f0b8:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
    f0ba:	b186      	cbz	r6, f0de <bt_hci_cmd_send_sync+0x96>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    f0bc:	4633      	mov	r3, r6
    f0be:	463a      	mov	r2, r7
    f0c0:	2157      	movs	r1, #87	; 0x57
    f0c2:	4811      	ldr	r0, [pc, #68]	; (f108 <bt_hci_cmd_send_sync+0xc0>)
    f0c4:	f00b fbd4 	bl	1a870 <printk>
		net_buf_unref(buf);
    f0c8:	4620      	mov	r0, r4
    f0ca:	f006 fb5b 	bl	15784 <net_buf_unref>
			return -EIO;
    f0ce:	2e09      	cmp	r6, #9
    f0d0:	bf0c      	ite	eq
    f0d2:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    f0d6:	f06f 0004 	mvnne.w	r0, #4
}
    f0da:	b007      	add	sp, #28
    f0dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    f0de:	b115      	cbz	r5, f0e6 <bt_hci_cmd_send_sync+0x9e>
	return 0;
    f0e0:	4630      	mov	r0, r6
		*rsp = buf;
    f0e2:	602c      	str	r4, [r5, #0]
    f0e4:	e7f9      	b.n	f0da <bt_hci_cmd_send_sync+0x92>
		net_buf_unref(buf);
    f0e6:	4620      	mov	r0, r4
    f0e8:	f006 fb4c 	bl	15784 <net_buf_unref>
	return 0;
    f0ec:	4628      	mov	r0, r5
    f0ee:	e7f4      	b.n	f0da <bt_hci_cmd_send_sync+0x92>
			return -ENOBUFS;
    f0f0:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f0f4:	e7f1      	b.n	f0da <bt_hci_cmd_send_sync+0x92>
    f0f6:	bf00      	nop
    f0f8:	2000ab60 	.word	0x2000ab60
    f0fc:	20008118 	.word	0x20008118
    f100:	0002135f 	.word	0x0002135f
    f104:	0001fdfa 	.word	0x0001fdfa
    f108:	000214ab 	.word	0x000214ab

0000f10c <hci_le_read_max_data_len>:
{
    f10c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f10e:	4606      	mov	r6, r0
    f110:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    f112:	f242 002f 	movw	r0, #8239	; 0x202f
    f116:	2100      	movs	r1, #0
    f118:	aa01      	add	r2, sp, #4
    f11a:	f7ff ff95 	bl	f048 <bt_hci_cmd_send_sync>
	if (err) {
    f11e:	4604      	mov	r4, r0
    f120:	b130      	cbz	r0, f130 <hci_le_read_max_data_len+0x24>
		BT_ERR("Failed to read DLE max data len");
    f122:	2145      	movs	r1, #69	; 0x45
    f124:	4808      	ldr	r0, [pc, #32]	; (f148 <hci_le_read_max_data_len+0x3c>)
    f126:	f00b fba3 	bl	1a870 <printk>
}
    f12a:	4620      	mov	r0, r4
    f12c:	b002      	add	sp, #8
    f12e:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    f130:	9801      	ldr	r0, [sp, #4]
    f132:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    f134:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    f138:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    f13a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    f13e:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    f140:	f006 fb20 	bl	15784 <net_buf_unref>
	return 0;
    f144:	e7f1      	b.n	f12a <hci_le_read_max_data_len+0x1e>
    f146:	bf00      	nop
    f148:	000214cc 	.word	0x000214cc

0000f14c <set_random_address>:
{
    f14c:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    f14e:	4e15      	ldr	r6, [pc, #84]	; (f1a4 <set_random_address+0x58>)
    f150:	2206      	movs	r2, #6
    f152:	f106 012d 	add.w	r1, r6, #45	; 0x2d
    f156:	4605      	mov	r5, r0
    f158:	f00c fdbd 	bl	1bcd6 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    f15c:	4604      	mov	r4, r0
    f15e:	b1e0      	cbz	r0, f19a <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    f160:	2106      	movs	r1, #6
    f162:	f242 0005 	movw	r0, #8197	; 0x2005
    f166:	f7ff ff25 	bl	efb4 <bt_hci_cmd_create>
	if (!buf) {
    f16a:	4604      	mov	r4, r0
    f16c:	b1b8      	cbz	r0, f19e <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f16e:	2206      	movs	r2, #6
    f170:	4629      	mov	r1, r5
    f172:	3008      	adds	r0, #8
    f174:	f00e f8fe 	bl	1d374 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    f178:	4621      	mov	r1, r4
    f17a:	2200      	movs	r2, #0
    f17c:	f242 0005 	movw	r0, #8197	; 0x2005
    f180:	f7ff ff62 	bl	f048 <bt_hci_cmd_send_sync>
	if (err) {
    f184:	4604      	mov	r4, r0
    f186:	b940      	cbnz	r0, f19a <set_random_address+0x4e>
	memcpy(dst, src, sizeof(*dst));
    f188:	2206      	movs	r2, #6
    f18a:	4629      	mov	r1, r5
    f18c:	f106 002d 	add.w	r0, r6, #45	; 0x2d
    f190:	f00c fdb2 	bl	1bcf8 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    f194:	2301      	movs	r3, #1
    f196:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
}
    f19a:	4620      	mov	r0, r4
    f19c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    f19e:	f06f 0436 	mvn.w	r4, #54	; 0x36
    f1a2:	e7fa      	b.n	f19a <set_random_address+0x4e>
    f1a4:	20008000 	.word	0x20008000

0000f1a8 <set_le_scan_enable_legacy>:
{
    f1a8:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    f1aa:	2102      	movs	r1, #2
{
    f1ac:	4604      	mov	r4, r0
    f1ae:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    f1b0:	f242 000c 	movw	r0, #8204	; 0x200c
    f1b4:	f7ff fefe 	bl	efb4 <bt_hci_cmd_create>
	if (!buf) {
    f1b8:	4605      	mov	r5, r0
    f1ba:	b348      	cbz	r0, f210 <set_le_scan_enable_legacy+0x68>
	return net_buf_simple_add(&buf->b, len);
    f1bc:	2102      	movs	r1, #2
    f1be:	3008      	adds	r0, #8
    f1c0:	f006 fbf6 	bl	159b0 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    f1c4:	2c01      	cmp	r4, #1
    f1c6:	4603      	mov	r3, r0
    f1c8:	d11f      	bne.n	f20a <set_le_scan_enable_legacy+0x62>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f1ca:	4813      	ldr	r0, [pc, #76]	; (f218 <set_le_scan_enable_legacy+0x70>)
    f1cc:	f00c fe81 	bl	1bed2 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    f1d0:	f3c0 2000 	ubfx	r0, r0, #8, #1
    f1d4:	7058      	strb	r0, [r3, #1]
	cp->enable = enable;
    f1d6:	701c      	strb	r4, [r3, #0]
/* Initialize command state instance */
static inline void bt_hci_cmd_state_set_init(struct bt_hci_cmd_state_set *state,
					     atomic_t *target, int bit,
					     bool val)
{
	state->target = target;
    f1d8:	4b0f      	ldr	r3, [pc, #60]	; (f218 <set_le_scan_enable_legacy+0x70>)
	cmd(buf)->state = &state;
    f1da:	4628      	mov	r0, r5
    f1dc:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    f1de:	2305      	movs	r3, #5
	bt_hci_cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    f1e0:	f004 0401 	and.w	r4, r4, #1
    f1e4:	9302      	str	r3, [sp, #8]
    f1e6:	f88d 400c 	strb.w	r4, [sp, #12]
	cmd(buf)->state = &state;
    f1ea:	f006 f953 	bl	15494 <net_buf_id>
    f1ee:	220c      	movs	r2, #12
    f1f0:	4b0a      	ldr	r3, [pc, #40]	; (f21c <set_le_scan_enable_legacy+0x74>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    f1f2:	4629      	mov	r1, r5
	cmd(buf)->state = &state;
    f1f4:	fb02 3300 	mla	r3, r2, r0, r3
    f1f8:	aa01      	add	r2, sp, #4
    f1fa:	605a      	str	r2, [r3, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    f1fc:	f242 000c 	movw	r0, #8204	; 0x200c
    f200:	2200      	movs	r2, #0
    f202:	f7ff ff21 	bl	f048 <bt_hci_cmd_send_sync>
}
    f206:	b005      	add	sp, #20
    f208:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    f20a:	2200      	movs	r2, #0
    f20c:	7042      	strb	r2, [r0, #1]
    f20e:	e7e2      	b.n	f1d6 <set_le_scan_enable_legacy+0x2e>
		return -ENOBUFS;
    f210:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f214:	e7f7      	b.n	f206 <set_le_scan_enable_legacy+0x5e>
    f216:	bf00      	nop
    f218:	20008094 	.word	0x20008094
    f21c:	2000ab60 	.word	0x2000ab60

0000f220 <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    f220:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    f224:	4605      	mov	r5, r0
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    f226:	f011 0001 	ands.w	r0, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    f22a:	460e      	mov	r6, r1
    f22c:	4691      	mov	r9, r2
    f22e:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    f230:	d02c      	beq.n	f28c <le_adv_set_random_addr.isra.0+0x6c>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    f232:	f8df 80e0 	ldr.w	r8, [pc, #224]	; f314 <le_adv_set_random_addr.isra.0+0xf4>
    f236:	b12a      	cbz	r2, f244 <le_adv_set_random_addr.isra.0+0x24>
    f238:	068c      	lsls	r4, r1, #26
    f23a:	d503      	bpl.n	f244 <le_adv_set_random_addr.isra.0+0x24>
    f23c:	f898 3098 	ldrb.w	r3, [r8, #152]	; 0x98
    f240:	0658      	lsls	r0, r3, #25
    f242:	d563      	bpl.n	f30c <le_adv_set_random_addr.isra.0+0xec>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    f244:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    f248:	f818 3003 	ldrb.w	r3, [r8, r3]
    f24c:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
    f250:	2b01      	cmp	r3, #1
    f252:	d009      	beq.n	f268 <le_adv_set_random_addr.isra.0+0x48>
			*own_addr_type = id_addr->type;
    f254:	ebaa 0505 	sub.w	r5, sl, r5
    f258:	f818 3005 	ldrb.w	r3, [r8, r5]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    f25c:	f1b9 0f00 	cmp.w	r9, #0
    f260:	d10f      	bne.n	f282 <le_adv_set_random_addr.isra.0+0x62>
	return 0;
    f262:	2400      	movs	r4, #0
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    f264:	703b      	strb	r3, [r7, #0]
    f266:	e008      	b.n	f27a <le_adv_set_random_addr.isra.0+0x5a>
				err = set_adv_random_address(adv, &id_addr->a);
    f268:	2007      	movs	r0, #7
    f26a:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    f26e:	4440      	add	r0, r8
    f270:	f7ff ff6c 	bl	f14c <set_random_address>
				if (err) {
    f274:	4604      	mov	r4, r0
    f276:	2800      	cmp	r0, #0
    f278:	d0ec      	beq.n	f254 <le_adv_set_random_addr.isra.0+0x34>
}
    f27a:	4620      	mov	r0, r4
    f27c:	b002      	add	sp, #8
    f27e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    f282:	06b1      	lsls	r1, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    f284:	bf48      	it	mi
    f286:	f043 0302 	orrmi.w	r3, r3, #2
    f28a:	e7ea      	b.n	f262 <le_adv_set_random_addr.isra.0+0x42>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    f28c:	f011 0604 	ands.w	r6, r1, #4
    f290:	d014      	beq.n	f2bc <le_adv_set_random_addr.isra.0+0x9c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    f292:	f8df 8080 	ldr.w	r8, [pc, #128]	; f314 <le_adv_set_random_addr.isra.0+0xf4>
    f296:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    f29a:	f818 3003 	ldrb.w	r3, [r8, r3]
    f29e:	00ee      	lsls	r6, r5, #3
    f2a0:	2b01      	cmp	r3, #1
    f2a2:	d105      	bne.n	f2b0 <le_adv_set_random_addr.isra.0+0x90>
				err = set_adv_random_address(adv, &id_addr->a);
    f2a4:	2007      	movs	r0, #7
    f2a6:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    f2aa:	4440      	add	r0, r8
    f2ac:	f7ff ff4e 	bl	f14c <set_random_address>
			*own_addr_type = id_addr->type;
    f2b0:	1b75      	subs	r5, r6, r5
    f2b2:	f818 3005 	ldrb.w	r3, [r8, r5]
	int err = 0;
    f2b6:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
    f2b8:	703b      	strb	r3, [r7, #0]
    f2ba:	e7de      	b.n	f27a <le_adv_set_random_addr.isra.0+0x5a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f2bc:	4816      	ldr	r0, [pc, #88]	; (f318 <le_adv_set_random_addr.isra.0+0xf8>)
    f2be:	f00c fe08 	bl	1bed2 <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    f2c2:	0682      	lsls	r2, r0, #26
    f2c4:	d417      	bmi.n	f2f6 <le_adv_set_random_addr.isra.0+0xd6>
			bool scan_enabled = false;
    f2c6:	2500      	movs	r5, #0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    f2c8:	2106      	movs	r1, #6
    f2ca:	4668      	mov	r0, sp
    f2cc:	f001 fe2a 	bl	10f24 <bt_rand>
	if (err) {
    f2d0:	4604      	mov	r4, r0
    f2d2:	b948      	cbnz	r0, f2e8 <le_adv_set_random_addr.isra.0+0xc8>
	BT_ADDR_SET_NRPA(&nrpa);
    f2d4:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
    f2d8:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
    f2da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    f2de:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
    f2e2:	f7ff ff33 	bl	f14c <set_random_address>
    f2e6:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    f2e8:	2001      	movs	r0, #1
    f2ea:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
    f2ec:	2d00      	cmp	r5, #0
    f2ee:	d0c4      	beq.n	f27a <le_adv_set_random_addr.isra.0+0x5a>
	return set_le_scan_enable_legacy(enable);
    f2f0:	f7ff ff5a 	bl	f1a8 <set_le_scan_enable_legacy>
		if (err) {
    f2f4:	e7c1      	b.n	f27a <le_adv_set_random_addr.isra.0+0x5a>
    f2f6:	4808      	ldr	r0, [pc, #32]	; (f318 <le_adv_set_random_addr.isra.0+0xf8>)
    f2f8:	f00c fdeb 	bl	1bed2 <atomic_get>
			    atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    f2fc:	0603      	lsls	r3, r0, #24
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    f2fe:	f3c0 15c0 	ubfx	r5, r0, #7, #1
    f302:	d5e0      	bpl.n	f2c6 <le_adv_set_random_addr.isra.0+0xa6>
	return set_le_scan_enable_legacy(enable);
    f304:	4630      	mov	r0, r6
    f306:	f7ff ff4f 	bl	f1a8 <set_le_scan_enable_legacy>
    f30a:	e7dd      	b.n	f2c8 <le_adv_set_random_addr.isra.0+0xa8>
			return -ENOTSUP;
    f30c:	f06f 0422 	mvn.w	r4, #34	; 0x22
    f310:	e7b3      	b.n	f27a <le_adv_set_random_addr.isra.0+0x5a>
    f312:	bf00      	nop
    f314:	20008000 	.word	0x20008000
    f318:	20008094 	.word	0x20008094

0000f31c <hci_set_ad>:
{
    f31c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f320:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    f322:	2120      	movs	r1, #32
{
    f324:	4682      	mov	sl, r0
    f326:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    f328:	f7ff fe44 	bl	efb4 <bt_hci_cmd_create>
	if (!buf) {
    f32c:	4606      	mov	r6, r0
    f32e:	2800      	cmp	r0, #0
    f330:	d056      	beq.n	f3e0 <hci_set_ad+0xc4>
    f332:	2120      	movs	r1, #32
    f334:	3008      	adds	r0, #8
    f336:	f006 fb3b 	bl	159b0 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    f33a:	2220      	movs	r2, #32
    f33c:	4681      	mov	r9, r0
    f33e:	2100      	movs	r1, #0
    f340:	f00c fd05 	bl	1bd4e <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    f344:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
	uint8_t set_data_len = 0;
    f348:	2500      	movs	r5, #0
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    f34a:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    f34e:	9300      	str	r3, [sp, #0]
		for (size_t j = 0; j < ad[i].len; j++) {
    f350:	2300      	movs	r3, #0
    f352:	f8d4 8000 	ldr.w	r8, [r4]
    f356:	6862      	ldr	r2, [r4, #4]
    f358:	4293      	cmp	r3, r2
    f35a:	d30d      	bcc.n	f378 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    f35c:	9b00      	ldr	r3, [sp, #0]
    f35e:	3408      	adds	r4, #8
    f360:	429c      	cmp	r4, r3
    f362:	d1f5      	bne.n	f350 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    f364:	2200      	movs	r2, #0
    f366:	4631      	mov	r1, r6
    f368:	4650      	mov	r0, sl
	*data_len = set_data_len;
    f36a:	f889 5000 	strb.w	r5, [r9]
}
    f36e:	b003      	add	sp, #12
    f370:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    f374:	f7ff be68 	b.w	f048 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    f378:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    f37c:	1ca8      	adds	r0, r5, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
    f37e:	1881      	adds	r1, r0, r2
    f380:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
    f382:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    f386:	d914      	bls.n	f3b2 <hci_set_ad+0x96>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    f388:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    f38c:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    f390:	d101      	bne.n	f396 <hci_set_ad+0x7a>
    f392:	2a00      	cmp	r2, #0
    f394:	dc0b      	bgt.n	f3ae <hci_set_ad+0x92>
					BT_ERR("Too big advertising data");
    f396:	2145      	movs	r1, #69	; 0x45
    f398:	4813      	ldr	r0, [pc, #76]	; (f3e8 <hci_set_ad+0xcc>)
    f39a:	f00b fa69 	bl	1a870 <printk>
		net_buf_unref(buf);
    f39e:	4630      	mov	r0, r6
    f3a0:	f006 f9f0 	bl	15784 <net_buf_unref>
					return -EINVAL;
    f3a4:	f06f 0015 	mvn.w	r0, #21
}
    f3a8:	b003      	add	sp, #12
    f3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    f3ae:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    f3b2:	b2d7      	uxtb	r7, r2
    f3b4:	1c79      	adds	r1, r7, #1
    f3b6:	f80b 1005 	strb.w	r1, [fp, r5]
    f3ba:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    f3bc:	b2c9      	uxtb	r1, r1
    f3be:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    f3c2:	f8d8 1004 	ldr.w	r1, [r8, #4]
    f3c6:	fa5b f080 	uxtab	r0, fp, r0
    f3ca:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    f3cc:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    f3ce:	f00c fc93 	bl	1bcf8 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    f3d2:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    f3d4:	443d      	add	r5, r7
    f3d6:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    f3d8:	3301      	adds	r3, #1
    f3da:	f108 0808 	add.w	r8, r8, #8
    f3de:	e7ba      	b.n	f356 <hci_set_ad+0x3a>
		return -ENOBUFS;
    f3e0:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f3e4:	e7e0      	b.n	f3a8 <hci_set_ad+0x8c>
    f3e6:	bf00      	nop
    f3e8:	000214f1 	.word	0x000214f1

0000f3ec <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    f3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f3f0:	b087      	sub	sp, #28
    f3f2:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    f3f6:	4606      	mov	r6, r0
    f3f8:	460c      	mov	r4, r1
    f3fa:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
    f3fc:	2100      	movs	r1, #0
    f3fe:	2210      	movs	r2, #16
    f400:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    f402:	461d      	mov	r5, r3
    f404:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    f408:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
    f40c:	f00c fc9f 	bl	1bd4e <memset>
	if (use_name) {
    f410:	f1b8 0f00 	cmp.w	r8, #0
    f414:	d00e      	beq.n	f434 <le_adv_update.constprop.0+0x48>
		if ((ad && ad_has_name(ad, ad_len)) ||
    f416:	bbb4      	cbnz	r4, f486 <le_adv_update.constprop.0+0x9a>
    f418:	2d00      	cmp	r5, #0
    f41a:	d13f      	bne.n	f49c <le_adv_update.constprop.0+0xb0>
		data = (struct bt_data)BT_DATA(
    f41c:	f8df b0b0 	ldr.w	fp, [pc, #176]	; f4d0 <le_adv_update.constprop.0+0xe4>
    f420:	4658      	mov	r0, fp
    f422:	f00c fc2b 	bl	1bc7c <strlen>
    f426:	2309      	movs	r3, #9
    f428:	f88d 0001 	strb.w	r0, [sp, #1]
    f42c:	f88d 3000 	strb.w	r3, [sp]
    f430:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
    f434:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
    f438:	f1b8 0f00 	cmp.w	r8, #0
    f43c:	d030      	beq.n	f4a0 <le_adv_update.constprop.0+0xb4>
    f43e:	f1ba 0f00 	cmp.w	sl, #0
    f442:	d12d      	bne.n	f4a0 <le_adv_update.constprop.0+0xb4>
			d[1].len = 1;
    f444:	2301      	movs	r3, #1
			d_len = 2;
    f446:	2202      	movs	r2, #2
			d[1].data = &data;
    f448:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
    f44c:	9305      	str	r3, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    f44e:	f242 0008 	movw	r0, #8200	; 0x2008
    f452:	a902      	add	r1, sp, #8
    f454:	f7ff ff62 	bl	f31c <hci_set_ad>
		if (err) {
    f458:	4604      	mov	r4, r0
    f45a:	b938      	cbnz	r0, f46c <le_adv_update.constprop.0+0x80>
	if (scannable) {
    f45c:	f1ba 0f00 	cmp.w	sl, #0
    f460:	d120      	bne.n	f4a4 <le_adv_update.constprop.0+0xb8>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f462:	2104      	movs	r1, #4
    f464:	f106 0010 	add.w	r0, r6, #16
    f468:	f00c fd39 	bl	1bede <atomic_or>
}
    f46c:	4620      	mov	r0, r4
    f46e:	b007      	add	sp, #28
    f470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    f474:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    f478:	3a08      	subs	r2, #8
    f47a:	2a01      	cmp	r2, #1
    f47c:	d925      	bls.n	f4ca <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    f47e:	3301      	adds	r3, #1
    f480:	429f      	cmp	r7, r3
    f482:	d1f7      	bne.n	f474 <le_adv_update.constprop.0+0x88>
    f484:	e7c8      	b.n	f418 <le_adv_update.constprop.0+0x2c>
    f486:	2300      	movs	r3, #0
    f488:	e7fa      	b.n	f480 <le_adv_update.constprop.0+0x94>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    f48a:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    f48e:	3a08      	subs	r2, #8
    f490:	2a01      	cmp	r2, #1
    f492:	d91a      	bls.n	f4ca <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    f494:	3301      	adds	r3, #1
    f496:	4599      	cmp	r9, r3
    f498:	d1f7      	bne.n	f48a <le_adv_update.constprop.0+0x9e>
    f49a:	e7bf      	b.n	f41c <le_adv_update.constprop.0+0x30>
    f49c:	2300      	movs	r3, #0
    f49e:	e7fa      	b.n	f496 <le_adv_update.constprop.0+0xaa>
		d_len = 1;
    f4a0:	2201      	movs	r2, #1
    f4a2:	e7d4      	b.n	f44e <le_adv_update.constprop.0+0x62>
		d[0].data = sd;
    f4a4:	2201      	movs	r2, #1
		d[0].len = sd_len;
    f4a6:	e9cd 5902 	strd	r5, r9, [sp, #8]
		if (use_name) {
    f4aa:	f1b8 0f00 	cmp.w	r8, #0
    f4ae:	d003      	beq.n	f4b8 <le_adv_update.constprop.0+0xcc>
			d[1].len = 1;
    f4b0:	9205      	str	r2, [sp, #20]
			d_len = 2;
    f4b2:	2202      	movs	r2, #2
			d[1].data = &data;
    f4b4:	f8cd d010 	str.w	sp, [sp, #16]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    f4b8:	f242 0009 	movw	r0, #8201	; 0x2009
    f4bc:	a902      	add	r1, sp, #8
    f4be:	f7ff ff2d 	bl	f31c <hci_set_ad>
		if (err) {
    f4c2:	2800      	cmp	r0, #0
    f4c4:	d0cd      	beq.n	f462 <le_adv_update.constprop.0+0x76>
    f4c6:	4604      	mov	r4, r0
    f4c8:	e7d0      	b.n	f46c <le_adv_update.constprop.0+0x80>
			return -EINVAL;
    f4ca:	f06f 0415 	mvn.w	r4, #21
    f4ce:	e7cd      	b.n	f46c <le_adv_update.constprop.0+0x80>
    f4d0:	0001f87d 	.word	0x0001f87d

0000f4d4 <set_le_adv_enable_legacy>:
{
    f4d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f4d6:	4606      	mov	r6, r0
    f4d8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    f4da:	f242 000a 	movw	r0, #8202	; 0x200a
    f4de:	2101      	movs	r1, #1
    f4e0:	f7ff fd68 	bl	efb4 <bt_hci_cmd_create>
	if (!buf) {
    f4e4:	4604      	mov	r4, r0
    f4e6:	b1e8      	cbz	r0, f524 <set_le_adv_enable_legacy+0x50>
	return net_buf_simple_add_u8(&buf->b, val);
    f4e8:	3008      	adds	r0, #8
	if (enable) {
    f4ea:	b1cd      	cbz	r5, f520 <set_le_adv_enable_legacy+0x4c>
    f4ec:	2101      	movs	r1, #1
    f4ee:	f00d ff4d 	bl	1d38c <net_buf_simple_add_u8>
    f4f2:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    f4f4:	4620      	mov	r0, r4
	bt_hci_cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    f4f6:	3610      	adds	r6, #16
    f4f8:	9302      	str	r3, [sp, #8]
	state->target = target;
    f4fa:	9601      	str	r6, [sp, #4]
	state->val = val;
    f4fc:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    f500:	f005 ffc8 	bl	15494 <net_buf_id>
    f504:	220c      	movs	r2, #12
    f506:	4b09      	ldr	r3, [pc, #36]	; (f52c <set_le_adv_enable_legacy+0x58>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    f508:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    f50a:	fb02 3300 	mla	r3, r2, r0, r3
    f50e:	aa01      	add	r2, sp, #4
    f510:	605a      	str	r2, [r3, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    f512:	f242 000a 	movw	r0, #8202	; 0x200a
    f516:	2200      	movs	r2, #0
    f518:	f7ff fd96 	bl	f048 <bt_hci_cmd_send_sync>
}
    f51c:	b004      	add	sp, #16
    f51e:	bd70      	pop	{r4, r5, r6, pc}
    f520:	4629      	mov	r1, r5
    f522:	e7e4      	b.n	f4ee <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    f524:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f528:	e7f8      	b.n	f51c <set_le_adv_enable_legacy+0x48>
    f52a:	bf00      	nop
    f52c:	2000ab60 	.word	0x2000ab60

0000f530 <start_le_scan_legacy>:
{
    f530:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f532:	460e      	mov	r6, r1
    f534:	4605      	mov	r5, r0
    f536:	4614      	mov	r4, r2
	(void)memset(&set_param, 0, sizeof(set_param));
    f538:	2100      	movs	r1, #0
    f53a:	2207      	movs	r2, #7
    f53c:	4668      	mov	r0, sp
    f53e:	f00c fc06 	bl	1bd4e <memset>
	set_param.interval = sys_cpu_to_le16(interval);
    f542:	f8ad 6001 	strh.w	r6, [sp, #1]
		*own_addr_type = bt_dev.id_addr[0].type;
    f546:	4e26      	ldr	r6, [pc, #152]	; (f5e0 <start_le_scan_legacy+0xb0>)
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    f548:	2300      	movs	r3, #0
		*own_addr_type = bt_dev.id_addr[0].type;
    f54a:	4630      	mov	r0, r6
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    f54c:	f88d 3006 	strb.w	r3, [sp, #6]
		*own_addr_type = bt_dev.id_addr[0].type;
    f550:	f810 3b28 	ldrb.w	r3, [r0], #40
	set_param.scan_type = scan_type;
    f554:	f88d 5000 	strb.w	r5, [sp]
	set_param.window = sys_cpu_to_le16(window);
    f558:	f8ad 4003 	strh.w	r4, [sp, #3]
		*own_addr_type = bt_dev.id_addr[0].type;
    f55c:	f88d 3005 	strb.w	r3, [sp, #5]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f560:	f00c fcb7 	bl	1bed2 <atomic_get>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    f564:	0641      	lsls	r1, r0, #25
    f566:	d413      	bmi.n	f590 <start_le_scan_legacy+0x60>
			err = le_set_private_addr(BT_ID_DEFAULT);
    f568:	f00c fcf8 	bl	1bf5c <le_set_private_addr.constprop.0>
			if (err) {
    f56c:	4604      	mov	r4, r0
    f56e:	b160      	cbz	r0, f58a <start_le_scan_legacy+0x5a>
				if (active_scan || !is_adv_using_rand_addr()) {
    f570:	2d01      	cmp	r5, #1
    f572:	d02e      	beq.n	f5d2 <start_le_scan_legacy+0xa2>
    f574:	f106 0028 	add.w	r0, r6, #40	; 0x28
    f578:	f00c fcab 	bl	1bed2 <atomic_get>
    f57c:	0642      	lsls	r2, r0, #25
    f57e:	d528      	bpl.n	f5d2 <start_le_scan_legacy+0xa2>
					BT_WARN("Ignoring failure to set "
    f580:	4622      	mov	r2, r4
    f582:	2157      	movs	r1, #87	; 0x57
    f584:	4817      	ldr	r0, [pc, #92]	; (f5e4 <start_le_scan_legacy+0xb4>)
    f586:	f00b f973 	bl	1a870 <printk>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    f58a:	2301      	movs	r3, #1
    f58c:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    f590:	2107      	movs	r1, #7
    f592:	f242 000b 	movw	r0, #8203	; 0x200b
    f596:	f7ff fd0d 	bl	efb4 <bt_hci_cmd_create>
	if (!buf) {
    f59a:	4604      	mov	r4, r0
    f59c:	b1e0      	cbz	r0, f5d8 <start_le_scan_legacy+0xa8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f59e:	2207      	movs	r2, #7
    f5a0:	4669      	mov	r1, sp
    f5a2:	3008      	adds	r0, #8
    f5a4:	f00d fee6 	bl	1d374 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    f5a8:	4621      	mov	r1, r4
    f5aa:	2200      	movs	r2, #0
    f5ac:	f242 000b 	movw	r0, #8203	; 0x200b
    f5b0:	f7ff fd4a 	bl	f048 <bt_hci_cmd_send_sync>
	if (err) {
    f5b4:	4604      	mov	r4, r0
    f5b6:	b960      	cbnz	r0, f5d2 <start_le_scan_legacy+0xa2>
	return set_le_scan_enable_legacy(enable);
    f5b8:	2001      	movs	r0, #1
    f5ba:	f7ff fdf5 	bl	f1a8 <set_le_scan_enable_legacy>
	if (err) {
    f5be:	4604      	mov	r4, r0
    f5c0:	b938      	cbnz	r0, f5d2 <start_le_scan_legacy+0xa2>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
    f5c2:	1e6b      	subs	r3, r5, #1
    f5c4:	425a      	negs	r2, r3
    f5c6:	f04f 0107 	mov.w	r1, #7
    f5ca:	4807      	ldr	r0, [pc, #28]	; (f5e8 <start_le_scan_legacy+0xb8>)
    f5cc:	415a      	adcs	r2, r3
    f5ce:	f00c fc9f 	bl	1bf10 <atomic_set_bit_to>
}
    f5d2:	4620      	mov	r0, r4
    f5d4:	b002      	add	sp, #8
    f5d6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    f5d8:	f06f 0436 	mvn.w	r4, #54	; 0x36
    f5dc:	e7f9      	b.n	f5d2 <start_le_scan_legacy+0xa2>
    f5de:	bf00      	nop
    f5e0:	20008000 	.word	0x20008000
    f5e4:	0002150f 	.word	0x0002150f
    f5e8:	20008094 	.word	0x20008094

0000f5ec <bt_le_scan_random_addr_check>:
{
    f5ec:	b508      	push	{r3, lr}
    f5ee:	4802      	ldr	r0, [pc, #8]	; (f5f8 <bt_le_scan_random_addr_check+0xc>)
    f5f0:	f00c fc6f 	bl	1bed2 <atomic_get>
}
    f5f4:	2001      	movs	r0, #1
    f5f6:	bd08      	pop	{r3, pc}
    f5f8:	20008028 	.word	0x20008028

0000f5fc <bt_le_create_conn_legacy>:
{
    f5fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		if (addr->type == BT_ADDR_LE_RANDOM) {
    f600:	4f2b      	ldr	r7, [pc, #172]	; (f6b0 <bt_le_create_conn_legacy+0xb4>)
{
    f602:	4605      	mov	r5, r0
		if (addr->type == BT_ADDR_LE_RANDOM) {
    f604:	783b      	ldrb	r3, [r7, #0]
    f606:	2b01      	cmp	r3, #1
    f608:	d00b      	beq.n	f622 <bt_le_create_conn_legacy+0x26>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    f60a:	2119      	movs	r1, #25
    f60c:	f242 000d 	movw	r0, #8205	; 0x200d
		*own_addr_type = addr->type;
    f610:	f897 8000 	ldrb.w	r8, [r7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    f614:	f7ff fcce 	bl	efb4 <bt_hci_cmd_create>
	if (!buf) {
    f618:	4606      	mov	r6, r0
    f61a:	b950      	cbnz	r0, f632 <bt_le_create_conn_legacy+0x36>
		return -ENOBUFS;
    f61c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f620:	e004      	b.n	f62c <bt_le_create_conn_legacy+0x30>
			err = set_random_address(&addr->a);
    f622:	1c78      	adds	r0, r7, #1
    f624:	f7ff fd92 	bl	f14c <set_random_address>
			if (err) {
    f628:	2800      	cmp	r0, #0
    f62a:	d0ee      	beq.n	f60a <bt_le_create_conn_legacy+0xe>
}
    f62c:	b004      	add	sp, #16
    f62e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    f632:	2119      	movs	r1, #25
    f634:	3008      	adds	r0, #8
    f636:	f006 f9bb 	bl	159b0 <net_buf_simple_add>
    f63a:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    f63c:	2219      	movs	r2, #25
    f63e:	2100      	movs	r1, #0
    f640:	f00c fb85 	bl	1bd4e <memset>
	cp->own_addr_type = own_addr_type;
    f644:	f884 800c 	strb.w	r8, [r4, #12]
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    f648:	f04f 0800 	mov.w	r8, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    f64c:	f105 0188 	add.w	r1, r5, #136	; 0x88
    f650:	1d60      	adds	r0, r4, #5
    f652:	f00c fc41 	bl	1bed8 <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    f656:	f884 8004 	strb.w	r8, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    f65a:	89bb      	ldrh	r3, [r7, #12]
	cmd(buf)->state = &state;
    f65c:	4630      	mov	r0, r6
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    f65e:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
    f660:	89fb      	ldrh	r3, [r7, #14]
    f662:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    f664:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
    f668:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    f66c:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
    f670:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    f674:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    f678:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    f67c:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
    f680:	f8a4 3013 	strh.w	r3, [r4, #19]
	state->target = target;
    f684:	4b0b      	ldr	r3, [pc, #44]	; (f6b4 <bt_le_create_conn_legacy+0xb8>)
    f686:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    f688:	230b      	movs	r3, #11
    f68a:	9302      	str	r3, [sp, #8]
	state->val = val;
    f68c:	2301      	movs	r3, #1
    f68e:	f88d 300c 	strb.w	r3, [sp, #12]
	cmd(buf)->state = &state;
    f692:	f005 feff 	bl	15494 <net_buf_id>
    f696:	220c      	movs	r2, #12
    f698:	4b07      	ldr	r3, [pc, #28]	; (f6b8 <bt_le_create_conn_legacy+0xbc>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    f69a:	4631      	mov	r1, r6
	cmd(buf)->state = &state;
    f69c:	fb02 3300 	mla	r3, r2, r0, r3
    f6a0:	aa01      	add	r2, sp, #4
    f6a2:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    f6a4:	f242 000d 	movw	r0, #8205	; 0x200d
    f6a8:	4642      	mov	r2, r8
    f6aa:	f7ff fccd 	bl	f048 <bt_hci_cmd_send_sync>
    f6ae:	e7bd      	b.n	f62c <bt_le_create_conn_legacy+0x30>
    f6b0:	20008000 	.word	0x20008000
    f6b4:	20008094 	.word	0x20008094
    f6b8:	2000ab60 	.word	0x2000ab60

0000f6bc <bt_le_create_conn_cancel>:
{
    f6bc:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    f6be:	2100      	movs	r1, #0
{
    f6c0:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    f6c2:	f242 000e 	movw	r0, #8206	; 0x200e
    f6c6:	f7ff fc75 	bl	efb4 <bt_hci_cmd_create>
	state->target = target;
    f6ca:	4b0c      	ldr	r3, [pc, #48]	; (f6fc <bt_le_create_conn_cancel+0x40>)
	state->val = val;
    f6cc:	2500      	movs	r5, #0
	state->target = target;
    f6ce:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    f6d0:	230b      	movs	r3, #11
    f6d2:	4604      	mov	r4, r0
    f6d4:	9302      	str	r3, [sp, #8]
	state->val = val;
    f6d6:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    f6da:	f005 fedb 	bl	15494 <net_buf_id>
    f6de:	220c      	movs	r2, #12
    f6e0:	4b07      	ldr	r3, [pc, #28]	; (f700 <bt_le_create_conn_cancel+0x44>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    f6e2:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    f6e4:	fb02 3300 	mla	r3, r2, r0, r3
    f6e8:	aa01      	add	r2, sp, #4
    f6ea:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    f6ec:	f242 000e 	movw	r0, #8206	; 0x200e
    f6f0:	462a      	mov	r2, r5
    f6f2:	f7ff fca9 	bl	f048 <bt_hci_cmd_send_sync>
}
    f6f6:	b005      	add	sp, #20
    f6f8:	bd30      	pop	{r4, r5, pc}
    f6fa:	bf00      	nop
    f6fc:	20008094 	.word	0x20008094
    f700:	2000ab60 	.word	0x2000ab60

0000f704 <bt_le_scan_update>:
{
    f704:	b570      	push	{r4, r5, r6, lr}
    f706:	4606      	mov	r6, r0
    f708:	481c      	ldr	r0, [pc, #112]	; (f77c <bt_le_scan_update+0x78>)
    f70a:	f00c fbe2 	bl	1bed2 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    f70e:	0641      	lsls	r1, r0, #25
    f710:	f3c0 1380 	ubfx	r3, r0, #6, #1
    f714:	d501      	bpl.n	f71a <bt_le_scan_update+0x16>
			return 0;
    f716:	2000      	movs	r0, #0
    f718:	e02b      	b.n	f772 <bt_le_scan_update+0x6e>
    f71a:	4818      	ldr	r0, [pc, #96]	; (f77c <bt_le_scan_update+0x78>)
    f71c:	f00c fbd9 	bl	1bed2 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    f720:	0682      	lsls	r2, r0, #26
    f722:	d421      	bmi.n	f768 <bt_le_scan_update+0x64>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    f724:	2100      	movs	r1, #0
    f726:	2206      	movs	r2, #6
    f728:	4608      	mov	r0, r1
    f72a:	f001 fff9 	bl	11720 <bt_conn_lookup_state_le>
		if (conn) {
    f72e:	4604      	mov	r4, r0
    f730:	bb00      	cbnz	r0, f774 <bt_le_scan_update+0x70>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    f732:	2202      	movs	r2, #2
    f734:	4601      	mov	r1, r0
    f736:	f001 fff3 	bl	11720 <bt_conn_lookup_state_le>
		if (conn) {
    f73a:	4605      	mov	r5, r0
    f73c:	2800      	cmp	r0, #0
    f73e:	d0ea      	beq.n	f716 <bt_le_scan_update+0x12>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f740:	f44f 7180 	mov.w	r1, #256	; 0x100
    f744:	480d      	ldr	r0, [pc, #52]	; (f77c <bt_le_scan_update+0x78>)
    f746:	f00c fbca 	bl	1bede <atomic_or>
			bt_conn_unref(conn);
    f74a:	4628      	mov	r0, r5
    f74c:	f001 fe86 	bl	1145c <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    f750:	2e00      	cmp	r6, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    f752:	4620      	mov	r0, r4
}
    f754:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    f758:	bf15      	itete	ne
    f75a:	2230      	movne	r2, #48	; 0x30
    f75c:	2212      	moveq	r2, #18
    f75e:	2160      	movne	r1, #96	; 0x60
    f760:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    f764:	f7ff bee4 	b.w	f530 <start_le_scan_legacy>
	return set_le_scan_enable_legacy(enable);
    f768:	4618      	mov	r0, r3
    f76a:	f7ff fd1d 	bl	f1a8 <set_le_scan_enable_legacy>
		if (err) {
    f76e:	2800      	cmp	r0, #0
    f770:	d0d8      	beq.n	f724 <bt_le_scan_update+0x20>
}
    f772:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_unref(conn);
    f774:	f001 fe72 	bl	1145c <bt_conn_unref>
    f778:	e7cd      	b.n	f716 <bt_le_scan_update+0x12>
    f77a:	bf00      	nop
    f77c:	20008094 	.word	0x20008094

0000f780 <hci_disconn_complete>:
{
    f780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    f782:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    f784:	7835      	ldrb	r5, [r6, #0]
    f786:	bb45      	cbnz	r5, f7da <hci_disconn_complete+0x5a>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    f788:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    f78c:	4638      	mov	r0, r7
    f78e:	f001 fe89 	bl	114a4 <bt_conn_lookup_handle>
	if (!conn) {
    f792:	4604      	mov	r4, r0
    f794:	b930      	cbnz	r0, f7a4 <hci_disconn_complete+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    f796:	463a      	mov	r2, r7
}
    f798:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    f79c:	2145      	movs	r1, #69	; 0x45
    f79e:	480f      	ldr	r0, [pc, #60]	; (f7dc <hci_disconn_complete+0x5c>)
    f7a0:	f00b b866 	b.w	1a870 <printk>
	conn->err = evt->reason;
    f7a4:	78f3      	ldrb	r3, [r6, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    f7a6:	4629      	mov	r1, r5
	conn->err = evt->reason;
    f7a8:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    f7aa:	f001 fe83 	bl	114b4 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    f7ae:	78a3      	ldrb	r3, [r4, #2]
	conn->handle = 0U;
    f7b0:	8025      	strh	r5, [r4, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    f7b2:	2b01      	cmp	r3, #1
    f7b4:	d004      	beq.n	f7c0 <hci_disconn_complete+0x40>
	bt_conn_unref(conn);
    f7b6:	4620      	mov	r0, r4
}
    f7b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    f7bc:	f001 be4e 	b.w	1145c <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f7c0:	1d20      	adds	r0, r4, #4
    f7c2:	f00c fb86 	bl	1bed2 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    f7c6:	07c3      	lsls	r3, r0, #31
    f7c8:	d5f5      	bpl.n	f7b6 <hci_disconn_complete+0x36>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    f7ca:	4620      	mov	r0, r4
    f7cc:	2102      	movs	r1, #2
    f7ce:	f001 fe71 	bl	114b4 <bt_conn_set_state>
		bt_le_scan_update(false);
    f7d2:	4628      	mov	r0, r5
    f7d4:	f7ff ff96 	bl	f704 <bt_le_scan_update>
    f7d8:	e7ed      	b.n	f7b6 <hci_disconn_complete+0x36>
}
    f7da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f7dc:	00021296 	.word	0x00021296

0000f7e0 <le_adv_report>:
{
    f7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    f7e4:	f100 0708 	add.w	r7, r0, #8
    f7e8:	b08d      	sub	sp, #52	; 0x34
    f7ea:	4604      	mov	r4, r0
    f7ec:	4638      	mov	r0, r7
    f7ee:	f00d fda5 	bl	1d33c <net_buf_simple_pull_u8>
    f7f2:	f8df 81c8 	ldr.w	r8, [pc, #456]	; f9bc <le_adv_report+0x1dc>
	if (scan_dev_found_cb) {
    f7f6:	f8df a1c8 	ldr.w	sl, [pc, #456]	; f9c0 <le_adv_report+0x1e0>
    f7fa:	9001      	str	r0, [sp, #4]
	while (num_reports--) {
    f7fc:	9b01      	ldr	r3, [sp, #4]
    f7fe:	b913      	cbnz	r3, f806 <le_adv_report+0x26>
}
    f800:	b00d      	add	sp, #52	; 0x34
    f802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
    f806:	89a3      	ldrh	r3, [r4, #12]
    f808:	2b08      	cmp	r3, #8
    f80a:	d806      	bhi.n	f81a <le_adv_report+0x3a>
			BT_ERR("Unexpected end of buffer");
    f80c:	2145      	movs	r1, #69	; 0x45
    f80e:	486d      	ldr	r0, [pc, #436]	; (f9c4 <le_adv_report+0x1e4>)
}
    f810:	b00d      	add	sp, #52	; 0x34
    f812:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			BT_ERR("Unexpected end of buffer");
    f816:	f00b b82b 	b.w	1a870 <printk>
	return net_buf_simple_pull_mem(&buf->b, len);
    f81a:	2109      	movs	r1, #9
    f81c:	4638      	mov	r0, r7
    f81e:	f006 f8a9 	bl	15974 <net_buf_simple_pull_mem>
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    f822:	237f      	movs	r3, #127	; 0x7f
    f824:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
    f828:	7a03      	ldrb	r3, [r0, #8]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    f82a:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    f82c:	9300      	str	r3, [sp, #0]
    f82e:	18c3      	adds	r3, r0, r3
    f830:	7a5b      	ldrb	r3, [r3, #9]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    f832:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.rssi = evt->data[evt->length];
    f836:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
    f83a:	23ff      	movs	r3, #255	; 0xff
    f83c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
    f840:	2300      	movs	r3, #0
    f842:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.adv_type = evt->evt_type;
    f846:	7802      	ldrb	r2, [r0, #0]
    f848:	4606      	mov	r6, r0
    f84a:	2a04      	cmp	r2, #4
    f84c:	bf98      	it	ls
    f84e:	4b5e      	ldrls	r3, [pc, #376]	; (f9c8 <le_adv_report+0x1e8>)
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
    f850:	f100 0901 	add.w	r9, r0, #1
    f854:	bf98      	it	ls
    f856:	5c9b      	ldrbls	r3, [r3, r2]
    f858:	4640      	mov	r0, r8
		adv_info.adv_type = evt->evt_type;
    f85a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
		adv_info.adv_props = get_adv_props(evt->evt_type);
    f85e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    f862:	f00c fb36 	bl	1bed2 <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    f866:	0645      	lsls	r5, r0, #25
    f868:	d50d      	bpl.n	f886 <le_adv_report+0xa6>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    f86a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    f86e:	0758      	lsls	r0, r3, #29
    f870:	d509      	bpl.n	f886 <le_adv_report+0xa6>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    f872:	7a31      	ldrb	r1, [r6, #8]
	return net_buf_simple_pull(&buf->b, len);
    f874:	4638      	mov	r0, r7
    f876:	3101      	adds	r1, #1
    f878:	f006 f860 	bl	1593c <net_buf_simple_pull>
    f87c:	9b01      	ldr	r3, [sp, #4]
    f87e:	1e58      	subs	r0, r3, #1
    f880:	b2c3      	uxtb	r3, r0
    f882:	9301      	str	r3, [sp, #4]
    f884:	e7ba      	b.n	f7fc <le_adv_report+0x1c>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    f886:	7873      	ldrb	r3, [r6, #1]
    f888:	1e9a      	subs	r2, r3, #2
    f88a:	2a01      	cmp	r2, #1
    f88c:	d84c      	bhi.n	f928 <le_adv_report+0x148>
		bt_addr_le_copy(&id_addr, addr);
    f88e:	4649      	mov	r1, r9
    f890:	a804      	add	r0, sp, #16
    f892:	f00c fb21 	bl	1bed8 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    f896:	f89d 3010 	ldrb.w	r3, [sp, #16]
    f89a:	3b02      	subs	r3, #2
    f89c:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
    f8a0:	ab04      	add	r3, sp, #16
    f8a2:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
    f8a4:	f8da 3000 	ldr.w	r3, [sl]
    f8a8:	b1a3      	cbz	r3, f8d4 <le_adv_report+0xf4>
	state->offset = net_buf_simple_headroom(buf);
    f8aa:	4638      	mov	r0, r7
    f8ac:	f00d fd56 	bl	1d35c <net_buf_simple_headroom>
    f8b0:	4683      	mov	fp, r0
		buf->len = len;
    f8b2:	9b00      	ldr	r3, [sp, #0]
	state->len = buf->len;
    f8b4:	89a5      	ldrh	r5, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    f8b6:	a804      	add	r0, sp, #16
		buf->len = len;
    f8b8:	81a3      	strh	r3, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    f8ba:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    f8be:	463b      	mov	r3, r7
    f8c0:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
    f8c4:	f8da c000 	ldr.w	ip, [sl]
    f8c8:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
    f8ca:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    f8cc:	81a5      	strh	r5, [r4, #12]
	buf->data = buf->__buf + state->offset;
    f8ce:	fa10 f08b 	uxtah	r0, r0, fp
    f8d2:	60a0      	str	r0, [r4, #8]
	return list->head;
    f8d4:	4b3d      	ldr	r3, [pc, #244]	; (f9cc <le_adv_report+0x1ec>)
    f8d6:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    f8d8:	2b00      	cmp	r3, #0
    f8da:	d032      	beq.n	f942 <le_adv_report+0x162>
    f8dc:	f1b3 0208 	subs.w	r2, r3, #8
    f8e0:	d02f      	beq.n	f942 <le_adv_report+0x162>
	return node->next;
    f8e2:	681d      	ldr	r5, [r3, #0]
    f8e4:	b105      	cbz	r5, f8e8 <le_adv_report+0x108>
    f8e6:	3d08      	subs	r5, #8
		if (listener->recv) {
    f8e8:	6813      	ldr	r3, [r2, #0]
    f8ea:	9203      	str	r2, [sp, #12]
    f8ec:	b193      	cbz	r3, f914 <le_adv_report+0x134>
	state->offset = net_buf_simple_headroom(buf);
    f8ee:	4638      	mov	r0, r7
    f8f0:	f00d fd34 	bl	1d35c <net_buf_simple_headroom>
    f8f4:	4683      	mov	fp, r0
	state->len = buf->len;
    f8f6:	89a3      	ldrh	r3, [r4, #12]
			listener->recv(info, &buf->b);
    f8f8:	9a03      	ldr	r2, [sp, #12]
    f8fa:	9302      	str	r3, [sp, #8]
			buf->len = len;
    f8fc:	9b00      	ldr	r3, [sp, #0]
			listener->recv(info, &buf->b);
    f8fe:	a808      	add	r0, sp, #32
			buf->len = len;
    f900:	81a3      	strh	r3, [r4, #12]
			listener->recv(info, &buf->b);
    f902:	4639      	mov	r1, r7
    f904:	6812      	ldr	r2, [r2, #0]
    f906:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    f908:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    f90a:	9b02      	ldr	r3, [sp, #8]
	buf->data = buf->__buf + state->offset;
    f90c:	fa10 f08b 	uxtah	r0, r0, fp
    f910:	60a0      	str	r0, [r4, #8]
	buf->len = state->len;
    f912:	81a3      	strh	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    f914:	b1ad      	cbz	r5, f942 <le_adv_report+0x162>
Z_GENLIST_PEEK_NEXT(slist, snode)
    f916:	f115 0308 	adds.w	r3, r5, #8
    f91a:	d002      	beq.n	f922 <le_adv_report+0x142>
	return node->next;
    f91c:	68ab      	ldr	r3, [r5, #8]
    f91e:	b103      	cbz	r3, f922 <le_adv_report+0x142>
    f920:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    f922:	462a      	mov	r2, r5
    f924:	461d      	mov	r5, r3
    f926:	e7df      	b.n	f8e8 <le_adv_report+0x108>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    f928:	2bff      	cmp	r3, #255	; 0xff
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    f92a:	bf0a      	itet	eq
    f92c:	2300      	moveq	r3, #0
		bt_addr_le_copy(&id_addr,
    f92e:	4649      	movne	r1, r9
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    f930:	a906      	addeq	r1, sp, #24
		bt_addr_le_copy(&id_addr,
    f932:	a804      	add	r0, sp, #16
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    f934:	bf04      	itt	eq
    f936:	9306      	streq	r3, [sp, #24]
    f938:	f8cd 301b 	streq.w	r3, [sp, #27]
		bt_addr_le_copy(&id_addr,
    f93c:	f00c facc 	bl	1bed8 <bt_addr_le_copy>
    f940:	e7ae      	b.n	f8a0 <le_adv_report+0xc0>
    f942:	4640      	mov	r0, r8
	check_pending_conn(&id_addr, addr, info->adv_props);
    f944:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    f948:	f00c fac3 	bl	1bed2 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    f94c:	0641      	lsls	r1, r0, #25
    f94e:	f3c0 1580 	ubfx	r5, r0, #6, #1
    f952:	d48e      	bmi.n	f872 <le_adv_report+0x92>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    f954:	07da      	lsls	r2, r3, #31
    f956:	d58c      	bpl.n	f872 <le_adv_report+0x92>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    f958:	2202      	movs	r2, #2
    f95a:	4628      	mov	r0, r5
    f95c:	a904      	add	r1, sp, #16
    f95e:	f001 fedf 	bl	11720 <bt_conn_lookup_state_le>
	if (!conn) {
    f962:	4683      	mov	fp, r0
    f964:	2800      	cmp	r0, #0
    f966:	d084      	beq.n	f872 <le_adv_report+0x92>
    f968:	4640      	mov	r0, r8
    f96a:	f00c fab2 	bl	1bed2 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    f96e:	0683      	lsls	r3, r0, #26
    f970:	d410      	bmi.n	f994 <le_adv_report+0x1b4>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    f972:	f10b 0096 	add.w	r0, fp, #150	; 0x96
    f976:	4649      	mov	r1, r9
    f978:	f00c faae 	bl	1bed8 <bt_addr_le_copy>
	return bt_le_create_conn_legacy(conn);
    f97c:	4658      	mov	r0, fp
    f97e:	f7ff fe3d 	bl	f5fc <bt_le_create_conn_legacy>
	if (bt_le_create_conn(conn)) {
    f982:	b960      	cbnz	r0, f99e <le_adv_report+0x1be>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    f984:	4658      	mov	r0, fp
    f986:	2106      	movs	r1, #6
    f988:	f001 fd94 	bl	114b4 <bt_conn_set_state>
	bt_conn_unref(conn);
    f98c:	4658      	mov	r0, fp
    f98e:	f001 fd65 	bl	1145c <bt_conn_unref>
	return;
    f992:	e76e      	b.n	f872 <le_adv_report+0x92>
	return set_le_scan_enable_legacy(enable);
    f994:	4628      	mov	r0, r5
    f996:	f7ff fc07 	bl	f1a8 <set_le_scan_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    f99a:	2800      	cmp	r0, #0
    f99c:	d0e9      	beq.n	f972 <le_adv_report+0x192>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    f99e:	231f      	movs	r3, #31
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    f9a0:	2100      	movs	r1, #0
    f9a2:	4658      	mov	r0, fp
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    f9a4:	f88b 3009 	strb.w	r3, [fp, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    f9a8:	f001 fd84 	bl	114b4 <bt_conn_set_state>
	bt_conn_unref(conn);
    f9ac:	4658      	mov	r0, fp
    f9ae:	f001 fd55 	bl	1145c <bt_conn_unref>
	bt_le_scan_update(false);
    f9b2:	2000      	movs	r0, #0
    f9b4:	f7ff fea6 	bl	f704 <bt_le_scan_update>
    f9b8:	e75b      	b.n	f872 <le_adv_report+0x92>
    f9ba:	bf00      	nop
    f9bc:	20008094 	.word	0x20008094
    f9c0:	2000ab84 	.word	0x2000ab84
    f9c4:	0002154a 	.word	0x0002154a
    f9c8:	000219ce 	.word	0x000219ce
    f9cc:	2000ab7c 	.word	0x2000ab7c

0000f9d0 <bt_data_parse>:
{
    f9d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f9d2:	4604      	mov	r4, r0
    f9d4:	460e      	mov	r6, r1
    f9d6:	4617      	mov	r7, r2
	while (ad->len > 1) {
    f9d8:	88a3      	ldrh	r3, [r4, #4]
    f9da:	2b01      	cmp	r3, #1
    f9dc:	d801      	bhi.n	f9e2 <bt_data_parse+0x12>
}
    f9de:	b003      	add	sp, #12
    f9e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = net_buf_simple_pull_u8(ad);
    f9e2:	4620      	mov	r0, r4
    f9e4:	f00d fcaa 	bl	1d33c <net_buf_simple_pull_u8>
		if (len == 0U) {
    f9e8:	4605      	mov	r5, r0
    f9ea:	2800      	cmp	r0, #0
    f9ec:	d0f7      	beq.n	f9de <bt_data_parse+0xe>
		if (len > ad->len) {
    f9ee:	88a2      	ldrh	r2, [r4, #4]
    f9f0:	b283      	uxth	r3, r0
    f9f2:	429a      	cmp	r2, r3
    f9f4:	d206      	bcs.n	fa04 <bt_data_parse+0x34>
			BT_WARN("Malformed data");
    f9f6:	2157      	movs	r1, #87	; 0x57
    f9f8:	480c      	ldr	r0, [pc, #48]	; (fa2c <bt_data_parse+0x5c>)
}
    f9fa:	b003      	add	sp, #12
    f9fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			BT_WARN("Malformed data");
    fa00:	f00a bf36 	b.w	1a870 <printk>
		data.type = net_buf_simple_pull_u8(ad);
    fa04:	4620      	mov	r0, r4
    fa06:	f00d fc99 	bl	1d33c <net_buf_simple_pull_u8>
		data.data = ad->data;
    fa0a:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
    fa0c:	f88d 0000 	strb.w	r0, [sp]
		data.data_len = len - 1;
    fa10:	3d01      	subs	r5, #1
		if (!func(&data, user_data)) {
    fa12:	4639      	mov	r1, r7
    fa14:	4668      	mov	r0, sp
		data.data_len = len - 1;
    fa16:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
    fa1a:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
    fa1c:	47b0      	blx	r6
    fa1e:	2800      	cmp	r0, #0
    fa20:	d0dd      	beq.n	f9de <bt_data_parse+0xe>
		net_buf_simple_pull(ad, len - 1);
    fa22:	4629      	mov	r1, r5
    fa24:	4620      	mov	r0, r4
    fa26:	f005 ff89 	bl	1593c <net_buf_simple_pull>
    fa2a:	e7d5      	b.n	f9d8 <bt_data_parse+0x8>
    fa2c:	00021568 	.word	0x00021568

0000fa30 <bt_send>:
	return bt_dev.drv->send(buf);
    fa30:	4b02      	ldr	r3, [pc, #8]	; (fa3c <bt_send+0xc>)
    fa32:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    fa36:	691b      	ldr	r3, [r3, #16]
    fa38:	4718      	bx	r3
    fa3a:	bf00      	nop
    fa3c:	20008000 	.word	0x20008000

0000fa40 <bt_hci_cmd_send>:
{
    fa40:	b538      	push	{r3, r4, r5, lr}
    fa42:	4605      	mov	r5, r0
	if (!buf) {
    fa44:	460c      	mov	r4, r1
    fa46:	b919      	cbnz	r1, fa50 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    fa48:	f7ff fab4 	bl	efb4 <bt_hci_cmd_create>
		if (!buf) {
    fa4c:	4604      	mov	r4, r0
    fa4e:	b1c0      	cbz	r0, fa82 <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    fa50:	f640 4335 	movw	r3, #3125	; 0xc35
    fa54:	429d      	cmp	r5, r3
    fa56:	d10e      	bne.n	fa76 <bt_hci_cmd_send+0x36>
		err = bt_send(buf);
    fa58:	4620      	mov	r0, r4
    fa5a:	f7ff ffe9 	bl	fa30 <bt_send>
		if (err) {
    fa5e:	4605      	mov	r5, r0
    fa60:	b138      	cbz	r0, fa72 <bt_hci_cmd_send+0x32>
			BT_ERR("Unable to send to driver (err %d)", err);
    fa62:	4602      	mov	r2, r0
    fa64:	2145      	movs	r1, #69	; 0x45
    fa66:	4808      	ldr	r0, [pc, #32]	; (fa88 <bt_hci_cmd_send+0x48>)
    fa68:	f00a ff02 	bl	1a870 <printk>
			net_buf_unref(buf);
    fa6c:	4620      	mov	r0, r4
    fa6e:	f005 fe89 	bl	15784 <net_buf_unref>
}
    fa72:	4628      	mov	r0, r5
    fa74:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    fa76:	4621      	mov	r1, r4
    fa78:	4804      	ldr	r0, [pc, #16]	; (fa8c <bt_hci_cmd_send+0x4c>)
    fa7a:	f005 fe55 	bl	15728 <net_buf_put>
	return 0;
    fa7e:	2500      	movs	r5, #0
    fa80:	e7f7      	b.n	fa72 <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
    fa82:	f06f 0536 	mvn.w	r5, #54	; 0x36
    fa86:	e7f4      	b.n	fa72 <bt_hci_cmd_send+0x32>
    fa88:	0002157c 	.word	0x0002157c
    fa8c:	20008118 	.word	0x20008118

0000fa90 <bt_hci_host_num_completed_packets>:
{
    fa90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fa92:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
    fa94:	8ac6      	ldrh	r6, [r0, #22]
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    fa96:	7980      	ldrb	r0, [r0, #6]
    fa98:	f005 fcf4 	bl	15484 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
    fa9c:	4621      	mov	r1, r4
    fa9e:	f00e faaf 	bl	1e000 <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    faa2:	4b24      	ldr	r3, [pc, #144]	; (fb34 <bt_hci_host_num_completed_packets+0xa4>)
    faa4:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
    faa8:	069b      	lsls	r3, r3, #26
    faaa:	d541      	bpl.n	fb30 <bt_hci_host_num_completed_packets+0xa0>
	conn = bt_conn_lookup_index(acl(buf)->index);
    faac:	7d60      	ldrb	r0, [r4, #21]
    faae:	f002 f94d 	bl	11d4c <bt_conn_lookup_index>
	if (!conn) {
    fab2:	4605      	mov	r5, r0
    fab4:	b930      	cbnz	r0, fac4 <bt_hci_host_num_completed_packets+0x34>
		BT_WARN("Unable to look up conn with index 0x%02x",
    fab6:	7d62      	ldrb	r2, [r4, #21]
    fab8:	2157      	movs	r1, #87	; 0x57
}
    faba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Unable to look up conn with index 0x%02x",
    fabe:	481e      	ldr	r0, [pc, #120]	; (fb38 <bt_hci_host_num_completed_packets+0xa8>)
    fac0:	f00a bed6 	b.w	1a870 <printk>
	if (!bt_conn_is_handle_valid(conn)) {
    fac4:	7a83      	ldrb	r3, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
    fac6:	2b01      	cmp	r3, #1
    fac8:	d002      	beq.n	fad0 <bt_hci_host_num_completed_packets+0x40>
    faca:	3b07      	subs	r3, #7
    facc:	2b01      	cmp	r3, #1
    face:	d80f      	bhi.n	faf0 <bt_hci_host_num_completed_packets+0x60>
	bt_conn_unref(conn);
    fad0:	4628      	mov	r0, r5
    fad2:	f001 fcc3 	bl	1145c <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
    fad6:	2105      	movs	r1, #5
    fad8:	f640 4035 	movw	r0, #3125	; 0xc35
    fadc:	f7ff fa6a 	bl	efb4 <bt_hci_cmd_create>
	if (!buf) {
    fae0:	4604      	mov	r4, r0
    fae2:	b970      	cbnz	r0, fb02 <bt_hci_host_num_completed_packets+0x72>
}
    fae4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to allocate new HCI command");
    fae8:	2145      	movs	r1, #69	; 0x45
    faea:	4814      	ldr	r0, [pc, #80]	; (fb3c <bt_hci_host_num_completed_packets+0xac>)
    faec:	f00a bec0 	b.w	1a870 <printk>
		BT_WARN("Not reporting packet for non-connected conn");
    faf0:	4813      	ldr	r0, [pc, #76]	; (fb40 <bt_hci_host_num_completed_packets+0xb0>)
    faf2:	2157      	movs	r1, #87	; 0x57
    faf4:	f00a febc 	bl	1a870 <printk>
		bt_conn_unref(conn);
    faf8:	4628      	mov	r0, r5
}
    fafa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    fafe:	f001 bcad 	b.w	1145c <bt_conn_unref>
	return net_buf_simple_add(&buf->b, len);
    fb02:	f100 0708 	add.w	r7, r0, #8
    fb06:	2101      	movs	r1, #1
    fb08:	4638      	mov	r0, r7
    fb0a:	f005 ff51 	bl	159b0 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
    fb0e:	2501      	movs	r5, #1
    fb10:	2104      	movs	r1, #4
    fb12:	7005      	strb	r5, [r0, #0]
    fb14:	4638      	mov	r0, r7
    fb16:	f005 ff4b 	bl	159b0 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
    fb1a:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
    fb1c:	8006      	strh	r6, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
    fb1e:	7085      	strb	r5, [r0, #2]
    fb20:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    fb22:	4621      	mov	r1, r4
}
    fb24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    fb28:	f640 4035 	movw	r0, #3125	; 0xc35
    fb2c:	f7ff bf88 	b.w	fa40 <bt_hci_cmd_send>
}
    fb30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fb32:	bf00      	nop
    fb34:	20008000 	.word	0x20008000
    fb38:	000215a3 	.word	0x000215a3
    fb3c:	00021602 	.word	0x00021602
    fb40:	000215d1 	.word	0x000215d1

0000fb44 <conn_auto_initiate>:
{
    fb44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    fb46:	7a83      	ldrb	r3, [r0, #10]
{
    fb48:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    fb4a:	2b07      	cmp	r3, #7
    fb4c:	d15d      	bne.n	fc0a <conn_auto_initiate+0xc6>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    fb4e:	1d06      	adds	r6, r0, #4
    fb50:	4630      	mov	r0, r6
    fb52:	f00c f9be 	bl	1bed2 <atomic_get>
    fb56:	0483      	lsls	r3, r0, #18
    fb58:	d41b      	bmi.n	fb92 <conn_auto_initiate+0x4e>
    fb5a:	78e3      	ldrb	r3, [r4, #3]
    fb5c:	b123      	cbz	r3, fb68 <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    fb5e:	4b2c      	ldr	r3, [pc, #176]	; (fc10 <conn_auto_initiate+0xcc>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    fb60:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    fb64:	071d      	lsls	r5, r3, #28
    fb66:	d514      	bpl.n	fb92 <conn_auto_initiate+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    fb68:	2102      	movs	r1, #2
    fb6a:	f242 0016 	movw	r0, #8214	; 0x2016
    fb6e:	f7ff fa21 	bl	efb4 <bt_hci_cmd_create>
	if (!buf) {
    fb72:	4605      	mov	r5, r0
    fb74:	b168      	cbz	r0, fb92 <conn_auto_initiate+0x4e>
    fb76:	2102      	movs	r1, #2
    fb78:	3008      	adds	r0, #8
    fb7a:	f005 ff19 	bl	159b0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    fb7e:	8823      	ldrh	r3, [r4, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    fb80:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(conn->handle);
    fb82:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    fb84:	f242 0016 	movw	r0, #8214	; 0x2016
}
    fb88:	b004      	add	sp, #16
    fb8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    fb8e:	f7ff bf57 	b.w	fa40 <bt_hci_cmd_send>
    fb92:	4630      	mov	r0, r6
    fb94:	f00c f99d 	bl	1bed2 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    fb98:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    fb9c:	4d1c      	ldr	r5, [pc, #112]	; (fc10 <conn_auto_initiate+0xcc>)
    fb9e:	f3c0 3100 	ubfx	r1, r0, #12, #1
    fba2:	d116      	bne.n	fbd2 <conn_auto_initiate+0x8e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    fba4:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
    fba8:	07d8      	lsls	r0, r3, #31
    fbaa:	d512      	bpl.n	fbd2 <conn_auto_initiate+0x8e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    fbac:	2302      	movs	r3, #2
    fbae:	4620      	mov	r0, r4
    fbb0:	461a      	mov	r2, r3
    fbb2:	9100      	str	r1, [sp, #0]
    fbb4:	f00c fa41 	bl	1c03a <bt_le_set_phy>
		if (!err) {
    fbb8:	4602      	mov	r2, r0
    fbba:	b930      	cbnz	r0, fbca <conn_auto_initiate+0x86>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    fbbc:	2180      	movs	r1, #128	; 0x80
    fbbe:	4630      	mov	r0, r6
}
    fbc0:	b004      	add	sp, #16
    fbc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fbc6:	f00c b98a 	b.w	1bede <atomic_or>
		BT_ERR("Failed to set LE PHY (%d)", err);
    fbca:	2145      	movs	r1, #69	; 0x45
    fbcc:	4811      	ldr	r0, [pc, #68]	; (fc14 <conn_auto_initiate+0xd0>)
    fbce:	f00a fe4f 	bl	1a870 <printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    fbd2:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    fbd6:	069a      	lsls	r2, r3, #26
    fbd8:	d517      	bpl.n	fc0a <conn_auto_initiate+0xc6>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    fbda:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    fbde:	689b      	ldr	r3, [r3, #8]
    fbe0:	079b      	lsls	r3, r3, #30
    fbe2:	d512      	bpl.n	fc0a <conn_auto_initiate+0xc6>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    fbe4:	f10d 010e 	add.w	r1, sp, #14
    fbe8:	a803      	add	r0, sp, #12
    fbea:	f7ff fa8f 	bl	f10c <hci_le_read_max_data_len>
			if (!err) {
    fbee:	b960      	cbnz	r0, fc0a <conn_auto_initiate+0xc6>
				err = bt_le_set_data_len(conn,
    fbf0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    fbf4:	4620      	mov	r0, r4
    fbf6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    fbfa:	f00c fa01 	bl	1c000 <bt_le_set_data_len>
				if (err) {
    fbfe:	4602      	mov	r2, r0
    fc00:	b118      	cbz	r0, fc0a <conn_auto_initiate+0xc6>
					BT_ERR("Failed to set data len (%d)", err);
    fc02:	2145      	movs	r1, #69	; 0x45
    fc04:	4804      	ldr	r0, [pc, #16]	; (fc18 <conn_auto_initiate+0xd4>)
    fc06:	f00a fe33 	bl	1a870 <printk>
}
    fc0a:	b004      	add	sp, #16
    fc0c:	bd70      	pop	{r4, r5, r6, pc}
    fc0e:	bf00      	nop
    fc10:	20008000 	.word	0x20008000
    fc14:	0002162a 	.word	0x0002162a
    fc18:	00021649 	.word	0x00021649

0000fc1c <le_phy_update_complete>:
{
    fc1c:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    fc1e:	6883      	ldr	r3, [r0, #8]
    fc20:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    fc24:	4628      	mov	r0, r5
    fc26:	f001 fc3d 	bl	114a4 <bt_conn_lookup_handle>
	if (!conn) {
    fc2a:	4604      	mov	r4, r0
    fc2c:	b930      	cbnz	r0, fc3c <le_phy_update_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fc2e:	462a      	mov	r2, r5
}
    fc30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fc34:	2145      	movs	r1, #69	; 0x45
    fc36:	480c      	ldr	r0, [pc, #48]	; (fc68 <le_phy_update_complete+0x4c>)
    fc38:	f00a be1a 	b.w	1a870 <printk>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    fc3c:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fc3e:	f06f 0180 	mvn.w	r1, #128	; 0x80
    fc42:	4628      	mov	r0, r5
    fc44:	f00c f959 	bl	1befa <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    fc48:	0603      	lsls	r3, r0, #24
    fc4a:	d507      	bpl.n	fc5c <le_phy_update_complete+0x40>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    fc4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    fc50:	4628      	mov	r0, r5
    fc52:	f00c f944 	bl	1bede <atomic_or>
		conn_auto_initiate(conn);
    fc56:	4620      	mov	r0, r4
    fc58:	f7ff ff74 	bl	fb44 <conn_auto_initiate>
	bt_conn_unref(conn);
    fc5c:	4620      	mov	r0, r4
}
    fc5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    fc62:	f001 bbfb 	b.w	1145c <bt_conn_unref>
    fc66:	bf00      	nop
    fc68:	0002126d 	.word	0x0002126d

0000fc6c <le_remote_feat_complete>:
{
    fc6c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    fc6e:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    fc70:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    fc74:	4630      	mov	r0, r6
    fc76:	f001 fc15 	bl	114a4 <bt_conn_lookup_handle>
	if (!conn) {
    fc7a:	4604      	mov	r4, r0
    fc7c:	b930      	cbnz	r0, fc8c <le_remote_feat_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fc7e:	4632      	mov	r2, r6
}
    fc80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fc84:	2145      	movs	r1, #69	; 0x45
    fc86:	480b      	ldr	r0, [pc, #44]	; (fcb4 <le_remote_feat_complete+0x48>)
    fc88:	f00a bdf2 	b.w	1a870 <printk>
	if (!evt->status) {
    fc8c:	782b      	ldrb	r3, [r5, #0]
    fc8e:	b923      	cbnz	r3, fc9a <le_remote_feat_complete+0x2e>
		memcpy(conn->le.features, evt->features,
    fc90:	2208      	movs	r2, #8
    fc92:	1ce9      	adds	r1, r5, #3
    fc94:	30ac      	adds	r0, #172	; 0xac
    fc96:	f00c f82f 	bl	1bcf8 <memcpy>
    fc9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    fc9e:	1d20      	adds	r0, r4, #4
    fca0:	f00c f91d 	bl	1bede <atomic_or>
	conn_auto_initiate(conn);
    fca4:	4620      	mov	r0, r4
    fca6:	f7ff ff4d 	bl	fb44 <conn_auto_initiate>
	bt_conn_unref(conn);
    fcaa:	4620      	mov	r0, r4
}
    fcac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    fcb0:	f001 bbd4 	b.w	1145c <bt_conn_unref>
    fcb4:	0002126d 	.word	0x0002126d

0000fcb8 <le_conn_param_neg_reply>:
{
    fcb8:	b570      	push	{r4, r5, r6, lr}
    fcba:	4606      	mov	r6, r0
    fcbc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    fcbe:	f242 0021 	movw	r0, #8225	; 0x2021
    fcc2:	2103      	movs	r1, #3
    fcc4:	f7ff f976 	bl	efb4 <bt_hci_cmd_create>
	if (!buf) {
    fcc8:	4604      	mov	r4, r0
    fcca:	b928      	cbnz	r0, fcd8 <le_conn_param_neg_reply+0x20>
}
    fccc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    fcd0:	2145      	movs	r1, #69	; 0x45
    fcd2:	4808      	ldr	r0, [pc, #32]	; (fcf4 <le_conn_param_neg_reply+0x3c>)
    fcd4:	f00a bdcc 	b.w	1a870 <printk>
    fcd8:	2103      	movs	r1, #3
    fcda:	3008      	adds	r0, #8
    fcdc:	f005 fe68 	bl	159b0 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    fce0:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    fce2:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    fce4:	4621      	mov	r1, r4
}
    fce6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    fcea:	f242 0021 	movw	r0, #8225	; 0x2021
    fcee:	f7ff bea7 	b.w	fa40 <bt_hci_cmd_send>
    fcf2:	bf00      	nop
    fcf4:	0002166a 	.word	0x0002166a

0000fcf8 <le_conn_param_req>:
{
    fcf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    fcfa:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    fcfc:	78d9      	ldrb	r1, [r3, #3]
    fcfe:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    fd00:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    fd02:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    fd06:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    fd0a:	7959      	ldrb	r1, [r3, #5]
    fd0c:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
    fd0e:	b2bc      	uxth	r4, r7
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    fd10:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    fd14:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    fd18:	799a      	ldrb	r2, [r3, #6]
    fd1a:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
    fd1c:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
    fd1e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    fd22:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    fd26:	7a1a      	ldrb	r2, [r3, #8]
    fd28:	7a5b      	ldrb	r3, [r3, #9]
    fd2a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    fd2e:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    fd32:	f001 fbb7 	bl	114a4 <bt_conn_lookup_handle>
	if (!conn) {
    fd36:	4606      	mov	r6, r0
    fd38:	b950      	cbnz	r0, fd50 <le_conn_param_req+0x58>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fd3a:	2145      	movs	r1, #69	; 0x45
    fd3c:	481c      	ldr	r0, [pc, #112]	; (fdb0 <le_conn_param_req+0xb8>)
    fd3e:	4622      	mov	r2, r4
    fd40:	f00a fd96 	bl	1a870 <printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    fd44:	2102      	movs	r1, #2
    fd46:	4620      	mov	r0, r4
    fd48:	f7ff ffb6 	bl	fcb8 <le_conn_param_neg_reply>
}
    fd4c:	b003      	add	sp, #12
    fd4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    fd50:	4669      	mov	r1, sp
    fd52:	f001 f9f5 	bl	11140 <le_param_req>
    fd56:	b938      	cbnz	r0, fd68 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    fd58:	211e      	movs	r1, #30
    fd5a:	4620      	mov	r0, r4
    fd5c:	f7ff ffac 	bl	fcb8 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    fd60:	4630      	mov	r0, r6
    fd62:	f001 fb7b 	bl	1145c <bt_conn_unref>
    fd66:	e7f1      	b.n	fd4c <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    fd68:	210e      	movs	r1, #14
    fd6a:	f242 0020 	movw	r0, #8224	; 0x2020
    fd6e:	f7ff f921 	bl	efb4 <bt_hci_cmd_create>
	if (!buf) {
    fd72:	4605      	mov	r5, r0
    fd74:	2800      	cmp	r0, #0
    fd76:	d0f3      	beq.n	fd60 <le_conn_param_req+0x68>
    fd78:	210e      	movs	r1, #14
    fd7a:	3008      	adds	r0, #8
    fd7c:	f005 fe18 	bl	159b0 <net_buf_simple_add>
    fd80:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    fd82:	220e      	movs	r2, #14
    fd84:	2100      	movs	r1, #0
    fd86:	f00b ffe2 	bl	1bd4e <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    fd8a:	f8bd 3000 	ldrh.w	r3, [sp]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    fd8e:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    fd90:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    fd92:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	cp->handle = sys_cpu_to_le16(handle);
    fd96:	8027      	strh	r7, [r4, #0]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    fd98:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    fd9a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    fd9e:	f242 0020 	movw	r0, #8224	; 0x2020
	cp->latency = sys_cpu_to_le16(param->latency);
    fda2:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    fda4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    fda8:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    fdaa:	f7ff fe49 	bl	fa40 <bt_hci_cmd_send>
    fdae:	e7d7      	b.n	fd60 <le_conn_param_req+0x68>
    fdb0:	0002126d 	.word	0x0002126d

0000fdb4 <hci_tx_thread>:
{
    fdb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    fdb8:	f8df 8128 	ldr.w	r8, [pc, #296]	; fee4 <hci_tx_thread+0x130>
		BT_ASSERT(err == 0);
    fdbc:	f8df 9128 	ldr.w	r9, [pc, #296]	; fee8 <hci_tx_thread+0x134>
			ev_count += bt_conn_prepare_events(&events[1]);
    fdc0:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    fdc4:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    fdc8:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
    fdca:	f36f 3310 	bfc	r3, #12, #5
    fdce:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    fdd2:	f001 fad7 	bl	11384 <bt_conn_prepare_events>
    fdd6:	1c46      	adds	r6, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
    fdd8:	f04f 32ff 	mov.w	r2, #4294967295
    fddc:	f04f 33ff 	mov.w	r3, #4294967295
    fde0:	4631      	mov	r1, r6
    fde2:	4840      	ldr	r0, [pc, #256]	; (fee4 <hci_tx_thread+0x130>)
    fde4:	f00a fb28 	bl	1a438 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    fde8:	b158      	cbz	r0, fe02 <hci_tx_thread+0x4e>
    fdea:	f241 4271 	movw	r2, #5233	; 0x1471
    fdee:	4649      	mov	r1, r9
    fdf0:	483e      	ldr	r0, [pc, #248]	; (feec <hci_tx_thread+0x138>)
    fdf2:	f00a fd3d 	bl	1a870 <printk>
    fdf6:	4040      	eors	r0, r0
    fdf8:	f380 8811 	msr	BASEPRI, r0
    fdfc:	f04f 0003 	mov.w	r0, #3
    fe00:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    fe02:	4d3b      	ldr	r5, [pc, #236]	; (fef0 <hci_tx_thread+0x13c>)
{
    fe04:	4f37      	ldr	r7, [pc, #220]	; (fee4 <hci_tx_thread+0x130>)
    fe06:	f105 0be0 	add.w	fp, r5, #224	; 0xe0
	for (; count; ev++, count--) {
    fe0a:	b916      	cbnz	r6, fe12 <hci_tx_thread+0x5e>
	z_impl_k_yield();
    fe0c:	f009 fa16 	bl	1923c <z_impl_k_yield>
	while (1) {
    fe10:	e7d8      	b.n	fdc4 <hci_tx_thread+0x10>
		switch (ev->state) {
    fe12:	68fa      	ldr	r2, [r7, #12]
    fe14:	f3c2 3204 	ubfx	r2, r2, #12, #5
    fe18:	2a01      	cmp	r2, #1
    fe1a:	d953      	bls.n	fec4 <hci_tx_thread+0x110>
    fe1c:	2a04      	cmp	r2, #4
    fe1e:	d15b      	bne.n	fed8 <hci_tx_thread+0x124>
			if (ev->tag == BT_EVENT_CMD_TX) {
    fe20:	7b3b      	ldrb	r3, [r7, #12]
    fe22:	2b00      	cmp	r3, #0
    fe24:	d151      	bne.n	feca <hci_tx_thread+0x116>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    fe26:	2200      	movs	r2, #0
    fe28:	2300      	movs	r3, #0
    fe2a:	4832      	ldr	r0, [pc, #200]	; (fef4 <hci_tx_thread+0x140>)
    fe2c:	f005 fc28 	bl	15680 <net_buf_get>
	BT_ASSERT(buf);
    fe30:	4604      	mov	r4, r0
    fe32:	b958      	cbnz	r0, fe4c <hci_tx_thread+0x98>
    fe34:	f241 420e 	movw	r2, #5134	; 0x140e
    fe38:	4649      	mov	r1, r9
    fe3a:	482c      	ldr	r0, [pc, #176]	; (feec <hci_tx_thread+0x138>)
    fe3c:	f00a fd18 	bl	1a870 <printk>
    fe40:	4040      	eors	r0, r0
    fe42:	f380 8811 	msr	BASEPRI, r0
    fe46:	f04f 0003 	mov.w	r0, #3
    fe4a:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    fe4c:	f04f 33ff 	mov.w	r3, #4294967295
    fe50:	f04f 32ff 	mov.w	r2, #4294967295
    fe54:	4658      	mov	r0, fp
    fe56:	f009 fb6f 	bl	19538 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    fe5a:	f8d5 30f8 	ldr.w	r3, [r5, #248]	; 0xf8
    fe5e:	b153      	cbz	r3, fe76 <hci_tx_thread+0xc2>
		BT_ERR("Uncleared pending sent_cmd");
    fe60:	2145      	movs	r1, #69	; 0x45
    fe62:	4825      	ldr	r0, [pc, #148]	; (fef8 <hci_tx_thread+0x144>)
    fe64:	f00a fd04 	bl	1a870 <printk>
		net_buf_unref(bt_dev.sent_cmd);
    fe68:	f8d5 00f8 	ldr.w	r0, [r5, #248]	; 0xf8
    fe6c:	f005 fc8a 	bl	15784 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    fe70:	2300      	movs	r3, #0
    fe72:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
	bt_dev.sent_cmd = net_buf_ref(buf);
    fe76:	4620      	mov	r0, r4
    fe78:	f005 fcc8 	bl	1580c <net_buf_ref>
    fe7c:	f8c5 00f8 	str.w	r0, [r5, #248]	; 0xf8
	err = bt_send(buf);
    fe80:	4620      	mov	r0, r4
    fe82:	f7ff fdd5 	bl	fa30 <bt_send>
	if (err) {
    fe86:	4602      	mov	r2, r0
    fe88:	b1e0      	cbz	r0, fec4 <hci_tx_thread+0x110>
		BT_ERR("Unable to send to driver (err %d)", err);
    fe8a:	2145      	movs	r1, #69	; 0x45
    fe8c:	481b      	ldr	r0, [pc, #108]	; (fefc <hci_tx_thread+0x148>)
    fe8e:	f00a fcef 	bl	1a870 <printk>
	z_impl_k_sem_give(sem);
    fe92:	481b      	ldr	r0, [pc, #108]	; (ff00 <hci_tx_thread+0x14c>)
    fe94:	f009 fb14 	bl	194c0 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    fe98:	4620      	mov	r0, r4
    fe9a:	f005 fafb 	bl	15494 <net_buf_id>
    fe9e:	220c      	movs	r2, #12
    fea0:	4b18      	ldr	r3, [pc, #96]	; (ff04 <hci_tx_thread+0x150>)
    fea2:	211f      	movs	r1, #31
    fea4:	fb02 3000 	mla	r0, r2, r0, r3
    fea8:	4622      	mov	r2, r4
    feaa:	8840      	ldrh	r0, [r0, #2]
    feac:	f7fe ff20 	bl	ecf0 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    feb0:	f8d5 00f8 	ldr.w	r0, [r5, #248]	; 0xf8
    feb4:	f005 fc66 	bl	15784 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    feb8:	2300      	movs	r3, #0
		net_buf_unref(buf);
    feba:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    febc:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
		net_buf_unref(buf);
    fec0:	f005 fc60 	bl	15784 <net_buf_unref>
	for (; count; ev++, count--) {
    fec4:	3714      	adds	r7, #20
    fec6:	3e01      	subs	r6, #1
    fec8:	e79f      	b.n	fe0a <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    feca:	2b01      	cmp	r3, #1
    fecc:	d1fa      	bne.n	fec4 <hci_tx_thread+0x110>
					conn = CONTAINER_OF(ev->fifo,
    fece:	6938      	ldr	r0, [r7, #16]
					bt_conn_process_tx(conn);
    fed0:	3834      	subs	r0, #52	; 0x34
    fed2:	f001 febb 	bl	11c4c <bt_conn_process_tx>
    fed6:	e7f5      	b.n	fec4 <hci_tx_thread+0x110>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    fed8:	2157      	movs	r1, #87	; 0x57
    feda:	480b      	ldr	r0, [pc, #44]	; (ff08 <hci_tx_thread+0x154>)
    fedc:	f00a fcc8 	bl	1a870 <printk>
    fee0:	e7f0      	b.n	fec4 <hci_tx_thread+0x110>
    fee2:	bf00      	nop
    fee4:	2000832c 	.word	0x2000832c
    fee8:	0002135f 	.word	0x0002135f
    feec:	0001fdfa 	.word	0x0001fdfa
    fef0:	20008000 	.word	0x20008000
    fef4:	20008118 	.word	0x20008118
    fef8:	00021689 	.word	0x00021689
    fefc:	0002157c 	.word	0x0002157c
    ff00:	200080e0 	.word	0x200080e0
    ff04:	2000ab60 	.word	0x2000ab60
    ff08:	000216a9 	.word	0x000216a9

0000ff0c <hci_event_prio>:
{
    ff0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ff10:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    ff12:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    ff16:	4630      	mov	r0, r6
    ff18:	f00d fa20 	bl	1d35c <net_buf_simple_headroom>
	state->len = buf->len;
    ff1c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    ff20:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
    ff22:	f1b8 0f01 	cmp.w	r8, #1
    ff26:	d80b      	bhi.n	ff40 <hci_event_prio+0x34>
    ff28:	f641 02ae 	movw	r2, #6318	; 0x18ae
    ff2c:	491a      	ldr	r1, [pc, #104]	; (ff98 <hci_event_prio+0x8c>)
    ff2e:	481b      	ldr	r0, [pc, #108]	; (ff9c <hci_event_prio+0x90>)
    ff30:	f00a fc9e 	bl	1a870 <printk>
    ff34:	4040      	eors	r0, r0
    ff36:	f380 8811 	msr	BASEPRI, r0
    ff3a:	f04f 0003 	mov.w	r0, #3
    ff3e:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    ff40:	4630      	mov	r0, r6
    ff42:	2102      	movs	r1, #2
    ff44:	f005 fd16 	bl	15974 <net_buf_simple_pull_mem>
    ff48:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    ff4a:	7800      	ldrb	r0, [r0, #0]
    ff4c:	f00b ffa0 	bl	1be90 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    ff50:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    ff52:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    ff54:	d40b      	bmi.n	ff6e <hci_event_prio+0x62>
    ff56:	f641 02b2 	movw	r2, #6322	; 0x18b2
    ff5a:	490f      	ldr	r1, [pc, #60]	; (ff98 <hci_event_prio+0x8c>)
    ff5c:	480f      	ldr	r0, [pc, #60]	; (ff9c <hci_event_prio+0x90>)
    ff5e:	f00a fc87 	bl	1a870 <printk>
    ff62:	4040      	eors	r0, r0
    ff64:	f380 8811 	msr	BASEPRI, r0
    ff68:	f04f 0003 	mov.w	r0, #3
    ff6c:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    ff6e:	2305      	movs	r3, #5
    ff70:	4621      	mov	r1, r4
    ff72:	4a0b      	ldr	r2, [pc, #44]	; (ffa0 <hci_event_prio+0x94>)
    ff74:	7838      	ldrb	r0, [r7, #0]
    ff76:	f7fe fdb3 	bl	eae0 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    ff7a:	07b3      	lsls	r3, r6, #30
    ff7c:	d507      	bpl.n	ff8e <hci_event_prio+0x82>
	buf->data = buf->__buf + state->offset;
    ff7e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    ff80:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    ff84:	fa10 f585 	uxtah	r5, r0, r5
    ff88:	60a5      	str	r5, [r4, #8]
}
    ff8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    ff8e:	4620      	mov	r0, r4
}
    ff90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    ff94:	f005 bbf6 	b.w	15784 <net_buf_unref>
    ff98:	0002135f 	.word	0x0002135f
    ff9c:	0001fdfa 	.word	0x0001fdfa
    ffa0:	0001ec60 	.word	0x0001ec60

0000ffa4 <bt_recv>:
{
    ffa4:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    ffa6:	7d02      	ldrb	r2, [r0, #20]
    ffa8:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
    ffaa:	2a01      	cmp	r2, #1
    ffac:	d007      	beq.n	ffbe <bt_recv+0x1a>
    ffae:	2a03      	cmp	r2, #3
    ffb0:	d113      	bne.n	ffda <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
    ffb2:	480f      	ldr	r0, [pc, #60]	; (fff0 <bt_recv+0x4c>)
    ffb4:	4629      	mov	r1, r5
    ffb6:	f005 fbb7 	bl	15728 <net_buf_put>
		return 0;
    ffba:	2000      	movs	r0, #0
    ffbc:	e00c      	b.n	ffd8 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    ffbe:	6883      	ldr	r3, [r0, #8]
    ffc0:	7818      	ldrb	r0, [r3, #0]
    ffc2:	f00b ff65 	bl	1be90 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    ffc6:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    ffc8:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    ffca:	d502      	bpl.n	ffd2 <bt_recv+0x2e>
			hci_event_prio(buf);
    ffcc:	4628      	mov	r0, r5
    ffce:	f7ff ff9d 	bl	ff0c <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    ffd2:	f014 0002 	ands.w	r0, r4, #2
    ffd6:	d1ec      	bne.n	ffb2 <bt_recv+0xe>
}
    ffd8:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    ffda:	2145      	movs	r1, #69	; 0x45
    ffdc:	4805      	ldr	r0, [pc, #20]	; (fff4 <bt_recv+0x50>)
    ffde:	f00a fc47 	bl	1a870 <printk>
		net_buf_unref(buf);
    ffe2:	4628      	mov	r0, r5
    ffe4:	f005 fbce 	bl	15784 <net_buf_unref>
		return -EINVAL;
    ffe8:	f06f 0015 	mvn.w	r0, #21
    ffec:	e7f4      	b.n	ffd8 <bt_recv+0x34>
    ffee:	bf00      	nop
    fff0:	200080fc 	.word	0x200080fc
    fff4:	000216cf 	.word	0x000216cf

0000fff8 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    fff8:	4a08      	ldr	r2, [pc, #32]	; (1001c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x1c>)
{
    fffa:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    fffc:	f8d2 0134 	ldr.w	r0, [r2, #308]	; 0x134
   10000:	b930      	cbnz	r0, 10010 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x10>
	if (!drv->open || !drv->send) {
   10002:	68d9      	ldr	r1, [r3, #12]
   10004:	b139      	cbz	r1, 10016 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x16>
   10006:	6919      	ldr	r1, [r3, #16]
   10008:	b129      	cbz	r1, 10016 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x16>
	bt_dev.drv = drv;
   1000a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	return 0;
   1000e:	4770      	bx	lr
		return -EALREADY;
   10010:	f06f 0044 	mvn.w	r0, #68	; 0x44
   10014:	4770      	bx	lr
		return -EINVAL;
   10016:	f06f 0015 	mvn.w	r0, #21
}
   1001a:	4770      	bx	lr
   1001c:	20008000 	.word	0x20008000

00010020 <bt_finalize_init>:
{
   10020:	b508      	push	{r3, lr}
   10022:	2102      	movs	r1, #2
   10024:	4803      	ldr	r0, [pc, #12]	; (10034 <bt_finalize_init+0x14>)
   10026:	f00b ff5a 	bl	1bede <atomic_or>
}
   1002a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
   1002e:	2000      	movs	r0, #0
   10030:	f7ff bb68 	b.w	f704 <bt_le_scan_update>
   10034:	20008094 	.word	0x20008094

00010038 <bt_init>:
{
   10038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   1003a:	4d60      	ldr	r5, [pc, #384]	; (101bc <bt_init+0x184>)
   1003c:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
   10040:	6899      	ldr	r1, [r3, #8]
   10042:	f011 0101 	ands.w	r1, r1, #1
   10046:	d11e      	bne.n	10086 <bt_init+0x4e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   10048:	f640 4003 	movw	r0, #3075	; 0xc03
   1004c:	aa01      	add	r2, sp, #4
   1004e:	f7fe fffb 	bl	f048 <bt_hci_cmd_send_sync>
		if (err) {
   10052:	4604      	mov	r4, r0
   10054:	2800      	cmp	r0, #0
   10056:	f040 80ad 	bne.w	101b4 <bt_init+0x17c>
	uint8_t status = buf->data[0];
   1005a:	9b01      	ldr	r3, [sp, #4]
   1005c:	689b      	ldr	r3, [r3, #8]
	if (status) {
   1005e:	781b      	ldrb	r3, [r3, #0]
   10060:	b973      	cbnz	r3, 10080 <bt_init+0x48>
	scan_dev_found_cb = NULL;
   10062:	4a57      	ldr	r2, [pc, #348]	; (101c0 <bt_init+0x188>)
   10064:	6013      	str	r3, [r2, #0]
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   10066:	f105 0394 	add.w	r3, r5, #148	; 0x94
   1006a:	4618      	mov	r0, r3
   1006c:	f00b ff31 	bl	1bed2 <atomic_get>
   10070:	f000 0005 	and.w	r0, r0, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   10074:	e8d3 2fef 	ldaex	r2, [r3]
   10078:	e8c3 0fe1 	stlex	r1, r0, [r3]
   1007c:	2900      	cmp	r1, #0
   1007e:	d1f9      	bne.n	10074 <bt_init+0x3c>
		net_buf_unref(rsp);
   10080:	9801      	ldr	r0, [sp, #4]
   10082:	f005 fb7f 	bl	15784 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   10086:	2100      	movs	r1, #0
   10088:	f241 0003 	movw	r0, #4099	; 0x1003
   1008c:	aa01      	add	r2, sp, #4
   1008e:	f7fe ffdb 	bl	f048 <bt_hci_cmd_send_sync>
	if (err) {
   10092:	4604      	mov	r4, r0
   10094:	2800      	cmp	r0, #0
   10096:	f040 808d 	bne.w	101b4 <bt_init+0x17c>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   1009a:	9b01      	ldr	r3, [sp, #4]
   1009c:	2208      	movs	r2, #8
   1009e:	6899      	ldr	r1, [r3, #8]
   100a0:	4848      	ldr	r0, [pc, #288]	; (101c4 <bt_init+0x18c>)
   100a2:	3101      	adds	r1, #1
   100a4:	f00b fe28 	bl	1bcf8 <memcpy>
	net_buf_unref(rsp);
   100a8:	9801      	ldr	r0, [sp, #4]
   100aa:	f005 fb6b 	bl	15784 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   100ae:	4621      	mov	r1, r4
   100b0:	f241 0001 	movw	r0, #4097	; 0x1001
   100b4:	aa01      	add	r2, sp, #4
   100b6:	f7fe ffc7 	bl	f048 <bt_hci_cmd_send_sync>
	if (err) {
   100ba:	4604      	mov	r4, r0
   100bc:	2800      	cmp	r0, #0
   100be:	d179      	bne.n	101b4 <bt_init+0x17c>
	read_local_ver_complete(rsp);
   100c0:	9801      	ldr	r0, [sp, #4]
   100c2:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   100c4:	785a      	ldrb	r2, [r3, #1]
   100c6:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   100ca:	78d9      	ldrb	r1, [r3, #3]
   100cc:	789a      	ldrb	r2, [r3, #2]
   100ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   100d2:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
   100d4:	791a      	ldrb	r2, [r3, #4]
   100d6:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   100da:	7a19      	ldrb	r1, [r3, #8]
   100dc:	79da      	ldrb	r2, [r3, #7]
   100de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   100e2:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   100e4:	795a      	ldrb	r2, [r3, #5]
   100e6:	799b      	ldrb	r3, [r3, #6]
   100e8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   100ec:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
   100ee:	f005 fb49 	bl	15784 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   100f2:	4621      	mov	r1, r4
   100f4:	f241 0002 	movw	r0, #4098	; 0x1002
   100f8:	aa01      	add	r2, sp, #4
   100fa:	f7fe ffa5 	bl	f048 <bt_hci_cmd_send_sync>
	if (err) {
   100fe:	4604      	mov	r4, r0
   10100:	2800      	cmp	r0, #0
   10102:	d157      	bne.n	101b4 <bt_init+0x17c>
	memcpy(bt_dev.supported_commands, rp->commands,
   10104:	9b01      	ldr	r3, [sp, #4]
   10106:	2240      	movs	r2, #64	; 0x40
   10108:	6899      	ldr	r1, [r3, #8]
   1010a:	482f      	ldr	r0, [pc, #188]	; (101c8 <bt_init+0x190>)
   1010c:	3101      	adds	r1, #1
   1010e:	f00b fdf3 	bl	1bcf8 <memcpy>
	net_buf_unref(rsp);
   10112:	9801      	ldr	r0, [sp, #4]
   10114:	f005 fb36 	bl	15784 <net_buf_unref>
		err = prng_init();
   10118:	f000 fed6 	bl	10ec8 <prng_init>
		if (err) {
   1011c:	4604      	mov	r4, r0
   1011e:	2800      	cmp	r0, #0
   10120:	d148      	bne.n	101b4 <bt_init+0x17c>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   10122:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
   10126:	069f      	lsls	r7, r3, #26
   10128:	d40e      	bmi.n	10148 <bt_init+0x110>
		BT_WARN("Controller to host flow control not supported");
   1012a:	2157      	movs	r1, #87	; 0x57
   1012c:	4827      	ldr	r0, [pc, #156]	; (101cc <bt_init+0x194>)
   1012e:	f00a fb9f 	bl	1a870 <printk>
	if (!BT_FEAT_LE(bt_dev.features)) {
   10132:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   10136:	065e      	lsls	r6, r3, #25
   10138:	d44c      	bmi.n	101d4 <bt_init+0x19c>
		BT_ERR("Non-LE capable controller detected!");
   1013a:	2145      	movs	r1, #69	; 0x45
   1013c:	4824      	ldr	r0, [pc, #144]	; (101d0 <bt_init+0x198>)
   1013e:	f00a fb97 	bl	1a870 <printk>
		return -ENODEV;
   10142:	f06f 0412 	mvn.w	r4, #18
   10146:	e035      	b.n	101b4 <bt_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
   10148:	2107      	movs	r1, #7
   1014a:	f640 4033 	movw	r0, #3123	; 0xc33
   1014e:	f7fe ff31 	bl	efb4 <bt_hci_cmd_create>
	if (!buf) {
   10152:	4607      	mov	r7, r0
   10154:	b910      	cbnz	r0, 1015c <bt_init+0x124>
		return -ENOBUFS;
   10156:	f06f 0436 	mvn.w	r4, #54	; 0x36
   1015a:	e02b      	b.n	101b4 <bt_init+0x17c>
	return net_buf_simple_add(&buf->b, len);
   1015c:	2107      	movs	r1, #7
   1015e:	3008      	adds	r0, #8
   10160:	f005 fc26 	bl	159b0 <net_buf_simple_add>
	(void)memset(hbs, 0, sizeof(*hbs));
   10164:	4621      	mov	r1, r4
   10166:	2207      	movs	r2, #7
   10168:	4606      	mov	r6, r0
   1016a:	f00b fdf0 	bl	1bd4e <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
   1016e:	231b      	movs	r3, #27
   10170:	7033      	strb	r3, [r6, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
   10172:	2306      	movs	r3, #6
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
   10174:	4622      	mov	r2, r4
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
   10176:	7074      	strb	r4, [r6, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
   10178:	7134      	strb	r4, [r6, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
   1017a:	4639      	mov	r1, r7
   1017c:	f640 4033 	movw	r0, #3123	; 0xc33
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
   10180:	70f3      	strb	r3, [r6, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
   10182:	f7fe ff61 	bl	f048 <bt_hci_cmd_send_sync>
	if (err) {
   10186:	4604      	mov	r4, r0
   10188:	b9a0      	cbnz	r0, 101b4 <bt_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
   1018a:	2101      	movs	r1, #1
   1018c:	f640 4031 	movw	r0, #3121	; 0xc31
   10190:	f7fe ff10 	bl	efb4 <bt_hci_cmd_create>
	if (!buf) {
   10194:	4606      	mov	r6, r0
   10196:	2800      	cmp	r0, #0
   10198:	d0dd      	beq.n	10156 <bt_init+0x11e>
	return net_buf_simple_add_u8(&buf->b, val);
   1019a:	2101      	movs	r1, #1
   1019c:	3008      	adds	r0, #8
   1019e:	f00d f8f5 	bl	1d38c <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
   101a2:	4622      	mov	r2, r4
   101a4:	4631      	mov	r1, r6
   101a6:	f640 4031 	movw	r0, #3121	; 0xc31
   101aa:	f7fe ff4d 	bl	f048 <bt_hci_cmd_send_sync>
	if (err) {
   101ae:	4604      	mov	r4, r0
   101b0:	2800      	cmp	r0, #0
   101b2:	d0be      	beq.n	10132 <bt_init+0xfa>
}
   101b4:	4620      	mov	r0, r4
   101b6:	b003      	add	sp, #12
   101b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   101ba:	bf00      	nop
   101bc:	20008000 	.word	0x20008000
   101c0:	2000ab84 	.word	0x2000ab84
   101c4:	2000803c 	.word	0x2000803c
   101c8:	20008044 	.word	0x20008044
   101cc:	000216e8 	.word	0x000216e8
   101d0:	0002171b 	.word	0x0002171b
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   101d4:	2100      	movs	r1, #0
   101d6:	f242 0003 	movw	r0, #8195	; 0x2003
   101da:	aa01      	add	r2, sp, #4
   101dc:	f7fe ff34 	bl	f048 <bt_hci_cmd_send_sync>
	if (err) {
   101e0:	4604      	mov	r4, r0
   101e2:	2800      	cmp	r0, #0
   101e4:	d1e6      	bne.n	101b4 <bt_init+0x17c>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   101e6:	9b01      	ldr	r3, [sp, #4]
   101e8:	2208      	movs	r2, #8
   101ea:	6899      	ldr	r1, [r3, #8]
   101ec:	48a6      	ldr	r0, [pc, #664]	; (10488 <bt_init+0x450>)
   101ee:	3101      	adds	r1, #1
   101f0:	f00b fd82 	bl	1bcf8 <memcpy>
	net_buf_unref(rsp);
   101f4:	9801      	ldr	r0, [sp, #4]
   101f6:	f005 fac5 	bl	15784 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   101fa:	4621      	mov	r1, r4
   101fc:	f242 0002 	movw	r0, #8194	; 0x2002
   10200:	aa01      	add	r2, sp, #4
   10202:	f7fe ff21 	bl	f048 <bt_hci_cmd_send_sync>
		if (err) {
   10206:	4604      	mov	r4, r0
   10208:	2800      	cmp	r0, #0
   1020a:	d1d3      	bne.n	101b4 <bt_init+0x17c>
		le_read_buffer_size_complete(rsp);
   1020c:	9b01      	ldr	r3, [sp, #4]
   1020e:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   10210:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   10214:	b291      	uxth	r1, r2
   10216:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	if (!bt_dev.le.acl_mtu) {
   1021a:	b121      	cbz	r1, 10226 <bt_init+0x1ee>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   1021c:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1021e:	489b      	ldr	r0, [pc, #620]	; (1048c <bt_init+0x454>)
   10220:	4611      	mov	r1, r2
   10222:	f00d ff3a 	bl	1e09a <z_impl_k_sem_init>
		net_buf_unref(rsp);
   10226:	9801      	ldr	r0, [sp, #4]
   10228:	f005 faac 	bl	15784 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1022c:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
   10230:	f016 0620 	ands.w	r6, r6, #32
   10234:	f000 80d4 	beq.w	103e0 <bt_init+0x3a8>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   10238:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
   1023c:	071c      	lsls	r4, r3, #28
   1023e:	d512      	bpl.n	10266 <bt_init+0x22e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   10240:	2100      	movs	r1, #0
   10242:	f242 001c 	movw	r0, #8220	; 0x201c
   10246:	aa01      	add	r2, sp, #4
   10248:	f7fe fefe 	bl	f048 <bt_hci_cmd_send_sync>
		if (err) {
   1024c:	4604      	mov	r4, r0
   1024e:	2800      	cmp	r0, #0
   10250:	d1b0      	bne.n	101b4 <bt_init+0x17c>
		le_read_supp_states_complete(rsp);
   10252:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   10254:	6883      	ldr	r3, [r0, #8]
   10256:	f8d3 2001 	ldr.w	r2, [r3, #1]
   1025a:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   1025e:	e9c5 2328 	strd	r2, r3, [r5, #160]	; 0xa0
		net_buf_unref(rsp);
   10262:	f005 fa8f 	bl	15784 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   10266:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
   1026a:	0698      	lsls	r0, r3, #26
   1026c:	d524      	bpl.n	102b8 <bt_init+0x280>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1026e:	4668      	mov	r0, sp
   10270:	f10d 0102 	add.w	r1, sp, #2
   10274:	f7fe ff4a 	bl	f10c <hci_le_read_max_data_len>
		if (err) {
   10278:	4604      	mov	r4, r0
   1027a:	2800      	cmp	r0, #0
   1027c:	d19a      	bne.n	101b4 <bt_init+0x17c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1027e:	2104      	movs	r1, #4
   10280:	f242 0024 	movw	r0, #8228	; 0x2024
   10284:	f7fe fe96 	bl	efb4 <bt_hci_cmd_create>
		if (!buf) {
   10288:	4606      	mov	r6, r0
   1028a:	2800      	cmp	r0, #0
   1028c:	f43f af63 	beq.w	10156 <bt_init+0x11e>
	return net_buf_simple_add(&buf->b, len);
   10290:	2104      	movs	r1, #4
   10292:	3008      	adds	r0, #8
   10294:	f005 fb8c 	bl	159b0 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   10298:	f8bd 3000 	ldrh.w	r3, [sp]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1029c:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   1029e:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   102a0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   102a4:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   102a6:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   102a8:	f242 0024 	movw	r0, #8228	; 0x2024
   102ac:	f7fe fecc 	bl	f048 <bt_hci_cmd_send_sync>
		if (err) {
   102b0:	4604      	mov	r4, r0
   102b2:	2800      	cmp	r0, #0
   102b4:	f47f af7e 	bne.w	101b4 <bt_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   102b8:	2108      	movs	r1, #8
   102ba:	f242 0001 	movw	r0, #8193	; 0x2001
   102be:	f7fe fe79 	bl	efb4 <bt_hci_cmd_create>
	if (!buf) {
   102c2:	4604      	mov	r4, r0
   102c4:	2800      	cmp	r0, #0
   102c6:	f43f af46 	beq.w	10156 <bt_init+0x11e>
   102ca:	2108      	movs	r1, #8
   102cc:	4408      	add	r0, r1
   102ce:	f005 fb6f 	bl	159b0 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   102d2:	f895 2098 	ldrb.w	r2, [r5, #152]	; 0x98
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   102d6:	f012 0f02 	tst.w	r2, #2
   102da:	bf14      	ite	ne
   102dc:	232f      	movne	r3, #47	; 0x2f
   102de:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   102e0:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   102e2:	f895 2099 	ldrb.w	r2, [r5, #153]	; 0x99
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   102e6:	bf48      	it	mi
   102e8:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   102ec:	f012 0f09 	tst.w	r2, #9
	dst[0] = val;
   102f0:	f04f 0200 	mov.w	r2, #0
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   102f4:	bf18      	it	ne
   102f6:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
   102fa:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   102fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   10300:	4621      	mov	r1, r4
   10302:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   10304:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   10306:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   10308:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   1030a:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   1030c:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   1030e:	71c2      	strb	r2, [r0, #7]
   10310:	f242 0001 	movw	r0, #8193	; 0x2001
   10314:	f7fe fe98 	bl	f048 <bt_hci_cmd_send_sync>
	if (err) {
   10318:	4604      	mov	r4, r0
   1031a:	2800      	cmp	r0, #0
   1031c:	f47f af4a 	bne.w	101b4 <bt_init+0x17c>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   10320:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   10324:	069a      	lsls	r2, r3, #26
   10326:	d41e      	bmi.n	10366 <bt_init+0x32e>
	if (bt_dev.le.acl_mtu) {
   10328:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
   1032c:	b9d9      	cbnz	r1, 10366 <bt_init+0x32e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   1032e:	f241 0005 	movw	r0, #4101	; 0x1005
   10332:	aa01      	add	r2, sp, #4
   10334:	f7fe fe88 	bl	f048 <bt_hci_cmd_send_sync>
	if (err) {
   10338:	4604      	mov	r4, r0
   1033a:	2800      	cmp	r0, #0
   1033c:	f47f af3a 	bne.w	101b4 <bt_init+0x17c>
	if (bt_dev.le.acl_mtu) {
   10340:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
   10344:	b963      	cbnz	r3, 10360 <bt_init+0x328>
   10346:	9b01      	ldr	r3, [sp, #4]
   10348:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   1034a:	785a      	ldrb	r2, [r3, #1]
   1034c:	7899      	ldrb	r1, [r3, #2]
   1034e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   10352:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   10356:	889a      	ldrh	r2, [r3, #4]
   10358:	484c      	ldr	r0, [pc, #304]	; (1048c <bt_init+0x454>)
   1035a:	4611      	mov	r1, r2
   1035c:	f00d fe9d 	bl	1e09a <z_impl_k_sem_init>
	net_buf_unref(rsp);
   10360:	9801      	ldr	r0, [sp, #4]
   10362:	f005 fa0f 	bl	15784 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   10366:	2108      	movs	r1, #8
   10368:	f640 4001 	movw	r0, #3073	; 0xc01
   1036c:	f7fe fe22 	bl	efb4 <bt_hci_cmd_create>
	if (!buf) {
   10370:	4604      	mov	r4, r0
   10372:	2800      	cmp	r0, #0
   10374:	f43f aeef 	beq.w	10156 <bt_init+0x11e>
   10378:	2108      	movs	r1, #8
   1037a:	4408      	add	r0, r1
   1037c:	f005 fb18 	bl	159b0 <net_buf_simple_add>
	dst[0] = val;
   10380:	2310      	movs	r3, #16
   10382:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   10384:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
   10386:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   10388:	7043      	strb	r3, [r0, #1]
   1038a:	2602      	movs	r6, #2
   1038c:	2320      	movs	r3, #32
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   1038e:	4621      	mov	r1, r4
	dst[0] = val;
   10390:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   10392:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
   10394:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   10396:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   10398:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   1039a:	71c3      	strb	r3, [r0, #7]
   1039c:	f640 4001 	movw	r0, #3073	; 0xc01
   103a0:	f7fe fe52 	bl	f048 <bt_hci_cmd_send_sync>
	if (err) {
   103a4:	4604      	mov	r4, r0
   103a6:	2800      	cmp	r0, #0
   103a8:	f47f af04 	bne.w	101b4 <bt_init+0x17c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   103ac:	4601      	mov	r1, r0
   103ae:	aa01      	add	r2, sp, #4
   103b0:	f64f 4001 	movw	r0, #64513	; 0xfc01
   103b4:	f7fe fe48 	bl	f048 <bt_hci_cmd_send_sync>
	if (err) {
   103b8:	4604      	mov	r4, r0
   103ba:	b360      	cbz	r0, 10416 <bt_init+0x3de>
		BT_WARN("Vendor HCI extensions not available");
   103bc:	2157      	movs	r1, #87	; 0x57
   103be:	4834      	ldr	r0, [pc, #208]	; (10490 <bt_init+0x458>)
			BT_WARN("Failed to read supported vendor features");
   103c0:	f00a fa56 	bl	1a870 <printk>
		err = bt_conn_init();
   103c4:	f001 fcd0 	bl	11d68 <bt_conn_init>
		if (err) {
   103c8:	4604      	mov	r4, r0
   103ca:	2800      	cmp	r0, #0
   103cc:	f47f aef2 	bne.w	101b4 <bt_init+0x17c>
		if (!bt_dev.id_count) {
   103d0:	79eb      	ldrb	r3, [r5, #7]
   103d2:	2b00      	cmp	r3, #0
   103d4:	d150      	bne.n	10478 <bt_init+0x440>
			BT_INFO("No ID address. App must call settings_load()");
   103d6:	2149      	movs	r1, #73	; 0x49
   103d8:	482e      	ldr	r0, [pc, #184]	; (10494 <bt_init+0x45c>)
   103da:	f00a fa49 	bl	1a870 <printk>
			return 0;
   103de:	e6e9      	b.n	101b4 <bt_init+0x17c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   103e0:	2102      	movs	r1, #2
   103e2:	f640 406d 	movw	r0, #3181	; 0xc6d
   103e6:	f7fe fde5 	bl	efb4 <bt_hci_cmd_create>
		if (!buf) {
   103ea:	4604      	mov	r4, r0
   103ec:	2800      	cmp	r0, #0
   103ee:	f43f aeb2 	beq.w	10156 <bt_init+0x11e>
   103f2:	2102      	movs	r1, #2
   103f4:	3008      	adds	r0, #8
   103f6:	f005 fadb 	bl	159b0 <net_buf_simple_add>
		cp_le->le = 0x01;
   103fa:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   103fc:	4621      	mov	r1, r4
		cp_le->le = 0x01;
   103fe:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   10400:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   10402:	4632      	mov	r2, r6
   10404:	f640 406d 	movw	r0, #3181	; 0xc6d
   10408:	f7fe fe1e 	bl	f048 <bt_hci_cmd_send_sync>
		if (err) {
   1040c:	4604      	mov	r4, r0
   1040e:	2800      	cmp	r0, #0
   10410:	f43f af12 	beq.w	10238 <bt_init+0x200>
   10414:	e6ce      	b.n	101b4 <bt_init+0x17c>
	net_buf_unref(rsp);
   10416:	9801      	ldr	r0, [sp, #4]
   10418:	f005 f9b4 	bl	15784 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   1041c:	4621      	mov	r1, r4
   1041e:	f64f 4002 	movw	r0, #64514	; 0xfc02
   10422:	aa01      	add	r2, sp, #4
   10424:	f7fe fe10 	bl	f048 <bt_hci_cmd_send_sync>
	if (err) {
   10428:	4604      	mov	r4, r0
   1042a:	b110      	cbz	r0, 10432 <bt_init+0x3fa>
		BT_WARN("Failed to read supported vendor commands");
   1042c:	2157      	movs	r1, #87	; 0x57
   1042e:	481a      	ldr	r0, [pc, #104]	; (10498 <bt_init+0x460>)
   10430:	e7c6      	b.n	103c0 <bt_init+0x388>
	rp.cmds = (void *)rsp->data;
   10432:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   10434:	4632      	mov	r2, r6
   10436:	6899      	ldr	r1, [r3, #8]
   10438:	4818      	ldr	r0, [pc, #96]	; (1049c <bt_init+0x464>)
   1043a:	3101      	adds	r1, #1
   1043c:	f00b fc5c 	bl	1bcf8 <memcpy>
	net_buf_unref(rsp);
   10440:	9801      	ldr	r0, [sp, #4]
   10442:	f005 f99f 	bl	15784 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   10446:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
   1044a:	075b      	lsls	r3, r3, #29
   1044c:	d5ba      	bpl.n	103c4 <bt_init+0x38c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   1044e:	4621      	mov	r1, r4
   10450:	f64f 4003 	movw	r0, #64515	; 0xfc03
   10454:	aa01      	add	r2, sp, #4
   10456:	f7fe fdf7 	bl	f048 <bt_hci_cmd_send_sync>
		if (err) {
   1045a:	b110      	cbz	r0, 10462 <bt_init+0x42a>
			BT_WARN("Failed to read supported vendor features");
   1045c:	2157      	movs	r1, #87	; 0x57
   1045e:	4810      	ldr	r0, [pc, #64]	; (104a0 <bt_init+0x468>)
   10460:	e7ae      	b.n	103c0 <bt_init+0x388>
		memcpy(bt_dev.vs_features, rp.feat->features,
   10462:	2201      	movs	r2, #1
		rp.feat = (void *)rsp->data;
   10464:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   10466:	480f      	ldr	r0, [pc, #60]	; (104a4 <bt_init+0x46c>)
   10468:	6899      	ldr	r1, [r3, #8]
   1046a:	4411      	add	r1, r2
   1046c:	f00b fc44 	bl	1bcf8 <memcpy>
		net_buf_unref(rsp);
   10470:	9801      	ldr	r0, [sp, #4]
   10472:	f005 f987 	bl	15784 <net_buf_unref>
   10476:	e7a5      	b.n	103c4 <bt_init+0x38c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10478:	2104      	movs	r1, #4
   1047a:	480b      	ldr	r0, [pc, #44]	; (104a8 <bt_init+0x470>)
   1047c:	f00b fd2f 	bl	1bede <atomic_or>
	bt_finalize_init();
   10480:	f7ff fdce 	bl	10020 <bt_finalize_init>
	return 0;
   10484:	e696      	b.n	101b4 <bt_init+0x17c>
   10486:	bf00      	nop
   10488:	20008098 	.word	0x20008098
   1048c:	200080c8 	.word	0x200080c8
   10490:	00021744 	.word	0x00021744
   10494:	000217c9 	.word	0x000217c9
   10498:	0002176d 	.word	0x0002176d
   1049c:	20008085 	.word	0x20008085
   104a0:	0002179b 	.word	0x0002179b
   104a4:	20008084 	.word	0x20008084
   104a8:	20008094 	.word	0x20008094

000104ac <init_work>:
{
   104ac:	b510      	push	{r4, lr}
	err = bt_init();
   104ae:	f7ff fdc3 	bl	10038 <bt_init>
	if (ready_cb) {
   104b2:	4b03      	ldr	r3, [pc, #12]	; (104c0 <init_work+0x14>)
   104b4:	681b      	ldr	r3, [r3, #0]
   104b6:	b113      	cbz	r3, 104be <init_work+0x12>
}
   104b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   104bc:	4718      	bx	r3
}
   104be:	bd10      	pop	{r4, pc}
   104c0:	2000ab78 	.word	0x2000ab78

000104c4 <bt_enable>:
{
   104c4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	if (!bt_dev.drv) {
   104c8:	4d35      	ldr	r5, [pc, #212]	; (105a0 <bt_enable+0xdc>)
{
   104ca:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   104cc:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
{
   104d0:	b088      	sub	sp, #32
	if (!bt_dev.drv) {
   104d2:	b94b      	cbnz	r3, 104e8 <bt_enable+0x24>
		BT_ERR("No HCI driver registered");
   104d4:	2145      	movs	r1, #69	; 0x45
   104d6:	4833      	ldr	r0, [pc, #204]	; (105a4 <bt_enable+0xe0>)
   104d8:	f00a f9ca 	bl	1a870 <printk>
		return -ENODEV;
   104dc:	f06f 0412 	mvn.w	r4, #18
}
   104e0:	4620      	mov	r0, r4
   104e2:	b008      	add	sp, #32
   104e4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   104e8:	2101      	movs	r1, #1
   104ea:	f105 0094 	add.w	r0, r5, #148	; 0x94
   104ee:	f00b fcf6 	bl	1bede <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   104f2:	07c2      	lsls	r2, r0, #31
   104f4:	d451      	bmi.n	1059a <bt_enable+0xd6>
		err = bt_settings_init();
   104f6:	f7fe f913 	bl	e720 <bt_settings_init>
		if (err) {
   104fa:	4604      	mov	r4, r0
   104fc:	2800      	cmp	r0, #0
   104fe:	d1ef      	bne.n	104e0 <bt_enable+0x1c>
	ready_cb = cb;
   10500:	4b29      	ldr	r3, [pc, #164]	; (105a8 <bt_enable+0xe4>)
   10502:	f04f 0800 	mov.w	r8, #0
   10506:	f04f 0900 	mov.w	r9, #0
   1050a:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1050c:	f06f 0308 	mvn.w	r3, #8
   10510:	e9cd 0000 	strd	r0, r0, [sp]
   10514:	e9cd 0302 	strd	r0, r3, [sp, #8]
   10518:	9004      	str	r0, [sp, #16]
   1051a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1051e:	e9cd 8906 	strd	r8, r9, [sp, #24]
   10522:	4b22      	ldr	r3, [pc, #136]	; (105ac <bt_enable+0xe8>)
   10524:	4922      	ldr	r1, [pc, #136]	; (105b0 <bt_enable+0xec>)
   10526:	4823      	ldr	r0, [pc, #140]	; (105b4 <bt_enable+0xf0>)
   10528:	f009 f8f2 	bl	19710 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1052c:	4922      	ldr	r1, [pc, #136]	; (105b8 <bt_enable+0xf4>)
   1052e:	4821      	ldr	r0, [pc, #132]	; (105b4 <bt_enable+0xf0>)
   10530:	f00d fdcd 	bl	1e0ce <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   10534:	f06f 0307 	mvn.w	r3, #7
   10538:	f640 0298 	movw	r2, #2200	; 0x898
   1053c:	e9cd 4302 	strd	r4, r3, [sp, #8]
   10540:	e9cd 8906 	strd	r8, r9, [sp, #24]
   10544:	e9cd 4400 	strd	r4, r4, [sp]
   10548:	4b1c      	ldr	r3, [pc, #112]	; (105bc <bt_enable+0xf8>)
   1054a:	491d      	ldr	r1, [pc, #116]	; (105c0 <bt_enable+0xfc>)
   1054c:	9404      	str	r4, [sp, #16]
   1054e:	481d      	ldr	r0, [pc, #116]	; (105c4 <bt_enable+0x100>)
   10550:	f009 f8de 	bl	19710 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   10554:	491c      	ldr	r1, [pc, #112]	; (105c8 <bt_enable+0x104>)
   10556:	481b      	ldr	r0, [pc, #108]	; (105c4 <bt_enable+0x100>)
   10558:	f00d fdb9 	bl	1e0ce <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   1055c:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
   10560:	68db      	ldr	r3, [r3, #12]
   10562:	4798      	blx	r3
	if (err) {
   10564:	4604      	mov	r4, r0
   10566:	b128      	cbz	r0, 10574 <bt_enable+0xb0>
		BT_ERR("HCI driver open failed (%d)", err);
   10568:	4602      	mov	r2, r0
   1056a:	2145      	movs	r1, #69	; 0x45
   1056c:	4817      	ldr	r0, [pc, #92]	; (105cc <bt_enable+0x108>)
   1056e:	f00a f97f 	bl	1a870 <printk>
		return err;
   10572:	e7b5      	b.n	104e0 <bt_enable+0x1c>
	if (!cb) {
   10574:	b926      	cbnz	r6, 10580 <bt_enable+0xbc>
}
   10576:	b008      	add	sp, #32
   10578:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
		return bt_init();
   1057c:	f7ff bd5c 	b.w	10038 <bt_init>
   10580:	2101      	movs	r1, #1
   10582:	f105 0090 	add.w	r0, r5, #144	; 0x90
   10586:	f00b fcaa 	bl	1bede <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1058a:	07c3      	lsls	r3, r0, #31
   1058c:	d4a8      	bmi.n	104e0 <bt_enable+0x1c>
		k_queue_append(&work_q->queue, work);
   1058e:	4810      	ldr	r0, [pc, #64]	; (105d0 <bt_enable+0x10c>)
   10590:	f105 0188 	add.w	r1, r5, #136	; 0x88
   10594:	f00d fd29 	bl	1dfea <k_queue_append>
   10598:	e7a2      	b.n	104e0 <bt_enable+0x1c>
		return -EALREADY;
   1059a:	f06f 0444 	mvn.w	r4, #68	; 0x44
   1059e:	e79f      	b.n	104e0 <bt_enable+0x1c>
   105a0:	20008000 	.word	0x20008000
   105a4:	000217fb 	.word	0x000217fb
   105a8:	2000ab78 	.word	0x2000ab78
   105ac:	0000fdb5 	.word	0x0000fdb5
   105b0:	20010a90 	.word	0x20010a90
   105b4:	20008b20 	.word	0x20008b20
   105b8:	00021819 	.word	0x00021819
   105bc:	0000ebcd 	.word	0x0000ebcd
   105c0:	200101f8 	.word	0x200101f8
   105c4:	20008a90 	.word	0x20008a90
   105c8:	0002181f 	.word	0x0002181f
   105cc:	00021825 	.word	0x00021825
   105d0:	2000a540 	.word	0x2000a540

000105d4 <bt_get_name>:
}
   105d4:	4800      	ldr	r0, [pc, #0]	; (105d8 <bt_get_name+0x4>)
   105d6:	4770      	bx	lr
   105d8:	0001f87d 	.word	0x0001f87d

000105dc <bt_id_create>:
{
   105dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   105de:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   105e0:	4605      	mov	r5, r0
   105e2:	b918      	cbnz	r0, 105ec <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   105e4:	b314      	cbz	r4, 1062c <bt_id_create+0x50>
		return -EINVAL;
   105e6:	f06f 0415 	mvn.w	r4, #21
   105ea:	e01c      	b.n	10626 <bt_id_create+0x4a>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   105ec:	2300      	movs	r3, #0
   105ee:	4669      	mov	r1, sp
   105f0:	9300      	str	r3, [sp, #0]
   105f2:	f8cd 3003 	str.w	r3, [sp, #3]
   105f6:	f00b fc7d 	bl	1bef4 <bt_addr_le_cmp>
   105fa:	2800      	cmp	r0, #0
   105fc:	d0f2      	beq.n	105e4 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   105fe:	782b      	ldrb	r3, [r5, #0]
   10600:	2b01      	cmp	r3, #1
   10602:	d104      	bne.n	1060e <bt_id_create+0x32>
   10604:	79ab      	ldrb	r3, [r5, #6]
   10606:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1060a:	2bc0      	cmp	r3, #192	; 0xc0
   1060c:	d004      	beq.n	10618 <bt_id_create+0x3c>
			BT_ERR("Only static random identity address supported");
   1060e:	2145      	movs	r1, #69	; 0x45
   10610:	480d      	ldr	r0, [pc, #52]	; (10648 <bt_id_create+0x6c>)
   10612:	f00a f92d 	bl	1a870 <printk>
			return -EINVAL;
   10616:	e7e6      	b.n	105e6 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   10618:	4628      	mov	r0, r5
   1061a:	f7fe f949 	bl	e8b0 <id_find>
   1061e:	2800      	cmp	r0, #0
   10620:	dbe0      	blt.n	105e4 <bt_id_create+0x8>
			return -EALREADY;
   10622:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
   10626:	4620      	mov	r0, r4
   10628:	b003      	add	sp, #12
   1062a:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   1062c:	4b07      	ldr	r3, [pc, #28]	; (1064c <bt_id_create+0x70>)
   1062e:	79dc      	ldrb	r4, [r3, #7]
   10630:	2c01      	cmp	r4, #1
   10632:	d006      	beq.n	10642 <bt_id_create+0x66>
	new_id = bt_dev.id_count++;
   10634:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
   10636:	4629      	mov	r1, r5
   10638:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   1063a:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
   1063c:	f7fe fa90 	bl	eb60 <id_create.constprop.0>
	return new_id;
   10640:	e7f1      	b.n	10626 <bt_id_create+0x4a>
		return -ENOMEM;
   10642:	f06f 040b 	mvn.w	r4, #11
   10646:	e7ee      	b.n	10626 <bt_id_create+0x4a>
   10648:	00021846 	.word	0x00021846
   1064c:	20008000 	.word	0x20008000

00010650 <bt_setup_public_id_addr>:
{
   10650:	b570      	push	{r4, r5, r6, lr}
   10652:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   10654:	2100      	movs	r1, #0
   10656:	f241 0009 	movw	r0, #4105	; 0x1009
   1065a:	aa01      	add	r2, sp, #4
   1065c:	f7fe fcf4 	bl	f048 <bt_hci_cmd_send_sync>
	if (err) {
   10660:	4e1d      	ldr	r6, [pc, #116]	; (106d8 <bt_setup_public_id_addr+0x88>)
   10662:	4604      	mov	r4, r0
   10664:	b138      	cbz	r0, 10676 <bt_setup_public_id_addr+0x26>
		BT_WARN("Failed to read public address");
   10666:	2157      	movs	r1, #87	; 0x57
   10668:	481c      	ldr	r0, [pc, #112]	; (106dc <bt_setup_public_id_addr+0x8c>)
   1066a:	f00a f901 	bl	1a870 <printk>
	bt_dev.id_count = bt_read_public_addr(&addr);
   1066e:	2300      	movs	r3, #0
   10670:	71f3      	strb	r3, [r6, #7]
}
   10672:	b006      	add	sp, #24
   10674:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   10676:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
   10678:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1067a:	689d      	ldr	r5, [r3, #8]
   1067c:	a904      	add	r1, sp, #16
   1067e:	3501      	adds	r5, #1
   10680:	9004      	str	r0, [sp, #16]
   10682:	f8ad 0014 	strh.w	r0, [sp, #20]
   10686:	4628      	mov	r0, r5
   10688:	f00b fb25 	bl	1bcd6 <memcmp>
   1068c:	b918      	cbnz	r0, 10696 <bt_setup_public_id_addr+0x46>
		net_buf_unref(rsp);
   1068e:	9801      	ldr	r0, [sp, #4]
   10690:	f005 f878 	bl	15784 <net_buf_unref>
   10694:	e7eb      	b.n	1066e <bt_setup_public_id_addr+0x1e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   10696:	4b12      	ldr	r3, [pc, #72]	; (106e0 <bt_setup_public_id_addr+0x90>)
   10698:	2206      	movs	r2, #6
   1069a:	f8d3 0007 	ldr.w	r0, [r3, #7]
   1069e:	f8b3 300b 	ldrh.w	r3, [r3, #11]
   106a2:	9002      	str	r0, [sp, #8]
   106a4:	a902      	add	r1, sp, #8
   106a6:	4628      	mov	r0, r5
   106a8:	f8ad 300c 	strh.w	r3, [sp, #12]
   106ac:	f00b fb13 	bl	1bcd6 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   106b0:	2800      	cmp	r0, #0
   106b2:	d0ec      	beq.n	1068e <bt_setup_public_id_addr+0x3e>
	memcpy(dst, src, sizeof(*dst));
   106b4:	4629      	mov	r1, r5
   106b6:	2206      	movs	r2, #6
   106b8:	f10d 0011 	add.w	r0, sp, #17
   106bc:	f00b fb1c 	bl	1bcf8 <memcpy>
	net_buf_unref(rsp);
   106c0:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   106c2:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
   106c6:	f005 f85d 	bl	15784 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
   106ca:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
   106cc:	4620      	mov	r0, r4
   106ce:	a904      	add	r1, sp, #16
	bt_dev.id_count = bt_read_public_addr(&addr);
   106d0:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
   106d2:	f7fe fa45 	bl	eb60 <id_create.constprop.0>
   106d6:	e7cc      	b.n	10672 <bt_setup_public_id_addr+0x22>
   106d8:	20008000 	.word	0x20008000
   106dc:	00021879 	.word	0x00021879
   106e0:	0001e7e0 	.word	0x0001e7e0

000106e4 <bt_read_static_addr>:
{
   106e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   106e8:	4b1c      	ldr	r3, [pc, #112]	; (1075c <bt_read_static_addr+0x78>)
{
   106ea:	4607      	mov	r7, r0
   106ec:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
   106f0:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   106f2:	f014 0401 	ands.w	r4, r4, #1
   106f6:	d104      	bne.n	10702 <bt_read_static_addr+0x1e>
		BT_WARN("Read Static Addresses command not available");
   106f8:	2157      	movs	r1, #87	; 0x57
   106fa:	4819      	ldr	r0, [pc, #100]	; (10760 <bt_read_static_addr+0x7c>)
		BT_WARN("No static addresses stored in controller");
   106fc:	f00a f8b8 	bl	1a870 <printk>
   10700:	e00c      	b.n	1071c <bt_read_static_addr+0x38>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   10702:	2100      	movs	r1, #0
   10704:	f64f 4009 	movw	r0, #64521	; 0xfc09
   10708:	aa01      	add	r2, sp, #4
   1070a:	f7fe fc9d 	bl	f048 <bt_hci_cmd_send_sync>
	if (err) {
   1070e:	4605      	mov	r5, r0
   10710:	b140      	cbz	r0, 10724 <bt_read_static_addr+0x40>
		BT_WARN("Failed to read static addresses");
   10712:	2157      	movs	r1, #87	; 0x57
   10714:	4813      	ldr	r0, [pc, #76]	; (10764 <bt_read_static_addr+0x80>)
   10716:	f00a f8ab 	bl	1a870 <printk>
		return 0;
   1071a:	2400      	movs	r4, #0
}
   1071c:	4620      	mov	r0, r4
   1071e:	b002      	add	sp, #8
   10720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   10724:	f04f 0816 	mov.w	r8, #22
	rp = (void *)rsp->data;
   10728:	9b01      	ldr	r3, [sp, #4]
   1072a:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   1072c:	785c      	ldrb	r4, [r3, #1]
   1072e:	42b4      	cmp	r4, r6
   10730:	bf28      	it	cs
   10732:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   10734:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   10736:	42a5      	cmp	r5, r4
   10738:	db07      	blt.n	1074a <bt_read_static_addr+0x66>
	net_buf_unref(rsp);
   1073a:	9801      	ldr	r0, [sp, #4]
   1073c:	f005 f822 	bl	15784 <net_buf_unref>
	if (!cnt) {
   10740:	2c00      	cmp	r4, #0
   10742:	d1eb      	bne.n	1071c <bt_read_static_addr+0x38>
		BT_WARN("No static addresses stored in controller");
   10744:	2157      	movs	r1, #87	; 0x57
   10746:	4808      	ldr	r0, [pc, #32]	; (10768 <bt_read_static_addr+0x84>)
   10748:	e7d8      	b.n	106fc <bt_read_static_addr+0x18>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   1074a:	fb08 7005 	mla	r0, r8, r5, r7
   1074e:	2216      	movs	r2, #22
   10750:	4631      	mov	r1, r6
   10752:	f00b fad1 	bl	1bcf8 <memcpy>
	for (i = 0; i < cnt; i++) {
   10756:	3501      	adds	r5, #1
   10758:	e7ed      	b.n	10736 <bt_read_static_addr+0x52>
   1075a:	bf00      	nop
   1075c:	20008000 	.word	0x20008000
   10760:	0002189c 	.word	0x0002189c
   10764:	000218cd 	.word	0x000218cd
   10768:	000218f2 	.word	0x000218f2

0001076c <bt_setup_random_id_addr>:
{
   1076c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.id_count) {
   1076e:	4d15      	ldr	r5, [pc, #84]	; (107c4 <bt_setup_random_id_addr+0x58>)
{
   10770:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   10772:	79ec      	ldrb	r4, [r5, #7]
   10774:	b9f4      	cbnz	r4, 107b4 <bt_setup_random_id_addr+0x48>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   10776:	2101      	movs	r1, #1
   10778:	a802      	add	r0, sp, #8
   1077a:	f7ff ffb3 	bl	106e4 <bt_read_static_addr>
   1077e:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
   10780:	b1c0      	cbz	r0, 107b4 <bt_setup_random_id_addr+0x48>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   10782:	2716      	movs	r7, #22
   10784:	b2e6      	uxtb	r6, r4
   10786:	ab02      	add	r3, sp, #8
   10788:	2206      	movs	r2, #6
   1078a:	fb07 3106 	mla	r1, r7, r6, r3
   1078e:	f10d 0001 	add.w	r0, sp, #1
   10792:	f00b fab1 	bl	1bcf8 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   10796:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
   10798:	4669      	mov	r1, sp
   1079a:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   1079c:	f88d 3000 	strb.w	r3, [sp]
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   107a0:	3401      	adds	r4, #1
				id_create(i, &addr, irk);
   107a2:	f7fe f9dd 	bl	eb60 <id_create.constprop.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   107a6:	79ea      	ldrb	r2, [r5, #7]
   107a8:	b2e3      	uxtb	r3, r4
   107aa:	429a      	cmp	r2, r3
   107ac:	d8ea      	bhi.n	10784 <bt_setup_random_id_addr+0x18>
}
   107ae:	2000      	movs	r0, #0
   107b0:	b009      	add	sp, #36	; 0x24
   107b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   107b4:	2100      	movs	r1, #0
   107b6:	4608      	mov	r0, r1
}
   107b8:	b009      	add	sp, #36	; 0x24
   107ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   107be:	f7ff bf0d 	b.w	105dc <bt_id_create>
   107c2:	bf00      	nop
   107c4:	20008000 	.word	0x20008000

000107c8 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   107c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   107cc:	469a      	mov	sl, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   107ce:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
   107d0:	690d      	ldr	r5, [r1, #16]
{
   107d2:	b08f      	sub	sp, #60	; 0x3c
	bool dir_adv = (param->peer != NULL), scannable;
   107d4:	ebb5 0b03 	subs.w	fp, r5, r3
{
   107d8:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   107da:	4884      	ldr	r0, [pc, #528]	; (109ec <bt_le_adv_start_legacy+0x224>)
	bool dir_adv = (param->peer != NULL), scannable;
   107dc:	bf18      	it	ne
   107de:	f04f 0b01 	movne.w	fp, #1
	struct bt_conn *conn = NULL;
   107e2:	9307      	str	r3, [sp, #28]
   107e4:	f00b fb75 	bl	1bed2 <atomic_get>
{
   107e8:	4691      	mov	r9, r2
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   107ea:	0782      	lsls	r2, r0, #30
{
   107ec:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   107ee:	f140 80ef 	bpl.w	109d0 <bt_le_adv_start_legacy+0x208>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   107f2:	4608      	mov	r0, r1
   107f4:	f7fe f874 	bl	e8e0 <valid_adv_param>
   107f8:	4607      	mov	r7, r0
   107fa:	2800      	cmp	r0, #0
   107fc:	f000 80eb 	beq.w	109d6 <bt_le_adv_start_legacy+0x20e>
   10800:	487a      	ldr	r0, [pc, #488]	; (109ec <bt_le_adv_start_legacy+0x224>)
   10802:	f00b fb66 	bl	1bed2 <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_OBSERVER) ||
   10806:	0503      	lsls	r3, r0, #20
   10808:	d402      	bmi.n	10810 <bt_le_adv_start_legacy+0x48>
   1080a:	4878      	ldr	r0, [pc, #480]	; (109ec <bt_le_adv_start_legacy+0x224>)
   1080c:	f00b fb61 	bl	1bed2 <atomic_get>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   10810:	f106 0810 	add.w	r8, r6, #16
   10814:	4640      	mov	r0, r8
   10816:	f00b fb5c 	bl	1bed2 <atomic_get>
   1081a:	f3c0 1180 	ubfx	r1, r0, #6, #1
   1081e:	0640      	lsls	r0, r0, #25
   10820:	f100 80dc 	bmi.w	109dc <bt_le_adv_start_legacy+0x214>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
   10824:	220f      	movs	r2, #15
   10826:	a80a      	add	r0, sp, #40	; 0x28
   10828:	9105      	str	r1, [sp, #20]
   1082a:	f00b fa90 	bl	1bd4e <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   1082e:	68a3      	ldr	r3, [r4, #8]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
	set_param.channel_map  = get_adv_channel_map(param->options);
   10830:	6860      	ldr	r0, [r4, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   10832:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   10836:	68e3      	ldr	r3, [r4, #12]
   10838:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   1083c:	f00b fb3a 	bl	1beb4 <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
   10840:	7832      	ldrb	r2, [r6, #0]
   10842:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
   10844:	9905      	ldr	r1, [sp, #20]
	if (adv->id != param->id) {
   10846:	429a      	cmp	r2, r3
	set_param.channel_map  = get_adv_channel_map(param->options);
   10848:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	set_param.filter_policy = get_filter_policy(param->options);
   1084c:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   10850:	d004      	beq.n	1085c <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10852:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   10856:	4865      	ldr	r0, [pc, #404]	; (109ec <bt_le_adv_start_legacy+0x224>)
   10858:	f00b fb4f 	bl	1befa <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
   1085c:	7820      	ldrb	r0, [r4, #0]
	bt_dev.adv_conn_id = adv->id;
   1085e:	4b64      	ldr	r3, [pc, #400]	; (109f0 <bt_le_adv_start_legacy+0x228>)
	adv->id = param->id;
   10860:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   10862:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
   10866:	465a      	mov	r2, fp
   10868:	6861      	ldr	r1, [r4, #4]
   1086a:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   1086e:	f7fe fcd7 	bl	f220 <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
   10872:	4683      	mov	fp, r0
   10874:	2800      	cmp	r0, #0
   10876:	d169      	bne.n	1094c <bt_le_adv_start_legacy+0x184>
		return err;
	}

	if (dir_adv) {
		bt_addr_le_copy(&adv->target_addr, param->peer);
   10878:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
   1087c:	2d00      	cmp	r5, #0
   1087e:	d042      	beq.n	10906 <bt_le_adv_start_legacy+0x13e>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   10880:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   10882:	f00b fb29 	bl	1bed8 <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   10886:	6860      	ldr	r0, [r4, #4]
   10888:	07c1      	lsls	r1, r0, #31
   1088a:	d544      	bpl.n	10916 <bt_le_adv_start_legacy+0x14e>
		scannable = true;

		if (dir_adv) {
   1088c:	2d00      	cmp	r5, #0
   1088e:	d03f      	beq.n	10910 <bt_le_adv_start_legacy+0x148>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   10890:	f010 0f10 	tst.w	r0, #16
   10894:	bf14      	ite	ne
   10896:	2304      	movne	r3, #4
   10898:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   1089a:	6921      	ldr	r1, [r4, #16]
   1089c:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   108a0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   108a4:	f00b fb18 	bl	1bed8 <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   108a8:	210f      	movs	r1, #15
   108aa:	f242 0006 	movw	r0, #8198	; 0x2006
   108ae:	f7fe fb81 	bl	efb4 <bt_hci_cmd_create>
	if (!buf) {
   108b2:	4683      	mov	fp, r0
   108b4:	2800      	cmp	r0, #0
   108b6:	f000 8094 	beq.w	109e2 <bt_le_adv_start_legacy+0x21a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   108ba:	220f      	movs	r2, #15
   108bc:	a90a      	add	r1, sp, #40	; 0x28
   108be:	3008      	adds	r0, #8
   108c0:	f00c fd58 	bl	1d374 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   108c4:	2200      	movs	r2, #0
   108c6:	4659      	mov	r1, fp
   108c8:	f242 0006 	movw	r0, #8198	; 0x2006
   108cc:	f7fe fbbc 	bl	f048 <bt_hci_cmd_send_sync>
	if (err) {
   108d0:	2800      	cmp	r0, #0
   108d2:	f040 8089 	bne.w	109e8 <bt_le_adv_start_legacy+0x220>
		return err;
	}

	if (!dir_adv) {
   108d6:	b34d      	cbz	r5, 1092c <bt_le_adv_start_legacy+0x164>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   108d8:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   108da:	07da      	lsls	r2, r3, #31
   108dc:	d43a      	bmi.n	10954 <bt_le_adv_start_legacy+0x18c>
	return set_le_adv_enable_legacy(adv, enable);
   108de:	2101      	movs	r1, #1
   108e0:	4630      	mov	r0, r6
   108e2:	f7fe fdf7 	bl	f4d4 <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
   108e6:	4683      	mov	fp, r0
   108e8:	2800      	cmp	r0, #0
   108ea:	d06a      	beq.n	109c2 <bt_le_adv_start_legacy+0x1fa>
		BT_ERR("Failed to start advertiser");
   108ec:	4841      	ldr	r0, [pc, #260]	; (109f4 <bt_le_adv_start_legacy+0x22c>)
   108ee:	2145      	movs	r1, #69	; 0x45
   108f0:	f009 ffbe 	bl	1a870 <printk>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   108f4:	9807      	ldr	r0, [sp, #28]
   108f6:	b348      	cbz	r0, 1094c <bt_le_adv_start_legacy+0x184>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   108f8:	2100      	movs	r1, #0
   108fa:	f000 fddb 	bl	114b4 <bt_conn_set_state>
			bt_conn_unref(conn);
   108fe:	9807      	ldr	r0, [sp, #28]
   10900:	f000 fdac 	bl	1145c <bt_conn_unref>
   10904:	e022      	b.n	1094c <bt_le_adv_start_legacy+0x184>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   10906:	9508      	str	r5, [sp, #32]
   10908:	a908      	add	r1, sp, #32
   1090a:	f8cd 5023 	str.w	r5, [sp, #35]	; 0x23
   1090e:	e7b8      	b.n	10882 <bt_le_adv_start_legacy+0xba>
			set_param.type = BT_HCI_ADV_IND;
   10910:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   10914:	e7c8      	b.n	108a8 <bt_le_adv_start_legacy+0xe0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   10916:	9b18      	ldr	r3, [sp, #96]	; 0x60
   10918:	b933      	cbnz	r3, 10928 <bt_le_adv_start_legacy+0x160>
   1091a:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
   1091e:	f1c7 0303 	rsb	r3, r7, #3
   10922:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   10926:	e7bf      	b.n	108a8 <bt_le_adv_start_legacy+0xe0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   10928:	2701      	movs	r7, #1
   1092a:	e7f8      	b.n	1091e <bt_le_adv_start_legacy+0x156>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   1092c:	6863      	ldr	r3, [r4, #4]
   1092e:	4652      	mov	r2, sl
   10930:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   10934:	e9cd 7301 	strd	r7, r3, [sp, #4]
   10938:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1093a:	4649      	mov	r1, r9
   1093c:	9300      	str	r3, [sp, #0]
   1093e:	4630      	mov	r0, r6
   10940:	9b18      	ldr	r3, [sp, #96]	; 0x60
   10942:	f7fe fd53 	bl	f3ec <le_adv_update.constprop.0>
		if (err) {
   10946:	4683      	mov	fp, r0
   10948:	2800      	cmp	r0, #0
   1094a:	d0c5      	beq.n	108d8 <bt_le_adv_start_legacy+0x110>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   1094c:	4658      	mov	r0, fp
   1094e:	b00f      	add	sp, #60	; 0x3c
   10950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
   10954:	4630      	mov	r0, r6
   10956:	a907      	add	r1, sp, #28
   10958:	f7fe fad8 	bl	ef0c <le_adv_start_add_conn>
		if (err) {
   1095c:	4683      	mov	fp, r0
   1095e:	2800      	cmp	r0, #0
   10960:	d0bd      	beq.n	108de <bt_le_adv_start_legacy+0x116>
			if (err == -ENOMEM && !dir_adv &&
   10962:	f110 0f0c 	cmn.w	r0, #12
   10966:	d1f1      	bne.n	1094c <bt_le_adv_start_legacy+0x184>
   10968:	2d00      	cmp	r5, #0
   1096a:	d1ef      	bne.n	1094c <bt_le_adv_start_legacy+0x184>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   1096c:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   1096e:	079b      	lsls	r3, r3, #30
   10970:	d4ec      	bmi.n	1094c <bt_le_adv_start_legacy+0x184>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   10972:	6860      	ldr	r0, [r4, #4]
   10974:	f080 0002 	eor.w	r0, r0, #2
   10978:	f3c0 0b40 	ubfx	fp, r0, #1, #1
   1097c:	f00b 0201 	and.w	r2, fp, #1
   10980:	210c      	movs	r1, #12
   10982:	4640      	mov	r0, r8
   10984:	f00b fac4 	bl	1bf10 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
   10988:	6862      	ldr	r2, [r4, #4]
   1098a:	2107      	movs	r1, #7
   1098c:	4640      	mov	r0, r8
   1098e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   10992:	f00b fabd 	bl	1bf10 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   10996:	6862      	ldr	r2, [r4, #4]
   10998:	2108      	movs	r1, #8
   1099a:	4640      	mov	r0, r8
   1099c:	f002 0201 	and.w	r2, r2, #1
   109a0:	f00b fab6 	bl	1bf10 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   109a4:	463a      	mov	r2, r7
   109a6:	2109      	movs	r1, #9
   109a8:	4640      	mov	r0, r8
   109aa:	f00b fab1 	bl	1bf10 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   109ae:	6862      	ldr	r2, [r4, #4]
   109b0:	210b      	movs	r1, #11
   109b2:	4640      	mov	r0, r8
   109b4:	f3c2 0280 	ubfx	r2, r2, #2, #1
   109b8:	f00b faaa 	bl	1bf10 <atomic_set_bit_to>
	return 0;
   109bc:	f04f 0b00 	mov.w	fp, #0
   109c0:	e7c4      	b.n	1094c <bt_le_adv_start_legacy+0x184>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   109c2:	9807      	ldr	r0, [sp, #28]
   109c4:	b108      	cbz	r0, 109ca <bt_le_adv_start_legacy+0x202>
		bt_conn_unref(conn);
   109c6:	f000 fd49 	bl	1145c <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   109ca:	2d00      	cmp	r5, #0
   109cc:	d1d6      	bne.n	1097c <bt_le_adv_start_legacy+0x1b4>
   109ce:	e7d0      	b.n	10972 <bt_le_adv_start_legacy+0x1aa>
		return -EAGAIN;
   109d0:	f06f 0b0a 	mvn.w	fp, #10
   109d4:	e7ba      	b.n	1094c <bt_le_adv_start_legacy+0x184>
		return -EINVAL;
   109d6:	f06f 0b15 	mvn.w	fp, #21
   109da:	e7b7      	b.n	1094c <bt_le_adv_start_legacy+0x184>
		return -EALREADY;
   109dc:	f06f 0b44 	mvn.w	fp, #68	; 0x44
   109e0:	e7b4      	b.n	1094c <bt_le_adv_start_legacy+0x184>
		return -ENOBUFS;
   109e2:	f06f 0b36 	mvn.w	fp, #54	; 0x36
   109e6:	e7b1      	b.n	1094c <bt_le_adv_start_legacy+0x184>
   109e8:	4683      	mov	fp, r0
   109ea:	e7af      	b.n	1094c <bt_le_adv_start_legacy+0x184>
   109ec:	20008094 	.word	0x20008094
   109f0:	20008000 	.word	0x20008000
   109f4:	00021920 	.word	0x00021920

000109f8 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   109f8:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   109fa:	9c04      	ldr	r4, [sp, #16]
   109fc:	e9cd 3400 	strd	r3, r4, [sp]
   10a00:	4613      	mov	r3, r2
   10a02:	460a      	mov	r2, r1
   10a04:	4601      	mov	r1, r0
   10a06:	4802      	ldr	r0, [pc, #8]	; (10a10 <bt_le_adv_start+0x18>)
   10a08:	f7ff fede 	bl	107c8 <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
   10a0c:	b002      	add	sp, #8
   10a0e:	bd10      	pop	{r4, pc}
   10a10:	20008018 	.word	0x20008018

00010a14 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   10a14:	b530      	push	{r4, r5, lr}
   10a16:	4c29      	ldr	r4, [pc, #164]	; (10abc <bt_le_adv_stop+0xa8>)
   10a18:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   10a1c:	b085      	sub	sp, #20
   10a1e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   10a22:	f00b fa6a 	bl	1befa <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10a26:	f104 0028 	add.w	r0, r4, #40	; 0x28
   10a2a:	f00b fa52 	bl	1bed2 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   10a2e:	0641      	lsls	r1, r0, #25
   10a30:	d403      	bmi.n	10a3a <bt_le_adv_stop+0x26>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		adv_delete_legacy();
		return 0;
   10a32:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   10a34:	4620      	mov	r0, r4
   10a36:	b005      	add	sp, #20
   10a38:	bd30      	pop	{r4, r5, pc}
   10a3a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   10a3e:	f00b fa48 	bl	1bed2 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10a42:	05c2      	lsls	r2, r0, #23
   10a44:	d521      	bpl.n	10a8a <bt_le_adv_stop+0x76>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   10a46:	2300      	movs	r3, #0
   10a48:	4669      	mov	r1, sp
   10a4a:	f104 0021 	add.w	r0, r4, #33	; 0x21
   10a4e:	9300      	str	r3, [sp, #0]
   10a50:	f8cd 3003 	str.w	r3, [sp, #3]
   10a54:	f00b fa4e 	bl	1bef4 <bt_addr_le_cmp>
   10a58:	7e25      	ldrb	r5, [r4, #24]
   10a5a:	bb58      	cbnz	r0, 10ab4 <bt_le_adv_stop+0xa0>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   10a5c:	4b18      	ldr	r3, [pc, #96]	; (10ac0 <bt_le_adv_stop+0xac>)
   10a5e:	a902      	add	r1, sp, #8
   10a60:	889a      	ldrh	r2, [r3, #4]
   10a62:	6818      	ldr	r0, [r3, #0]
   10a64:	f8ad 200c 	strh.w	r2, [sp, #12]
   10a68:	2204      	movs	r2, #4
   10a6a:	799b      	ldrb	r3, [r3, #6]
   10a6c:	9002      	str	r0, [sp, #8]
   10a6e:	f88d 300e 	strb.w	r3, [sp, #14]
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   10a72:	4628      	mov	r0, r5
   10a74:	f000 fe54 	bl	11720 <bt_conn_lookup_state_le>
   10a78:	4604      	mov	r4, r0
	if (conn) {
   10a7a:	b130      	cbz	r0, 10a8a <bt_le_adv_stop+0x76>
		conn->err = status;
   10a7c:	2100      	movs	r1, #0
   10a7e:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10a80:	f000 fd18 	bl	114b4 <bt_conn_set_state>
		bt_conn_unref(conn);
   10a84:	4620      	mov	r0, r4
   10a86:	f000 fce9 	bl	1145c <bt_conn_unref>
		err = set_le_adv_enable_legacy(adv, false);
   10a8a:	2100      	movs	r1, #0
   10a8c:	480d      	ldr	r0, [pc, #52]	; (10ac4 <bt_le_adv_stop+0xb0>)
   10a8e:	f7fe fd21 	bl	f4d4 <set_le_adv_enable_legacy>
		if (err) {
   10a92:	4604      	mov	r4, r0
   10a94:	2800      	cmp	r0, #0
   10a96:	d1cd      	bne.n	10a34 <bt_le_adv_stop+0x20>
   10a98:	480b      	ldr	r0, [pc, #44]	; (10ac8 <bt_le_adv_stop+0xb4>)
   10a9a:	f00b fa1a 	bl	1bed2 <atomic_get>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   10a9e:	0683      	lsls	r3, r0, #26
   10aa0:	d5c7      	bpl.n	10a32 <bt_le_adv_stop+0x1e>
	return set_le_scan_enable_legacy(enable);
   10aa2:	4620      	mov	r0, r4
   10aa4:	f7fe fb80 	bl	f1a8 <set_le_scan_enable_legacy>
			le_set_private_addr(BT_ID_DEFAULT);
   10aa8:	f00b fa58 	bl	1bf5c <le_set_private_addr.constprop.0>
	return set_le_scan_enable_legacy(enable);
   10aac:	2001      	movs	r0, #1
   10aae:	f7fe fb7b 	bl	f1a8 <set_le_scan_enable_legacy>
   10ab2:	e7bf      	b.n	10a34 <bt_le_adv_stop+0x20>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   10ab4:	2205      	movs	r2, #5
   10ab6:	f104 0121 	add.w	r1, r4, #33	; 0x21
   10aba:	e7da      	b.n	10a72 <bt_le_adv_stop+0x5e>
   10abc:	20008000 	.word	0x20008000
   10ac0:	0001e7e0 	.word	0x0001e7e0
   10ac4:	20008018 	.word	0x20008018
   10ac8:	20008094 	.word	0x20008094

00010acc <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   10acc:	b513      	push	{r0, r1, r4, lr}
   10ace:	4818      	ldr	r0, [pc, #96]	; (10b30 <bt_le_adv_resume+0x64>)
   10ad0:	f00b f9ff 	bl	1bed2 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   10ad4:	04c1      	lsls	r1, r0, #19
   10ad6:	d529      	bpl.n	10b2c <bt_le_adv_resume+0x60>
   10ad8:	4815      	ldr	r0, [pc, #84]	; (10b30 <bt_le_adv_resume+0x64>)
   10ada:	f00b f9fa 	bl	1bed2 <atomic_get>
   10ade:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   10ae0:	f3c0 1480 	ubfx	r4, r0, #6, #1
   10ae4:	d422      	bmi.n	10b2c <bt_le_adv_resume+0x60>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10ae6:	4812      	ldr	r0, [pc, #72]	; (10b30 <bt_le_adv_resume+0x64>)
   10ae8:	f00b f9f3 	bl	1bed2 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   10aec:	05c3      	lsls	r3, r0, #23
   10aee:	d51d      	bpl.n	10b2c <bt_le_adv_resume+0x60>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   10af0:	4810      	ldr	r0, [pc, #64]	; (10b34 <bt_le_adv_resume+0x68>)
   10af2:	a901      	add	r1, sp, #4
   10af4:	f7fe fa0a 	bl	ef0c <le_adv_start_add_conn>
	if (err) {
   10af8:	b9c0      	cbnz	r0, 10b2c <bt_le_adv_resume+0x60>
	return set_le_adv_enable_legacy(adv, enable);
   10afa:	2101      	movs	r1, #1
   10afc:	480d      	ldr	r0, [pc, #52]	; (10b34 <bt_le_adv_resume+0x68>)
   10afe:	f7fe fce9 	bl	f4d4 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
   10b02:	b150      	cbz	r0, 10b1a <bt_le_adv_resume+0x4e>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10b04:	4621      	mov	r1, r4
   10b06:	9801      	ldr	r0, [sp, #4]
   10b08:	f000 fcd4 	bl	114b4 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10b0c:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   10b10:	4807      	ldr	r0, [pc, #28]	; (10b30 <bt_le_adv_resume+0x64>)
   10b12:	f00b f9f2 	bl	1befa <atomic_and>
	return (old & mask) != 0;
   10b16:	f3c0 3400 	ubfx	r4, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   10b1a:	9801      	ldr	r0, [sp, #4]
   10b1c:	f000 fc9e 	bl	1145c <bt_conn_unref>
	if (persist_paused) {
   10b20:	b124      	cbz	r4, 10b2c <bt_le_adv_resume+0x60>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10b22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   10b26:	4802      	ldr	r0, [pc, #8]	; (10b30 <bt_le_adv_resume+0x64>)
   10b28:	f00b f9d9 	bl	1bede <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   10b2c:	b002      	add	sp, #8
   10b2e:	bd10      	pop	{r4, pc}
   10b30:	20008028 	.word	0x20008028
   10b34:	20008018 	.word	0x20008018

00010b38 <enh_conn_complete>:
{
   10b38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (evt->status) {
   10b3c:	7804      	ldrb	r4, [r0, #0]
{
   10b3e:	4605      	mov	r5, r0
	if (evt->status) {
   10b40:	2c00      	cmp	r4, #0
   10b42:	d048      	beq.n	10bd6 <enh_conn_complete+0x9e>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10b44:	2c3c      	cmp	r4, #60	; 0x3c
   10b46:	d11a      	bne.n	10b7e <enh_conn_complete+0x46>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10b48:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10b4c:	4872      	ldr	r0, [pc, #456]	; (10d18 <enh_conn_complete+0x1e0>)
   10b4e:	f00b f9d4 	bl	1befa <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   10b52:	2000      	movs	r0, #0
   10b54:	f7fd ffa6 	bl	eaa4 <find_pending_connect.part.0>
		if (!conn) {
   10b58:	4605      	mov	r5, r0
   10b5a:	b930      	cbnz	r0, 10b6a <enh_conn_complete+0x32>
			BT_ERR("No pending slave connection");
   10b5c:	2145      	movs	r1, #69	; 0x45
   10b5e:	486f      	ldr	r0, [pc, #444]	; (10d1c <enh_conn_complete+0x1e4>)
}
   10b60:	b004      	add	sp, #16
   10b62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_ERR("No pending slave connection");
   10b66:	f009 be83 	b.w	1a870 <printk>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   10b6a:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10b6c:	2100      	movs	r1, #0
   10b6e:	f000 fca1 	bl	114b4 <bt_conn_set_state>
		bt_conn_unref(conn);
   10b72:	4628      	mov	r0, r5
}
   10b74:	b004      	add	sp, #16
   10b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   10b7a:	f000 bc6f 	b.w	1145c <bt_conn_unref>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10b7e:	2c02      	cmp	r4, #2
   10b80:	d121      	bne.n	10bc6 <enh_conn_complete+0x8e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   10b82:	2100      	movs	r1, #0
   10b84:	2206      	movs	r2, #6
   10b86:	4608      	mov	r0, r1
   10b88:	f000 fdca 	bl	11720 <bt_conn_lookup_state_le>
	if (!conn) {
   10b8c:	4605      	mov	r5, r0
   10b8e:	b948      	cbnz	r0, 10ba4 <enh_conn_complete+0x6c>
		BT_ERR("No pending master connection");
   10b90:	2145      	movs	r1, #69	; 0x45
   10b92:	4863      	ldr	r0, [pc, #396]	; (10d20 <enh_conn_complete+0x1e8>)
   10b94:	f009 fe6c 	bl	1a870 <printk>
			bt_le_scan_update(false);
   10b98:	2000      	movs	r0, #0
   10b9a:	f7fe fdb3 	bl	f704 <bt_le_scan_update>
}
   10b9e:	b004      	add	sp, #16
   10ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   10ba4:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10ba6:	2100      	movs	r1, #0
   10ba8:	f000 fc84 	bl	114b4 <bt_conn_set_state>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10bac:	1d28      	adds	r0, r5, #4
   10bae:	f00b f990 	bl	1bed2 <atomic_get>
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   10bb2:	07c2      	lsls	r2, r0, #31
   10bb4:	d503      	bpl.n	10bbe <enh_conn_complete+0x86>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   10bb6:	4621      	mov	r1, r4
   10bb8:	4628      	mov	r0, r5
   10bba:	f000 fc7b 	bl	114b4 <bt_conn_set_state>
	bt_conn_unref(conn);
   10bbe:	4628      	mov	r0, r5
   10bc0:	f000 fc4c 	bl	1145c <bt_conn_unref>
   10bc4:	e7e8      	b.n	10b98 <enh_conn_complete+0x60>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   10bc6:	4622      	mov	r2, r4
   10bc8:	2157      	movs	r1, #87	; 0x57
   10bca:	4856      	ldr	r0, [pc, #344]	; (10d24 <enh_conn_complete+0x1ec>)
}
   10bcc:	b004      	add	sp, #16
   10bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
   10bd2:	f009 be4d 	b.w	1a870 <printk>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   10bd6:	7903      	ldrb	r3, [r0, #4]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   10bd8:	f8b0 7001 	ldrh.w	r7, [r0, #1]
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   10bdc:	3b02      	subs	r3, #2
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   10bde:	1d06      	adds	r6, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   10be0:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   10be2:	4631      	mov	r1, r6
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   10be4:	fa1f f887 	uxth.w	r8, r7
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   10be8:	a802      	add	r0, sp, #8
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   10bea:	d834      	bhi.n	10c56 <enh_conn_complete+0x11e>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   10bec:	f00b f974 	bl	1bed8 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   10bf0:	f89d 3008 	ldrb.w	r3, [sp, #8]
   10bf4:	2206      	movs	r2, #6
   10bf6:	3b02      	subs	r3, #2
   10bf8:	f105 0111 	add.w	r1, r5, #17
   10bfc:	f10d 0001 	add.w	r0, sp, #1
   10c00:	f88d 3008 	strb.w	r3, [sp, #8]
   10c04:	f00b f878 	bl	1bcf8 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   10c08:	2301      	movs	r3, #1
   10c0a:	f88d 3000 	strb.w	r3, [sp]
	conn = find_pending_connect(evt->role, &id_addr);
   10c0e:	78e8      	ldrb	r0, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_MASTER) {
   10c10:	bb40      	cbnz	r0, 10c64 <enh_conn_complete+0x12c>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   10c12:	2206      	movs	r2, #6
   10c14:	a902      	add	r1, sp, #8
   10c16:	f000 fd83 	bl	11720 <bt_conn_lookup_state_le>
   10c1a:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10c1c:	78eb      	ldrb	r3, [r5, #3]
   10c1e:	2b01      	cmp	r3, #1
   10c20:	d104      	bne.n	10c2c <enh_conn_complete+0xf4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10c22:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10c26:	483c      	ldr	r0, [pc, #240]	; (10d18 <enh_conn_complete+0x1e0>)
   10c28:	f00b f967 	bl	1befa <atomic_and>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10c2c:	78eb      	ldrb	r3, [r5, #3]
   10c2e:	b923      	cbnz	r3, 10c3a <enh_conn_complete+0x102>
   10c30:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   10c34:	483c      	ldr	r0, [pc, #240]	; (10d28 <enh_conn_complete+0x1f0>)
   10c36:	f00b f960 	bl	1befa <atomic_and>
	if (!conn) {
   10c3a:	b9dc      	cbnz	r4, 10c74 <enh_conn_complete+0x13c>
		BT_ERR("No pending conn for peer %s",
   10c3c:	4630      	mov	r0, r6
   10c3e:	f7fd fc5d 	bl	e4fc <bt_addr_le_str_real>
   10c42:	2145      	movs	r1, #69	; 0x45
   10c44:	4602      	mov	r2, r0
   10c46:	4839      	ldr	r0, [pc, #228]	; (10d2c <enh_conn_complete+0x1f4>)
   10c48:	f009 fe12 	bl	1a870 <printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   10c4c:	211f      	movs	r1, #31
   10c4e:	4640      	mov	r0, r8
   10c50:	f00b f99a 	bl	1bf88 <bt_hci_disconnect>
		return;
   10c54:	e7a3      	b.n	10b9e <enh_conn_complete+0x66>
		bt_addr_le_copy(&id_addr,
   10c56:	f00b f93f 	bl	1bed8 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   10c5a:	4631      	mov	r1, r6
   10c5c:	4668      	mov	r0, sp
   10c5e:	f00b f93b 	bl	1bed8 <bt_addr_le_copy>
   10c62:	e7d4      	b.n	10c0e <enh_conn_complete+0xd6>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   10c64:	2801      	cmp	r0, #1
   10c66:	d103      	bne.n	10c70 <enh_conn_complete+0x138>
   10c68:	a802      	add	r0, sp, #8
   10c6a:	f7fd ff1b 	bl	eaa4 <find_pending_connect.part.0>
   10c6e:	e7d4      	b.n	10c1a <enh_conn_complete+0xe2>
	return NULL;
   10c70:	2400      	movs	r4, #0
   10c72:	e7d3      	b.n	10c1c <enh_conn_complete+0xe4>
	conn->handle = handle;
   10c74:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   10c76:	a902      	add	r1, sp, #8
	conn->handle = handle;
   10c78:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   10c7c:	f00b f92c 	bl	1bed8 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   10c80:	7e2a      	ldrb	r2, [r5, #24]
   10c82:	7deb      	ldrb	r3, [r5, #23]
   10c84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   10c88:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   10c8c:	7eaa      	ldrb	r2, [r5, #26]
   10c8e:	7e6b      	ldrb	r3, [r5, #25]
   10c90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   10c94:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   10c98:	7f2a      	ldrb	r2, [r5, #28]
   10c9a:	7eeb      	ldrb	r3, [r5, #27]
   10c9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->err = 0U;
   10ca0:	2200      	movs	r2, #0
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   10ca2:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   10ca6:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
   10ca8:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10caa:	2b01      	cmp	r3, #1
	conn->role = evt->role;
   10cac:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10cae:	d113      	bne.n	10cd8 <enh_conn_complete+0x1a0>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   10cb0:	4669      	mov	r1, sp
   10cb2:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   10cb6:	f00b f90f 	bl	1bed8 <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
   10cba:	7a21      	ldrb	r1, [r4, #8]
   10cbc:	4d1c      	ldr	r5, [pc, #112]	; (10d30 <enh_conn_complete+0x1f8>)
   10cbe:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   10cc2:	4429      	add	r1, r5
   10cc4:	f104 0096 	add.w	r0, r4, #150	; 0x96
   10cc8:	f00b f906 	bl	1bed8 <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
   10ccc:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   10cd0:	065b      	lsls	r3, r3, #25
   10cd2:	d501      	bpl.n	10cd8 <enh_conn_complete+0x1a0>
			bt_le_adv_resume();
   10cd4:	f7ff fefa 	bl	10acc <bt_le_adv_resume>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10cd8:	78e3      	ldrb	r3, [r4, #3]
   10cda:	b96b      	cbnz	r3, 10cf8 <enh_conn_complete+0x1c0>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   10cdc:	4669      	mov	r1, sp
   10cde:	f104 0096 	add.w	r0, r4, #150	; 0x96
   10ce2:	f00b f8f9 	bl	1bed8 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   10ce6:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   10ce8:	4b11      	ldr	r3, [pc, #68]	; (10d30 <enh_conn_complete+0x1f8>)
					&bt_dev.id_addr[conn->id]);
   10cea:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   10cee:	4419      	add	r1, r3
   10cf0:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   10cf4:	f00b f8f0 	bl	1bed8 <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   10cf8:	2107      	movs	r1, #7
   10cfa:	4620      	mov	r0, r4
   10cfc:	f000 fbda 	bl	114b4 <bt_conn_set_state>
	conn_auto_initiate(conn);
   10d00:	4620      	mov	r0, r4
   10d02:	f7fe ff1f 	bl	fb44 <conn_auto_initiate>
	bt_conn_unref(conn);
   10d06:	4620      	mov	r0, r4
   10d08:	f000 fba8 	bl	1145c <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10d0c:	78e3      	ldrb	r3, [r4, #3]
   10d0e:	2b00      	cmp	r3, #0
   10d10:	f47f af45 	bne.w	10b9e <enh_conn_complete+0x66>
   10d14:	e740      	b.n	10b98 <enh_conn_complete+0x60>
   10d16:	bf00      	nop
   10d18:	20008028 	.word	0x20008028
   10d1c:	00021940 	.word	0x00021940
   10d20:	00021961 	.word	0x00021961
   10d24:	00021983 	.word	0x00021983
   10d28:	20008094 	.word	0x20008094
   10d2c:	000219a1 	.word	0x000219a1
   10d30:	20008000 	.word	0x20008000

00010d34 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   10d34:	b570      	push	{r4, r5, r6, lr}
   10d36:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10d38:	482e      	ldr	r0, [pc, #184]	; (10df4 <bt_le_scan_start+0xc0>)
   10d3a:	f00b f8ca 	bl	1bed2 <atomic_get>
   10d3e:	460e      	mov	r6, r1
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10d40:	0781      	lsls	r1, r0, #30
   10d42:	d554      	bpl.n	10dee <bt_le_scan_start+0xba>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   10d44:	782a      	ldrb	r2, [r5, #0]
   10d46:	2a01      	cmp	r2, #1
   10d48:	d903      	bls.n	10d52 <bt_le_scan_start+0x1e>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   10d4a:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   10d4e:	4620      	mov	r0, r4
   10d50:	bd70      	pop	{r4, r5, r6, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   10d52:	686b      	ldr	r3, [r5, #4]
   10d54:	f033 030f 	bics.w	r3, r3, #15
   10d58:	d1f7      	bne.n	10d4a <bt_le_scan_start+0x16>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   10d5a:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   10d5e:	8928      	ldrh	r0, [r5, #8]
   10d60:	1f03      	subs	r3, r0, #4
   10d62:	b29b      	uxth	r3, r3
   10d64:	42a3      	cmp	r3, r4
   10d66:	d8f0      	bhi.n	10d4a <bt_le_scan_start+0x16>
	if (param->window < 0x0004 || param->window > 0x4000) {
   10d68:	8969      	ldrh	r1, [r5, #10]
   10d6a:	1f0b      	subs	r3, r1, #4
   10d6c:	b29b      	uxth	r3, r3
   10d6e:	42a3      	cmp	r3, r4
   10d70:	d8eb      	bhi.n	10d4a <bt_le_scan_start+0x16>
	if (param->window > param->interval) {
   10d72:	4288      	cmp	r0, r1
   10d74:	d3e9      	bcc.n	10d4a <bt_le_scan_start+0x16>
	if (param->type && !bt_le_scan_random_addr_check()) {
   10d76:	b94a      	cbnz	r2, 10d8c <bt_le_scan_start+0x58>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   10d78:	2140      	movs	r1, #64	; 0x40
   10d7a:	481e      	ldr	r0, [pc, #120]	; (10df4 <bt_le_scan_start+0xc0>)
   10d7c:	f00b f8af 	bl	1bede <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   10d80:	ea10 0301 	ands.w	r3, r0, r1
   10d84:	d007      	beq.n	10d96 <bt_le_scan_start+0x62>
		return -EALREADY;
   10d86:	f06f 0444 	mvn.w	r4, #68	; 0x44
   10d8a:	e7e0      	b.n	10d4e <bt_le_scan_start+0x1a>
	if (param->type && !bt_le_scan_random_addr_check()) {
   10d8c:	f7fe fc2e 	bl	f5ec <bt_le_scan_random_addr_check>
   10d90:	2800      	cmp	r0, #0
   10d92:	d1f1      	bne.n	10d78 <bt_le_scan_start+0x44>
   10d94:	e7d9      	b.n	10d4a <bt_le_scan_start+0x16>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10d96:	4817      	ldr	r0, [pc, #92]	; (10df4 <bt_le_scan_start+0xc0>)
   10d98:	f00b f89b 	bl	1bed2 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   10d9c:	0682      	lsls	r2, r0, #26
   10d9e:	d50a      	bpl.n	10db6 <bt_le_scan_start+0x82>
	return set_le_scan_enable_legacy(enable);
   10da0:	4618      	mov	r0, r3
   10da2:	f7fe fa01 	bl	f1a8 <set_le_scan_enable_legacy>
		if (err) {
   10da6:	4604      	mov	r4, r0
   10da8:	b128      	cbz	r0, 10db6 <bt_le_scan_start+0x82>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10daa:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10dae:	4811      	ldr	r0, [pc, #68]	; (10df4 <bt_le_scan_start+0xc0>)
   10db0:	f00b f8a3 	bl	1befa <atomic_and>
		return err;
   10db4:	e7cb      	b.n	10d4e <bt_le_scan_start+0x1a>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   10db6:	686a      	ldr	r2, [r5, #4]
   10db8:	2108      	movs	r1, #8
   10dba:	480e      	ldr	r0, [pc, #56]	; (10df4 <bt_le_scan_start+0xc0>)
   10dbc:	f002 0201 	and.w	r2, r2, #1
   10dc0:	f00b f8a6 	bl	1bf10 <atomic_set_bit_to>
		if (param->timeout) {
   10dc4:	89ab      	ldrh	r3, [r5, #12]
   10dc6:	b13b      	cbz	r3, 10dd8 <bt_le_scan_start+0xa4>
   10dc8:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10dcc:	4809      	ldr	r0, [pc, #36]	; (10df4 <bt_le_scan_start+0xc0>)
   10dce:	f00b f894 	bl	1befa <atomic_and>
			return -ENOTSUP;
   10dd2:	f06f 0422 	mvn.w	r4, #34	; 0x22
   10dd6:	e7ba      	b.n	10d4e <bt_le_scan_start+0x1a>
		err = start_le_scan_legacy(param->type, param->interval,
   10dd8:	896a      	ldrh	r2, [r5, #10]
   10dda:	8929      	ldrh	r1, [r5, #8]
   10ddc:	7828      	ldrb	r0, [r5, #0]
   10dde:	f7fe fba7 	bl	f530 <start_le_scan_legacy>
	if (err) {
   10de2:	4604      	mov	r4, r0
   10de4:	2800      	cmp	r0, #0
   10de6:	d1e0      	bne.n	10daa <bt_le_scan_start+0x76>
	scan_dev_found_cb = cb;
   10de8:	4b03      	ldr	r3, [pc, #12]	; (10df8 <bt_le_scan_start+0xc4>)
   10dea:	601e      	str	r6, [r3, #0]
	return 0;
   10dec:	e7af      	b.n	10d4e <bt_le_scan_start+0x1a>
		return -EAGAIN;
   10dee:	f06f 040a 	mvn.w	r4, #10
   10df2:	e7ac      	b.n	10d4e <bt_le_scan_start+0x1a>
   10df4:	20008094 	.word	0x20008094
   10df8:	2000ab84 	.word	0x2000ab84

00010dfc <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   10dfc:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10dfe:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10e02:	4807      	ldr	r0, [pc, #28]	; (10e20 <bt_le_scan_stop+0x24>)
   10e04:	f00b f879 	bl	1befa <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   10e08:	0643      	lsls	r3, r0, #25
   10e0a:	d506      	bpl.n	10e1a <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
   10e0c:	2000      	movs	r0, #0
   10e0e:	4b05      	ldr	r3, [pc, #20]	; (10e24 <bt_le_scan_stop+0x28>)
   10e10:	6018      	str	r0, [r3, #0]
		pending_id_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   10e12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   10e16:	f7fe bc75 	b.w	f704 <bt_le_scan_update>
}
   10e1a:	f06f 0044 	mvn.w	r0, #68	; 0x44
   10e1e:	bd08      	pop	{r3, pc}
   10e20:	20008094 	.word	0x20008094
   10e24:	2000ab84 	.word	0x2000ab84

00010e28 <bt_le_scan_cb_register>:
	parent->next = child;
   10e28:	2300      	movs	r3, #0
   10e2a:	6083      	str	r3, [r0, #8]
	return list->tail;
   10e2c:	4b05      	ldr	r3, [pc, #20]	; (10e44 <bt_le_scan_cb_register+0x1c>)

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
   10e2e:	f100 0208 	add.w	r2, r0, #8
   10e32:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   10e34:	b911      	cbnz	r1, 10e3c <bt_le_scan_cb_register+0x14>
	list->head = node;
   10e36:	e9c3 2200 	strd	r2, r2, [r3]
}
   10e3a:	4770      	bx	lr
	parent->next = child;
   10e3c:	600a      	str	r2, [r1, #0]
	list->tail = node;
   10e3e:	605a      	str	r2, [r3, #4]
}
   10e40:	4770      	bx	lr
   10e42:	bf00      	nop
   10e44:	2000ab7c 	.word	0x2000ab7c

00010e48 <prng_reseed.constprop.0>:

#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   10e48:	b5f0      	push	{r4, r5, r6, r7, lr}
   10e4a:	b08d      	sub	sp, #52	; 0x34
   10e4c:	ae04      	add	r6, sp, #16
	uint8_t seed[32];
	int64_t extra;
	size_t i;
	int ret;

	for (i = 0; i < (sizeof(seed) / 8); i++) {
   10e4e:	2700      	movs	r7, #0
   10e50:	4635      	mov	r5, r6
		struct bt_hci_rp_le_rand *rp;
		struct net_buf *rsp;

		ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   10e52:	2100      	movs	r1, #0
   10e54:	f242 0018 	movw	r0, #8216	; 0x2018
   10e58:	aa02      	add	r2, sp, #8
   10e5a:	f7fe f8f5 	bl	f048 <bt_hci_cmd_send_sync>
		if (ret) {
   10e5e:	4604      	mov	r4, r0
   10e60:	bb58      	cbnz	r0, 10eba <prng_reseed.constprop.0+0x72>
			return ret;
		}

		rp = (void *)rsp->data;
   10e62:	9b02      	ldr	r3, [sp, #8]
		memcpy(&seed[i * 8], rp->rand, 8);
   10e64:	2208      	movs	r2, #8
   10e66:	6899      	ldr	r1, [r3, #8]
   10e68:	4630      	mov	r0, r6
   10e6a:	3101      	adds	r1, #1
   10e6c:	f00a ff44 	bl	1bcf8 <memcpy>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
   10e70:	3701      	adds	r7, #1

		net_buf_unref(rsp);
   10e72:	9802      	ldr	r0, [sp, #8]
   10e74:	f004 fc86 	bl	15784 <net_buf_unref>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
   10e78:	2f04      	cmp	r7, #4
   10e7a:	f106 0608 	add.w	r6, r6, #8
   10e7e:	d1e8      	bne.n	10e52 <prng_reseed.constprop.0+0xa>
	return z_impl_k_uptime_ticks();
   10e80:	f00d f987 	bl	1e192 <z_impl_k_uptime_ticks>
   10e84:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   10e88:	fba0 3206 	umull	r3, r2, r0, r6
   10e8c:	fb06 2101 	mla	r1, r6, r1, r2
   10e90:	0bdb      	lsrs	r3, r3, #15
   10e92:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   10e96:	0bc9      	lsrs	r1, r1, #15
	}

	extra = k_uptime_get();
   10e98:	e9cd 3102 	strd	r3, r1, [sp, #8]

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   10e9c:	2308      	movs	r3, #8
   10e9e:	2220      	movs	r2, #32
   10ea0:	9300      	str	r3, [sp, #0]
   10ea2:	4629      	mov	r1, r5
   10ea4:	4806      	ldr	r0, [pc, #24]	; (10ec0 <prng_reseed.constprop.0+0x78>)
   10ea6:	446b      	add	r3, sp
   10ea8:	f00a fddc 	bl	1ba64 <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   10eac:	b928      	cbnz	r0, 10eba <prng_reseed.constprop.0+0x72>
		BT_ERR("Failed to re-seed PRNG");
   10eae:	2145      	movs	r1, #69	; 0x45
   10eb0:	4804      	ldr	r0, [pc, #16]	; (10ec4 <prng_reseed.constprop.0+0x7c>)
   10eb2:	f009 fcdd 	bl	1a870 <printk>
		return -EIO;
   10eb6:	f06f 0404 	mvn.w	r4, #4
	}

	return 0;
}
   10eba:	4620      	mov	r0, r4
   10ebc:	b00d      	add	sp, #52	; 0x34
   10ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10ec0:	20008bb0 	.word	0x20008bb0
   10ec4:	000219d3 	.word	0x000219d3

00010ec8 <prng_init>:

int prng_init(void)
{
   10ec8:	b513      	push	{r0, r1, r4, lr}
	struct bt_hci_rp_le_rand *rp;
	struct net_buf *rsp;
	int ret;

	/* Check first that HCI_LE_Rand is supported */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   10eca:	4b13      	ldr	r3, [pc, #76]	; (10f18 <prng_init+0x50>)
   10ecc:	f993 305f 	ldrsb.w	r3, [r3, #95]	; 0x5f
   10ed0:	2b00      	cmp	r3, #0
   10ed2:	da1d      	bge.n	10f10 <prng_init+0x48>
		return -ENOTSUP;
	}

	ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   10ed4:	2100      	movs	r1, #0
   10ed6:	f242 0018 	movw	r0, #8216	; 0x2018
   10eda:	aa01      	add	r2, sp, #4
   10edc:	f7fe f8b4 	bl	f048 <bt_hci_cmd_send_sync>
	if (ret) {
   10ee0:	b988      	cbnz	r0, 10f06 <prng_init+0x3e>
		return ret;
	}

	rp = (void *)rsp->data;
   10ee2:	9b01      	ldr	r3, [sp, #4]

	ret = tc_hmac_prng_init(&prng, rp->rand, sizeof(rp->rand));
   10ee4:	2208      	movs	r2, #8
   10ee6:	6899      	ldr	r1, [r3, #8]
   10ee8:	480c      	ldr	r0, [pc, #48]	; (10f1c <prng_init+0x54>)
   10eea:	3101      	adds	r1, #1
   10eec:	f00a fd9a 	bl	1ba24 <tc_hmac_prng_init>
   10ef0:	4604      	mov	r4, r0

	net_buf_unref(rsp);
   10ef2:	9801      	ldr	r0, [sp, #4]
   10ef4:	f004 fc46 	bl	15784 <net_buf_unref>

	if (ret == TC_CRYPTO_FAIL) {
   10ef8:	b93c      	cbnz	r4, 10f0a <prng_init+0x42>
		BT_ERR("Failed to initialize PRNG");
   10efa:	4809      	ldr	r0, [pc, #36]	; (10f20 <prng_init+0x58>)
   10efc:	2145      	movs	r1, #69	; 0x45
   10efe:	f009 fcb7 	bl	1a870 <printk>
		return -EIO;
   10f02:	f06f 0004 	mvn.w	r0, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   10f06:	b002      	add	sp, #8
   10f08:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   10f0a:	f7ff ff9d 	bl	10e48 <prng_reseed.constprop.0>
   10f0e:	e7fa      	b.n	10f06 <prng_init+0x3e>
		return -ENOTSUP;
   10f10:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10f14:	e7f7      	b.n	10f06 <prng_init+0x3e>
   10f16:	bf00      	nop
   10f18:	20008000 	.word	0x20008000
   10f1c:	20008bb0 	.word	0x20008bb0
   10f20:	000219ef 	.word	0x000219ef

00010f24 <bt_rand>:

int bt_rand(void *buf, size_t len)
{
   10f24:	b538      	push	{r3, r4, r5, lr}
	int ret;

	ret = tc_hmac_prng_generate(buf, len, &prng);
   10f26:	4a0a      	ldr	r2, [pc, #40]	; (10f50 <bt_rand+0x2c>)
{
   10f28:	4604      	mov	r4, r0
   10f2a:	460d      	mov	r5, r1
	ret = tc_hmac_prng_generate(buf, len, &prng);
   10f2c:	f00a fdb3 	bl	1ba96 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   10f30:	1c43      	adds	r3, r0, #1
   10f32:	d107      	bne.n	10f44 <bt_rand+0x20>
		ret = prng_reseed(&prng);
   10f34:	f7ff ff88 	bl	10e48 <prng_reseed.constprop.0>
		if (ret) {
   10f38:	b948      	cbnz	r0, 10f4e <bt_rand+0x2a>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   10f3a:	4629      	mov	r1, r5
   10f3c:	4620      	mov	r0, r4
   10f3e:	4a04      	ldr	r2, [pc, #16]	; (10f50 <bt_rand+0x2c>)
   10f40:	f00a fda9 	bl	1ba96 <tc_hmac_prng_generate>
	}

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
   10f44:	2801      	cmp	r0, #1
   10f46:	bf14      	ite	ne
   10f48:	f06f 0004 	mvnne.w	r0, #4
   10f4c:	2000      	moveq	r0, #0
	}

	return -EIO;
}
   10f4e:	bd38      	pop	{r3, r4, r5, pc}
   10f50:	20008bb0 	.word	0x20008bb0

00010f54 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   10f54:	2300      	movs	r3, #0
{
   10f56:	4601      	mov	r1, r0
	tx->user_data = NULL;
   10f58:	e9c0 3301 	strd	r3, r3, [r0, #4]
	tx->pending_no_cb = 0U;
   10f5c:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   10f5e:	4801      	ldr	r0, [pc, #4]	; (10f64 <tx_free+0x10>)
   10f60:	f00d b843 	b.w	1dfea <k_queue_append>
   10f64:	20008688 	.word	0x20008688

00010f68 <notify_connected>:
{
   10f68:	b538      	push	{r3, r4, r5, lr}
   10f6a:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   10f6c:	4b08      	ldr	r3, [pc, #32]	; (10f90 <notify_connected+0x28>)
   10f6e:	681d      	ldr	r5, [r3, #0]
			cb->connected(conn, conn->err);
   10f70:	7a61      	ldrb	r1, [r4, #9]
	for (cb = callback_list; cb; cb = cb->_next) {
   10f72:	b92d      	cbnz	r5, 10f80 <notify_connected+0x18>
	if (!conn->err) {
   10f74:	b951      	cbnz	r1, 10f8c <notify_connected+0x24>
		bt_gatt_connected(conn);
   10f76:	4620      	mov	r0, r4
}
   10f78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
   10f7c:	f004 b8fc 	b.w	15178 <bt_gatt_connected>
		if (cb->connected) {
   10f80:	682b      	ldr	r3, [r5, #0]
   10f82:	b10b      	cbz	r3, 10f88 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   10f84:	4620      	mov	r0, r4
   10f86:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   10f88:	692d      	ldr	r5, [r5, #16]
   10f8a:	e7f1      	b.n	10f70 <notify_connected+0x8>
}
   10f8c:	bd38      	pop	{r3, r4, r5, pc}
   10f8e:	bf00      	nop
   10f90:	2000ab88 	.word	0x2000ab88

00010f94 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
   10f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10f98:	4604      	mov	r4, r0
   10f9a:	460e      	mov	r6, r1
   10f9c:	4691      	mov	r9, r2
   10f9e:	461f      	mov	r7, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   10fa0:	694d      	ldr	r5, [r1, #20]
	return z_impl_k_sem_take(sem, timeout);
   10fa2:	f04f 33ff 	mov.w	r3, #4294967295
   10fa6:	f04f 32ff 	mov.w	r2, #4294967295
   10faa:	4847      	ldr	r0, [pc, #284]	; (110c8 <send_frag+0x134>)
   10fac:	f008 fac4 	bl	19538 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
   10fb0:	7aa3      	ldrb	r3, [r4, #10]
   10fb2:	2b07      	cmp	r3, #7
   10fb4:	d14b      	bne.n	1104e <send_frag+0xba>
	__asm__ volatile(
   10fb6:	f04f 0320 	mov.w	r3, #32
   10fba:	f3ef 8211 	mrs	r2, BASEPRI
   10fbe:	f383 8811 	msr	BASEPRI, r3
   10fc2:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
   10fc6:	69a3      	ldr	r3, [r4, #24]
   10fc8:	2d00      	cmp	r5, #0
   10fca:	d052      	beq.n	11072 <send_frag+0xde>
	parent->next = child;
   10fcc:	2100      	movs	r1, #0
   10fce:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   10fd0:	2b00      	cmp	r3, #0
   10fd2:	d14b      	bne.n	1106c <send_frag+0xd8>
	list->head = node;
   10fd4:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   10fd8:	f382 8811 	msr	BASEPRI, r2
   10fdc:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   10fe0:	2104      	movs	r1, #4
   10fe2:	f106 0008 	add.w	r0, r6, #8
   10fe6:	f004 fc8b 	bl	15900 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   10fea:	8823      	ldrh	r3, [r4, #0]
   10fec:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   10ff0:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   10ff4:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   10ff6:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   10ffa:	3b04      	subs	r3, #4
   10ffc:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   10ffe:	2302      	movs	r3, #2
	return bt_send(buf);
   11000:	4630      	mov	r0, r6
   11002:	7533      	strb	r3, [r6, #20]
   11004:	f7fe fd14 	bl	fa30 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
   11008:	4602      	mov	r2, r0
   1100a:	2800      	cmp	r0, #0
   1100c:	d059      	beq.n	110c2 <send_frag+0x12e>
		BT_ERR("Unable to send to driver (err %d)", err);
   1100e:	2145      	movs	r1, #69	; 0x45
   11010:	482e      	ldr	r0, [pc, #184]	; (110cc <send_frag+0x138>)
   11012:	f009 fc2d 	bl	1a870 <printk>
	__asm__ volatile(
   11016:	f04f 0320 	mov.w	r3, #32
   1101a:	f3ef 8911 	mrs	r9, BASEPRI
   1101e:	f383 8811 	msr	BASEPRI, r3
   11022:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
   11026:	2d00      	cmp	r5, #0
   11028:	d037      	beq.n	1109a <send_frag+0x106>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1102a:	2200      	movs	r2, #0
	return list->head;
   1102c:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1102e:	b153      	cbz	r3, 11046 <send_frag+0xb2>
   11030:	429d      	cmp	r5, r3
   11032:	d12f      	bne.n	11094 <send_frag+0x100>
	return node->next;
   11034:	682b      	ldr	r3, [r5, #0]
	return list->tail;
   11036:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
   11038:	bb3a      	cbnz	r2, 1108a <send_frag+0xf6>
   1103a:	42a9      	cmp	r1, r5
	list->head = node;
   1103c:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   1103e:	d100      	bne.n	11042 <send_frag+0xae>
	list->tail = node;
   11040:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   11042:	2300      	movs	r3, #0
   11044:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   11046:	f389 8811 	msr	BASEPRI, r9
   1104a:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1104e:	481e      	ldr	r0, [pc, #120]	; (110c8 <send_frag+0x134>)
   11050:	f008 fa36 	bl	194c0 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
   11054:	b115      	cbz	r5, 1105c <send_frag+0xc8>
		tx_free(tx);
   11056:	4628      	mov	r0, r5
   11058:	f7ff ff7c 	bl	10f54 <tx_free>
	}

	if (always_consume) {
   1105c:	b11f      	cbz	r7, 11066 <send_frag+0xd2>
		net_buf_unref(buf);
   1105e:	4630      	mov	r0, r6
   11060:	f004 fb90 	bl	15784 <net_buf_unref>
	}
	return false;
   11064:	2700      	movs	r7, #0
}
   11066:	4638      	mov	r0, r7
   11068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1106c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1106e:	61a5      	str	r5, [r4, #24]
}
   11070:	e7b2      	b.n	10fd8 <send_frag+0x44>
		if (tail_tx) {
   11072:	b133      	cbz	r3, 11082 <send_frag+0xee>
			pending_no_cb = &tail_tx->pending_no_cb;
   11074:	f103 080c 	add.w	r8, r3, #12
   11078:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   1107a:	3301      	adds	r3, #1
   1107c:	f8c8 3000 	str.w	r3, [r8]
   11080:	e7aa      	b.n	10fd8 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   11082:	69e3      	ldr	r3, [r4, #28]
   11084:	f104 081c 	add.w	r8, r4, #28
   11088:	e7f7      	b.n	1107a <send_frag+0xe6>
Z_GENLIST_REMOVE(slist, snode)
   1108a:	42a9      	cmp	r1, r5
	parent->next = child;
   1108c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1108e:	bf08      	it	eq
   11090:	61a2      	streq	r2, [r4, #24]
}
   11092:	e7d6      	b.n	11042 <send_frag+0xae>
	return node->next;
   11094:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11096:	681b      	ldr	r3, [r3, #0]
   11098:	e7c9      	b.n	1102e <send_frag+0x9a>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   1109a:	f8d8 3000 	ldr.w	r3, [r8]
   1109e:	b953      	cbnz	r3, 110b6 <send_frag+0x122>
   110a0:	490b      	ldr	r1, [pc, #44]	; (110d0 <send_frag+0x13c>)
   110a2:	480c      	ldr	r0, [pc, #48]	; (110d4 <send_frag+0x140>)
   110a4:	f240 4292 	movw	r2, #1170	; 0x492
   110a8:	f009 fbe2 	bl	1a870 <printk>
   110ac:	f240 4192 	movw	r1, #1170	; 0x492
   110b0:	4807      	ldr	r0, [pc, #28]	; (110d0 <send_frag+0x13c>)
   110b2:	f009 fe83 	bl	1adbc <assert_post_action>
			(*pending_no_cb)--;
   110b6:	f8d8 3000 	ldr.w	r3, [r8]
   110ba:	3b01      	subs	r3, #1
   110bc:	f8c8 3000 	str.w	r3, [r8]
   110c0:	e7c1      	b.n	11046 <send_frag+0xb2>
	return true;
   110c2:	2701      	movs	r7, #1
   110c4:	e7cf      	b.n	11066 <send_frag+0xd2>
   110c6:	bf00      	nop
   110c8:	200080c8 	.word	0x200080c8
   110cc:	0002157c 	.word	0x0002157c
   110d0:	00021a18 	.word	0x00021a18
   110d4:	0001fdfa 	.word	0x0001fdfa

000110d8 <bt_conn_get_pkts>:
}
   110d8:	4800      	ldr	r0, [pc, #0]	; (110dc <bt_conn_get_pkts+0x4>)
   110da:	4770      	bx	lr
   110dc:	200080c8 	.word	0x200080c8

000110e0 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   110e0:	1d03      	adds	r3, r0, #4
{
   110e2:	b570      	push	{r4, r5, r6, lr}
   110e4:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   110e6:	4618      	mov	r0, r3
   110e8:	f00b f80b 	bl	1c102 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   110ec:	0582      	lsls	r2, r0, #22
   110ee:	d515      	bpl.n	1111c <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   110f0:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   110f4:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
   110f8:	4291      	cmp	r1, r2
   110fa:	d80f      	bhi.n	1111c <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   110fc:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   11100:	4291      	cmp	r1, r2
   11102:	d30b      	bcc.n	1111c <notify_le_param_updated+0x3c>
	    conn->le.latency == conn->le.pending_latency &&
   11104:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
   11108:	4291      	cmp	r1, r2
   1110a:	d107      	bne.n	1111c <notify_le_param_updated+0x3c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1110c:	e8d3 2fef 	ldaex	r2, [r3]
   11110:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   11114:	e8c3 2fe1 	stlex	r1, r2, [r3]
   11118:	2900      	cmp	r1, #0
   1111a:	d1f7      	bne.n	1110c <notify_le_param_updated+0x2c>
	for (cb = callback_list; cb; cb = cb->_next) {
   1111c:	4b07      	ldr	r3, [pc, #28]	; (1113c <notify_le_param_updated+0x5c>)
   1111e:	681d      	ldr	r5, [r3, #0]
   11120:	b905      	cbnz	r5, 11124 <notify_le_param_updated+0x44>
}
   11122:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
   11124:	68ee      	ldr	r6, [r5, #12]
   11126:	b13e      	cbz	r6, 11138 <notify_le_param_updated+0x58>
			cb->le_param_updated(conn, conn->le.interval,
   11128:	4620      	mov	r0, r4
   1112a:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1112e:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   11132:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   11136:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   11138:	692d      	ldr	r5, [r5, #16]
   1113a:	e7f1      	b.n	11120 <notify_le_param_updated+0x40>
   1113c:	2000ab88 	.word	0x2000ab88

00011140 <le_param_req>:
{
   11140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11142:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
   11144:	4608      	mov	r0, r1
{
   11146:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   11148:	f00a ff39 	bl	1bfbe <bt_le_conn_params_valid>
   1114c:	4604      	mov	r4, r0
   1114e:	b910      	cbnz	r0, 11156 <le_param_req+0x16>
		return false;
   11150:	2400      	movs	r4, #0
}
   11152:	4620      	mov	r0, r4
   11154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   11156:	4b09      	ldr	r3, [pc, #36]	; (1117c <le_param_req+0x3c>)
   11158:	681e      	ldr	r6, [r3, #0]
   1115a:	2e00      	cmp	r6, #0
   1115c:	d0f9      	beq.n	11152 <le_param_req+0x12>
		if (!cb->le_param_req) {
   1115e:	68b3      	ldr	r3, [r6, #8]
   11160:	b90b      	cbnz	r3, 11166 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
   11162:	6936      	ldr	r6, [r6, #16]
   11164:	e7f9      	b.n	1115a <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   11166:	4629      	mov	r1, r5
   11168:	4638      	mov	r0, r7
   1116a:	4798      	blx	r3
   1116c:	2800      	cmp	r0, #0
   1116e:	d0ef      	beq.n	11150 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
   11170:	4628      	mov	r0, r5
   11172:	f00a ff24 	bl	1bfbe <bt_le_conn_params_valid>
   11176:	2800      	cmp	r0, #0
   11178:	d1f3      	bne.n	11162 <le_param_req+0x22>
   1117a:	e7e9      	b.n	11150 <le_param_req+0x10>
   1117c:	2000ab88 	.word	0x2000ab88

00011180 <bt_conn_cb_register>:
	cb->_next = callback_list;
   11180:	4b02      	ldr	r3, [pc, #8]	; (1118c <bt_conn_cb_register+0xc>)
   11182:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
   11184:	6018      	str	r0, [r3, #0]
	cb->_next = callback_list;
   11186:	6102      	str	r2, [r0, #16]
}
   11188:	4770      	bx	lr
   1118a:	bf00      	nop
   1118c:	2000ab88 	.word	0x2000ab88

00011190 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
   11190:	b570      	push	{r4, r5, r6, lr}
   11192:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   11194:	f100 0634 	add.w	r6, r0, #52	; 0x34
   11198:	2200      	movs	r2, #0
   1119a:	2300      	movs	r3, #0
   1119c:	4630      	mov	r0, r6
   1119e:	f004 fa6f 	bl	15680 <net_buf_get>
   111a2:	4605      	mov	r5, r0
   111a4:	bb28      	cbnz	r0, 111f2 <conn_cleanup+0x62>
		}

		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   111a6:	6963      	ldr	r3, [r4, #20]
   111a8:	b153      	cbz	r3, 111c0 <conn_cleanup+0x30>
   111aa:	4916      	ldr	r1, [pc, #88]	; (11204 <conn_cleanup+0x74>)
   111ac:	4816      	ldr	r0, [pc, #88]	; (11208 <conn_cleanup+0x78>)
   111ae:	f240 520c 	movw	r2, #1292	; 0x50c
   111b2:	f009 fb5d 	bl	1a870 <printk>
   111b6:	f240 510c 	movw	r1, #1292	; 0x50c
   111ba:	4812      	ldr	r0, [pc, #72]	; (11204 <conn_cleanup+0x74>)
   111bc:	f009 fdfe 	bl	1adbc <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   111c0:	69e3      	ldr	r3, [r4, #28]
   111c2:	b153      	cbz	r3, 111da <conn_cleanup+0x4a>
   111c4:	490f      	ldr	r1, [pc, #60]	; (11204 <conn_cleanup+0x74>)
   111c6:	4810      	ldr	r0, [pc, #64]	; (11208 <conn_cleanup+0x78>)
   111c8:	f240 520d 	movw	r2, #1293	; 0x50d
   111cc:	f009 fb50 	bl	1a870 <printk>
   111d0:	f240 510d 	movw	r1, #1293	; 0x50d
   111d4:	480b      	ldr	r0, [pc, #44]	; (11204 <conn_cleanup+0x74>)
   111d6:	f009 fdf1 	bl	1adbc <assert_post_action>

	bt_conn_reset_rx_state(conn);
   111da:	4620      	mov	r0, r4
   111dc:	f00a ffde 	bl	1c19c <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   111e0:	f104 0158 	add.w	r1, r4, #88	; 0x58
   111e4:	2200      	movs	r2, #0

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
   111e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   111ea:	2300      	movs	r3, #0
   111ec:	4807      	ldr	r0, [pc, #28]	; (1120c <conn_cleanup+0x7c>)
   111ee:	f008 bbc9 	b.w	19984 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
   111f2:	6968      	ldr	r0, [r5, #20]
   111f4:	b108      	cbz	r0, 111fa <conn_cleanup+0x6a>
			tx_free(tx_data(buf)->tx);
   111f6:	f7ff fead 	bl	10f54 <tx_free>
		net_buf_unref(buf);
   111fa:	4628      	mov	r0, r5
   111fc:	f004 fac2 	bl	15784 <net_buf_unref>
   11200:	e7ca      	b.n	11198 <conn_cleanup+0x8>
   11202:	bf00      	nop
   11204:	00021a18 	.word	0x00021a18
   11208:	0001fdfa 	.word	0x0001fdfa
   1120c:	2000a540 	.word	0x2000a540

00011210 <bt_conn_recv>:
{
   11210:	b570      	push	{r4, r5, r6, lr}
   11212:	4616      	mov	r6, r2
   11214:	4604      	mov	r4, r0
   11216:	460d      	mov	r5, r1
	tx_notify(conn);
   11218:	f00a ff76 	bl	1c108 <tx_notify>
	switch (flags) {
   1121c:	2e01      	cmp	r6, #1
   1121e:	d01f      	beq.n	11260 <bt_conn_recv+0x50>
   11220:	2e02      	cmp	r6, #2
   11222:	d140      	bne.n	112a6 <bt_conn_recv+0x96>
		if (conn->rx) {
   11224:	6923      	ldr	r3, [r4, #16]
   11226:	b133      	cbz	r3, 11236 <bt_conn_recv+0x26>
			BT_ERR("Unexpected first L2CAP frame");
   11228:	4826      	ldr	r0, [pc, #152]	; (112c4 <bt_conn_recv+0xb4>)
   1122a:	2145      	movs	r1, #69	; 0x45
   1122c:	f009 fb20 	bl	1a870 <printk>
			bt_conn_reset_rx_state(conn);
   11230:	4620      	mov	r0, r4
   11232:	f00a ffb3 	bl	1c19c <bt_conn_reset_rx_state>
		conn->rx = buf;
   11236:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   11238:	6921      	ldr	r1, [r4, #16]
   1123a:	898a      	ldrh	r2, [r1, #12]
   1123c:	2a01      	cmp	r2, #1
   1123e:	d93f      	bls.n	112c0 <bt_conn_recv+0xb0>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   11240:	688b      	ldr	r3, [r1, #8]
   11242:	881b      	ldrh	r3, [r3, #0]
   11244:	3304      	adds	r3, #4
   11246:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   11248:	429a      	cmp	r2, r3
   1124a:	d339      	bcc.n	112c0 <bt_conn_recv+0xb0>
	if (conn->rx->len > acl_total_len) {
   1124c:	d931      	bls.n	112b2 <bt_conn_recv+0xa2>
		BT_ERR("ACL len mismatch (%u > %u)",
   1124e:	481e      	ldr	r0, [pc, #120]	; (112c8 <bt_conn_recv+0xb8>)
   11250:	2145      	movs	r1, #69	; 0x45
   11252:	f009 fb0d 	bl	1a870 <printk>
		bt_conn_reset_rx_state(conn);
   11256:	4620      	mov	r0, r4
}
   11258:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   1125c:	f00a bf9e 	b.w	1c19c <bt_conn_reset_rx_state>
		if (!conn->rx) {
   11260:	6920      	ldr	r0, [r4, #16]
   11262:	b938      	cbnz	r0, 11274 <bt_conn_recv+0x64>
			BT_ERR("Unexpected L2CAP continuation");
   11264:	2145      	movs	r1, #69	; 0x45
   11266:	4819      	ldr	r0, [pc, #100]	; (112cc <bt_conn_recv+0xbc>)
			BT_ERR("Not enough buffer space for L2CAP data");
   11268:	f009 fb02 	bl	1a870 <printk>
			bt_conn_reset_rx_state(conn);
   1126c:	4620      	mov	r0, r4
   1126e:	f00a ff95 	bl	1c19c <bt_conn_reset_rx_state>
   11272:	e001      	b.n	11278 <bt_conn_recv+0x68>
		if (!buf->len) {
   11274:	89ae      	ldrh	r6, [r5, #12]
   11276:	b926      	cbnz	r6, 11282 <bt_conn_recv+0x72>
			net_buf_unref(buf);
   11278:	4628      	mov	r0, r5
}
   1127a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   1127e:	f004 ba81 	b.w	15784 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   11282:	3008      	adds	r0, #8
   11284:	f00c f86e 	bl	1d364 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   11288:	4286      	cmp	r6, r0
   1128a:	d902      	bls.n	11292 <bt_conn_recv+0x82>
			BT_ERR("Not enough buffer space for L2CAP data");
   1128c:	2145      	movs	r1, #69	; 0x45
   1128e:	4810      	ldr	r0, [pc, #64]	; (112d0 <bt_conn_recv+0xc0>)
   11290:	e7ea      	b.n	11268 <bt_conn_recv+0x58>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   11292:	6920      	ldr	r0, [r4, #16]
   11294:	89aa      	ldrh	r2, [r5, #12]
   11296:	68a9      	ldr	r1, [r5, #8]
   11298:	3008      	adds	r0, #8
   1129a:	f00c f86b 	bl	1d374 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1129e:	4628      	mov	r0, r5
   112a0:	f004 fa70 	bl	15784 <net_buf_unref>
		break;
   112a4:	e7c8      	b.n	11238 <bt_conn_recv+0x28>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   112a6:	4632      	mov	r2, r6
   112a8:	2145      	movs	r1, #69	; 0x45
   112aa:	480a      	ldr	r0, [pc, #40]	; (112d4 <bt_conn_recv+0xc4>)
   112ac:	f009 fae0 	bl	1a870 <printk>
		bt_conn_reset_rx_state(conn);
   112b0:	e7dc      	b.n	1126c <bt_conn_recv+0x5c>
	conn->rx = NULL;
   112b2:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf);
   112b4:	4620      	mov	r0, r4
	conn->rx = NULL;
   112b6:	6123      	str	r3, [r4, #16]
}
   112b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   112bc:	f000 bed0 	b.w	12060 <bt_l2cap_recv>
}
   112c0:	bd70      	pop	{r4, r5, r6, pc}
   112c2:	bf00      	nop
   112c4:	00021a48 	.word	0x00021a48
   112c8:	00021adc 	.word	0x00021adc
   112cc:	00021a6a 	.word	0x00021a6a
   112d0:	00021a8d 	.word	0x00021a8d
   112d4:	00021ab9 	.word	0x00021ab9

000112d8 <bt_conn_send_cb>:
{
   112d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   112dc:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   112de:	7a83      	ldrb	r3, [r0, #10]
{
   112e0:	4606      	mov	r6, r0
	if (conn->state != BT_CONN_CONNECTED) {
   112e2:	2b07      	cmp	r3, #7
{
   112e4:	460d      	mov	r5, r1
   112e6:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   112e8:	d009      	beq.n	112fe <bt_conn_send_cb+0x26>
		BT_ERR("not connected!");
   112ea:	4821      	ldr	r0, [pc, #132]	; (11370 <bt_conn_send_cb+0x98>)
   112ec:	2145      	movs	r1, #69	; 0x45
   112ee:	f009 fabf 	bl	1a870 <printk>
		net_buf_unref(buf);
   112f2:	4628      	mov	r0, r5
   112f4:	f004 fa46 	bl	15784 <net_buf_unref>
			return -ENOTCONN;
   112f8:	f06f 0038 	mvn.w	r0, #56	; 0x38
   112fc:	e01a      	b.n	11334 <bt_conn_send_cb+0x5c>
	if (cb) {
   112fe:	2a00      	cmp	r2, #0
   11300:	d034      	beq.n	1136c <bt_conn_send_cb+0x94>
	return z_impl_k_current_get();
   11302:	f008 f8d7 	bl	194b4 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   11306:	4b1b      	ldr	r3, [pc, #108]	; (11374 <bt_conn_send_cb+0x9c>)
   11308:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   1130a:	481b      	ldr	r0, [pc, #108]	; (11378 <bt_conn_send_cb+0xa0>)
   1130c:	bf07      	ittee	eq
   1130e:	2200      	moveq	r2, #0
   11310:	2300      	moveq	r3, #0
   11312:	f04f 32ff 	movne.w	r2, #4294967295
   11316:	f04f 33ff 	movne.w	r3, #4294967295
   1131a:	f007 f865 	bl	183e8 <z_impl_k_queue_get>
   1131e:	4604      	mov	r4, r0
		if (!tx) {
   11320:	b950      	cbnz	r0, 11338 <bt_conn_send_cb+0x60>
			BT_ERR("Unable to allocate TX context");
   11322:	2145      	movs	r1, #69	; 0x45
   11324:	4815      	ldr	r0, [pc, #84]	; (1137c <bt_conn_send_cb+0xa4>)
   11326:	f009 faa3 	bl	1a870 <printk>
			net_buf_unref(buf);
   1132a:	4628      	mov	r0, r5
   1132c:	f004 fa2a 	bl	15784 <net_buf_unref>
			return -ENOBUFS;
   11330:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   11334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   11338:	7ab3      	ldrb	r3, [r6, #10]
   1133a:	2b07      	cmp	r3, #7
   1133c:	d00a      	beq.n	11354 <bt_conn_send_cb+0x7c>
			BT_WARN("Disconnected while allocating context");
   1133e:	2157      	movs	r1, #87	; 0x57
   11340:	480f      	ldr	r0, [pc, #60]	; (11380 <bt_conn_send_cb+0xa8>)
   11342:	f009 fa95 	bl	1a870 <printk>
			net_buf_unref(buf);
   11346:	4628      	mov	r0, r5
   11348:	f004 fa1c 	bl	15784 <net_buf_unref>
			tx_free(tx);
   1134c:	4620      	mov	r0, r4
   1134e:	f7ff fe01 	bl	10f54 <tx_free>
   11352:	e7d1      	b.n	112f8 <bt_conn_send_cb+0x20>
		tx->pending_no_cb = 0U;
   11354:	2300      	movs	r3, #0
		tx->user_data = user_data;
   11356:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   1135a:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   1135c:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   1135e:	f106 0034 	add.w	r0, r6, #52	; 0x34
   11362:	4629      	mov	r1, r5
   11364:	f004 f9e0 	bl	15728 <net_buf_put>
	return 0;
   11368:	2000      	movs	r0, #0
   1136a:	e7e3      	b.n	11334 <bt_conn_send_cb+0x5c>
		tx_data(buf)->tx = NULL;
   1136c:	614a      	str	r2, [r1, #20]
   1136e:	e7f6      	b.n	1135e <bt_conn_send_cb+0x86>
   11370:	00021afc 	.word	0x00021afc
   11374:	2000a560 	.word	0x2000a560
   11378:	20008688 	.word	0x20008688
   1137c:	00021b10 	.word	0x00021b10
   11380:	00021b33 	.word	0x00021b33

00011384 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
   11384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
   11388:	2500      	movs	r5, #0
   1138a:	4b1c      	ldr	r3, [pc, #112]	; (113fc <bt_conn_prepare_events+0x78>)
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1138c:	462a      	mov	r2, r5
   1138e:	2101      	movs	r1, #1
{
   11390:	4607      	mov	r7, r0
	conn_change.signaled = 0U;
   11392:	609d      	str	r5, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   11394:	2601      	movs	r6, #1
   11396:	f009 f819 	bl	1a3cc <k_poll_event_init>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
   1139a:	f04f 0914 	mov.w	r9, #20
   1139e:	4c18      	ldr	r4, [pc, #96]	; (11400 <bt_conn_prepare_events+0x7c>)
	if (!atomic_get(&conn->ref)) {
   113a0:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
		if (!conn_prepare_events(conn, &events[ev_count])) {
   113a4:	fb09 7806 	mla	r8, r9, r6, r7
	if (!atomic_get(&conn->ref)) {
   113a8:	f00a feab 	bl	1c102 <atomic_get>
   113ac:	b178      	cbz	r0, 113ce <bt_conn_prepare_events+0x4a>
	if (conn->state == BT_CONN_DISCONNECTED &&
   113ae:	7aa3      	ldrb	r3, [r4, #10]
   113b0:	b9ab      	cbnz	r3, 113de <bt_conn_prepare_events+0x5a>
   113b2:	1d23      	adds	r3, r4, #4
   113b4:	e8d3 2fef 	ldaex	r2, [r3]
   113b8:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   113bc:	e8c3 1fe0 	stlex	r0, r1, [r3]
   113c0:	2800      	cmp	r0, #0
   113c2:	d1f7      	bne.n	113b4 <bt_conn_prepare_events+0x30>
   113c4:	0653      	lsls	r3, r2, #25
   113c6:	d50a      	bpl.n	113de <bt_conn_prepare_events+0x5a>
		conn_cleanup(conn);
   113c8:	4620      	mov	r0, r4
   113ca:	f7ff fee1 	bl	11190 <conn_cleanup>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   113ce:	3501      	adds	r5, #1
   113d0:	2d0a      	cmp	r5, #10
   113d2:	f104 04c0 	add.w	r4, r4, #192	; 0xc0
   113d6:	d1e3      	bne.n	113a0 <bt_conn_prepare_events+0x1c>
		}
	}
#endif

	return ev_count;
}
   113d8:	4630      	mov	r0, r6
   113da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (conn->state != BT_CONN_CONNECTED) {
   113de:	7aa3      	ldrb	r3, [r4, #10]
   113e0:	2b07      	cmp	r3, #7
   113e2:	d1f4      	bne.n	113ce <bt_conn_prepare_events+0x4a>
	k_poll_event_init(&events[0],
   113e4:	f104 0334 	add.w	r3, r4, #52	; 0x34
   113e8:	2200      	movs	r2, #0
   113ea:	2104      	movs	r1, #4
   113ec:	4640      	mov	r0, r8
   113ee:	f008 ffed 	bl	1a3cc <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   113f2:	2301      	movs	r3, #1
   113f4:	f888 300c 	strb.w	r3, [r8, #12]
			ev_count++;
   113f8:	441e      	add	r6, r3
   113fa:	e7e8      	b.n	113ce <bt_conn_prepare_events+0x4a>
   113fc:	2000841c 	.word	0x2000841c
   11400:	20008ce8 	.word	0x20008ce8

00011404 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   11404:	b570      	push	{r4, r5, r6, lr}
   11406:	4606      	mov	r6, r0
   11408:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1140a:	4810      	ldr	r0, [pc, #64]	; (1144c <bt_conn_add_le+0x48>)
   1140c:	210a      	movs	r1, #10
   1140e:	f00a fea1 	bl	1c154 <bt_conn_new>
	if (!conn) {
   11412:	4604      	mov	r4, r0
   11414:	b1b8      	cbz	r0, 11446 <bt_conn_add_le+0x42>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   11416:	2230      	movs	r2, #48	; 0x30
   11418:	2100      	movs	r1, #0
   1141a:	3058      	adds	r0, #88	; 0x58
   1141c:	f00a fc97 	bl	1bd4e <memset>
   11420:	4b0b      	ldr	r3, [pc, #44]	; (11450 <bt_conn_add_le+0x4c>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   11422:	4a0c      	ldr	r2, [pc, #48]	; (11454 <bt_conn_add_le+0x50>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   11424:	65e3      	str	r3, [r4, #92]	; 0x5c
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   11426:	2300      	movs	r3, #0
	memcpy(dst, src, sizeof(*dst));
   11428:	4629      	mov	r1, r5
   1142a:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
   1142e:	62a3      	str	r3, [r4, #40]	; 0x28
   11430:	2207      	movs	r2, #7

	if (!conn) {
		return NULL;
	}

	conn->id = id;
   11432:	7226      	strb	r6, [r4, #8]
   11434:	f104 0088 	add.w	r0, r4, #136	; 0x88
   11438:	f00a fc5e 	bl	1bcf8 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   1143c:	2301      	movs	r3, #1
   1143e:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   11440:	4b05      	ldr	r3, [pc, #20]	; (11458 <bt_conn_add_le+0x54>)
   11442:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   11446:	4620      	mov	r0, r4
   11448:	bd70      	pop	{r4, r5, r6, pc}
   1144a:	bf00      	nop
   1144c:	20008ce8 	.word	0x20008ce8
   11450:	00011abd 	.word	0x00011abd
   11454:	0001c14f 	.word	0x0001c14f
   11458:	00280018 	.word	0x00280018

0001145c <bt_conn_unref>:

	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
   1145c:	b510      	push	{r4, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
   1145e:	f100 04b8 	add.w	r4, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   11462:	e8d4 3fef 	ldaex	r3, [r4]
   11466:	1e5a      	subs	r2, r3, #1
   11468:	e8c4 2fe1 	stlex	r1, r2, [r4]
   1146c:	2900      	cmp	r1, #0
   1146e:	d1f8      	bne.n	11462 <bt_conn_unref+0x6>

	BT_DBG("handle %u ref %u -> %u", conn->handle, old,
	       atomic_get(&conn->ref));

	__ASSERT(old > 0, "Conn reference counter is 0");
   11470:	2b00      	cmp	r3, #0
   11472:	dc0a      	bgt.n	1148a <bt_conn_unref+0x2e>
   11474:	4909      	ldr	r1, [pc, #36]	; (1149c <bt_conn_unref+0x40>)
   11476:	480a      	ldr	r0, [pc, #40]	; (114a0 <bt_conn_unref+0x44>)
   11478:	f240 7265 	movw	r2, #1893	; 0x765
   1147c:	f009 f9f8 	bl	1a870 <printk>
   11480:	f240 7165 	movw	r1, #1893	; 0x765
   11484:	4805      	ldr	r0, [pc, #20]	; (1149c <bt_conn_unref+0x40>)
   11486:	f009 fc99 	bl	1adbc <assert_post_action>

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    atomic_get(&conn->ref) == 0) {
   1148a:	4620      	mov	r0, r4
   1148c:	f00a fe39 	bl	1c102 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   11490:	b918      	cbnz	r0, 1149a <bt_conn_unref+0x3e>
		bt_le_adv_resume();
	}
}
   11492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   11496:	f7ff bb19 	b.w	10acc <bt_le_adv_resume>
}
   1149a:	bd10      	pop	{r4, pc}
   1149c:	00021a18 	.word	0x00021a18
   114a0:	0001fdfa 	.word	0x0001fdfa

000114a4 <bt_conn_lookup_handle>:
{
   114a4:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   114a6:	210a      	movs	r1, #10
   114a8:	4801      	ldr	r0, [pc, #4]	; (114b0 <bt_conn_lookup_handle+0xc>)
   114aa:	f00a beb7 	b.w	1c21c <conn_lookup_handle>
   114ae:	bf00      	nop
   114b0:	20008ce8 	.word	0x20008ce8

000114b4 <bt_conn_set_state>:
{
   114b4:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   114b6:	7a85      	ldrb	r5, [r0, #10]
{
   114b8:	4604      	mov	r4, r0
	if (conn->state == state) {
   114ba:	428d      	cmp	r5, r1
{
   114bc:	460e      	mov	r6, r1
	if (conn->state == state) {
   114be:	d10b      	bne.n	114d8 <bt_conn_set_state+0x24>
		BT_WARN("no transition %s", state2str(state));
   114c0:	2157      	movs	r1, #87	; 0x57
   114c2:	2d08      	cmp	r5, #8
   114c4:	bf96      	itet	ls
   114c6:	4b6d      	ldrls	r3, [pc, #436]	; (1167c <bt_conn_set_state+0x1c8>)
	if (conn->state == state) {
   114c8:	4a6d      	ldrhi	r2, [pc, #436]	; (11680 <bt_conn_set_state+0x1cc>)
   114ca:	f853 2025 	ldrls.w	r2, [r3, r5, lsl #2]
		BT_WARN("no transition %s", state2str(state));
   114ce:	486d      	ldr	r0, [pc, #436]	; (11684 <bt_conn_set_state+0x1d0>)
}
   114d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   114d4:	f009 b9cc 	b.w	1a870 <printk>
	conn->state = state;
   114d8:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   114da:	b165      	cbz	r5, 114f6 <bt_conn_set_state+0x42>
   114dc:	2d06      	cmp	r5, #6
   114de:	d00d      	beq.n	114fc <bt_conn_set_state+0x48>
	switch (conn->state) {
   114e0:	7aa3      	ldrb	r3, [r4, #10]
   114e2:	2b08      	cmp	r3, #8
   114e4:	f200 80c5 	bhi.w	11672 <bt_conn_set_state+0x1be>
   114e8:	e8df f003 	tbb	[pc, r3]
   114ec:	c7c70f4a 	.word	0xc7c70f4a
   114f0:	278ec7c7 	.word	0x278ec7c7
   114f4:	c7          	.byte	0xc7
   114f5:	00          	.byte	0x00
		bt_conn_ref(conn);
   114f6:	f00a fe7a 	bl	1c1ee <bt_conn_ref>
		break;
   114fa:	e7f1      	b.n	114e0 <bt_conn_set_state+0x2c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   114fc:	7883      	ldrb	r3, [r0, #2]
   114fe:	2b01      	cmp	r3, #1
   11500:	d1ee      	bne.n	114e0 <bt_conn_set_state+0x2c>
			k_delayed_work_cancel(&conn->deferred_work);
   11502:	3058      	adds	r0, #88	; 0x58
   11504:	f008 faae 	bl	19a64 <k_delayed_work_cancel>
   11508:	e7ea      	b.n	114e0 <bt_conn_set_state+0x2c>
		tx->pending_no_cb = 0U;
   1150a:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   1150c:	4d5e      	ldr	r5, [pc, #376]	; (11688 <bt_conn_set_state+0x1d4>)
	__asm__ volatile(
   1150e:	f04f 0320 	mov.w	r3, #32
   11512:	f3ef 8211 	mrs	r2, BASEPRI
   11516:	f383 8811 	msr	BASEPRI, r3
   1151a:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   1151e:	69e3      	ldr	r3, [r4, #28]
   11520:	2b00      	cmp	r3, #0
   11522:	f000 8087 	beq.w	11634 <bt_conn_set_state+0x180>
			conn->pending_no_cb--;
   11526:	3b01      	subs	r3, #1
   11528:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1152a:	f382 8811 	msr	BASEPRI, r2
   1152e:	f3bf 8f6f 	isb	sy
   11532:	4628      	mov	r0, r5
   11534:	f007 ffc4 	bl	194c0 <z_impl_k_sem_give>
}
   11538:	e7e9      	b.n	1150e <bt_conn_set_state+0x5a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1153a:	78a3      	ldrb	r3, [r4, #2]
   1153c:	2b04      	cmp	r3, #4
   1153e:	f000 809c 	beq.w	1167a <bt_conn_set_state+0x1c6>
	z_impl_k_queue_init(queue);
   11542:	f104 0034 	add.w	r0, r4, #52	; 0x34
   11546:	f00c fd43 	bl	1dfd0 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(signal, result);
   1154a:	2100      	movs	r1, #0
   1154c:	484f      	ldr	r0, [pc, #316]	; (1168c <bt_conn_set_state+0x1d8>)
   1154e:	f009 f849 	bl	1a5e4 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   11552:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
   11554:	4620      	mov	r0, r4
	list->tail = NULL;
   11556:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   1155a:	f000 fc8f 	bl	11e7c <bt_l2cap_connected>
		notify_connected(conn);
   1155e:	4620      	mov	r0, r4
   11560:	f7ff fd02 	bl	10f68 <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   11564:	78e3      	ldrb	r3, [r4, #3]
   11566:	2b01      	cmp	r3, #1
   11568:	f040 8087 	bne.w	1167a <bt_conn_set_state+0x1c6>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1156c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   11570:	2300      	movs	r3, #0
   11572:	f104 0158 	add.w	r1, r4, #88	; 0x58
   11576:	4846      	ldr	r0, [pc, #280]	; (11690 <bt_conn_set_state+0x1dc>)
}
   11578:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1157c:	f008 ba02 	b.w	19984 <k_delayed_work_submit_to_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
   11580:	78a3      	ldrb	r3, [r4, #2]
   11582:	2b04      	cmp	r3, #4
   11584:	d104      	bne.n	11590 <bt_conn_set_state+0xdc>
			bt_conn_unref(conn);
   11586:	4620      	mov	r0, r4
}
   11588:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   1158c:	f7ff bf66 	b.w	1145c <bt_conn_unref>
		switch (old_state) {
   11590:	2d08      	cmp	r5, #8
   11592:	d872      	bhi.n	1167a <bt_conn_set_state+0x1c6>
   11594:	a301      	add	r3, pc, #4	; (adr r3, 1159c <bt_conn_set_state+0xe8>)
   11596:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   1159a:	bf00      	nop
   1159c:	00011601 	.word	0x00011601
   115a0:	000115c1 	.word	0x000115c1
   115a4:	000115f3 	.word	0x000115f3
   115a8:	00011587 	.word	0x00011587
   115ac:	00011587 	.word	0x00011587
   115b0:	000115f3 	.word	0x000115f3
   115b4:	000115f3 	.word	0x000115f3
   115b8:	00011601 	.word	0x00011601
   115bc:	00011601 	.word	0x00011601
			tx_notify(conn);
   115c0:	4620      	mov	r0, r4
   115c2:	f00a fda1 	bl	1c108 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   115c6:	78a3      	ldrb	r3, [r4, #2]
   115c8:	2b01      	cmp	r3, #1
   115ca:	d103      	bne.n	115d4 <bt_conn_set_state+0x120>
				k_delayed_work_cancel(&conn->deferred_work);
   115cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
   115d0:	f008 fa48 	bl	19a64 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   115d4:	3404      	adds	r4, #4
   115d6:	e8d4 3fef 	ldaex	r3, [r4]
   115da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   115de:	e8c4 3fe2 	stlex	r2, r3, [r4]
   115e2:	2a00      	cmp	r2, #0
   115e4:	d1f7      	bne.n	115d6 <bt_conn_set_state+0x122>
}
   115e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   115ea:	2100      	movs	r1, #0
   115ec:	4827      	ldr	r0, [pc, #156]	; (1168c <bt_conn_set_state+0x1d8>)
   115ee:	f008 bff9 	b.w	1a5e4 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   115f2:	7a63      	ldrb	r3, [r4, #9]
   115f4:	2b00      	cmp	r3, #0
   115f6:	d0c6      	beq.n	11586 <bt_conn_set_state+0xd2>
				notify_connected(conn);
   115f8:	4620      	mov	r0, r4
   115fa:	f7ff fcb5 	bl	10f68 <notify_connected>
   115fe:	e7c2      	b.n	11586 <bt_conn_set_state+0xd2>
			BT_WARN("Invalid (%u) old state", state);
   11600:	4632      	mov	r2, r6
   11602:	2157      	movs	r1, #87	; 0x57
   11604:	4823      	ldr	r0, [pc, #140]	; (11694 <bt_conn_set_state+0x1e0>)
   11606:	e763      	b.n	114d0 <bt_conn_set_state+0x1c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11608:	78a3      	ldrb	r3, [r4, #2]
   1160a:	2b01      	cmp	r3, #1
   1160c:	d135      	bne.n	1167a <bt_conn_set_state+0x1c6>
				K_MSEC(10 * bt_dev.create_param.timeout));
   1160e:	4b22      	ldr	r3, [pc, #136]	; (11698 <bt_conn_set_state+0x1e4>)
   11610:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   11614:	8a9d      	ldrh	r5, [r3, #20]
   11616:	230a      	movs	r3, #10
   11618:	f240 30e7 	movw	r0, #999	; 0x3e7
   1161c:	2100      	movs	r1, #0
   1161e:	435d      	muls	r5, r3
   11620:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11624:	2300      	movs	r3, #0
   11626:	fbc5 0106 	smlal	r0, r1, r5, r6
   1162a:	f7f7 fa7f 	bl	8b2c <__aeabi_uldivmod>
   1162e:	4602      	mov	r2, r0
   11630:	460b      	mov	r3, r1
   11632:	e79e      	b.n	11572 <bt_conn_set_state+0xbe>
	return list->head;
   11634:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   11636:	b128      	cbz	r0, 11644 <bt_conn_set_state+0x190>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11638:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   1163a:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1163c:	4288      	cmp	r0, r1
	list->head = node;
   1163e:	6163      	str	r3, [r4, #20]
	list->tail = node;
   11640:	bf08      	it	eq
   11642:	61a3      	streq	r3, [r4, #24]
   11644:	f382 8811 	msr	BASEPRI, r2
   11648:	f3bf 8f6f 	isb	sy
		if (!node) {
   1164c:	b1a8      	cbz	r0, 1167a <bt_conn_set_state+0x1c6>
	__asm__ volatile(
   1164e:	f04f 0220 	mov.w	r2, #32
   11652:	f3ef 8311 	mrs	r3, BASEPRI
   11656:	f382 8811 	msr	BASEPRI, r2
   1165a:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   1165e:	68c2      	ldr	r2, [r0, #12]
   11660:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   11662:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   11664:	f383 8811 	msr	BASEPRI, r3
   11668:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   1166c:	f7ff fc72 	bl	10f54 <tx_free>
   11670:	e75f      	b.n	11532 <bt_conn_set_state+0x7e>
		BT_WARN("no valid (%u) state was set", state);
   11672:	4632      	mov	r2, r6
   11674:	2157      	movs	r1, #87	; 0x57
   11676:	4809      	ldr	r0, [pc, #36]	; (1169c <bt_conn_set_state+0x1e8>)
   11678:	e72a      	b.n	114d0 <bt_conn_set_state+0x1c>
}
   1167a:	bd70      	pop	{r4, r5, r6, pc}
   1167c:	0001ec88 	.word	0x0001ec88
   11680:	00021b5e 	.word	0x00021b5e
   11684:	00021b68 	.word	0x00021b68
   11688:	200080c8 	.word	0x200080c8
   1168c:	2000841c 	.word	0x2000841c
   11690:	2000a540 	.word	0x2000a540
   11694:	00021b7e 	.word	0x00021b7e
   11698:	20008000 	.word	0x20008000
   1169c:	00021b9a 	.word	0x00021b9a

000116a0 <bt_conn_lookup_addr_le>:
{
   116a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   116a4:	4607      	mov	r7, r0
   116a6:	4688      	mov	r8, r1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   116a8:	2500      	movs	r5, #0
   116aa:	4e0e      	ldr	r6, [pc, #56]	; (116e4 <bt_conn_lookup_addr_le+0x44>)
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   116ac:	4630      	mov	r0, r6
   116ae:	f00a fd9e 	bl	1c1ee <bt_conn_ref>
		if (!conn) {
   116b2:	4604      	mov	r4, r0
   116b4:	b120      	cbz	r0, 116c0 <bt_conn_lookup_addr_le+0x20>
		if (conn->type != BT_CONN_TYPE_LE) {
   116b6:	7883      	ldrb	r3, [r0, #2]
   116b8:	2b01      	cmp	r3, #1
   116ba:	d00a      	beq.n	116d2 <bt_conn_lookup_addr_le+0x32>
			bt_conn_unref(conn);
   116bc:	f7ff fece 	bl	1145c <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   116c0:	3501      	adds	r5, #1
   116c2:	2d0a      	cmp	r5, #10
   116c4:	f106 06c0 	add.w	r6, r6, #192	; 0xc0
   116c8:	d1f0      	bne.n	116ac <bt_conn_lookup_addr_le+0xc>
	return NULL;
   116ca:	2400      	movs	r4, #0
}
   116cc:	4620      	mov	r0, r4
   116ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   116d2:	4642      	mov	r2, r8
   116d4:	4639      	mov	r1, r7
   116d6:	f00a fd6a 	bl	1c1ae <bt_conn_is_peer_addr_le>
   116da:	2800      	cmp	r0, #0
   116dc:	d1f6      	bne.n	116cc <bt_conn_lookup_addr_le+0x2c>
			bt_conn_unref(conn);
   116de:	4620      	mov	r0, r4
   116e0:	e7ec      	b.n	116bc <bt_conn_lookup_addr_le+0x1c>
   116e2:	bf00      	nop
   116e4:	20008ce8 	.word	0x20008ce8

000116e8 <bt_conn_exists_le>:
{
   116e8:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   116ea:	f7ff ffd9 	bl	116a0 <bt_conn_lookup_addr_le>
	if (conn) {
   116ee:	4604      	mov	r4, r0
   116f0:	b170      	cbz	r0, 11710 <bt_conn_exists_le+0x28>
		BT_WARN("Found valid connection in %s state",
   116f2:	7a83      	ldrb	r3, [r0, #10]
   116f4:	2157      	movs	r1, #87	; 0x57
   116f6:	2b08      	cmp	r3, #8
   116f8:	bf96      	itet	ls
   116fa:	4a06      	ldrls	r2, [pc, #24]	; (11714 <bt_conn_exists_le+0x2c>)
   116fc:	4a06      	ldrhi	r2, [pc, #24]	; (11718 <bt_conn_exists_le+0x30>)
   116fe:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   11702:	4806      	ldr	r0, [pc, #24]	; (1171c <bt_conn_exists_le+0x34>)
   11704:	f009 f8b4 	bl	1a870 <printk>
		bt_conn_unref(conn);
   11708:	4620      	mov	r0, r4
   1170a:	f7ff fea7 	bl	1145c <bt_conn_unref>
		return true;
   1170e:	2001      	movs	r0, #1
}
   11710:	bd10      	pop	{r4, pc}
   11712:	bf00      	nop
   11714:	0001ec88 	.word	0x0001ec88
   11718:	00021b5e 	.word	0x00021b5e
   1171c:	00021bbb 	.word	0x00021bbb

00011720 <bt_conn_lookup_state_le>:
{
   11720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11724:	4606      	mov	r6, r0
   11726:	460f      	mov	r7, r1
   11728:	4690      	mov	r8, r2
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1172a:	2500      	movs	r5, #0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1172c:	f04f 09c0 	mov.w	r9, #192	; 0xc0
   11730:	f8df a048 	ldr.w	sl, [pc, #72]	; 1177c <bt_conn_lookup_state_le+0x5c>
   11734:	fb09 a005 	mla	r0, r9, r5, sl
   11738:	f00a fd59 	bl	1c1ee <bt_conn_ref>
		if (!conn) {
   1173c:	4604      	mov	r4, r0
   1173e:	b120      	cbz	r0, 1174a <bt_conn_lookup_state_le+0x2a>
		if (conn->type != BT_CONN_TYPE_LE) {
   11740:	7883      	ldrb	r3, [r0, #2]
   11742:	2b01      	cmp	r3, #1
   11744:	d006      	beq.n	11754 <bt_conn_lookup_state_le+0x34>
			bt_conn_ref(conn);
   11746:	f00a fd52 	bl	1c1ee <bt_conn_ref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1174a:	3501      	adds	r5, #1
   1174c:	2d0a      	cmp	r5, #10
   1174e:	d1f1      	bne.n	11734 <bt_conn_lookup_state_le+0x14>
	return NULL;
   11750:	2400      	movs	r4, #0
   11752:	e00f      	b.n	11774 <bt_conn_lookup_state_le+0x54>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   11754:	b147      	cbz	r7, 11768 <bt_conn_lookup_state_le+0x48>
   11756:	463a      	mov	r2, r7
   11758:	4631      	mov	r1, r6
   1175a:	f00a fd28 	bl	1c1ae <bt_conn_is_peer_addr_le>
   1175e:	b918      	cbnz	r0, 11768 <bt_conn_lookup_state_le+0x48>
			bt_conn_unref(conn);
   11760:	4620      	mov	r0, r4
   11762:	f7ff fe7b 	bl	1145c <bt_conn_unref>
			continue;
   11766:	e7f0      	b.n	1174a <bt_conn_lookup_state_le+0x2a>
		if (!(conn->state == state && conn->id == id)) {
   11768:	7aa3      	ldrb	r3, [r4, #10]
   1176a:	4543      	cmp	r3, r8
   1176c:	d1f8      	bne.n	11760 <bt_conn_lookup_state_le+0x40>
   1176e:	7a23      	ldrb	r3, [r4, #8]
   11770:	42b3      	cmp	r3, r6
   11772:	d1f5      	bne.n	11760 <bt_conn_lookup_state_le+0x40>
}
   11774:	4620      	mov	r0, r4
   11776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1177a:	bf00      	nop
   1177c:	20008ce8 	.word	0x20008ce8

00011780 <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   11780:	b510      	push	{r4, lr}
	info->type = conn->type;
   11782:	7882      	ldrb	r2, [r0, #2]
   11784:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
   11786:	78c4      	ldrb	r4, [r0, #3]
	info->id = conn->id;

	switch (conn->type) {
   11788:	2a01      	cmp	r2, #1
	info->role = conn->role;
   1178a:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
   1178c:	7a03      	ldrb	r3, [r0, #8]
   1178e:	708b      	strb	r3, [r1, #2]
	switch (conn->type) {
   11790:	d11c      	bne.n	117cc <bt_conn_get_info+0x4c>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
   11792:	f100 0288 	add.w	r2, r0, #136	; 0x88
   11796:	608a      	str	r2, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
   11798:	4a0e      	ldr	r2, [pc, #56]	; (117d4 <bt_conn_get_info+0x54>)
   1179a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   1179e:	4413      	add	r3, r2
   117a0:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_MASTER) {
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
   117a2:	f100 0296 	add.w	r2, r0, #150	; 0x96
			info->le.local = &conn->le.init_addr;
   117a6:	f100 038f 	add.w	r3, r0, #143	; 0x8f
		if (conn->role == BT_HCI_ROLE_MASTER) {
   117aa:	b964      	cbnz	r4, 117c6 <bt_conn_get_info+0x46>
			info->le.remote = &conn->le.resp_addr;
   117ac:	e9c1 3203 	strd	r3, r2, [r1, #12]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
   117b0:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   117b4:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
   117b6:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   117ba:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
   117bc:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
		info->le.phy = &conn->le.phy;
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
#endif
		return 0;
   117c0:	2000      	movs	r0, #0
		info->le.timeout = conn->le.timeout;
   117c2:	830b      	strh	r3, [r1, #24]
		return 0;
#endif
	}

	return -EINVAL;
}
   117c4:	bd10      	pop	{r4, pc}
			info->le.remote = &conn->le.init_addr;
   117c6:	e9c1 2303 	strd	r2, r3, [r1, #12]
   117ca:	e7f1      	b.n	117b0 <bt_conn_get_info+0x30>
	return -EINVAL;
   117cc:	f06f 0015 	mvn.w	r0, #21
   117d0:	e7f8      	b.n	117c4 <bt_conn_get_info+0x44>
   117d2:	bf00      	nop
   117d4:	20008000 	.word	0x20008000

000117d8 <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   117d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   117dc:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   117de:	4844      	ldr	r0, [pc, #272]	; (118f0 <bt_conn_le_create+0x118>)
   117e0:	f00a fc8f 	bl	1c102 <atomic_get>
   117e4:	460e      	mov	r6, r1
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   117e6:	0781      	lsls	r1, r0, #30
{
   117e8:	4615      	mov	r5, r2
   117ea:	461f      	mov	r7, r3
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   117ec:	d576      	bpl.n	118dc <bt_conn_le_create+0x104>
		return -EAGAIN;
	}

	if (!bt_le_conn_params_valid(conn_param)) {
   117ee:	4610      	mov	r0, r2
   117f0:	f00a fbe5 	bl	1bfbe <bt_le_conn_params_valid>
   117f4:	b928      	cbnz	r0, 11802 <bt_conn_le_create+0x2a>
		return -EINVAL;
   117f6:	f06f 0515 	mvn.w	r5, #21
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   117fa:	4628      	mov	r0, r5
   117fc:	b002      	add	sp, #8
   117fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11802:	483b      	ldr	r0, [pc, #236]	; (118f0 <bt_conn_le_create+0x118>)
   11804:	f00a fc7d 	bl	1c102 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   11808:	0642      	lsls	r2, r0, #25
   1180a:	d4f4      	bmi.n	117f6 <bt_conn_le_create+0x1e>
   1180c:	4838      	ldr	r0, [pc, #224]	; (118f0 <bt_conn_le_create+0x118>)
   1180e:	f00a fc78 	bl	1c102 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   11812:	0503      	lsls	r3, r0, #20
   11814:	f3c0 28c0 	ubfx	r8, r0, #11, #1
   11818:	d463      	bmi.n	118e2 <bt_conn_le_create+0x10a>
	if (!bt_le_scan_random_addr_check()) {
   1181a:	f7fd fee7 	bl	f5ec <bt_le_scan_random_addr_check>
   1181e:	2800      	cmp	r0, #0
   11820:	d0e9      	beq.n	117f6 <bt_conn_le_create+0x1e>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   11822:	4621      	mov	r1, r4
   11824:	4640      	mov	r0, r8
   11826:	f7ff ff5f 	bl	116e8 <bt_conn_exists_le>
   1182a:	2800      	cmp	r0, #0
   1182c:	d1e3      	bne.n	117f6 <bt_conn_le_create+0x1e>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   1182e:	7823      	ldrb	r3, [r4, #0]
   11830:	3b02      	subs	r3, #2
   11832:	2b01      	cmp	r3, #1
   11834:	d847      	bhi.n	118c6 <bt_conn_le_create+0xee>
   11836:	2207      	movs	r2, #7
   11838:	4621      	mov	r1, r4
   1183a:	4668      	mov	r0, sp
   1183c:	f00a fa5c 	bl	1bcf8 <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   11840:	f89d 3000 	ldrb.w	r3, [sp]
   11844:	3b02      	subs	r3, #2
   11846:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   1184a:	4669      	mov	r1, sp
   1184c:	2000      	movs	r0, #0
   1184e:	f7ff fdd9 	bl	11404 <bt_conn_add_le>
	if (!conn) {
   11852:	4604      	mov	r4, r0
   11854:	2800      	cmp	r0, #0
   11856:	d047      	beq.n	118e8 <bt_conn_le_create+0x110>
	conn->le.interval_min = param->interval_min;
   11858:	882b      	ldrh	r3, [r5, #0]
   1185a:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   1185e:	886b      	ldrh	r3, [r5, #2]
   11860:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
   11864:	88ab      	ldrh	r3, [r5, #4]
   11866:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   1186a:	88eb      	ldrh	r3, [r5, #6]
	bt_dev.create_param = *param;
   1186c:	4d21      	ldr	r5, [pc, #132]	; (118f4 <bt_conn_le_create+0x11c>)
	conn->le.timeout = param->timeout;
   1186e:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
	bt_dev.create_param = *param;
   11872:	f105 0c08 	add.w	ip, r5, #8
   11876:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1187a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   1187e:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   11880:	2b00      	cmp	r3, #0
   11882:	bf08      	it	eq
   11884:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   11888:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   1188a:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
   1188c:	b903      	cbnz	r3, 11890 <bt_conn_le_create+0xb8>
   1188e:	89ab      	ldrh	r3, [r5, #12]
   11890:	822b      	strh	r3, [r5, #16]
		(bt_dev.create_param.window_coded != 0) ?
   11892:	8a6b      	ldrh	r3, [r5, #18]
	bt_dev.create_param.window_coded =
   11894:	b903      	cbnz	r3, 11898 <bt_conn_le_create+0xc0>
   11896:	89eb      	ldrh	r3, [r5, #14]
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   11898:	2106      	movs	r1, #6
   1189a:	4620      	mov	r0, r4
	bt_dev.create_param.window_coded =
   1189c:	826b      	strh	r3, [r5, #18]
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   1189e:	f7ff fe09 	bl	114b4 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   118a2:	4620      	mov	r0, r4
   118a4:	f00a fb6e 	bl	1bf84 <bt_le_create_conn>
	if (err) {
   118a8:	4605      	mov	r5, r0
   118aa:	b1a8      	cbz	r0, 118d8 <bt_conn_le_create+0x100>
		conn->err = 0;
   118ac:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   118ae:	4620      	mov	r0, r4
   118b0:	4631      	mov	r1, r6
		conn->err = 0;
   118b2:	7266      	strb	r6, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   118b4:	f7ff fdfe 	bl	114b4 <bt_conn_set_state>
		bt_conn_unref(conn);
   118b8:	4620      	mov	r0, r4
   118ba:	f7ff fdcf 	bl	1145c <bt_conn_unref>
		bt_le_scan_update(false);
   118be:	4630      	mov	r0, r6
   118c0:	f7fd ff20 	bl	f704 <bt_le_scan_update>
		return err;
   118c4:	e799      	b.n	117fa <bt_conn_le_create+0x22>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   118c6:	4621      	mov	r1, r4
   118c8:	f00a fb5a 	bl	1bf80 <bt_lookup_id_addr>
   118cc:	2207      	movs	r2, #7
   118ce:	4601      	mov	r1, r0
   118d0:	4668      	mov	r0, sp
   118d2:	f00a fa11 	bl	1bcf8 <memcpy>
}
   118d6:	e7b8      	b.n	1184a <bt_conn_le_create+0x72>
	*ret_conn = conn;
   118d8:	603c      	str	r4, [r7, #0]
	return 0;
   118da:	e78e      	b.n	117fa <bt_conn_le_create+0x22>
		return -EAGAIN;
   118dc:	f06f 050a 	mvn.w	r5, #10
   118e0:	e78b      	b.n	117fa <bt_conn_le_create+0x22>
		return -EALREADY;
   118e2:	f06f 0544 	mvn.w	r5, #68	; 0x44
   118e6:	e788      	b.n	117fa <bt_conn_le_create+0x22>
		return -ENOMEM;
   118e8:	f06f 050b 	mvn.w	r5, #11
   118ec:	e785      	b.n	117fa <bt_conn_le_create+0x22>
   118ee:	bf00      	nop
   118f0:	20008094 	.word	0x20008094
   118f4:	20008000 	.word	0x20008000

000118f8 <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_WHITELIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
   118f8:	b570      	push	{r4, r5, r6, lr}
   118fa:	4606      	mov	r6, r0
   118fc:	4834      	ldr	r0, [pc, #208]	; (119d0 <bt_le_set_auto_conn+0xd8>)
   118fe:	f00a fc00 	bl	1c102 <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11902:	0780      	lsls	r0, r0, #30
{
   11904:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11906:	d55c      	bpl.n	119c2 <bt_le_set_auto_conn+0xca>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
   11908:	b929      	cbnz	r1, 11916 <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_le_scan_random_addr_check()) {
   1190a:	f7fd fe6f 	bl	f5ec <bt_le_scan_random_addr_check>
   1190e:	b940      	cbnz	r0, 11922 <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
   11910:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
   11914:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
   11916:	4608      	mov	r0, r1
   11918:	f00a fb51 	bl	1bfbe <bt_le_conn_params_valid>
   1191c:	2800      	cmp	r0, #0
   1191e:	d1f4      	bne.n	1190a <bt_le_set_auto_conn+0x12>
   11920:	e7f6      	b.n	11910 <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
   11922:	4631      	mov	r1, r6
   11924:	2000      	movs	r0, #0
   11926:	f7ff febb 	bl	116a0 <bt_conn_lookup_addr_le>
	if (!conn) {
   1192a:	4604      	mov	r4, r0
   1192c:	b928      	cbnz	r0, 1193a <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
   1192e:	4631      	mov	r1, r6
   11930:	f7ff fd68 	bl	11404 <bt_conn_add_le>
		if (!conn) {
   11934:	4604      	mov	r4, r0
   11936:	2800      	cmp	r0, #0
   11938:	d046      	beq.n	119c8 <bt_le_set_auto_conn+0xd0>
		if (!atomic_test_and_set_bit(conn->flags,
   1193a:	1d23      	adds	r3, r4, #4
	if (param) {
   1193c:	b365      	cbz	r5, 11998 <bt_le_set_auto_conn+0xa0>
	conn->le.interval_min = param->interval_min;
   1193e:	882a      	ldrh	r2, [r5, #0]
   11940:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   11944:	886a      	ldrh	r2, [r5, #2]
   11946:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
	conn->le.latency = param->latency;
   1194a:	88aa      	ldrh	r2, [r5, #4]
   1194c:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   11950:	88ea      	ldrh	r2, [r5, #6]
   11952:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11956:	e8d3 2fef 	ldaex	r2, [r3]
   1195a:	f042 0101 	orr.w	r1, r2, #1
   1195e:	e8c3 1fe0 	stlex	r0, r1, [r3]
   11962:	2800      	cmp	r0, #0
   11964:	d1f7      	bne.n	11956 <bt_le_set_auto_conn+0x5e>
		if (!atomic_test_and_set_bit(conn->flags,
   11966:	07d1      	lsls	r1, r2, #31
   11968:	d402      	bmi.n	11970 <bt_le_set_auto_conn+0x78>
			bt_conn_ref(conn);
   1196a:	4620      	mov	r0, r4
   1196c:	f00a fc3f 	bl	1c1ee <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
   11970:	7aa3      	ldrb	r3, [r4, #10]
   11972:	b963      	cbnz	r3, 1198e <bt_le_set_auto_conn+0x96>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11974:	4816      	ldr	r0, [pc, #88]	; (119d0 <bt_le_set_auto_conn+0xd8>)
   11976:	f00a fbc4 	bl	1c102 <atomic_get>
   1197a:	0783      	lsls	r3, r0, #30
   1197c:	d507      	bpl.n	1198e <bt_le_set_auto_conn+0x96>
		if (param) {
   1197e:	b11d      	cbz	r5, 11988 <bt_le_set_auto_conn+0x90>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   11980:	2102      	movs	r1, #2
   11982:	4620      	mov	r0, r4
   11984:	f7ff fd96 	bl	114b4 <bt_conn_set_state>
		bt_le_scan_update(false);
   11988:	2000      	movs	r0, #0
   1198a:	f7fd febb 	bl	f704 <bt_le_scan_update>
	bt_conn_unref(conn);
   1198e:	4620      	mov	r0, r4
   11990:	f7ff fd64 	bl	1145c <bt_conn_unref>
	return 0;
   11994:	2000      	movs	r0, #0
   11996:	e7bd      	b.n	11914 <bt_le_set_auto_conn+0x1c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11998:	e8d3 2fef 	ldaex	r2, [r3]
   1199c:	f022 0101 	bic.w	r1, r2, #1
   119a0:	e8c3 1fe0 	stlex	r0, r1, [r3]
   119a4:	2800      	cmp	r0, #0
   119a6:	d1f7      	bne.n	11998 <bt_le_set_auto_conn+0xa0>
		if (atomic_test_and_clear_bit(conn->flags,
   119a8:	07d2      	lsls	r2, r2, #31
   119aa:	d5e1      	bpl.n	11970 <bt_le_set_auto_conn+0x78>
			bt_conn_unref(conn);
   119ac:	4620      	mov	r0, r4
   119ae:	f7ff fd55 	bl	1145c <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
   119b2:	7aa3      	ldrb	r3, [r4, #10]
   119b4:	2b02      	cmp	r3, #2
   119b6:	d1db      	bne.n	11970 <bt_le_set_auto_conn+0x78>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   119b8:	4629      	mov	r1, r5
   119ba:	4620      	mov	r0, r4
   119bc:	f7ff fd7a 	bl	114b4 <bt_conn_set_state>
   119c0:	e7d6      	b.n	11970 <bt_le_set_auto_conn+0x78>
		return -EAGAIN;
   119c2:	f06f 000a 	mvn.w	r0, #10
   119c6:	e7a5      	b.n	11914 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
   119c8:	f06f 000b 	mvn.w	r0, #11
   119cc:	e7a2      	b.n	11914 <bt_le_set_auto_conn+0x1c>
   119ce:	bf00      	nop
   119d0:	20008094 	.word	0x20008094

000119d4 <bt_conn_disconnect>:
{
   119d4:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   119d6:	7883      	ldrb	r3, [r0, #2]
{
   119d8:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   119da:	2b01      	cmp	r3, #1
{
   119dc:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   119de:	d103      	bne.n	119e8 <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   119e0:	2100      	movs	r1, #0
   119e2:	3088      	adds	r0, #136	; 0x88
   119e4:	f7ff ff88 	bl	118f8 <bt_le_set_auto_conn>
	switch (conn->state) {
   119e8:	7aa3      	ldrb	r3, [r4, #10]
   119ea:	3b02      	subs	r3, #2
   119ec:	2b06      	cmp	r3, #6
   119ee:	d805      	bhi.n	119fc <bt_conn_disconnect+0x28>
   119f0:	e8df f003 	tbb	[pc, r3]
   119f4:	12040408 	.word	0x12040408
   119f8:	271f      	.short	0x271f
   119fa:	10          	.byte	0x10
   119fb:	00          	.byte	0x00
   119fc:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
   11a00:	4628      	mov	r0, r5
   11a02:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11a04:	4620      	mov	r0, r4
   11a06:	2100      	movs	r1, #0
		conn->err = reason;
   11a08:	7265      	strb	r5, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11a0a:	f7ff fd53 	bl	114b4 <bt_conn_set_state>
			bt_le_scan_update(false);
   11a0e:	2000      	movs	r0, #0
   11a10:	f7fd fe78 	bl	f704 <bt_le_scan_update>
		return 0;
   11a14:	2500      	movs	r5, #0
   11a16:	e7f3      	b.n	11a00 <bt_conn_disconnect+0x2c>
		BT_WARN("Deprecated: Use bt_le_adv_stop instead");
   11a18:	2157      	movs	r1, #87	; 0x57
   11a1a:	4810      	ldr	r0, [pc, #64]	; (11a5c <bt_conn_disconnect+0x88>)
   11a1c:	f008 ff28 	bl	1a870 <printk>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11a20:	4620      	mov	r0, r4
		conn->err = reason;
   11a22:	7265      	strb	r5, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11a24:	2100      	movs	r1, #0
   11a26:	f7ff fd45 	bl	114b4 <bt_conn_set_state>
}
   11a2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_adv_stop();
   11a2e:	f7fe bff1 	b.w	10a14 <bt_le_adv_stop>
			k_delayed_work_cancel(&conn->deferred_work);
   11a32:	f104 0058 	add.w	r0, r4, #88	; 0x58
   11a36:	f008 f815 	bl	19a64 <k_delayed_work_cancel>
}
   11a3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   11a3e:	f7fd be3d 	b.w	f6bc <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   11a42:	4629      	mov	r1, r5
   11a44:	8820      	ldrh	r0, [r4, #0]
   11a46:	f00a fa9f 	bl	1bf88 <bt_hci_disconnect>
	if (err) {
   11a4a:	4605      	mov	r5, r0
   11a4c:	2800      	cmp	r0, #0
   11a4e:	d1d7      	bne.n	11a00 <bt_conn_disconnect+0x2c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   11a50:	2108      	movs	r1, #8
   11a52:	4620      	mov	r0, r4
   11a54:	f7ff fd2e 	bl	114b4 <bt_conn_set_state>
	return 0;
   11a58:	e7d2      	b.n	11a00 <bt_conn_disconnect+0x2c>
   11a5a:	bf00      	nop
   11a5c:	00021be3 	.word	0x00021be3

00011a60 <send_conn_le_param_update>:
{
   11a60:	b538      	push	{r3, r4, r5, lr}
   11a62:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   11a64:	4608      	mov	r0, r1
{
   11a66:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   11a68:	f00a faa9 	bl	1bfbe <bt_le_conn_params_valid>
   11a6c:	b308      	cbz	r0, 11ab2 <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   11a6e:	4b12      	ldr	r3, [pc, #72]	; (11ab8 <send_conn_le_param_update+0x58>)
   11a70:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   11a74:	0799      	lsls	r1, r3, #30
   11a76:	d407      	bmi.n	11a88 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   11a78:	78e3      	ldrb	r3, [r4, #3]
   11a7a:	b173      	cbz	r3, 11a9a <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   11a7c:	4629      	mov	r1, r5
   11a7e:	4620      	mov	r0, r4
}
   11a80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   11a84:	f000 bb14 	b.w	120b0 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   11a88:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   11a8c:	079a      	lsls	r2, r3, #30
   11a8e:	d5f3      	bpl.n	11a78 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11a90:	1d20      	adds	r0, r4, #4
   11a92:	f00a fb36 	bl	1c102 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   11a96:	0543      	lsls	r3, r0, #21
   11a98:	d4ee      	bmi.n	11a78 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   11a9a:	4629      	mov	r1, r5
   11a9c:	4620      	mov	r0, r4
   11a9e:	f00a fbe1 	bl	1c264 <bt_conn_le_conn_update>
		if (rc == 0) {
   11aa2:	b928      	cbnz	r0, 11ab0 <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
   11aa4:	88ab      	ldrh	r3, [r5, #4]
   11aa6:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   11aaa:	88eb      	ldrh	r3, [r5, #6]
   11aac:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   11ab0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   11ab2:	f06f 0015 	mvn.w	r0, #21
   11ab6:	e7fb      	b.n	11ab0 <send_conn_le_param_update+0x50>
   11ab8:	20008000 	.word	0x20008000

00011abc <deferred_work>:
{
   11abc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   11abe:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
   11ac2:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   11ac4:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   11ac8:	b99b      	cbnz	r3, 11af2 <deferred_work+0x36>
		bt_l2cap_disconnected(conn);
   11aca:	4630      	mov	r0, r6
   11acc:	f00a fc2a 	bl	1c324 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   11ad0:	4b26      	ldr	r3, [pc, #152]	; (11b6c <deferred_work+0xb0>)
   11ad2:	681d      	ldr	r5, [r3, #0]
   11ad4:	b92d      	cbnz	r5, 11ae2 <deferred_work+0x26>
		bt_conn_unref(conn);
   11ad6:	4630      	mov	r0, r6
}
   11ad8:	b002      	add	sp, #8
   11ada:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_unref(conn);
   11ade:	f7ff bcbd 	b.w	1145c <bt_conn_unref>
		if (cb->disconnected) {
   11ae2:	686b      	ldr	r3, [r5, #4]
   11ae4:	b11b      	cbz	r3, 11aee <deferred_work+0x32>
			cb->disconnected(conn, conn->err);
   11ae6:	4630      	mov	r0, r6
   11ae8:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   11aec:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   11aee:	692d      	ldr	r5, [r5, #16]
   11af0:	e7f0      	b.n	11ad4 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
   11af2:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   11af6:	2b01      	cmp	r3, #1
   11af8:	d12f      	bne.n	11b5a <deferred_work+0x9e>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11afa:	f810 3c55 	ldrb.w	r3, [r0, #-85]
   11afe:	b923      	cbnz	r3, 11b0a <deferred_work+0x4e>
}
   11b00:	b002      	add	sp, #8
   11b02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_le_create_conn_cancel();
   11b06:	f7fd bdd9 	b.w	f6bc <bt_le_create_conn_cancel>
	if (atomic_test_and_clear_bit(conn->flags,
   11b0a:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11b0e:	e8d5 3fef 	ldaex	r3, [r5]
   11b12:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   11b16:	e8c5 2fe1 	stlex	r1, r2, [r5]
   11b1a:	2900      	cmp	r1, #0
   11b1c:	d1f7      	bne.n	11b0e <deferred_work+0x52>
   11b1e:	059b      	lsls	r3, r3, #22
   11b20:	d51d      	bpl.n	11b5e <deferred_work+0xa2>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   11b22:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   11b26:	f8ad 3000 	strh.w	r3, [sp]
   11b2a:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   11b2e:	f8ad 3002 	strh.w	r3, [sp, #2]
   11b32:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   11b36:	f8ad 3004 	strh.w	r3, [sp, #4]
   11b3a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   11b3e:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   11b42:	4669      	mov	r1, sp
   11b44:	4630      	mov	r0, r6
   11b46:	f7ff ff8b 	bl	11a60 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11b4a:	e8d5 3fef 	ldaex	r3, [r5]
   11b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   11b52:	e8c5 3fe2 	stlex	r2, r3, [r5]
   11b56:	2a00      	cmp	r2, #0
   11b58:	d1f7      	bne.n	11b4a <deferred_work+0x8e>
}
   11b5a:	b002      	add	sp, #8
   11b5c:	bd70      	pop	{r4, r5, r6, pc}
		param = BT_LE_CONN_PARAM(
   11b5e:	466b      	mov	r3, sp
   11b60:	4a03      	ldr	r2, [pc, #12]	; (11b70 <deferred_work+0xb4>)
   11b62:	6810      	ldr	r0, [r2, #0]
   11b64:	6851      	ldr	r1, [r2, #4]
   11b66:	c303      	stmia	r3!, {r0, r1}
   11b68:	e7eb      	b.n	11b42 <deferred_work+0x86>
   11b6a:	bf00      	nop
   11b6c:	2000ab88 	.word	0x2000ab88
   11b70:	0001e7d8 	.word	0x0001e7d8

00011b74 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   11b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11b76:	4604      	mov	r4, r0
   11b78:	460d      	mov	r5, r1
   11b7a:	4617      	mov	r7, r2
   11b7c:	461e      	mov	r6, r3

	/*
	 * PDU must not be allocated from ISR as we block with 'K_FOREVER'
	 * during the allocation
	 */
	__ASSERT_NO_MSG(!k_is_in_isr());
   11b7e:	f00c fa9c 	bl	1e0ba <k_is_in_isr>
   11b82:	b150      	cbz	r0, 11b9a <bt_conn_create_pdu_timeout+0x26>
   11b84:	490f      	ldr	r1, [pc, #60]	; (11bc4 <bt_conn_create_pdu_timeout+0x50>)
   11b86:	4810      	ldr	r0, [pc, #64]	; (11bc8 <bt_conn_create_pdu_timeout+0x54>)
   11b88:	f640 12ee 	movw	r2, #2542	; 0x9ee
   11b8c:	f008 fe70 	bl	1a870 <printk>
   11b90:	f640 11ee 	movw	r1, #2542	; 0x9ee
   11b94:	480b      	ldr	r0, [pc, #44]	; (11bc4 <bt_conn_create_pdu_timeout+0x50>)
   11b96:	f009 f911 	bl	1adbc <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   11b9a:	480c      	ldr	r0, [pc, #48]	; (11bcc <bt_conn_create_pdu_timeout+0x58>)
   11b9c:	463a      	mov	r2, r7
   11b9e:	2c00      	cmp	r4, #0
   11ba0:	bf18      	it	ne
   11ba2:	4620      	movne	r0, r4
   11ba4:	4633      	mov	r3, r6
   11ba6:	f00b fbb7 	bl	1d318 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
   11baa:	4604      	mov	r4, r0
   11bac:	b928      	cbnz	r0, 11bba <bt_conn_create_pdu_timeout+0x46>
		BT_WARN("Unable to allocate buffer within timeout");
   11bae:	2157      	movs	r1, #87	; 0x57
   11bb0:	4807      	ldr	r0, [pc, #28]	; (11bd0 <bt_conn_create_pdu_timeout+0x5c>)
   11bb2:	f008 fe5d 	bl	1a870 <printk>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
   11bb6:	4620      	mov	r0, r4
   11bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   11bba:	1d69      	adds	r1, r5, #5
   11bbc:	3008      	adds	r0, #8
   11bbe:	f003 fd8f 	bl	156e0 <net_buf_simple_reserve>
	return buf;
   11bc2:	e7f8      	b.n	11bb6 <bt_conn_create_pdu_timeout+0x42>
   11bc4:	00021a18 	.word	0x00021a18
   11bc8:	0001fdfa 	.word	0x0001fdfa
   11bcc:	200086d0 	.word	0x200086d0
   11bd0:	00021c0f 	.word	0x00021c0f

00011bd4 <bt_conn_create_frag_timeout>:
{
   11bd4:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   11bd6:	4801      	ldr	r0, [pc, #4]	; (11bdc <bt_conn_create_frag_timeout+0x8>)
   11bd8:	f7ff bfcc 	b.w	11b74 <bt_conn_create_pdu_timeout>
   11bdc:	20008728 	.word	0x20008728

00011be0 <create_frag>:
{
   11be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11be4:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   11be6:	f04f 33ff 	mov.w	r3, #4294967295
   11bea:	f04f 32ff 	mov.w	r2, #4294967295
   11bee:	2000      	movs	r0, #0
{
   11bf0:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   11bf2:	f7ff ffef 	bl	11bd4 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   11bf6:	7ab3      	ldrb	r3, [r6, #10]
		frag = bt_conn_create_frag(0);
   11bf8:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   11bfa:	2b07      	cmp	r3, #7
   11bfc:	f04f 0600 	mov.w	r6, #0
   11c00:	d005      	beq.n	11c0e <create_frag+0x2e>
		net_buf_unref(frag);
   11c02:	f003 fdbf 	bl	15784 <net_buf_unref>
		return NULL;
   11c06:	4635      	mov	r5, r6
}
   11c08:	4628      	mov	r0, r5
   11c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   11c0e:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   11c10:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   11c14:	4e0c      	ldr	r6, [pc, #48]	; (11c48 <create_frag+0x68>)
   11c16:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   11c18:	f8b6 80c4 	ldrh.w	r8, [r6, #196]	; 0xc4
   11c1c:	f00b fba2 	bl	1d364 <net_buf_simple_tailroom>
   11c20:	4580      	cmp	r8, r0
   11c22:	d20c      	bcs.n	11c3e <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   11c24:	f8b6 60c4 	ldrh.w	r6, [r6, #196]	; 0xc4
	return net_buf_simple_add_mem(&buf->b, mem, len);
   11c28:	f854 1f08 	ldr.w	r1, [r4, #8]!
   11c2c:	4632      	mov	r2, r6
   11c2e:	4638      	mov	r0, r7
   11c30:	f00b fba0 	bl	1d374 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   11c34:	4631      	mov	r1, r6
   11c36:	4620      	mov	r0, r4
   11c38:	f003 fe80 	bl	1593c <net_buf_simple_pull>
   11c3c:	e7e4      	b.n	11c08 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   11c3e:	4638      	mov	r0, r7
   11c40:	f00b fb90 	bl	1d364 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   11c44:	b286      	uxth	r6, r0
   11c46:	e7ef      	b.n	11c28 <create_frag+0x48>
   11c48:	20008000 	.word	0x20008000

00011c4c <bt_conn_process_tx>:
{
   11c4c:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   11c4e:	7a83      	ldrb	r3, [r0, #10]
{
   11c50:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   11c52:	b973      	cbnz	r3, 11c72 <bt_conn_process_tx+0x26>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11c54:	1d03      	adds	r3, r0, #4
   11c56:	e8d3 2fef 	ldaex	r2, [r3]
   11c5a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   11c5e:	e8c3 1fe5 	stlex	r5, r1, [r3]
   11c62:	2d00      	cmp	r5, #0
   11c64:	d1f7      	bne.n	11c56 <bt_conn_process_tx+0xa>
   11c66:	0653      	lsls	r3, r2, #25
   11c68:	d503      	bpl.n	11c72 <bt_conn_process_tx+0x26>
}
   11c6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   11c6e:	f7ff ba8f 	b.w	11190 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   11c72:	2200      	movs	r2, #0
   11c74:	2300      	movs	r3, #0
   11c76:	f104 0034 	add.w	r0, r4, #52	; 0x34
   11c7a:	f003 fd01 	bl	15680 <net_buf_get>
	BT_ASSERT(buf);
   11c7e:	4605      	mov	r5, r0
   11c80:	b958      	cbnz	r0, 11c9a <bt_conn_process_tx+0x4e>
   11c82:	f240 525f 	movw	r2, #1375	; 0x55f
   11c86:	491e      	ldr	r1, [pc, #120]	; (11d00 <bt_conn_process_tx+0xb4>)
   11c88:	481e      	ldr	r0, [pc, #120]	; (11d04 <bt_conn_process_tx+0xb8>)
   11c8a:	f008 fdf1 	bl	1a870 <printk>
   11c8e:	4040      	eors	r0, r0
   11c90:	f380 8811 	msr	BASEPRI, r0
   11c94:	f04f 0003 	mov.w	r0, #3
   11c98:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   11c9a:	4e1b      	ldr	r6, [pc, #108]	; (11d08 <bt_conn_process_tx+0xbc>)
	if (buf->len <= conn_mtu(conn)) {
   11c9c:	89aa      	ldrh	r2, [r5, #12]
   11c9e:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   11ca2:	429a      	cmp	r2, r3
   11ca4:	d807      	bhi.n	11cb6 <bt_conn_process_tx+0x6a>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   11ca6:	2300      	movs	r3, #0
   11ca8:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   11caa:	4629      	mov	r1, r5
   11cac:	4620      	mov	r0, r4
   11cae:	f7ff f971 	bl	10f94 <send_frag>
	if (!send_buf(conn, buf)) {
   11cb2:	b130      	cbz	r0, 11cc2 <bt_conn_process_tx+0x76>
}
   11cb4:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
   11cb6:	4629      	mov	r1, r5
   11cb8:	4620      	mov	r0, r4
   11cba:	f7ff ff91 	bl	11be0 <create_frag>
	if (!frag) {
   11cbe:	4601      	mov	r1, r0
   11cc0:	b920      	cbnz	r0, 11ccc <bt_conn_process_tx+0x80>
		net_buf_unref(buf);
   11cc2:	4628      	mov	r0, r5
}
   11cc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   11cc8:	f003 bd5c 	b.w	15784 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   11ccc:	2301      	movs	r3, #1
   11cce:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   11cd0:	4620      	mov	r0, r4
   11cd2:	f7ff f95f 	bl	10f94 <send_frag>
   11cd6:	2800      	cmp	r0, #0
   11cd8:	d0f3      	beq.n	11cc2 <bt_conn_process_tx+0x76>
	while (buf->len > conn_mtu(conn)) {
   11cda:	89aa      	ldrh	r2, [r5, #12]
   11cdc:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   11ce0:	429a      	cmp	r2, r3
   11ce2:	d802      	bhi.n	11cea <bt_conn_process_tx+0x9e>
	return send_frag(conn, buf, FRAG_END, false);
   11ce4:	2300      	movs	r3, #0
   11ce6:	2203      	movs	r2, #3
   11ce8:	e7df      	b.n	11caa <bt_conn_process_tx+0x5e>
		frag = create_frag(conn, buf);
   11cea:	4629      	mov	r1, r5
   11cec:	4620      	mov	r0, r4
   11cee:	f7ff ff77 	bl	11be0 <create_frag>
		if (!frag) {
   11cf2:	4601      	mov	r1, r0
   11cf4:	2800      	cmp	r0, #0
   11cf6:	d0e4      	beq.n	11cc2 <bt_conn_process_tx+0x76>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   11cf8:	2301      	movs	r3, #1
   11cfa:	461a      	mov	r2, r3
   11cfc:	e7e8      	b.n	11cd0 <bt_conn_process_tx+0x84>
   11cfe:	bf00      	nop
   11d00:	00021a18 	.word	0x00021a18
   11d04:	0001fdfa 	.word	0x0001fdfa
   11d08:	20008000 	.word	0x20008000

00011d0c <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
   11d0c:	4b0b      	ldr	r3, [pc, #44]	; (11d3c <bt_conn_index+0x30>)
{
   11d0e:	b510      	push	{r4, lr}
		index = conn - acl_conns;
   11d10:	1ac0      	subs	r0, r0, r3
   11d12:	4b0b      	ldr	r3, [pc, #44]	; (11d40 <bt_conn_index+0x34>)
   11d14:	1184      	asrs	r4, r0, #6
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
   11d16:	f5b0 6fd8 	cmp.w	r0, #1728	; 0x6c0
		index = conn - acl_conns;
   11d1a:	fb03 f404 	mul.w	r4, r3, r4
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
   11d1e:	d90a      	bls.n	11d36 <bt_conn_index+0x2a>
   11d20:	4908      	ldr	r1, [pc, #32]	; (11d44 <bt_conn_index+0x38>)
   11d22:	4809      	ldr	r0, [pc, #36]	; (11d48 <bt_conn_index+0x3c>)
   11d24:	f640 2295 	movw	r2, #2709	; 0xa95
   11d28:	f008 fda2 	bl	1a870 <printk>
   11d2c:	f640 2195 	movw	r1, #2709	; 0xa95
   11d30:	4804      	ldr	r0, [pc, #16]	; (11d44 <bt_conn_index+0x38>)
   11d32:	f009 f843 	bl	1adbc <assert_post_action>
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
   11d36:	b2e0      	uxtb	r0, r4
   11d38:	bd10      	pop	{r4, pc}
   11d3a:	bf00      	nop
   11d3c:	20008ce8 	.word	0x20008ce8
   11d40:	aaaaaaab 	.word	0xaaaaaaab
   11d44:	00021a18 	.word	0x00021a18
   11d48:	0001fdfa 	.word	0x0001fdfa

00011d4c <bt_conn_lookup_index>:

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   11d4c:	2809      	cmp	r0, #9
   11d4e:	d806      	bhi.n	11d5e <bt_conn_lookup_index+0x12>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   11d50:	4b04      	ldr	r3, [pc, #16]	; (11d64 <bt_conn_lookup_index+0x18>)
   11d52:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   11d56:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   11d5a:	f00a ba48 	b.w	1c1ee <bt_conn_ref>
}
   11d5e:	2000      	movs	r0, #0
   11d60:	4770      	bx	lr
   11d62:	bf00      	nop
   11d64:	20008ce8 	.word	0x20008ce8

00011d68 <bt_conn_init>:

int bt_conn_init(void)
{
   11d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   11d6a:	4917      	ldr	r1, [pc, #92]	; (11dc8 <bt_conn_init+0x60>)
   11d6c:	4817      	ldr	r0, [pc, #92]	; (11dcc <bt_conn_init+0x64>)
   11d6e:	f00c f93c 	bl	1dfea <k_queue_append>
   11d72:	4917      	ldr	r1, [pc, #92]	; (11dd0 <bt_conn_init+0x68>)
   11d74:	4815      	ldr	r0, [pc, #84]	; (11dcc <bt_conn_init+0x64>)
   11d76:	f00c f938 	bl	1dfea <k_queue_append>
   11d7a:	4916      	ldr	r1, [pc, #88]	; (11dd4 <bt_conn_init+0x6c>)
   11d7c:	4813      	ldr	r0, [pc, #76]	; (11dcc <bt_conn_init+0x64>)
   11d7e:	f00c f934 	bl	1dfea <k_queue_append>
	}

	bt_att_init();
   11d82:	f00a fe4f 	bl	1ca24 <bt_att_init>

	err = bt_smp_init();
   11d86:	f00b fac4 	bl	1d312 <bt_smp_init>
	if (err) {
   11d8a:	4605      	mov	r5, r0
   11d8c:	b9d0      	cbnz	r0, 11dc4 <bt_conn_init+0x5c>
		return err;
	}

	bt_l2cap_init();
   11d8e:	f00a fb32 	bl	1c3f6 <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11d92:	462e      	mov	r6, r5
   11d94:	4f10      	ldr	r7, [pc, #64]	; (11dd8 <bt_conn_init+0x70>)
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   11d96:	4638      	mov	r0, r7
   11d98:	f00a fa29 	bl	1c1ee <bt_conn_ref>

			if (!conn) {
   11d9c:	4604      	mov	r4, r0
   11d9e:	b160      	cbz	r0, 11dba <bt_conn_init+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11da0:	3004      	adds	r0, #4
   11da2:	f00a f9ae 	bl	1c102 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_WHITELIST)
			if (atomic_test_bit(conn->flags,
   11da6:	07c3      	lsls	r3, r0, #31
   11da8:	d504      	bpl.n	11db4 <bt_conn_init+0x4c>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   11daa:	2102      	movs	r1, #2
   11dac:	4620      	mov	r0, r4
				conn->id = BT_ID_DEFAULT;
   11dae:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   11db0:	f7ff fb80 	bl	114b4 <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_WHITELIST) */

			bt_conn_unref(conn);
   11db4:	4620      	mov	r0, r4
   11db6:	f7ff fb51 	bl	1145c <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11dba:	3601      	adds	r6, #1
   11dbc:	2e0a      	cmp	r6, #10
   11dbe:	f107 07c0 	add.w	r7, r7, #192	; 0xc0
   11dc2:	d1e8      	bne.n	11d96 <bt_conn_init+0x2e>
		}
	}

	return 0;
}
   11dc4:	4628      	mov	r0, r5
   11dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11dc8:	2000ab8c 	.word	0x2000ab8c
   11dcc:	20008688 	.word	0x20008688
   11dd0:	2000ab9c 	.word	0x2000ab9c
   11dd4:	2000abac 	.word	0x2000abac
   11dd8:	20008ce8 	.word	0x20008ce8

00011ddc <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   11ddc:	b570      	push	{r4, r5, r6, lr}
   11dde:	4602      	mov	r2, r0
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   11de0:	2400      	movs	r4, #0
   11de2:	26c0      	movs	r6, #192	; 0xc0
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   11de4:	4b09      	ldr	r3, [pc, #36]	; (11e0c <l2cap_accept+0x30>)
   11de6:	fb06 f504 	mul.w	r5, r6, r4
   11dea:	58e8      	ldr	r0, [r5, r3]
   11dec:	b148      	cbz	r0, 11e02 <l2cap_accept+0x26>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   11dee:	3401      	adds	r4, #1
   11df0:	2c0a      	cmp	r4, #10
   11df2:	d1f8      	bne.n	11de6 <l2cap_accept+0xa>
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   11df4:	4806      	ldr	r0, [pc, #24]	; (11e10 <l2cap_accept+0x34>)
   11df6:	2145      	movs	r1, #69	; 0x45
   11df8:	f008 fd3a 	bl	1a870 <printk>
   11dfc:	f06f 000b 	mvn.w	r0, #11
   11e00:	e003      	b.n	11e0a <l2cap_accept+0x2e>
		l2cap->chan.chan.ops = &ops;
   11e02:	4a04      	ldr	r2, [pc, #16]	; (11e14 <l2cap_accept+0x38>)
   11e04:	442b      	add	r3, r5
   11e06:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   11e08:	600b      	str	r3, [r1, #0]

	return -ENOMEM;
}
   11e0a:	bd70      	pop	{r4, r5, r6, pc}
   11e0c:	20009468 	.word	0x20009468
   11e10:	00021ca7 	.word	0x00021ca7
   11e14:	0001eccc 	.word	0x0001eccc

00011e18 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   11e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11e1a:	4605      	mov	r5, r0
   11e1c:	460f      	mov	r7, r1
   11e1e:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   11e20:	2300      	movs	r3, #0
   11e22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   11e26:	2104      	movs	r1, #4
   11e28:	2000      	movs	r0, #0
   11e2a:	f7ff fea3 	bl	11b74 <bt_conn_create_pdu_timeout>
	if (!buf) {
   11e2e:	4604      	mov	r4, r0
   11e30:	b930      	cbnz	r0, 11e40 <l2cap_create_le_sig_pdu.constprop.0+0x28>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   11e32:	462a      	mov	r2, r5
   11e34:	2145      	movs	r1, #69	; 0x45
   11e36:	4806      	ldr	r0, [pc, #24]	; (11e50 <l2cap_create_le_sig_pdu.constprop.0+0x38>)
   11e38:	f008 fd1a 	bl	1a870 <printk>
}
   11e3c:	4620      	mov	r0, r4
   11e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   11e40:	2104      	movs	r1, #4
   11e42:	3008      	adds	r0, #8
   11e44:	f003 fdb4 	bl	159b0 <net_buf_simple_add>
	hdr->code = code;
   11e48:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   11e4a:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   11e4c:	8046      	strh	r6, [r0, #2]
	return buf;
   11e4e:	e7f5      	b.n	11e3c <l2cap_create_le_sig_pdu.constprop.0+0x24>
   11e50:	00021cd3 	.word	0x00021cd3

00011e54 <l2cap_rtx_timeout>:
{
   11e54:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
   11e56:	4604      	mov	r4, r0
   11e58:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
   11e5c:	2145      	movs	r1, #69	; 0x45
   11e5e:	4622      	mov	r2, r4
   11e60:	4805      	ldr	r0, [pc, #20]	; (11e78 <l2cap_rtx_timeout+0x24>)
   11e62:	f008 fd05 	bl	1a870 <printk>
	bt_l2cap_chan_remove(conn, &chan->chan);
   11e66:	4628      	mov	r0, r5
   11e68:	4621      	mov	r1, r4
   11e6a:	f00a fa25 	bl	1c2b8 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   11e6e:	4620      	mov	r0, r4
}
   11e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   11e74:	f00a ba41 	b.w	1c2fa <bt_l2cap_chan_del>
   11e78:	00021d00 	.word	0x00021d00

00011e7c <bt_l2cap_connected>:
{
   11e7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   11e80:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   11e82:	4e2d      	ldr	r6, [pc, #180]	; (11f38 <bt_l2cap_connected+0xbc>)
   11e84:	4f2d      	ldr	r7, [pc, #180]	; (11f3c <bt_l2cap_connected+0xc0>)
   11e86:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 11f40 <bt_l2cap_connected+0xc4>
   11e8a:	42be      	cmp	r6, r7
   11e8c:	d90a      	bls.n	11ea4 <bt_l2cap_connected+0x28>
   11e8e:	4641      	mov	r1, r8
   11e90:	482c      	ldr	r0, [pc, #176]	; (11f44 <bt_l2cap_connected+0xc8>)
   11e92:	f240 1267 	movw	r2, #359	; 0x167
   11e96:	f008 fceb 	bl	1a870 <printk>
   11e9a:	f240 1167 	movw	r1, #359	; 0x167
   11e9e:	4640      	mov	r0, r8
   11ea0:	f008 ff8c 	bl	1adbc <assert_post_action>
   11ea4:	42be      	cmp	r6, r7
   11ea6:	d302      	bcc.n	11eae <bt_l2cap_connected+0x32>
}
   11ea8:	b003      	add	sp, #12
   11eaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   11eae:	4628      	mov	r0, r5
   11eb0:	6873      	ldr	r3, [r6, #4]
   11eb2:	a901      	add	r1, sp, #4
   11eb4:	4798      	blx	r3
   11eb6:	2800      	cmp	r0, #0
   11eb8:	db38      	blt.n	11f2c <bt_l2cap_connected+0xb0>
		ch = BT_L2CAP_LE_CHAN(chan);
   11eba:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
   11ebc:	8833      	ldrh	r3, [r6, #0]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   11ebe:	2230      	movs	r2, #48	; 0x30
   11ec0:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		ch->tx.cid = fchan->cid;
   11ec4:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
   11ec8:	2100      	movs	r1, #0
   11eca:	f104 0010 	add.w	r0, r4, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   11ece:	f8d6 9008 	ldr.w	r9, [r6, #8]
   11ed2:	f009 ff3c 	bl	1bd4e <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11ed6:	2200      	movs	r2, #0
   11ed8:	4b1b      	ldr	r3, [pc, #108]	; (11f48 <bt_l2cap_connected+0xcc>)
   11eda:	6163      	str	r3, [r4, #20]
   11edc:	f104 0340 	add.w	r3, r4, #64	; 0x40
   11ee0:	e8d3 1fef 	ldaex	r1, [r3]
   11ee4:	e8c3 2fe0 	stlex	r0, r2, [r3]
   11ee8:	2800      	cmp	r0, #0
   11eea:	d1f9      	bne.n	11ee0 <bt_l2cap_connected+0x64>
	parent->next = child;
   11eec:	60a2      	str	r2, [r4, #8]
	return list->tail;
   11eee:	6d6a      	ldr	r2, [r5, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   11ef0:	f104 0308 	add.w	r3, r4, #8
Z_GENLIST_APPEND(slist, snode)
   11ef4:	b9e2      	cbnz	r2, 11f30 <bt_l2cap_connected+0xb4>
	list->head = node;
   11ef6:	e9c5 3314 	strd	r3, r3, [r5, #80]	; 0x50
		if (chan->ops->connected) {
   11efa:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   11efc:	6025      	str	r5, [r4, #0]
		if (chan->ops->connected) {
   11efe:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   11f00:	f8c4 900c 	str.w	r9, [r4, #12]
		if (chan->ops->connected) {
   11f04:	681b      	ldr	r3, [r3, #0]
   11f06:	b103      	cbz	r3, 11f0a <bt_l2cap_connected+0x8e>
			chan->ops->connected(chan);
   11f08:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11f0a:	9b01      	ldr	r3, [sp, #4]
   11f0c:	3340      	adds	r3, #64	; 0x40
   11f0e:	e8d3 2fef 	ldaex	r2, [r3]
   11f12:	f042 0201 	orr.w	r2, r2, #1
   11f16:	e8c3 2fe1 	stlex	r1, r2, [r3]
   11f1a:	2900      	cmp	r1, #0
   11f1c:	d1f7      	bne.n	11f0e <bt_l2cap_connected+0x92>
		if (chan->ops->status) {
   11f1e:	9801      	ldr	r0, [sp, #4]
   11f20:	6843      	ldr	r3, [r0, #4]
   11f22:	699b      	ldr	r3, [r3, #24]
   11f24:	b113      	cbz	r3, 11f2c <bt_l2cap_connected+0xb0>
			chan->ops->status(chan, chan->status);
   11f26:	f100 0140 	add.w	r1, r0, #64	; 0x40
   11f2a:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   11f2c:	360c      	adds	r6, #12
   11f2e:	e7ac      	b.n	11e8a <bt_l2cap_connected+0xe>
	parent->next = child;
   11f30:	6013      	str	r3, [r2, #0]
	list->tail = node;
   11f32:	656b      	str	r3, [r5, #84]	; 0x54
}
   11f34:	e7e1      	b.n	11efa <bt_l2cap_connected+0x7e>
   11f36:	bf00      	nop
   11f38:	0001e5b0 	.word	0x0001e5b0
   11f3c:	0001e5d4 	.word	0x0001e5d4
   11f40:	00021d15 	.word	0x00021d15
   11f44:	0001fdfa 	.word	0x0001fdfa
   11f48:	00011e55 	.word	0x00011e55

00011f4c <l2cap_recv>:
{
   11f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   11f4e:	898b      	ldrh	r3, [r1, #12]
{
   11f50:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   11f52:	2b03      	cmp	r3, #3
{
   11f54:	460d      	mov	r5, r1
   11f56:	b085      	sub	sp, #20
	if (buf->len < sizeof(*hdr)) {
   11f58:	d804      	bhi.n	11f64 <l2cap_recv+0x18>
		BT_ERR("Too small L2CAP signaling PDU");
   11f5a:	2145      	movs	r1, #69	; 0x45
   11f5c:	483a      	ldr	r0, [pc, #232]	; (12048 <l2cap_recv+0xfc>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   11f5e:	f008 fc87 	bl	1a870 <printk>
		return 0;
   11f62:	e00d      	b.n	11f80 <l2cap_recv+0x34>
	return net_buf_simple_pull_mem(&buf->b, len);
   11f64:	2104      	movs	r1, #4
   11f66:	f105 0008 	add.w	r0, r5, #8
   11f6a:	f003 fd03 	bl	15974 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   11f6e:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   11f70:	8843      	ldrh	r3, [r0, #2]
   11f72:	4604      	mov	r4, r0
	if (buf->len != len) {
   11f74:	4293      	cmp	r3, r2
   11f76:	d006      	beq.n	11f86 <l2cap_recv+0x3a>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   11f78:	2145      	movs	r1, #69	; 0x45
   11f7a:	4834      	ldr	r0, [pc, #208]	; (1204c <l2cap_recv+0x100>)
   11f7c:	f008 fc78 	bl	1a870 <printk>
}
   11f80:	2000      	movs	r0, #0
   11f82:	b005      	add	sp, #20
   11f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   11f86:	7841      	ldrb	r1, [r0, #1]
   11f88:	b911      	cbnz	r1, 11f90 <l2cap_recv+0x44>
		BT_ERR("Invalid ident value in L2CAP PDU");
   11f8a:	2145      	movs	r1, #69	; 0x45
   11f8c:	4830      	ldr	r0, [pc, #192]	; (12050 <l2cap_recv+0x104>)
   11f8e:	e7e6      	b.n	11f5e <l2cap_recv+0x12>
	switch (hdr->code) {
   11f90:	7802      	ldrb	r2, [r0, #0]
   11f92:	2a12      	cmp	r2, #18
   11f94:	d00f      	beq.n	11fb6 <l2cap_recv+0x6a>
   11f96:	2a13      	cmp	r2, #19
   11f98:	d008      	beq.n	11fac <l2cap_recv+0x60>
   11f9a:	2a01      	cmp	r2, #1
   11f9c:	d0f0      	beq.n	11f80 <l2cap_recv+0x34>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   11f9e:	2157      	movs	r1, #87	; 0x57
   11fa0:	482c      	ldr	r0, [pc, #176]	; (12054 <l2cap_recv+0x108>)
   11fa2:	f008 fc65 	bl	1a870 <printk>
		l2cap_send_reject(chan->conn, hdr->ident,
   11fa6:	7861      	ldrb	r1, [r4, #1]
   11fa8:	6830      	ldr	r0, [r6, #0]
   11faa:	e00d      	b.n	11fc8 <l2cap_recv+0x7c>
	if (buf->len < sizeof(*rsp)) {
   11fac:	2b01      	cmp	r3, #1
   11fae:	d8e7      	bhi.n	11f80 <l2cap_recv+0x34>
		BT_ERR("Too small LE conn param rsp");
   11fb0:	2145      	movs	r1, #69	; 0x45
   11fb2:	4829      	ldr	r0, [pc, #164]	; (12058 <l2cap_recv+0x10c>)
   11fb4:	e7d3      	b.n	11f5e <l2cap_recv+0x12>
	if (buf->len < sizeof(*req)) {
   11fb6:	2b07      	cmp	r3, #7
   11fb8:	d802      	bhi.n	11fc0 <l2cap_recv+0x74>
		BT_ERR("Too small LE conn update param req");
   11fba:	2145      	movs	r1, #69	; 0x45
   11fbc:	4827      	ldr	r0, [pc, #156]	; (1205c <l2cap_recv+0x110>)
   11fbe:	e7ce      	b.n	11f5e <l2cap_recv+0x12>
   11fc0:	6834      	ldr	r4, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
   11fc2:	78e7      	ldrb	r7, [r4, #3]
   11fc4:	b11f      	cbz	r7, 11fce <l2cap_recv+0x82>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   11fc6:	4620      	mov	r0, r4
		l2cap_send_reject(chan->conn, hdr->ident,
   11fc8:	f00a f9de 	bl	1c388 <l2cap_send_reject.constprop.0>
		break;
   11fcc:	e7d8      	b.n	11f80 <l2cap_recv+0x34>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   11fce:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   11fd0:	7850      	ldrb	r0, [r2, #1]
   11fd2:	7813      	ldrb	r3, [r2, #0]
   11fd4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   11fd8:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   11fdc:	78d0      	ldrb	r0, [r2, #3]
   11fde:	7893      	ldrb	r3, [r2, #2]
   11fe0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   11fe4:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   11fe8:	7950      	ldrb	r0, [r2, #5]
   11fea:	7913      	ldrb	r3, [r2, #4]
   11fec:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   11ff0:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   11ff4:	7993      	ldrb	r3, [r2, #6]
   11ff6:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   11ff8:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   11ffa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   11ffe:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   12000:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   12004:	f7ff ff08 	bl	11e18 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   12008:	4605      	mov	r5, r0
   1200a:	2800      	cmp	r0, #0
   1200c:	d0b8      	beq.n	11f80 <l2cap_recv+0x34>
	accepted = le_param_req(conn, &param);
   1200e:	a902      	add	r1, sp, #8
   12010:	4620      	mov	r0, r4
   12012:	f7ff f895 	bl	11140 <le_param_req>
   12016:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   12018:	2102      	movs	r1, #2
   1201a:	f105 0008 	add.w	r0, r5, #8
   1201e:	f003 fcc7 	bl	159b0 <net_buf_simple_add>
	if (accepted) {
   12022:	f086 0301 	eor.w	r3, r6, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   12026:	b2db      	uxtb	r3, r3
   12028:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1202a:	462a      	mov	r2, r5
   1202c:	463b      	mov	r3, r7
   1202e:	2105      	movs	r1, #5
   12030:	4620      	mov	r0, r4
   12032:	9700      	str	r7, [sp, #0]
   12034:	f00a f98f 	bl	1c356 <bt_l2cap_send_cb>
	if (accepted) {
   12038:	2e00      	cmp	r6, #0
   1203a:	d0a1      	beq.n	11f80 <l2cap_recv+0x34>
		bt_conn_le_conn_update(conn, &param);
   1203c:	4620      	mov	r0, r4
   1203e:	a902      	add	r1, sp, #8
   12040:	f00a f910 	bl	1c264 <bt_conn_le_conn_update>
   12044:	e79c      	b.n	11f80 <l2cap_recv+0x34>
   12046:	bf00      	nop
   12048:	00021d46 	.word	0x00021d46
   1204c:	00021d69 	.word	0x00021d69
   12050:	00021d8f 	.word	0x00021d8f
   12054:	00021dfe 	.word	0x00021dfe
   12058:	00021db5 	.word	0x00021db5
   1205c:	00021dd6 	.word	0x00021dd6

00012060 <bt_l2cap_recv>:
{
   12060:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   12062:	898b      	ldrh	r3, [r1, #12]
{
   12064:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   12066:	2b03      	cmp	r3, #3
{
   12068:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1206a:	d808      	bhi.n	1207e <bt_l2cap_recv+0x1e>
		BT_ERR("Too small L2CAP PDU received");
   1206c:	2145      	movs	r1, #69	; 0x45
   1206e:	480e      	ldr	r0, [pc, #56]	; (120a8 <bt_l2cap_recv+0x48>)
   12070:	f008 fbfe 	bl	1a870 <printk>
	net_buf_unref(buf);
   12074:	4620      	mov	r0, r4
}
   12076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   1207a:	f003 bb83 	b.w	15784 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   1207e:	2104      	movs	r1, #4
   12080:	f104 0008 	add.w	r0, r4, #8
   12084:	f003 fc76 	bl	15974 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   12088:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1208a:	4628      	mov	r0, r5
   1208c:	4611      	mov	r1, r2
   1208e:	f00a f9a2 	bl	1c3d6 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   12092:	b920      	cbnz	r0, 1209e <bt_l2cap_recv+0x3e>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
   12094:	2157      	movs	r1, #87	; 0x57
   12096:	4805      	ldr	r0, [pc, #20]	; (120ac <bt_l2cap_recv+0x4c>)
   12098:	f008 fbea 	bl	1a870 <printk>
		net_buf_unref(buf);
   1209c:	e7ea      	b.n	12074 <bt_l2cap_recv+0x14>
	chan->ops->recv(chan, buf);
   1209e:	6843      	ldr	r3, [r0, #4]
   120a0:	4621      	mov	r1, r4
   120a2:	691b      	ldr	r3, [r3, #16]
   120a4:	4798      	blx	r3
   120a6:	e7e5      	b.n	12074 <bt_l2cap_recv+0x14>
   120a8:	00021e21 	.word	0x00021e21
   120ac:	00021e43 	.word	0x00021e43

000120b0 <bt_l2cap_update_conn_param>:
{
   120b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   120b2:	460c      	mov	r4, r1
	ident++;
   120b4:	4914      	ldr	r1, [pc, #80]	; (12108 <bt_l2cap_update_conn_param+0x58>)
{
   120b6:	4605      	mov	r5, r0
	ident++;
   120b8:	780b      	ldrb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   120ba:	2208      	movs	r2, #8
	ident++;
   120bc:	3301      	adds	r3, #1
	if (!ident) {
   120be:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   120c2:	bf08      	it	eq
   120c4:	2301      	moveq	r3, #1
   120c6:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   120c8:	2012      	movs	r0, #18
   120ca:	7809      	ldrb	r1, [r1, #0]
   120cc:	f7ff fea4 	bl	11e18 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   120d0:	4606      	mov	r6, r0
   120d2:	b1b0      	cbz	r0, 12102 <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
   120d4:	2108      	movs	r1, #8
   120d6:	4408      	add	r0, r1
   120d8:	f003 fc6a 	bl	159b0 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   120dc:	8822      	ldrh	r2, [r4, #0]
   120de:	2105      	movs	r1, #5
   120e0:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   120e2:	8862      	ldrh	r2, [r4, #2]
   120e4:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   120e6:	88a2      	ldrh	r2, [r4, #4]
   120e8:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   120ea:	88e2      	ldrh	r2, [r4, #6]
   120ec:	2400      	movs	r4, #0
   120ee:	80c2      	strh	r2, [r0, #6]
   120f0:	4623      	mov	r3, r4
   120f2:	4632      	mov	r2, r6
   120f4:	4628      	mov	r0, r5
   120f6:	9400      	str	r4, [sp, #0]
   120f8:	f00a f92d 	bl	1c356 <bt_l2cap_send_cb>
	return 0;
   120fc:	4620      	mov	r0, r4
}
   120fe:	b002      	add	sp, #8
   12100:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   12102:	f06f 000b 	mvn.w	r0, #11
   12106:	e7fa      	b.n	120fe <bt_l2cap_update_conn_param+0x4e>
   12108:	2000f9b3 	.word	0x2000f9b3

0001210c <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   1210c:	4b02      	ldr	r3, [pc, #8]	; (12118 <att_cfm_sent+0xc>)
   1210e:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   12112:	f00a b983 	b.w	1c41c <att_sent>
   12116:	bf00      	nop
   12118:	0001c82b 	.word	0x0001c82b

0001211c <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   1211c:	4b02      	ldr	r3, [pc, #8]	; (12128 <att_rsp_sent+0xc>)
   1211e:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   12122:	f00a b97b 	b.w	1c41c <att_sent>
   12126:	bf00      	nop
   12128:	0001c817 	.word	0x0001c817

0001212c <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   1212c:	4b02      	ldr	r3, [pc, #8]	; (12138 <att_req_sent+0xc>)
   1212e:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   12132:	f00a b973 	b.w	1c41c <att_sent>
   12136:	bf00      	nop
   12138:	000122e9 	.word	0x000122e9

0001213c <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   1213c:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   1213e:	7a83      	ldrb	r3, [r0, #10]
   12140:	2b07      	cmp	r3, #7
   12142:	d005      	beq.n	12150 <att_get+0x14>
		BT_WARN("Not connected");
   12144:	2157      	movs	r1, #87	; 0x57
   12146:	480e      	ldr	r0, [pc, #56]	; (12180 <att_get+0x44>)
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
		BT_WARN("ATT channel flagged as disconnected");
   12148:	f008 fb92 	bl	1a870 <printk>
		return NULL;
   1214c:	2400      	movs	r4, #0
   1214e:	e008      	b.n	12162 <att_get+0x26>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   12150:	2104      	movs	r1, #4
   12152:	f00a f940 	bl	1c3d6 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   12156:	4604      	mov	r4, r0
   12158:	b928      	cbnz	r0, 12166 <att_get+0x2a>
		BT_ERR("Unable to find ATT channel");
   1215a:	2145      	movs	r1, #69	; 0x45
   1215c:	4809      	ldr	r0, [pc, #36]	; (12184 <att_get+0x48>)
   1215e:	f008 fb87 	bl	1a870 <printk>
	}

	return att_chan->att;
}
   12162:	4620      	mov	r0, r4
   12164:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12166:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
   1216a:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1216e:	075b      	lsls	r3, r3, #29
   12170:	d502      	bpl.n	12178 <att_get+0x3c>
		BT_WARN("ATT channel flagged as disconnected");
   12172:	2157      	movs	r1, #87	; 0x57
   12174:	4804      	ldr	r0, [pc, #16]	; (12188 <att_get+0x4c>)
   12176:	e7e7      	b.n	12148 <att_get+0xc>
	return att_chan->att;
   12178:	f850 4c08 	ldr.w	r4, [r0, #-8]
   1217c:	e7f1      	b.n	12162 <att_get+0x26>
   1217e:	bf00      	nop
   12180:	00021e7d 	.word	0x00021e7d
   12184:	00021e90 	.word	0x00021e90
   12188:	00021eb0 	.word	0x00021eb0

0001218c <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   1218c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1218e:	3808      	subs	r0, #8
   12190:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   12192:	a901      	add	r1, sp, #4
   12194:	4802      	ldr	r0, [pc, #8]	; (121a0 <bt_att_released+0x14>)
   12196:	f005 fe91 	bl	17ebc <k_mem_slab_free>
}
   1219a:	b003      	add	sp, #12
   1219c:	f85d fb04 	ldr.w	pc, [sp], #4
   121a0:	200085fc 	.word	0x200085fc

000121a4 <find_type_cb>:
{
   121a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   121a8:	f642 0301 	movw	r3, #10241	; 0x2801
   121ac:	2500      	movs	r5, #0
{
   121ae:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
   121b0:	f8d2 9000 	ldr.w	r9, [r2]
{
   121b4:	4607      	mov	r7, r0
   121b6:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   121b8:	6800      	ldr	r0, [r0, #0]
   121ba:	a90b      	add	r1, sp, #44	; 0x2c
	struct bt_conn *conn = chan->chan.chan.conn;
   121bc:	f8d9 8008 	ldr.w	r8, [r9, #8]
{
   121c0:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   121c2:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   121c6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   121ca:	f009 fe0a 	bl	1bde2 <bt_uuid_cmp>
   121ce:	2800      	cmp	r0, #0
   121d0:	d060      	beq.n	12294 <find_type_cb+0xf0>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   121d2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   121d6:	6838      	ldr	r0, [r7, #0]
   121d8:	a90b      	add	r1, sp, #44	; 0x2c
   121da:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   121de:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   121e2:	f009 fdfe 	bl	1bde2 <bt_uuid_cmp>
   121e6:	b138      	cbz	r0, 121f8 <find_type_cb+0x54>
		if (data->group &&
   121e8:	68a3      	ldr	r3, [r4, #8]
   121ea:	b11b      	cbz	r3, 121f4 <find_type_cb+0x50>
   121ec:	885a      	ldrh	r2, [r3, #2]
   121ee:	42b2      	cmp	r2, r6
   121f0:	d200      	bcs.n	121f4 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   121f2:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   121f4:	2001      	movs	r0, #1
   121f6:	e009      	b.n	1220c <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   121f8:	6861      	ldr	r1, [r4, #4]
   121fa:	4608      	mov	r0, r1
   121fc:	f00a f906 	bl	1c40c <net_buf_frags_len>
   12200:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   12204:	1a1b      	subs	r3, r3, r0
   12206:	2b03      	cmp	r3, #3
   12208:	d803      	bhi.n	12212 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1220a:	2000      	movs	r0, #0
}
   1220c:	b011      	add	sp, #68	; 0x44
   1220e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   12212:	4608      	mov	r0, r1
   12214:	f003 fb12 	bl	1583c <net_buf_frag_last>
   12218:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1221a:	6860      	ldr	r0, [r4, #4]
   1221c:	f00a f8f6 	bl	1c40c <net_buf_frags_len>
   12220:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   12224:	f105 0b08 	add.w	fp, r5, #8
   12228:	ebaa 0a00 	sub.w	sl, sl, r0
   1222c:	4658      	mov	r0, fp
   1222e:	f00b f899 	bl	1d364 <net_buf_simple_tailroom>
   12232:	4582      	cmp	sl, r0
   12234:	d231      	bcs.n	1229a <find_type_cb+0xf6>
   12236:	6860      	ldr	r0, [r4, #4]
   12238:	f00a f8e8 	bl	1c40c <net_buf_frags_len>
   1223c:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   12240:	1a18      	subs	r0, r3, r0
	if (!len) {
   12242:	b970      	cbnz	r0, 12262 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   12244:	6863      	ldr	r3, [r4, #4]
   12246:	7998      	ldrb	r0, [r3, #6]
   12248:	f003 f91c 	bl	15484 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1224c:	2200      	movs	r2, #0
   1224e:	2300      	movs	r3, #0
   12250:	f00b f862 	bl	1d318 <net_buf_alloc_fixed>
		if (!frag) {
   12254:	4605      	mov	r5, r0
   12256:	2800      	cmp	r0, #0
   12258:	d0d7      	beq.n	1220a <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1225a:	4601      	mov	r1, r0
   1225c:	6860      	ldr	r0, [r4, #4]
   1225e:	f003 fb2d 	bl	158bc <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   12262:	2300      	movs	r3, #0
   12264:	9300      	str	r3, [sp, #0]
   12266:	4639      	mov	r1, r7
   12268:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1226c:	2310      	movs	r3, #16
   1226e:	4640      	mov	r0, r8
   12270:	aa02      	add	r2, sp, #8
   12272:	47c8      	blx	r9
	if (read < 0) {
   12274:	1e07      	subs	r7, r0, #0
   12276:	db0d      	blt.n	12294 <find_type_cb+0xf0>
	if (read != data->value_len) {
   12278:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1227a:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   1227c:	42ba      	cmp	r2, r7
   1227e:	d02b      	beq.n	122d8 <find_type_cb+0x134>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   12280:	4601      	mov	r1, r0
   12282:	a80b      	add	r0, sp, #44	; 0x2c
   12284:	f009 fddb 	bl	1be3e <bt_uuid_create>
   12288:	b958      	cbnz	r0, 122a2 <find_type_cb+0xfe>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   1228a:	2157      	movs	r1, #87	; 0x57
   1228c:	7c22      	ldrb	r2, [r4, #16]
   1228e:	4814      	ldr	r0, [pc, #80]	; (122e0 <find_type_cb+0x13c>)
			BT_WARN("Unable to create UUID: size %d", read);
   12290:	f008 faee 	bl	1a870 <printk>
	data->group = NULL;
   12294:	2300      	movs	r3, #0
   12296:	60a3      	str	r3, [r4, #8]
   12298:	e7ac      	b.n	121f4 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   1229a:	4658      	mov	r0, fp
   1229c:	f00b f862 	bl	1d364 <net_buf_simple_tailroom>
   122a0:	e7cf      	b.n	12242 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   122a2:	b2fa      	uxtb	r2, r7
   122a4:	a902      	add	r1, sp, #8
   122a6:	a806      	add	r0, sp, #24
   122a8:	f009 fdc9 	bl	1be3e <bt_uuid_create>
   122ac:	b918      	cbnz	r0, 122b6 <find_type_cb+0x112>
			BT_WARN("Unable to create UUID: size %d", read);
   122ae:	463a      	mov	r2, r7
   122b0:	2157      	movs	r1, #87	; 0x57
   122b2:	480c      	ldr	r0, [pc, #48]	; (122e4 <find_type_cb+0x140>)
   122b4:	e7ec      	b.n	12290 <find_type_cb+0xec>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   122b6:	a906      	add	r1, sp, #24
   122b8:	a80b      	add	r0, sp, #44	; 0x2c
   122ba:	f009 fd92 	bl	1bde2 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   122be:	2800      	cmp	r0, #0
   122c0:	d1e8      	bne.n	12294 <find_type_cb+0xf0>
	data->err = 0x00;
   122c2:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   122c4:	2104      	movs	r1, #4
   122c6:	7463      	strb	r3, [r4, #17]
   122c8:	f105 0008 	add.w	r0, r5, #8
   122cc:	f003 fb70 	bl	159b0 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   122d0:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   122d2:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   122d4:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   122d6:	e78d      	b.n	121f4 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   122d8:	a902      	add	r1, sp, #8
   122da:	f009 fcfc 	bl	1bcd6 <memcmp>
   122de:	e7ee      	b.n	122be <find_type_cb+0x11a>
   122e0:	00021ed9 	.word	0x00021ed9
   122e4:	00021efd 	.word	0x00021efd

000122e8 <chan_req_sent>:
	if (chan->req) {
   122e8:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   122ec:	b13b      	cbz	r3, 122fe <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   122ee:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
   122f2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   122f6:	2300      	movs	r3, #0
   122f8:	4801      	ldr	r0, [pc, #4]	; (12300 <chan_req_sent+0x18>)
   122fa:	f007 bb43 	b.w	19984 <k_delayed_work_submit_to_queue>
}
   122fe:	4770      	bx	lr
   12300:	2000a540 	.word	0x2000a540

00012304 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   12304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   12306:	2300      	movs	r3, #0
{
   12308:	4606      	mov	r6, r0
   1230a:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1230c:	2200      	movs	r2, #0
   1230e:	4669      	mov	r1, sp
   12310:	4823      	ldr	r0, [pc, #140]	; (123a0 <bt_att_accept+0x9c>)
   12312:	f005 fd79 	bl	17e08 <k_mem_slab_alloc>
   12316:	4604      	mov	r4, r0
   12318:	b148      	cbz	r0, 1232e <bt_att_accept+0x2a>
		BT_ERR("No available ATT context for conn %p", conn);
   1231a:	4632      	mov	r2, r6
   1231c:	2145      	movs	r1, #69	; 0x45
   1231e:	4821      	ldr	r0, [pc, #132]	; (123a4 <bt_att_accept+0xa0>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
   12320:	f008 faa6 	bl	1a870 <printk>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   12324:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   12328:	4620      	mov	r0, r4
   1232a:	b003      	add	sp, #12
   1232c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   1232e:	4601      	mov	r1, r0
   12330:	2230      	movs	r2, #48	; 0x30
   12332:	9800      	ldr	r0, [sp, #0]
   12334:	f009 fd0b 	bl	1bd4e <memset>
	att->conn = conn;
   12338:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1233a:	2200      	movs	r2, #0
	list->head = NULL;
   1233c:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   12340:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
   12344:	60ac      	str	r4, [r5, #8]
   12346:	2300      	movs	r3, #0
   12348:	4817      	ldr	r0, [pc, #92]	; (123a8 <bt_att_accept+0xa4>)
   1234a:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1234c:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1234e:	f005 fd5b 	bl	17e08 <k_mem_slab_alloc>
   12352:	4604      	mov	r4, r0
   12354:	b118      	cbz	r0, 1235e <bt_att_accept+0x5a>
		BT_ERR("No available ATT channel for conn %p", att->conn);
   12356:	2145      	movs	r1, #69	; 0x45
   12358:	682a      	ldr	r2, [r5, #0]
   1235a:	4814      	ldr	r0, [pc, #80]	; (123ac <bt_att_accept+0xa8>)
   1235c:	e7e0      	b.n	12320 <bt_att_accept+0x1c>
	(void)memset(chan, 0, sizeof(*chan));
   1235e:	4601      	mov	r1, r0
   12360:	f44f 72a0 	mov.w	r2, #320	; 0x140
   12364:	9801      	ldr	r0, [sp, #4]
   12366:	f009 fcf2 	bl	1bd4e <memset>
	chan->chan.chan.ops = &ops;
   1236a:	9801      	ldr	r0, [sp, #4]
   1236c:	4b10      	ldr	r3, [pc, #64]	; (123b0 <bt_att_accept+0xac>)
   1236e:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   12370:	30d0      	adds	r0, #208	; 0xd0
   12372:	f00b fe2d 	bl	1dfd0 <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
   12376:	9801      	ldr	r0, [sp, #4]
   12378:	f500 7090 	add.w	r0, r0, #288	; 0x120
	return z_impl_k_sem_init(sem, initial_count, limit);
   1237c:	2203      	movs	r2, #3
   1237e:	4611      	mov	r1, r2
   12380:	f00b fe8b 	bl	1e09a <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12384:	9b01      	ldr	r3, [sp, #4]
   12386:	33c8      	adds	r3, #200	; 0xc8
   12388:	e8d3 2fef 	ldaex	r2, [r3]
   1238c:	e8c3 4fe1 	stlex	r1, r4, [r3]
   12390:	2900      	cmp	r1, #0
   12392:	d1f9      	bne.n	12388 <bt_att_accept+0x84>
	chan->att = att;
   12394:	9b01      	ldr	r3, [sp, #4]
   12396:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   1239a:	603b      	str	r3, [r7, #0]
	return 0;
   1239c:	e7c4      	b.n	12328 <bt_att_accept+0x24>
   1239e:	bf00      	nop
   123a0:	200085e0 	.word	0x200085e0
   123a4:	00021f21 	.word	0x00021f21
   123a8:	200085fc 	.word	0x200085fc
   123ac:	00021f4b 	.word	0x00021f4b
   123b0:	2000842c 	.word	0x2000842c

000123b4 <read_group_cb>:
{
   123b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   123b8:	f04f 0800 	mov.w	r8, #0
   123bc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   123c0:	4605      	mov	r5, r0
   123c2:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   123c4:	6800      	ldr	r0, [r0, #0]
   123c6:	a902      	add	r1, sp, #8
{
   123c8:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   123ca:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   123cc:	f88d 8008 	strb.w	r8, [sp, #8]
   123d0:	f8ad 300a 	strh.w	r3, [sp, #10]
   123d4:	f009 fd05 	bl	1bde2 <bt_uuid_cmp>
   123d8:	b1a0      	cbz	r0, 12404 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   123da:	f642 0301 	movw	r3, #10241	; 0x2801
   123de:	6828      	ldr	r0, [r5, #0]
   123e0:	a903      	add	r1, sp, #12
   123e2:	f88d 800c 	strb.w	r8, [sp, #12]
   123e6:	f8ad 300e 	strh.w	r3, [sp, #14]
   123ea:	f009 fcfa 	bl	1bde2 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   123ee:	b148      	cbz	r0, 12404 <read_group_cb+0x50>
		if (data->group &&
   123f0:	6923      	ldr	r3, [r4, #16]
   123f2:	b11b      	cbz	r3, 123fc <read_group_cb+0x48>
   123f4:	885a      	ldrh	r2, [r3, #2]
   123f6:	42b2      	cmp	r2, r6
   123f8:	d200      	bcs.n	123fc <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   123fa:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   123fc:	2001      	movs	r0, #1
}
   123fe:	b004      	add	sp, #16
   12400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   12404:	6861      	ldr	r1, [r4, #4]
   12406:	6828      	ldr	r0, [r5, #0]
   12408:	f009 fceb 	bl	1bde2 <bt_uuid_cmp>
   1240c:	b110      	cbz	r0, 12414 <read_group_cb+0x60>
		data->group = NULL;
   1240e:	2300      	movs	r3, #0
   12410:	6123      	str	r3, [r4, #16]
   12412:	e7f3      	b.n	123fc <read_group_cb+0x48>
	if (data->rsp->len &&
   12414:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   12416:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   12418:	781a      	ldrb	r2, [r3, #0]
   1241a:	b13a      	cbz	r2, 1242c <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1241c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
   12420:	8981      	ldrh	r1, [r0, #12]
   12422:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   12424:	4293      	cmp	r3, r2
   12426:	da01      	bge.n	1242c <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   12428:	2000      	movs	r0, #0
   1242a:	e7e8      	b.n	123fe <read_group_cb+0x4a>
   1242c:	2104      	movs	r1, #4
   1242e:	3008      	adds	r0, #8
   12430:	f003 fabe 	bl	159b0 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   12434:	4b09      	ldr	r3, [pc, #36]	; (1245c <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   12436:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   12438:	4629      	mov	r1, r5
	data->group->start_handle = sys_cpu_to_le16(handle);
   1243a:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1243c:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1243e:	68a2      	ldr	r2, [r4, #8]
   12440:	9300      	str	r3, [sp, #0]
   12442:	4638      	mov	r0, r7
   12444:	2300      	movs	r3, #0
   12446:	9401      	str	r4, [sp, #4]
   12448:	f00a f8db 	bl	1c602 <att_chan_read>
	if (read < 0) {
   1244c:	2800      	cmp	r0, #0
   1244e:	dbeb      	blt.n	12428 <read_group_cb+0x74>
	if (!data->group) {
   12450:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   12452:	3800      	subs	r0, #0
   12454:	bf18      	it	ne
   12456:	2001      	movne	r0, #1
   12458:	e7d1      	b.n	123fe <read_group_cb+0x4a>
   1245a:	bf00      	nop
   1245c:	0001c587 	.word	0x0001c587

00012460 <chan_send>:
{
   12460:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   12464:	688b      	ldr	r3, [r1, #8]
{
   12466:	4605      	mov	r5, r0
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   12468:	781b      	ldrb	r3, [r3, #0]
{
   1246a:	460c      	mov	r4, r1
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1246c:	2bd2      	cmp	r3, #210	; 0xd2
{
   1246e:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   12470:	d110      	bne.n	12494 <chan_send+0x34>
		err = bt_smp_sign(chan->att->conn, buf);
   12472:	6803      	ldr	r3, [r0, #0]
   12474:	6818      	ldr	r0, [r3, #0]
   12476:	f00a ff49 	bl	1d30c <bt_smp_sign>
		if (err) {
   1247a:	4606      	mov	r6, r0
   1247c:	b150      	cbz	r0, 12494 <chan_send+0x34>
			BT_ERR("Error signing data");
   1247e:	2145      	movs	r1, #69	; 0x45
   12480:	4824      	ldr	r0, [pc, #144]	; (12514 <chan_send+0xb4>)
   12482:	f008 f9f5 	bl	1a870 <printk>
		net_buf_unref(buf);
   12486:	4620      	mov	r0, r4
   12488:	f003 f97c 	bl	15784 <net_buf_unref>
}
   1248c:	4630      	mov	r0, r6
   1248e:	b003      	add	sp, #12
   12490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   12494:	f104 0008 	add.w	r0, r4, #8
   12498:	f00a ff60 	bl	1d35c <net_buf_simple_headroom>
	state->len = buf->len;
   1249c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   124a0:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
   124a2:	f1b9 0f00 	cmp.w	r9, #0
   124a6:	d10a      	bne.n	124be <chan_send+0x5e>
	switch (att_op_get_type(buf->data[0])) {
   124a8:	68a3      	ldr	r3, [r4, #8]
   124aa:	7818      	ldrb	r0, [r3, #0]
   124ac:	f009 ffce 	bl	1c44c <att_op_get_type>
   124b0:	1e43      	subs	r3, r0, #1
   124b2:	b2db      	uxtb	r3, r3
   124b4:	2b04      	cmp	r3, #4
   124b6:	bf9c      	itt	ls
   124b8:	4a17      	ldrls	r2, [pc, #92]	; (12518 <chan_send+0xb8>)
   124ba:	f852 9023 	ldrls.w	r9, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   124be:	682b      	ldr	r3, [r5, #0]
   124c0:	4620      	mov	r0, r4
	chan->sent = cb ? cb : chan_cb(buf);
   124c2:	f8c5 9138 	str.w	r9, [r5, #312]	; 0x138
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   124c6:	681e      	ldr	r6, [r3, #0]
   124c8:	f003 f9a0 	bl	1580c <net_buf_ref>
   124cc:	f8d5 1138 	ldr.w	r1, [r5, #312]	; 0x138
	if (cb == chan_rsp_sent) {
   124d0:	4b12      	ldr	r3, [pc, #72]	; (1251c <chan_send+0xbc>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   124d2:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
   124d4:	4299      	cmp	r1, r3
   124d6:	d019      	beq.n	1250c <chan_send+0xac>
	} else if (cb == chan_cfm_sent) {
   124d8:	4b11      	ldr	r3, [pc, #68]	; (12520 <chan_send+0xc0>)
   124da:	4299      	cmp	r1, r3
   124dc:	d018      	beq.n	12510 <chan_send+0xb0>
		return att_sent;
   124de:	f8df c044 	ldr.w	ip, [pc, #68]	; 12524 <chan_send+0xc4>
   124e2:	4b11      	ldr	r3, [pc, #68]	; (12528 <chan_send+0xc8>)
   124e4:	4811      	ldr	r0, [pc, #68]	; (1252c <chan_send+0xcc>)
   124e6:	4561      	cmp	r1, ip
   124e8:	bf18      	it	ne
   124ea:	4603      	movne	r3, r0
				&chan->chan.chan);
   124ec:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   124ee:	4630      	mov	r0, r6
   124f0:	2104      	movs	r1, #4
   124f2:	9500      	str	r5, [sp, #0]
   124f4:	f009 ff2f 	bl	1c356 <bt_l2cap_send_cb>
	if (!err) {
   124f8:	4606      	mov	r6, r0
   124fa:	2800      	cmp	r0, #0
   124fc:	d0c3      	beq.n	12486 <chan_send+0x26>
	buf->data = buf->__buf + state->offset;
   124fe:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   12500:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   12504:	fa10 f787 	uxtah	r7, r0, r7
   12508:	60a7      	str	r7, [r4, #8]
}
   1250a:	e7bf      	b.n	1248c <chan_send+0x2c>
		return att_rsp_sent;
   1250c:	4b08      	ldr	r3, [pc, #32]	; (12530 <chan_send+0xd0>)
   1250e:	e7ed      	b.n	124ec <chan_send+0x8c>
		return att_cfm_sent;
   12510:	4b08      	ldr	r3, [pc, #32]	; (12534 <chan_send+0xd4>)
   12512:	e7eb      	b.n	124ec <chan_send+0x8c>
   12514:	00021f75 	.word	0x00021f75
   12518:	0001ecec 	.word	0x0001ecec
   1251c:	0001c817 	.word	0x0001c817
   12520:	0001c82b 	.word	0x0001c82b
   12524:	000122e9 	.word	0x000122e9
   12528:	0001212d 	.word	0x0001212d
   1252c:	0001c41d 	.word	0x0001c41d
   12530:	0001211d 	.word	0x0001211d
   12534:	0001210d 	.word	0x0001210d

00012538 <bt_att_chan_req_send>:
{
   12538:	b570      	push	{r4, r5, r6, lr}
   1253a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
   1253c:	4604      	mov	r4, r0
   1253e:	b950      	cbnz	r0, 12556 <bt_att_chan_req_send+0x1e>
   12540:	4924      	ldr	r1, [pc, #144]	; (125d4 <bt_att_chan_req_send+0x9c>)
   12542:	4825      	ldr	r0, [pc, #148]	; (125d8 <bt_att_chan_req_send+0xa0>)
   12544:	f240 224f 	movw	r2, #591	; 0x24f
   12548:	f008 f992 	bl	1a870 <printk>
   1254c:	f240 214f 	movw	r1, #591	; 0x24f
   12550:	4820      	ldr	r0, [pc, #128]	; (125d4 <bt_att_chan_req_send+0x9c>)
   12552:	f008 fc33 	bl	1adbc <assert_post_action>
	__ASSERT_NO_MSG(req);
   12556:	b955      	cbnz	r5, 1256e <bt_att_chan_req_send+0x36>
   12558:	491e      	ldr	r1, [pc, #120]	; (125d4 <bt_att_chan_req_send+0x9c>)
   1255a:	481f      	ldr	r0, [pc, #124]	; (125d8 <bt_att_chan_req_send+0xa0>)
   1255c:	f44f 7214 	mov.w	r2, #592	; 0x250
   12560:	f008 f986 	bl	1a870 <printk>
   12564:	f44f 7114 	mov.w	r1, #592	; 0x250
   12568:	481a      	ldr	r0, [pc, #104]	; (125d4 <bt_att_chan_req_send+0x9c>)
   1256a:	f008 fc27 	bl	1adbc <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   1256e:	686b      	ldr	r3, [r5, #4]
   12570:	b953      	cbnz	r3, 12588 <bt_att_chan_req_send+0x50>
   12572:	4918      	ldr	r1, [pc, #96]	; (125d4 <bt_att_chan_req_send+0x9c>)
   12574:	4818      	ldr	r0, [pc, #96]	; (125d8 <bt_att_chan_req_send+0xa0>)
   12576:	f240 2251 	movw	r2, #593	; 0x251
   1257a:	f008 f979 	bl	1a870 <printk>
   1257e:	f240 2151 	movw	r1, #593	; 0x251
   12582:	4814      	ldr	r0, [pc, #80]	; (125d4 <bt_att_chan_req_send+0x9c>)
   12584:	f008 fc1a 	bl	1adbc <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   12588:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   1258c:	b153      	cbz	r3, 125a4 <bt_att_chan_req_send+0x6c>
   1258e:	4911      	ldr	r1, [pc, #68]	; (125d4 <bt_att_chan_req_send+0x9c>)
   12590:	4811      	ldr	r0, [pc, #68]	; (125d8 <bt_att_chan_req_send+0xa0>)
   12592:	f240 2252 	movw	r2, #594	; 0x252
   12596:	f008 f96b 	bl	1a870 <printk>
   1259a:	f240 2152 	movw	r1, #594	; 0x252
   1259e:	480d      	ldr	r0, [pc, #52]	; (125d4 <bt_att_chan_req_send+0x9c>)
   125a0:	f008 fc0c 	bl	1adbc <assert_post_action>
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   125a4:	f504 7690 	add.w	r6, r4, #288	; 0x120
	return z_impl_k_sem_take(sem, timeout);
   125a8:	2200      	movs	r2, #0
   125aa:	2300      	movs	r3, #0
   125ac:	4630      	mov	r0, r6
   125ae:	f006 ffc3 	bl	19538 <z_impl_k_sem_take>
   125b2:	2800      	cmp	r0, #0
   125b4:	db0a      	blt.n	125cc <bt_att_chan_req_send+0x94>
	err = chan_req_send(chan, req);
   125b6:	4620      	mov	r0, r4
   125b8:	4629      	mov	r1, r5
   125ba:	f00a f906 	bl	1c7ca <chan_req_send>
	if (err < 0) {
   125be:	1e04      	subs	r4, r0, #0
   125c0:	da02      	bge.n	125c8 <bt_att_chan_req_send+0x90>
	z_impl_k_sem_give(sem);
   125c2:	4630      	mov	r0, r6
   125c4:	f006 ff7c 	bl	194c0 <z_impl_k_sem_give>
}
   125c8:	4620      	mov	r0, r4
   125ca:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   125cc:	f06f 040a 	mvn.w	r4, #10
   125d0:	e7fa      	b.n	125c8 <bt_att_chan_req_send+0x90>
   125d2:	bf00      	nop
   125d4:	00021f8d 	.word	0x00021f8d
   125d8:	0001fdfa 	.word	0x0001fdfa

000125dc <read_type_cb>:
{
   125dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   125e0:	f8d2 8000 	ldr.w	r8, [r2]
{
   125e4:	4606      	mov	r6, r0
   125e6:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   125e8:	6800      	ldr	r0, [r0, #0]
   125ea:	6851      	ldr	r1, [r2, #4]
{
   125ec:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   125ee:	f8d8 5008 	ldr.w	r5, [r8, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   125f2:	f009 fbf6 	bl	1bde2 <bt_uuid_cmp>
   125f6:	4607      	mov	r7, r0
   125f8:	2800      	cmp	r0, #0
   125fa:	d13e      	bne.n	1267a <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   125fc:	4628      	mov	r0, r5
   125fe:	2215      	movs	r2, #21
   12600:	4631      	mov	r1, r6
   12602:	f00a fd7c 	bl	1d0fe <bt_gatt_check_perm>
   12606:	4605      	mov	r5, r0
   12608:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1260a:	b148      	cbz	r0, 12620 <read_type_cb+0x44>
		if (data->rsp->len) {
   1260c:	68e3      	ldr	r3, [r4, #12]
   1260e:	781b      	ldrb	r3, [r3, #0]
   12610:	b923      	cbnz	r3, 1261c <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   12612:	2500      	movs	r5, #0
}
   12614:	4628      	mov	r0, r5
   12616:	b003      	add	sp, #12
   12618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   1261c:	7527      	strb	r7, [r4, #20]
   1261e:	e7f8      	b.n	12612 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   12620:	68a0      	ldr	r0, [r4, #8]
   12622:	f003 f90b 	bl	1583c <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   12626:	2102      	movs	r1, #2
   12628:	3008      	adds	r0, #8
   1262a:	f003 f9c1 	bl	159b0 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1262e:	4b14      	ldr	r3, [pc, #80]	; (12680 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   12630:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   12632:	4631      	mov	r1, r6
	data->item->handle = sys_cpu_to_le16(handle);
   12634:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   12638:	68a2      	ldr	r2, [r4, #8]
   1263a:	9300      	str	r3, [sp, #0]
   1263c:	4640      	mov	r0, r8
   1263e:	462b      	mov	r3, r5
   12640:	9401      	str	r4, [sp, #4]
   12642:	f009 ffde 	bl	1c602 <att_chan_read>
	if (read < 0) {
   12646:	2800      	cmp	r0, #0
   12648:	da07      	bge.n	1265a <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   1264a:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1264e:	bf32      	itee	cc
   12650:	200e      	movcc	r0, #14
		return -err;
   12652:	4240      	negcs	r0, r0
   12654:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   12656:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   12658:	e7dc      	b.n	12614 <read_type_cb+0x38>
	if (!data->item) {
   1265a:	6923      	ldr	r3, [r4, #16]
   1265c:	2b00      	cmp	r3, #0
   1265e:	d0d8      	beq.n	12612 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   12660:	68a0      	ldr	r0, [r4, #8]
   12662:	f009 fed3 	bl	1c40c <net_buf_frags_len>
   12666:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1266a:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1266c:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1266e:	7818      	ldrb	r0, [r3, #0]
   12670:	4285      	cmp	r5, r0
   12672:	bf94      	ite	ls
   12674:	2500      	movls	r5, #0
   12676:	2501      	movhi	r5, #1
   12678:	e7cc      	b.n	12614 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1267a:	2501      	movs	r5, #1
   1267c:	e7ca      	b.n	12614 <read_type_cb+0x38>
   1267e:	bf00      	nop
   12680:	0001c429 	.word	0x0001c429

00012684 <bt_att_connected>:
{
   12684:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   12686:	2104      	movs	r1, #4
{
   12688:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1268a:	6800      	ldr	r0, [r0, #0]
   1268c:	f009 fe93 	bl	1c3b6 <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
   12690:	4605      	mov	r5, r0
   12692:	b950      	cbnz	r0, 126aa <bt_att_connected+0x26>
   12694:	4919      	ldr	r1, [pc, #100]	; (126fc <bt_att_connected+0x78>)
   12696:	481a      	ldr	r0, [pc, #104]	; (12700 <bt_att_connected+0x7c>)
   12698:	f44f 6226 	mov.w	r2, #2656	; 0xa60
   1269c:	f008 f8e8 	bl	1a870 <printk>
   126a0:	f44f 6126 	mov.w	r1, #2656	; 0xa60
   126a4:	4815      	ldr	r0, [pc, #84]	; (126fc <bt_att_connected+0x78>)
   126a6:	f008 fb89 	bl	1adbc <assert_post_action>
	struct bt_att *att = att_chan->att;
   126aa:	f855 5c08 	ldr.w	r5, [r5, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   126ae:	6aab      	ldr	r3, [r5, #40]	; 0x28
   126b0:	b91b      	cbnz	r3, 126ba <bt_att_connected+0x36>
	z_impl_k_queue_init(queue);
   126b2:	f105 000c 	add.w	r0, r5, #12
   126b6:	f00b fc8b 	bl	1dfd0 <z_impl_k_queue_init>
	parent->next = child;
   126ba:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   126bc:	f504 739a 	add.w	r3, r4, #308	; 0x134
   126c0:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
Z_GENLIST_PREPEND(slist, snode)
   126c4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	list->head = node;
   126c6:	62ab      	str	r3, [r5, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   126c8:	b902      	cbnz	r2, 126cc <bt_att_connected+0x48>
	list->tail = node;
   126ca:	62eb      	str	r3, [r5, #44]	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   126cc:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   126d0:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   126d4:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   126d6:	bf58      	it	pl
   126d8:	2317      	movpl	r3, #23
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   126da:	f04f 0230 	mov.w	r2, #48	; 0x30
   126de:	bf5c      	itt	pl
   126e0:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   126e4:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
   126e8:	2100      	movs	r1, #0
   126ea:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
   126ee:	f009 fb2e 	bl	1bd4e <memset>
   126f2:	4b04      	ldr	r3, [pc, #16]	; (12704 <bt_att_connected+0x80>)
   126f4:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
}
   126f8:	bd38      	pop	{r3, r4, r5, pc}
   126fa:	bf00      	nop
   126fc:	00021f8d 	.word	0x00021f8d
   12700:	0001fdfa 	.word	0x0001fdfa
   12704:	00013011 	.word	0x00013011

00012708 <bt_att_chan_create_pdu>:
{
   12708:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1270a:	1c53      	adds	r3, r2, #1
   1270c:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
{
   12710:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   12712:	4293      	cmp	r3, r2
   12714:	d906      	bls.n	12724 <bt_att_chan_create_pdu+0x1c>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   12716:	2157      	movs	r1, #87	; 0x57
   12718:	4813      	ldr	r0, [pc, #76]	; (12768 <bt_att_chan_create_pdu+0x60>)
   1271a:	f008 f8a9 	bl	1a870 <printk>
		return NULL;
   1271e:	2400      	movs	r4, #0
}
   12720:	4620      	mov	r0, r4
   12722:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
   12724:	4608      	mov	r0, r1
   12726:	f009 fe91 	bl	1c44c <att_op_get_type>
   1272a:	2802      	cmp	r0, #2
   1272c:	d001      	beq.n	12732 <bt_att_chan_create_pdu+0x2a>
   1272e:	2804      	cmp	r0, #4
   12730:	d10e      	bne.n	12750 <bt_att_chan_create_pdu+0x48>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   12732:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   12736:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   12738:	2100      	movs	r1, #0
   1273a:	4608      	mov	r0, r1
   1273c:	f009 fe08 	bl	1c350 <bt_l2cap_create_pdu_timeout>
   12740:	4604      	mov	r4, r0
	if (!buf) {
   12742:	b950      	cbnz	r0, 1275a <bt_att_chan_create_pdu+0x52>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   12744:	462a      	mov	r2, r5
   12746:	2145      	movs	r1, #69	; 0x45
   12748:	4808      	ldr	r0, [pc, #32]	; (1276c <bt_att_chan_create_pdu+0x64>)
   1274a:	f008 f891 	bl	1a870 <printk>
		return NULL;
   1274e:	e7e7      	b.n	12720 <bt_att_chan_create_pdu+0x18>
		buf = bt_l2cap_create_pdu(NULL, 0);
   12750:	f04f 32ff 	mov.w	r2, #4294967295
   12754:	f04f 33ff 	mov.w	r3, #4294967295
   12758:	e7ee      	b.n	12738 <bt_att_chan_create_pdu+0x30>
   1275a:	2101      	movs	r1, #1
   1275c:	3008      	adds	r0, #8
   1275e:	f003 f927 	bl	159b0 <net_buf_simple_add>
	hdr->code = op;
   12762:	7005      	strb	r5, [r0, #0]
	return buf;
   12764:	e7dc      	b.n	12720 <bt_att_chan_create_pdu+0x18>
   12766:	bf00      	nop
   12768:	00021fbc 	.word	0x00021fbc
   1276c:	00021cd3 	.word	0x00021cd3

00012770 <att_indicate>:
{
   12770:	b570      	push	{r4, r5, r6, lr}
   12772:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   12774:	f101 0008 	add.w	r0, r1, #8
   12778:	460d      	mov	r5, r1
   1277a:	f00a fde7 	bl	1d34c <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   1277e:	6826      	ldr	r6, [r4, #0]
   12780:	4601      	mov	r1, r0
   12782:	89ab      	ldrh	r3, [r5, #12]
   12784:	68aa      	ldr	r2, [r5, #8]
   12786:	6830      	ldr	r0, [r6, #0]
   12788:	f00a fd48 	bl	1d21c <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   1278c:	211e      	movs	r1, #30
   1278e:	2200      	movs	r2, #0
   12790:	4620      	mov	r0, r4
   12792:	f7ff ffb9 	bl	12708 <bt_att_chan_create_pdu>
	if (!buf) {
   12796:	4601      	mov	r1, r0
   12798:	b118      	cbz	r0, 127a2 <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   1279a:	4620      	mov	r0, r4
   1279c:	4a02      	ldr	r2, [pc, #8]	; (127a8 <att_indicate+0x38>)
   1279e:	f009 ffd2 	bl	1c746 <bt_att_chan_send_rsp>
}
   127a2:	2000      	movs	r0, #0
   127a4:	bd70      	pop	{r4, r5, r6, pc}
   127a6:	bf00      	nop
   127a8:	0001c82b 	.word	0x0001c82b

000127ac <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   127ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   127b0:	4688      	mov	r8, r1
   127b2:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   127b4:	2101      	movs	r1, #1
   127b6:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   127b8:	4605      	mov	r5, r0
   127ba:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   127bc:	f7ff ffa4 	bl	12708 <bt_att_chan_create_pdu>
	if (!buf) {
   127c0:	4604      	mov	r4, r0
   127c2:	b178      	cbz	r0, 127e4 <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   127c4:	2104      	movs	r1, #4
   127c6:	3008      	adds	r0, #8
   127c8:	f003 f8f2 	bl	159b0 <net_buf_simple_add>
	rsp->request = req;
   127cc:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   127d0:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   127d2:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   127d6:	4621      	mov	r1, r4
   127d8:	4628      	mov	r0, r5
}
   127da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   127de:	4a02      	ldr	r2, [pc, #8]	; (127e8 <send_err_rsp.part.0+0x3c>)
   127e0:	f009 bfb1 	b.w	1c746 <bt_att_chan_send_rsp>
}
   127e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   127e8:	0001c817 	.word	0x0001c817

000127ec <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   127ec:	898b      	ldrh	r3, [r1, #12]
{
   127ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   127f2:	4604      	mov	r4, r0
   127f4:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   127f6:	b933      	cbnz	r3, 12806 <bt_att_recv+0x1a>
		BT_ERR("Too small ATT PDU received");
   127f8:	2145      	movs	r1, #69	; 0x45
   127fa:	4838      	ldr	r0, [pc, #224]	; (128dc <bt_att_recv+0xf0>)
			BT_WARN("Ignoring unexpected indication");
   127fc:	f008 f838 	bl	1a870 <printk>
}
   12800:	2000      	movs	r0, #0
   12802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   12806:	2101      	movs	r1, #1
   12808:	f108 0008 	add.w	r0, r8, #8
   1280c:	f003 f8b2 	bl	15974 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   12810:	f854 3c08 	ldr.w	r3, [r4, #-8]
   12814:	4605      	mov	r5, r0
   12816:	2b00      	cmp	r3, #0
   12818:	d0f2      	beq.n	12800 <bt_att_recv+0x14>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1281a:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   1281c:	7802      	ldrb	r2, [r0, #0]
   1281e:	4930      	ldr	r1, [pc, #192]	; (128e0 <bt_att_recv+0xf4>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   12820:	f1a4 0608 	sub.w	r6, r4, #8
		if (hdr->code == handlers[i].op) {
   12824:	f811 0033 	ldrb.w	r0, [r1, r3, lsl #3]
   12828:	4290      	cmp	r0, r2
   1282a:	d114      	bne.n	12856 <bt_att_recv+0x6a>
		if (handler->type == ATT_REQUEST &&
   1282c:	00d8      	lsls	r0, r3, #3
   1282e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   12832:	789f      	ldrb	r7, [r3, #2]
   12834:	2f01      	cmp	r7, #1
   12836:	d123      	bne.n	12880 <bt_att_recv+0x94>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12838:	34c0      	adds	r4, #192	; 0xc0
   1283a:	e8d4 3fef 	ldaex	r3, [r4]
   1283e:	f043 0201 	orr.w	r2, r3, #1
   12842:	e8c4 2fec 	stlex	ip, r2, [r4]
   12846:	f1bc 0f00 	cmp.w	ip, #0
   1284a:	d1f6      	bne.n	1283a <bt_att_recv+0x4e>
   1284c:	07da      	lsls	r2, r3, #31
   1284e:	d528      	bpl.n	128a2 <bt_att_recv+0xb6>
			BT_WARN("Ignoring unexpected request");
   12850:	2157      	movs	r1, #87	; 0x57
   12852:	4824      	ldr	r0, [pc, #144]	; (128e4 <bt_att_recv+0xf8>)
   12854:	e7d2      	b.n	127fc <bt_att_recv+0x10>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   12856:	3301      	adds	r3, #1
   12858:	2b1c      	cmp	r3, #28
   1285a:	d1e3      	bne.n	12824 <bt_att_recv+0x38>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   1285c:	2157      	movs	r1, #87	; 0x57
   1285e:	4822      	ldr	r0, [pc, #136]	; (128e8 <bt_att_recv+0xfc>)
   12860:	f008 f806 	bl	1a870 <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   12864:	7829      	ldrb	r1, [r5, #0]
   12866:	4608      	mov	r0, r1
   12868:	f009 fdf0 	bl	1c44c <att_op_get_type>
   1286c:	2800      	cmp	r0, #0
   1286e:	d0c7      	beq.n	12800 <bt_att_recv+0x14>
	if (!req) {
   12870:	2900      	cmp	r1, #0
   12872:	d0c5      	beq.n	12800 <bt_att_recv+0x14>
   12874:	2306      	movs	r3, #6
   12876:	2200      	movs	r2, #0
   12878:	4630      	mov	r0, r6
   1287a:	f7ff ff97 	bl	127ac <send_err_rsp.part.0>
   1287e:	e7bf      	b.n	12800 <bt_att_recv+0x14>
		} else if (handler->type == ATT_INDICATION &&
   12880:	2f05      	cmp	r7, #5
   12882:	d10e      	bne.n	128a2 <bt_att_recv+0xb6>
   12884:	34c0      	adds	r4, #192	; 0xc0
   12886:	e8d4 3fef 	ldaex	r3, [r4]
   1288a:	f043 0202 	orr.w	r2, r3, #2
   1288e:	e8c4 2fec 	stlex	ip, r2, [r4]
   12892:	f1bc 0f00 	cmp.w	ip, #0
   12896:	d1f6      	bne.n	12886 <bt_att_recv+0x9a>
   12898:	079b      	lsls	r3, r3, #30
   1289a:	d502      	bpl.n	128a2 <bt_att_recv+0xb6>
			BT_WARN("Ignoring unexpected indication");
   1289c:	2157      	movs	r1, #87	; 0x57
   1289e:	4813      	ldr	r0, [pc, #76]	; (128ec <bt_att_recv+0x100>)
   128a0:	e7ac      	b.n	127fc <bt_att_recv+0x10>
	if (buf->len < handler->expect_len) {
   128a2:	180b      	adds	r3, r1, r0
   128a4:	f8b8 200c 	ldrh.w	r2, [r8, #12]
   128a8:	7859      	ldrb	r1, [r3, #1]
   128aa:	4291      	cmp	r1, r2
   128ac:	d908      	bls.n	128c0 <bt_att_recv+0xd4>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   128ae:	2145      	movs	r1, #69	; 0x45
   128b0:	782b      	ldrb	r3, [r5, #0]
   128b2:	480f      	ldr	r0, [pc, #60]	; (128f0 <bt_att_recv+0x104>)
   128b4:	f007 ffdc 	bl	1a870 <printk>
	if (handler->type == ATT_REQUEST && err) {
   128b8:	2f01      	cmp	r7, #1
   128ba:	d1a1      	bne.n	12800 <bt_att_recv+0x14>
		err = BT_ATT_ERR_INVALID_PDU;
   128bc:	2304      	movs	r3, #4
   128be:	e008      	b.n	128d2 <bt_att_recv+0xe6>
		err = handler->func(att_chan, buf);
   128c0:	685b      	ldr	r3, [r3, #4]
   128c2:	4641      	mov	r1, r8
   128c4:	4630      	mov	r0, r6
   128c6:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   128c8:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
   128ca:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   128cc:	d198      	bne.n	12800 <bt_att_recv+0x14>
   128ce:	2800      	cmp	r0, #0
   128d0:	d096      	beq.n	12800 <bt_att_recv+0x14>
		send_err_rsp(att_chan, hdr->code, 0, err);
   128d2:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   128d4:	2900      	cmp	r1, #0
   128d6:	d093      	beq.n	12800 <bt_att_recv+0x14>
   128d8:	e7cd      	b.n	12876 <bt_att_recv+0x8a>
   128da:	bf00      	nop
   128dc:	00021fe6 	.word	0x00021fe6
   128e0:	0001ed00 	.word	0x0001ed00
   128e4:	00022006 	.word	0x00022006
   128e8:	0002206f 	.word	0x0002206f
   128ec:	00022027 	.word	0x00022027
   128f0:	0002204b 	.word	0x0002204b

000128f4 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   128f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   128f8:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   128fa:	6803      	ldr	r3, [r0, #0]
   128fc:	460e      	mov	r6, r1
   128fe:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   12900:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   12902:	bf18      	it	ne
   12904:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   12906:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   12908:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1290a:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1290c:	f00a fcb1 	bl	1d272 <bt_gatt_change_aware>
   12910:	2800      	cmp	r0, #0
   12912:	d04b      	beq.n	129ac <att_write_rsp.constprop.0+0xb8>
	if (!handle) {
   12914:	2f00      	cmp	r7, #0
   12916:	d04b      	beq.n	129b0 <att_write_rsp.constprop.0+0xbc>
	(void)memset(&data, 0, sizeof(data));
   12918:	2218      	movs	r2, #24
   1291a:	2100      	movs	r1, #0
   1291c:	4668      	mov	r0, sp
   1291e:	f009 fa16 	bl	1bd4e <memset>
	if (rsp) {
   12922:	f1b8 0f00 	cmp.w	r8, #0
   12926:	d122      	bne.n	1296e <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
   12928:	682b      	ldr	r3, [r5, #0]
	data.offset = offset;
   1292a:	f04f 0900 	mov.w	r9, #0
	data.conn = chan->att->conn;
   1292e:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12930:	4639      	mov	r1, r7
	data.conn = chan->att->conn;
   12932:	9300      	str	r3, [sp, #0]
	data.value = value;
   12934:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12936:	4638      	mov	r0, r7
	data.value = value;
   12938:	9303      	str	r3, [sp, #12]
	data.len = len;
   1293a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1293e:	4a1d      	ldr	r2, [pc, #116]	; (129b4 <att_write_rsp.constprop.0+0xc0>)
	data.len = len;
   12940:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   12944:	2301      	movs	r3, #1
   12946:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1294a:	466b      	mov	r3, sp
	data.req = req;
   1294c:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
   12950:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12954:	f009 fdc0 	bl	1c4d8 <bt_gatt_foreach_attr>
	if (data.err) {
   12958:	f89d 4014 	ldrb.w	r4, [sp, #20]
   1295c:	b1f4      	cbz	r4, 1299c <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
   1295e:	f1b8 0f00 	cmp.w	r8, #0
   12962:	d10e      	bne.n	12982 <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   12964:	2400      	movs	r4, #0
}
   12966:	4620      	mov	r0, r4
   12968:	b007      	add	sp, #28
   1296a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1296e:	2200      	movs	r2, #0
   12970:	4641      	mov	r1, r8
   12972:	4628      	mov	r0, r5
   12974:	f7ff fec8 	bl	12708 <bt_att_chan_create_pdu>
   12978:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1297a:	2800      	cmp	r0, #0
   1297c:	d1d4      	bne.n	12928 <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
   1297e:	240e      	movs	r4, #14
   12980:	e7f1      	b.n	12966 <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
   12982:	9801      	ldr	r0, [sp, #4]
   12984:	f002 fefe 	bl	15784 <net_buf_unref>
	if (!req) {
   12988:	2e00      	cmp	r6, #0
   1298a:	d0eb      	beq.n	12964 <att_write_rsp.constprop.0+0x70>
   1298c:	463a      	mov	r2, r7
   1298e:	4631      	mov	r1, r6
   12990:	4628      	mov	r0, r5
   12992:	f89d 3014 	ldrb.w	r3, [sp, #20]
   12996:	f7ff ff09 	bl	127ac <send_err_rsp.part.0>
   1299a:	e7e3      	b.n	12964 <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
   1299c:	9901      	ldr	r1, [sp, #4]
   1299e:	2900      	cmp	r1, #0
   129a0:	d0e0      	beq.n	12964 <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   129a2:	4628      	mov	r0, r5
   129a4:	4a04      	ldr	r2, [pc, #16]	; (129b8 <att_write_rsp.constprop.0+0xc4>)
   129a6:	f009 fece 	bl	1c746 <bt_att_chan_send_rsp>
   129aa:	e7dc      	b.n	12966 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   129ac:	2412      	movs	r4, #18
   129ae:	e7da      	b.n	12966 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
   129b0:	2401      	movs	r4, #1
   129b2:	e7d8      	b.n	12966 <att_write_rsp.constprop.0+0x72>
   129b4:	0001c5a7 	.word	0x0001c5a7
   129b8:	0001c817 	.word	0x0001c817

000129bc <bt_att_create_pdu>:
{
   129bc:	b570      	push	{r4, r5, r6, lr}
   129be:	460e      	mov	r6, r1
   129c0:	4615      	mov	r5, r2
	att = att_get(conn);
   129c2:	f7ff fbbb 	bl	1213c <att_get>
	if (!att) {
   129c6:	b190      	cbz	r0, 129ee <bt_att_create_pdu+0x32>
	return list->head;
   129c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
   129ca:	1c6a      	adds	r2, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   129cc:	b15b      	cbz	r3, 129e6 <bt_att_create_pdu+0x2a>
   129ce:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   129d2:	d008      	beq.n	129e6 <bt_att_create_pdu+0x2a>
	return node->next;
   129d4:	681b      	ldr	r3, [r3, #0]
   129d6:	b10b      	cbz	r3, 129dc <bt_att_create_pdu+0x20>
   129d8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   129dc:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
   129e0:	428a      	cmp	r2, r1
   129e2:	d906      	bls.n	129f2 <bt_att_create_pdu+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   129e4:	b95b      	cbnz	r3, 129fe <bt_att_create_pdu+0x42>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   129e6:	2157      	movs	r1, #87	; 0x57
   129e8:	480a      	ldr	r0, [pc, #40]	; (12a14 <bt_att_create_pdu+0x58>)
   129ea:	f007 ff41 	bl	1a870 <printk>
}
   129ee:	2000      	movs	r0, #0
   129f0:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   129f2:	462a      	mov	r2, r5
   129f4:	4631      	mov	r1, r6
}
   129f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   129fa:	f7ff be85 	b.w	12708 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   129fe:	f513 749e 	adds.w	r4, r3, #316	; 0x13c
   12a02:	d004      	beq.n	12a0e <bt_att_create_pdu+0x52>
	return node->next;
   12a04:	f8d3 413c 	ldr.w	r4, [r3, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12a08:	b10c      	cbz	r4, 12a0e <bt_att_create_pdu+0x52>
   12a0a:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
{
   12a0e:	4618      	mov	r0, r3
   12a10:	4623      	mov	r3, r4
   12a12:	e7e3      	b.n	129dc <bt_att_create_pdu+0x20>
   12a14:	0002208e 	.word	0x0002208e

00012a18 <att_read_group_req>:
{
   12a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   12a1c:	898c      	ldrh	r4, [r1, #12]
{
   12a1e:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   12a20:	3c04      	subs	r4, #4
   12a22:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   12a24:	2c02      	cmp	r4, #2
{
   12a26:	4608      	mov	r0, r1
   12a28:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   12a2a:	d001      	beq.n	12a30 <att_read_group_req+0x18>
   12a2c:	2c10      	cmp	r4, #16
   12a2e:	d16f      	bne.n	12b10 <att_read_group_req+0xf8>
   12a30:	2104      	movs	r1, #4
   12a32:	3008      	adds	r0, #8
   12a34:	f002 ff9e 	bl	15974 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12a38:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   12a3c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   12a3e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12a40:	1d01      	adds	r1, r0, #4
   12a42:	4622      	mov	r2, r4
   12a44:	4640      	mov	r0, r8
   12a46:	f009 f9fa 	bl	1be3e <bt_uuid_create>
   12a4a:	2800      	cmp	r0, #0
   12a4c:	d062      	beq.n	12b14 <att_read_group_req+0xfc>
	if (!start || !end) {
   12a4e:	2e00      	cmp	r6, #0
   12a50:	d03a      	beq.n	12ac8 <att_read_group_req+0xb0>
   12a52:	2400      	movs	r4, #0
   12a54:	2f00      	cmp	r7, #0
   12a56:	d036      	beq.n	12ac6 <att_read_group_req+0xae>
	if (start > end) {
   12a58:	42be      	cmp	r6, r7
   12a5a:	d835      	bhi.n	12ac8 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   12a5c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   12a60:	4640      	mov	r0, r8
   12a62:	a901      	add	r1, sp, #4
   12a64:	f88d 4004 	strb.w	r4, [sp, #4]
   12a68:	f8ad 3006 	strh.w	r3, [sp, #6]
   12a6c:	f009 f9b9 	bl	1bde2 <bt_uuid_cmp>
   12a70:	2800      	cmp	r0, #0
   12a72:	d134      	bne.n	12ade <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   12a74:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   12a76:	2214      	movs	r2, #20
   12a78:	2100      	movs	r1, #0
   12a7a:	a807      	add	r0, sp, #28
   12a7c:	f009 f967 	bl	1bd4e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   12a80:	2201      	movs	r2, #1
   12a82:	2111      	movs	r1, #17
   12a84:	4620      	mov	r0, r4
   12a86:	f7ff ff99 	bl	129bc <bt_att_create_pdu>
   12a8a:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   12a8c:	2800      	cmp	r0, #0
   12a8e:	d041      	beq.n	12b14 <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
   12a90:	2101      	movs	r1, #1
   12a92:	3008      	adds	r0, #8
	data.uuid = uuid;
   12a94:	e9cd 5807 	strd	r5, r8, [sp, #28]
   12a98:	f002 ff8a 	bl	159b0 <net_buf_simple_add>
	data.rsp->len = 0U;
   12a9c:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   12aa0:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   12aa2:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   12aa4:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   12aa8:	4639      	mov	r1, r7
   12aaa:	4630      	mov	r0, r6
   12aac:	4a1a      	ldr	r2, [pc, #104]	; (12b18 <att_read_group_req+0x100>)
	data.group = NULL;
   12aae:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   12ab2:	f009 fd11 	bl	1c4d8 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   12ab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12ab8:	781c      	ldrb	r4, [r3, #0]
   12aba:	bb1c      	cbnz	r4, 12b04 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   12abc:	9809      	ldr	r0, [sp, #36]	; 0x24
   12abe:	f002 fe61 	bl	15784 <net_buf_unref>
	if (!req) {
   12ac2:	230a      	movs	r3, #10
   12ac4:	e018      	b.n	12af8 <att_read_group_req+0xe0>
			*err = 0U;
   12ac6:	463e      	mov	r6, r7
	if (!req) {
   12ac8:	2301      	movs	r3, #1
   12aca:	4632      	mov	r2, r6
   12acc:	2110      	movs	r1, #16
   12ace:	4628      	mov	r0, r5
   12ad0:	f7ff fe6c 	bl	127ac <send_err_rsp.part.0>
		return 0;
   12ad4:	2400      	movs	r4, #0
}
   12ad6:	4620      	mov	r0, r4
   12ad8:	b00c      	add	sp, #48	; 0x30
   12ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   12ade:	f642 0301 	movw	r3, #10241	; 0x2801
   12ae2:	4640      	mov	r0, r8
   12ae4:	a907      	add	r1, sp, #28
   12ae6:	f88d 401c 	strb.w	r4, [sp, #28]
   12aea:	f8ad 301e 	strh.w	r3, [sp, #30]
   12aee:	f009 f978 	bl	1bde2 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   12af2:	2800      	cmp	r0, #0
   12af4:	d0be      	beq.n	12a74 <att_read_group_req+0x5c>
	if (!req) {
   12af6:	2310      	movs	r3, #16
   12af8:	4632      	mov	r2, r6
   12afa:	2110      	movs	r1, #16
   12afc:	4628      	mov	r0, r5
   12afe:	f7ff fe55 	bl	127ac <send_err_rsp.part.0>
		return 0;
   12b02:	e7e8      	b.n	12ad6 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12b04:	4628      	mov	r0, r5
   12b06:	4a05      	ldr	r2, [pc, #20]	; (12b1c <att_read_group_req+0x104>)
   12b08:	9909      	ldr	r1, [sp, #36]	; 0x24
   12b0a:	f009 fe1c 	bl	1c746 <bt_att_chan_send_rsp>
	return 0;
   12b0e:	e7e1      	b.n	12ad4 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   12b10:	2404      	movs	r4, #4
   12b12:	e7e0      	b.n	12ad6 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   12b14:	240e      	movs	r4, #14
   12b16:	e7de      	b.n	12ad6 <att_read_group_req+0xbe>
   12b18:	000123b5 	.word	0x000123b5
   12b1c:	0001c817 	.word	0x0001c817

00012b20 <att_read_mult_req>:
{
   12b20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   12b24:	6886      	ldr	r6, [r0, #8]
{
   12b26:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
   12b28:	2210      	movs	r2, #16
{
   12b2a:	4604      	mov	r4, r0
   12b2c:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
   12b2e:	4668      	mov	r0, sp
   12b30:	2100      	movs	r1, #0
   12b32:	f009 f90c 	bl	1bd4e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   12b36:	2200      	movs	r2, #0
   12b38:	210f      	movs	r1, #15
   12b3a:	4630      	mov	r0, r6
   12b3c:	f7ff ff3e 	bl	129bc <bt_att_create_pdu>
   12b40:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   12b42:	b360      	cbz	r0, 12b9e <att_read_mult_req+0x7e>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   12b44:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12b48:	f8df 9058 	ldr.w	r9, [pc, #88]	; 12ba4 <att_read_mult_req+0x84>
	data.chan = chan;
   12b4c:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   12b4e:	f105 0708 	add.w	r7, r5, #8
	while (buf->len >= sizeof(uint16_t)) {
   12b52:	89ab      	ldrh	r3, [r5, #12]
   12b54:	2b01      	cmp	r3, #1
   12b56:	d805      	bhi.n	12b64 <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12b58:	4620      	mov	r0, r4
   12b5a:	4a13      	ldr	r2, [pc, #76]	; (12ba8 <att_read_mult_req+0x88>)
   12b5c:	9902      	ldr	r1, [sp, #8]
   12b5e:	f009 fdf2 	bl	1c746 <bt_att_chan_send_rsp>
   12b62:	e018      	b.n	12b96 <att_read_mult_req+0x76>
   12b64:	4638      	mov	r0, r7
   12b66:	f00a fbf1 	bl	1d34c <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12b6a:	466b      	mov	r3, sp
   12b6c:	464a      	mov	r2, r9
   12b6e:	4601      	mov	r1, r0
   12b70:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   12b72:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12b76:	f009 fcaf 	bl	1c4d8 <bt_gatt_foreach_attr>
		if (data.err) {
   12b7a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12b7e:	2b00      	cmp	r3, #0
   12b80:	d0e7      	beq.n	12b52 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   12b82:	9802      	ldr	r0, [sp, #8]
   12b84:	f002 fdfe 	bl	15784 <net_buf_unref>
	if (!req) {
   12b88:	4632      	mov	r2, r6
   12b8a:	210e      	movs	r1, #14
   12b8c:	4620      	mov	r0, r4
   12b8e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12b92:	f7ff fe0b 	bl	127ac <send_err_rsp.part.0>
	return 0;
   12b96:	2000      	movs	r0, #0
}
   12b98:	b005      	add	sp, #20
   12b9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
   12b9e:	200e      	movs	r0, #14
   12ba0:	e7fa      	b.n	12b98 <att_read_mult_req+0x78>
   12ba2:	bf00      	nop
   12ba4:	0001c83f 	.word	0x0001c83f
   12ba8:	0001c817 	.word	0x0001c817

00012bac <att_read_rsp>:
{
   12bac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   12bb0:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   12bb4:	4605      	mov	r5, r0
   12bb6:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   12bb8:	4640      	mov	r0, r8
   12bba:	2101      	movs	r1, #1
{
   12bbc:	4614      	mov	r4, r2
   12bbe:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   12bc0:	f00a fb57 	bl	1d272 <bt_gatt_change_aware>
   12bc4:	b390      	cbz	r0, 12c2c <att_read_rsp+0x80>
	if (!handle) {
   12bc6:	b39e      	cbz	r6, 12c30 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
   12bc8:	2210      	movs	r2, #16
   12bca:	2100      	movs	r1, #0
   12bcc:	4668      	mov	r0, sp
   12bce:	f009 f8be 	bl	1bd4e <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   12bd2:	2200      	movs	r2, #0
   12bd4:	4621      	mov	r1, r4
   12bd6:	4640      	mov	r0, r8
   12bd8:	f7ff fef0 	bl	129bc <bt_att_create_pdu>
   12bdc:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   12bde:	b348      	cbz	r0, 12c34 <att_read_rsp+0x88>
	data.offset = offset;
   12be0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12be4:	4631      	mov	r1, r6
	data.offset = offset;
   12be6:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   12bea:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12bec:	4630      	mov	r0, r6
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   12bee:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12bf2:	4a11      	ldr	r2, [pc, #68]	; (12c38 <att_read_rsp+0x8c>)
   12bf4:	466b      	mov	r3, sp
	data.chan = chan;
   12bf6:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12bf8:	f009 fc6e 	bl	1c4d8 <bt_gatt_foreach_attr>
	if (data.err) {
   12bfc:	f89d 400c 	ldrb.w	r4, [sp, #12]
   12c00:	b174      	cbz	r4, 12c20 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   12c02:	9802      	ldr	r0, [sp, #8]
   12c04:	f002 fdbe 	bl	15784 <net_buf_unref>
	if (!req) {
   12c08:	4632      	mov	r2, r6
   12c0a:	4639      	mov	r1, r7
   12c0c:	4628      	mov	r0, r5
   12c0e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12c12:	f7ff fdcb 	bl	127ac <send_err_rsp.part.0>
		return 0;
   12c16:	2400      	movs	r4, #0
}
   12c18:	4620      	mov	r0, r4
   12c1a:	b004      	add	sp, #16
   12c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12c20:	4628      	mov	r0, r5
   12c22:	4a06      	ldr	r2, [pc, #24]	; (12c3c <att_read_rsp+0x90>)
   12c24:	9902      	ldr	r1, [sp, #8]
   12c26:	f009 fd8e 	bl	1c746 <bt_att_chan_send_rsp>
	return 0;
   12c2a:	e7f5      	b.n	12c18 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   12c2c:	2412      	movs	r4, #18
   12c2e:	e7f3      	b.n	12c18 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   12c30:	2401      	movs	r4, #1
   12c32:	e7f1      	b.n	12c18 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   12c34:	240e      	movs	r4, #14
   12c36:	e7ef      	b.n	12c18 <att_read_rsp+0x6c>
   12c38:	0001c83f 	.word	0x0001c83f
   12c3c:	0001c817 	.word	0x0001c817

00012c40 <att_read_type_req>:
{
   12c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   12c44:	898c      	ldrh	r4, [r1, #12]
{
   12c46:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   12c48:	3c04      	subs	r4, #4
   12c4a:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   12c4c:	2c02      	cmp	r4, #2
{
   12c4e:	4608      	mov	r0, r1
   12c50:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   12c52:	d001      	beq.n	12c58 <att_read_type_req+0x18>
   12c54:	2c10      	cmp	r4, #16
   12c56:	d150      	bne.n	12cfa <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   12c58:	2104      	movs	r1, #4
   12c5a:	3008      	adds	r0, #8
   12c5c:	f002 fe8a 	bl	15974 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12c60:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   12c64:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   12c66:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12c68:	1d01      	adds	r1, r0, #4
   12c6a:	4622      	mov	r2, r4
   12c6c:	4640      	mov	r0, r8
   12c6e:	f009 f8e6 	bl	1be3e <bt_uuid_create>
   12c72:	b188      	cbz	r0, 12c98 <att_read_type_req+0x58>
	if (!start || !end) {
   12c74:	b19e      	cbz	r6, 12c9e <att_read_type_req+0x5e>
   12c76:	b18f      	cbz	r7, 12c9c <att_read_type_req+0x5c>
	if (start > end) {
   12c78:	42b7      	cmp	r7, r6
   12c7a:	d310      	bcc.n	12c9e <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   12c7c:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   12c7e:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   12c80:	2100      	movs	r1, #0
   12c82:	eb0d 0002 	add.w	r0, sp, r2
   12c86:	f009 f862 	bl	1bd4e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   12c8a:	2201      	movs	r2, #1
   12c8c:	2109      	movs	r1, #9
   12c8e:	4620      	mov	r0, r4
   12c90:	f7ff fe94 	bl	129bc <bt_att_create_pdu>
   12c94:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   12c96:	b968      	cbnz	r0, 12cb4 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   12c98:	240e      	movs	r4, #14
   12c9a:	e007      	b.n	12cac <att_read_type_req+0x6c>
			*err = 0U;
   12c9c:	463e      	mov	r6, r7
	if (!req) {
   12c9e:	2301      	movs	r3, #1
   12ca0:	4632      	mov	r2, r6
   12ca2:	2108      	movs	r1, #8
   12ca4:	4628      	mov	r0, r5
   12ca6:	f7ff fd81 	bl	127ac <send_err_rsp.part.0>
		return 0;
   12caa:	2400      	movs	r4, #0
}
   12cac:	4620      	mov	r0, r4
   12cae:	b00c      	add	sp, #48	; 0x30
   12cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   12cb4:	2101      	movs	r1, #1
   12cb6:	3008      	adds	r0, #8
	data.uuid = uuid;
   12cb8:	e9cd 5806 	strd	r5, r8, [sp, #24]
   12cbc:	f002 fe78 	bl	159b0 <net_buf_simple_add>
	data.rsp->len = 0U;
   12cc0:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12cc4:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   12cc6:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12cc8:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   12cca:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12cce:	4a0c      	ldr	r2, [pc, #48]	; (12d00 <att_read_type_req+0xc0>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12cd0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12cd4:	4630      	mov	r0, r6
   12cd6:	ab06      	add	r3, sp, #24
   12cd8:	f009 fbfe 	bl	1c4d8 <bt_gatt_foreach_attr>
	if (data.err) {
   12cdc:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   12ce0:	b12c      	cbz	r4, 12cee <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   12ce2:	9808      	ldr	r0, [sp, #32]
   12ce4:	f002 fd4e 	bl	15784 <net_buf_unref>
	if (!req) {
   12ce8:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   12cec:	e7d8      	b.n	12ca0 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12cee:	4628      	mov	r0, r5
   12cf0:	4a04      	ldr	r2, [pc, #16]	; (12d04 <att_read_type_req+0xc4>)
   12cf2:	9908      	ldr	r1, [sp, #32]
   12cf4:	f009 fd27 	bl	1c746 <bt_att_chan_send_rsp>
	return 0;
   12cf8:	e7d8      	b.n	12cac <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   12cfa:	2404      	movs	r4, #4
   12cfc:	e7d6      	b.n	12cac <att_read_type_req+0x6c>
   12cfe:	bf00      	nop
   12d00:	000125dd 	.word	0x000125dd
   12d04:	0001c817 	.word	0x0001c817

00012d08 <att_find_type_req>:
{
   12d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12d0c:	4688      	mov	r8, r1
   12d0e:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   12d10:	2106      	movs	r1, #6
   12d12:	b086      	sub	sp, #24
   12d14:	f108 0008 	add.w	r0, r8, #8
   12d18:	f002 fe2c 	bl	15974 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   12d1c:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   12d1e:	b317      	cbz	r7, 12d66 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   12d20:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   12d24:	f1b9 0f00 	cmp.w	r9, #0
   12d28:	d01c      	beq.n	12d64 <att_find_type_req+0x5c>
	if (start > end) {
   12d2a:	454f      	cmp	r7, r9
   12d2c:	d81b      	bhi.n	12d66 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   12d2e:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   12d30:	2400      	movs	r4, #0
   12d32:	f8ad 3002 	strh.w	r3, [sp, #2]
   12d36:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   12d3a:	4668      	mov	r0, sp
   12d3c:	a901      	add	r1, sp, #4
	value = buf->data;
   12d3e:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   12d42:	f88d 4000 	strb.w	r4, [sp]
   12d46:	f88d 4004 	strb.w	r4, [sp, #4]
   12d4a:	f8ad 3006 	strh.w	r3, [sp, #6]
   12d4e:	f009 f848 	bl	1bde2 <bt_uuid_cmp>
   12d52:	4606      	mov	r6, r0
   12d54:	b190      	cbz	r0, 12d7c <att_find_type_req+0x74>
	if (!req) {
   12d56:	230a      	movs	r3, #10
   12d58:	463a      	mov	r2, r7
   12d5a:	2106      	movs	r1, #6
   12d5c:	4628      	mov	r0, r5
   12d5e:	f7ff fd25 	bl	127ac <send_err_rsp.part.0>
		return 0;
   12d62:	e007      	b.n	12d74 <att_find_type_req+0x6c>
			*err = 0U;
   12d64:	464f      	mov	r7, r9
	if (!req) {
   12d66:	2301      	movs	r3, #1
   12d68:	463a      	mov	r2, r7
   12d6a:	2106      	movs	r1, #6
   12d6c:	4628      	mov	r0, r5
   12d6e:	f7ff fd1d 	bl	127ac <send_err_rsp.part.0>
		return 0;
   12d72:	2400      	movs	r4, #0
}
   12d74:	4620      	mov	r0, r4
   12d76:	b006      	add	sp, #24
   12d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   12d7c:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   12d80:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   12d84:	4601      	mov	r1, r0
   12d86:	2214      	movs	r2, #20
   12d88:	a801      	add	r0, sp, #4
   12d8a:	f008 ffe0 	bl	1bd4e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   12d8e:	4632      	mov	r2, r6
   12d90:	2107      	movs	r1, #7
   12d92:	4640      	mov	r0, r8
   12d94:	f7ff fe12 	bl	129bc <bt_att_create_pdu>
   12d98:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   12d9a:	b1e0      	cbz	r0, 12dd6 <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12d9c:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   12d9e:	4649      	mov	r1, r9
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12da0:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   12da4:	4638      	mov	r0, r7
   12da6:	4a0d      	ldr	r2, [pc, #52]	; (12ddc <att_find_type_req+0xd4>)
   12da8:	ab01      	add	r3, sp, #4
	data.value_len = value_len;
   12daa:	f88d 4014 	strb.w	r4, [sp, #20]
	data.value = value;
   12dae:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   12db2:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   12db4:	f009 fb90 	bl	1c4d8 <bt_gatt_foreach_attr>
	if (data.err) {
   12db8:	f89d 4015 	ldrb.w	r4, [sp, #21]
   12dbc:	b12c      	cbz	r4, 12dca <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   12dbe:	9802      	ldr	r0, [sp, #8]
   12dc0:	f002 fce0 	bl	15784 <net_buf_unref>
	if (!req) {
   12dc4:	f89d 3015 	ldrb.w	r3, [sp, #21]
   12dc8:	e7ce      	b.n	12d68 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12dca:	4628      	mov	r0, r5
   12dcc:	4a04      	ldr	r2, [pc, #16]	; (12de0 <att_find_type_req+0xd8>)
   12dce:	9902      	ldr	r1, [sp, #8]
   12dd0:	f009 fcb9 	bl	1c746 <bt_att_chan_send_rsp>
	return 0;
   12dd4:	e7ce      	b.n	12d74 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   12dd6:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   12dd8:	e7cc      	b.n	12d74 <att_find_type_req+0x6c>
   12dda:	bf00      	nop
   12ddc:	000121a5 	.word	0x000121a5
   12de0:	0001c817 	.word	0x0001c817

00012de4 <att_find_info_req>:
{
   12de4:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   12de6:	688b      	ldr	r3, [r1, #8]
{
   12de8:	4605      	mov	r5, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   12dea:	881e      	ldrh	r6, [r3, #0]
{
   12dec:	b085      	sub	sp, #20
	if (!start || !end) {
   12dee:	b19e      	cbz	r6, 12e18 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   12df0:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   12df2:	b184      	cbz	r4, 12e16 <att_find_info_req+0x32>
	if (start > end) {
   12df4:	42b4      	cmp	r4, r6
   12df6:	d30f      	bcc.n	12e18 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   12df8:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   12dfa:	2210      	movs	r2, #16
   12dfc:	2100      	movs	r1, #0
   12dfe:	4668      	mov	r0, sp
   12e00:	f008 ffa5 	bl	1bd4e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   12e04:	2200      	movs	r2, #0
   12e06:	2105      	movs	r1, #5
   12e08:	4638      	mov	r0, r7
   12e0a:	f7ff fdd7 	bl	129bc <bt_att_create_pdu>
   12e0e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   12e10:	b958      	cbnz	r0, 12e2a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   12e12:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   12e14:	e007      	b.n	12e26 <att_find_info_req+0x42>
			*err = 0U;
   12e16:	4626      	mov	r6, r4
	if (!req) {
   12e18:	2301      	movs	r3, #1
   12e1a:	4632      	mov	r2, r6
   12e1c:	2104      	movs	r1, #4
   12e1e:	4628      	mov	r0, r5
   12e20:	f7ff fcc4 	bl	127ac <send_err_rsp.part.0>
	return 0;
   12e24:	2000      	movs	r0, #0
}
   12e26:	b005      	add	sp, #20
   12e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   12e2a:	4621      	mov	r1, r4
   12e2c:	466b      	mov	r3, sp
   12e2e:	4630      	mov	r0, r6
   12e30:	4a08      	ldr	r2, [pc, #32]	; (12e54 <att_find_info_req+0x70>)
	data.chan = chan;
   12e32:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   12e34:	f009 fb50 	bl	1c4d8 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   12e38:	9c02      	ldr	r4, [sp, #8]
   12e3a:	b924      	cbnz	r4, 12e46 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   12e3c:	9801      	ldr	r0, [sp, #4]
   12e3e:	f002 fca1 	bl	15784 <net_buf_unref>
	if (!req) {
   12e42:	230a      	movs	r3, #10
   12e44:	e7e9      	b.n	12e1a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12e46:	4628      	mov	r0, r5
   12e48:	4a03      	ldr	r2, [pc, #12]	; (12e58 <att_find_info_req+0x74>)
   12e4a:	9901      	ldr	r1, [sp, #4]
   12e4c:	f009 fc7b 	bl	1c746 <bt_att_chan_send_rsp>
   12e50:	e7e8      	b.n	12e24 <att_find_info_req+0x40>
   12e52:	bf00      	nop
   12e54:	0001c4ef 	.word	0x0001c4ef
   12e58:	0001c817 	.word	0x0001c817

00012e5c <att_mtu_req>:
{
   12e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   12e5e:	4603      	mov	r3, r0
   12e60:	f853 2bc8 	ldr.w	r2, [r3], #200
{
   12e64:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   12e66:	6810      	ldr	r0, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12e68:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   12e6c:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   12e70:	071b      	lsls	r3, r3, #28
   12e72:	d41b      	bmi.n	12eac <att_mtu_req+0x50>
	mtu_client = sys_le16_to_cpu(req->mtu);
   12e74:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   12e76:	881b      	ldrh	r3, [r3, #0]
   12e78:	2b16      	cmp	r3, #22
   12e7a:	d919      	bls.n	12eb0 <att_mtu_req+0x54>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   12e7c:	2202      	movs	r2, #2
   12e7e:	2103      	movs	r1, #3
   12e80:	f7ff fd9c 	bl	129bc <bt_att_create_pdu>
	if (!pdu) {
   12e84:	4606      	mov	r6, r0
   12e86:	b1a8      	cbz	r0, 12eb4 <att_mtu_req+0x58>
	return net_buf_simple_add(&buf->b, len);
   12e88:	2102      	movs	r1, #2
   12e8a:	3008      	adds	r0, #8
   12e8c:	f002 fd90 	bl	159b0 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   12e90:	2717      	movs	r7, #23
   12e92:	7044      	strb	r4, [r0, #1]
   12e94:	7007      	strb	r7, [r0, #0]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   12e96:	4631      	mov	r1, r6
   12e98:	4628      	mov	r0, r5
   12e9a:	4a07      	ldr	r2, [pc, #28]	; (12eb8 <att_mtu_req+0x5c>)
   12e9c:	f009 fc53 	bl	1c746 <bt_att_chan_send_rsp>
	return 0;
   12ea0:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   12ea2:	f8a5 7052 	strh.w	r7, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   12ea6:	f8a5 705e 	strh.w	r7, [r5, #94]	; 0x5e
}
   12eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   12eac:	2006      	movs	r0, #6
   12eae:	e7fc      	b.n	12eaa <att_mtu_req+0x4e>
		return BT_ATT_ERR_INVALID_PDU;
   12eb0:	2004      	movs	r0, #4
   12eb2:	e7fa      	b.n	12eaa <att_mtu_req+0x4e>
		return BT_ATT_ERR_UNLIKELY;
   12eb4:	200e      	movs	r0, #14
   12eb6:	e7f8      	b.n	12eaa <att_mtu_req+0x4e>
   12eb8:	0001c817 	.word	0x0001c817

00012ebc <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   12ebc:	b513      	push	{r0, r1, r4, lr}
	struct bt_att_req *req = NULL;
   12ebe:	2400      	movs	r4, #0
{
   12ec0:	4602      	mov	r2, r0
   12ec2:	460b      	mov	r3, r1

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   12ec4:	4807      	ldr	r0, [pc, #28]	; (12ee4 <bt_att_req_alloc+0x28>)
   12ec6:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   12ec8:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   12eca:	f004 ff9d 	bl	17e08 <k_mem_slab_alloc>
   12ece:	4601      	mov	r1, r0
   12ed0:	b930      	cbnz	r0, 12ee0 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   12ed2:	2218      	movs	r2, #24
   12ed4:	9801      	ldr	r0, [sp, #4]
   12ed6:	f008 ff3a 	bl	1bd4e <memset>

	return req;
   12eda:	9801      	ldr	r0, [sp, #4]
}
   12edc:	b002      	add	sp, #8
   12ede:	bd10      	pop	{r4, pc}
		return NULL;
   12ee0:	4620      	mov	r0, r4
   12ee2:	e7fb      	b.n	12edc <bt_att_req_alloc+0x20>
   12ee4:	20008618 	.word	0x20008618

00012ee8 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   12ee8:	b507      	push	{r0, r1, r2, lr}
   12eea:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
   12eec:	a901      	add	r1, sp, #4
   12eee:	4803      	ldr	r0, [pc, #12]	; (12efc <bt_att_req_free+0x14>)
   12ef0:	f004 ffe4 	bl	17ebc <k_mem_slab_free>
}
   12ef4:	b003      	add	sp, #12
   12ef6:	f85d fb04 	ldr.w	pc, [sp], #4
   12efa:	bf00      	nop
   12efc:	20008618 	.word	0x20008618

00012f00 <att_handle_rsp>:
{
   12f00:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   12f04:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->timeout_work);
   12f06:	30f0      	adds	r0, #240	; 0xf0
{
   12f08:	460f      	mov	r7, r1
   12f0a:	4690      	mov	r8, r2
   12f0c:	461e      	mov	r6, r3
	k_delayed_work_cancel(&chan->timeout_work);
   12f0e:	f006 fda9 	bl	19a64 <k_delayed_work_cancel>
	if (!chan->req) {
   12f12:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
   12f16:	f04f 0a00 	mov.w	sl, #0
   12f1a:	b99d      	cbnz	r5, 12f44 <att_handle_rsp+0x44>
		BT_WARN("No pending ATT request");
   12f1c:	2157      	movs	r1, #87	; 0x57
   12f1e:	4818      	ldr	r0, [pc, #96]	; (12f80 <att_handle_rsp+0x80>)
   12f20:	f007 fca6 	bl	1a870 <printk>
	att_req_send_process(chan->att);
   12f24:	6820      	ldr	r0, [r4, #0]
   12f26:	f009 fcf2 	bl	1c90e <att_req_send_process>
	if (func) {
   12f2a:	b13d      	cbz	r5, 12f3c <att_handle_rsp+0x3c>
		func(chan->att->conn, err, pdu, len, params);
   12f2c:	6820      	ldr	r0, [r4, #0]
   12f2e:	f8cd 9000 	str.w	r9, [sp]
   12f32:	4643      	mov	r3, r8
   12f34:	463a      	mov	r2, r7
   12f36:	4631      	mov	r1, r6
   12f38:	6800      	ldr	r0, [r0, #0]
   12f3a:	47a8      	blx	r5
}
   12f3c:	2000      	movs	r0, #0
   12f3e:	b002      	add	sp, #8
   12f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   12f44:	4b0f      	ldr	r3, [pc, #60]	; (12f84 <att_handle_rsp+0x84>)
   12f46:	429d      	cmp	r5, r3
   12f48:	d103      	bne.n	12f52 <att_handle_rsp+0x52>
	bt_att_func_t func = NULL;
   12f4a:	4655      	mov	r5, sl
		chan->req = NULL;
   12f4c:	f8c4 a0cc 	str.w	sl, [r4, #204]	; 0xcc
		goto process;
   12f50:	e7e8      	b.n	12f24 <att_handle_rsp+0x24>
	if (chan->req->buf) {
   12f52:	6928      	ldr	r0, [r5, #16]
   12f54:	b128      	cbz	r0, 12f62 <att_handle_rsp+0x62>
		net_buf_unref(chan->req->buf);
   12f56:	f002 fc15 	bl	15784 <net_buf_unref>
		chan->req->buf = NULL;
   12f5a:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   12f5e:	f8c3 a010 	str.w	sl, [r3, #16]
	chan->req->func = NULL;
   12f62:	f04f 0a00 	mov.w	sl, #0
	func = chan->req->func;
   12f66:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   12f6a:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   12f6c:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   12f70:	f8d0 9014 	ldr.w	r9, [r0, #20]
	att_req_destroy(chan->req);
   12f74:	f009 fd79 	bl	1ca6a <att_req_destroy>
	chan->req = NULL;
   12f78:	f8c4 a0cc 	str.w	sl, [r4, #204]	; 0xcc
   12f7c:	e7d2      	b.n	12f24 <att_handle_rsp+0x24>
   12f7e:	bf00      	nop
   12f80:	000220ae 	.word	0x000220ae
   12f84:	2000abbc 	.word	0x2000abbc

00012f88 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
   12f88:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
{
   12f8c:	b430      	push	{r4, r5}
	if (!chan->req || chan->req == &cancel) {
   12f8e:	b18b      	cbz	r3, 12fb4 <att_error_rsp+0x2c>
   12f90:	4a09      	ldr	r2, [pc, #36]	; (12fb8 <att_error_rsp+0x30>)
   12f92:	4293      	cmp	r3, r2
   12f94:	d00e      	beq.n	12fb4 <att_error_rsp+0x2c>
	if (chan->req->buf) {
   12f96:	691a      	ldr	r2, [r3, #16]
	rsp = (void *)buf->data;
   12f98:	6889      	ldr	r1, [r1, #8]
	if (chan->req->buf) {
   12f9a:	b12a      	cbz	r2, 12fa8 <att_error_rsp+0x20>
	buf->data = buf->__buf + state->offset;
   12f9c:	899d      	ldrh	r5, [r3, #12]
   12f9e:	89dc      	ldrh	r4, [r3, #14]
   12fa0:	6913      	ldr	r3, [r2, #16]
	buf->len = state->len;
   12fa2:	8194      	strh	r4, [r2, #12]
	buf->data = buf->__buf + state->offset;
   12fa4:	442b      	add	r3, r5
   12fa6:	6093      	str	r3, [r2, #8]
	err = rsp->error;
   12fa8:	78cb      	ldrb	r3, [r1, #3]
	return att_handle_rsp(chan, NULL, 0, err);
   12faa:	2200      	movs	r2, #0
}
   12fac:	bc30      	pop	{r4, r5}
	return att_handle_rsp(chan, NULL, 0, err);
   12fae:	4611      	mov	r1, r2
   12fb0:	f7ff bfa6 	b.w	12f00 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
   12fb4:	230e      	movs	r3, #14
   12fb6:	e7f8      	b.n	12faa <att_error_rsp+0x22>
   12fb8:	2000abbc 	.word	0x2000abbc

00012fbc <att_reset>:
{
   12fbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   12fbe:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   12fc0:	9803      	ldr	r0, [sp, #12]
   12fc2:	2200      	movs	r2, #0
   12fc4:	2300      	movs	r3, #0
   12fc6:	300c      	adds	r0, #12
   12fc8:	f002 fb5a 	bl	15680 <net_buf_get>
   12fcc:	b948      	cbnz	r0, 12fe2 <att_reset+0x26>
	att->conn = NULL;
   12fce:	9a03      	ldr	r2, [sp, #12]
	return list->head;
   12fd0:	6854      	ldr	r4, [r2, #4]
   12fd2:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   12fd4:	b944      	cbnz	r4, 12fe8 <att_reset+0x2c>
	k_mem_slab_free(&att_slab, (void **)&att);
   12fd6:	480d      	ldr	r0, [pc, #52]	; (1300c <att_reset+0x50>)
   12fd8:	a903      	add	r1, sp, #12
   12fda:	f004 ff6f 	bl	17ebc <k_mem_slab_free>
}
   12fde:	b004      	add	sp, #16
   12fe0:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   12fe2:	f002 fbcf 	bl	15784 <net_buf_unref>
   12fe6:	e7eb      	b.n	12fc0 <att_reset+0x4>
	return node->next;
   12fe8:	6825      	ldr	r5, [r4, #0]
		if (req->func) {
   12fea:	6866      	ldr	r6, [r4, #4]
   12fec:	b136      	cbz	r6, 12ffc <att_reset+0x40>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   12fee:	6963      	ldr	r3, [r4, #20]
   12ff0:	210e      	movs	r1, #14
   12ff2:	9300      	str	r3, [sp, #0]
   12ff4:	2300      	movs	r3, #0
   12ff6:	461a      	mov	r2, r3
   12ff8:	4618      	mov	r0, r3
   12ffa:	47b0      	blx	r6
		att_req_destroy(req);
   12ffc:	4620      	mov	r0, r4
   12ffe:	f009 fd34 	bl	1ca6a <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   13002:	2d00      	cmp	r5, #0
   13004:	d0e7      	beq.n	12fd6 <att_reset+0x1a>
   13006:	462c      	mov	r4, r5
   13008:	682d      	ldr	r5, [r5, #0]
   1300a:	e7ee      	b.n	12fea <att_reset+0x2e>
   1300c:	200085e0 	.word	0x200085e0

00013010 <att_timeout>:
{
   13010:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = chan->att;
   13012:	4605      	mov	r5, r0
   13014:	f855 6df0 	ldr.w	r6, [r5, #-240]!
	BT_ERR("ATT Timeout");
   13018:	2145      	movs	r1, #69	; 0x45
{
   1301a:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   1301c:	4808      	ldr	r0, [pc, #32]	; (13040 <att_timeout+0x30>)
   1301e:	f007 fc27 	bl	1a870 <printk>
	att_chan_detach(chan);
   13022:	4628      	mov	r0, r5
   13024:	f009 fd5e 	bl	1cae4 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   13028:	6ab5      	ldr	r5, [r6, #40]	; 0x28
   1302a:	b945      	cbnz	r5, 1303e <att_timeout+0x2e>
	att_reset(att);
   1302c:	4630      	mov	r0, r6
   1302e:	f7ff ffc5 	bl	12fbc <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   13032:	f854 0ce8 	ldr.w	r0, [r4, #-232]
   13036:	f002 f951 	bl	152dc <bt_gatt_disconnected>
	ch->chan.conn = NULL;
   1303a:	f844 5ce8 	str.w	r5, [r4, #-232]
}
   1303e:	bd70      	pop	{r4, r5, r6, pc}
   13040:	000220ca 	.word	0x000220ca

00013044 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   13044:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   13048:	460c      	mov	r4, r1
   1304a:	4617      	mov	r7, r2
   1304c:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   1304e:	4605      	mov	r5, r0
   13050:	b950      	cbnz	r0, 13068 <bt_att_send+0x24>
   13052:	492e      	ldr	r1, [pc, #184]	; (1310c <bt_att_send+0xc8>)
   13054:	482e      	ldr	r0, [pc, #184]	; (13110 <bt_att_send+0xcc>)
   13056:	f640 32ce 	movw	r2, #3022	; 0xbce
   1305a:	f007 fc09 	bl	1a870 <printk>
   1305e:	f640 31ce 	movw	r1, #3022	; 0xbce
   13062:	482a      	ldr	r0, [pc, #168]	; (1310c <bt_att_send+0xc8>)
   13064:	f007 feaa 	bl	1adbc <assert_post_action>
	__ASSERT_NO_MSG(buf);
   13068:	b954      	cbnz	r4, 13080 <bt_att_send+0x3c>
   1306a:	4928      	ldr	r1, [pc, #160]	; (1310c <bt_att_send+0xc8>)
   1306c:	4828      	ldr	r0, [pc, #160]	; (13110 <bt_att_send+0xcc>)
   1306e:	f640 32cf 	movw	r2, #3023	; 0xbcf
   13072:	f007 fbfd 	bl	1a870 <printk>
   13076:	f640 31cf 	movw	r1, #3023	; 0xbcf
   1307a:	4824      	ldr	r0, [pc, #144]	; (1310c <bt_att_send+0xc8>)
   1307c:	f007 fe9e 	bl	1adbc <assert_post_action>

	att = att_get(conn);
   13080:	4628      	mov	r0, r5
   13082:	f7ff f85b 	bl	1213c <att_get>
	if (!att) {
   13086:	4606      	mov	r6, r0
   13088:	b938      	cbnz	r0, 1309a <bt_att_send+0x56>
		net_buf_unref(buf);
   1308a:	4620      	mov	r0, r4
   1308c:	f002 fb7a 	bl	15784 <net_buf_unref>
		return -ENOTCONN;
   13090:	f06f 0038 	mvn.w	r0, #56	; 0x38

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   13094:	b002      	add	sp, #8
   13096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1309a:	b147      	cbz	r7, 130ae <bt_att_send+0x6a>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1309c:	463b      	mov	r3, r7
   1309e:	4622      	mov	r2, r4
   130a0:	2104      	movs	r1, #4
   130a2:	4628      	mov	r0, r5
   130a4:	f8cd 8000 	str.w	r8, [sp]
   130a8:	f009 f955 	bl	1c356 <bt_l2cap_send_cb>
   130ac:	e7f2      	b.n	13094 <bt_att_send+0x50>
	net_buf_put(&att->tx_queue, buf);
   130ae:	f100 070c 	add.w	r7, r0, #12
   130b2:	4621      	mov	r1, r4
   130b4:	4638      	mov	r0, r7
   130b6:	f002 fb37 	bl	15728 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   130ba:	2200      	movs	r2, #0
   130bc:	2300      	movs	r3, #0
   130be:	4638      	mov	r0, r7
   130c0:	f002 fade 	bl	15680 <net_buf_get>
	if (!buf) {
   130c4:	4605      	mov	r5, r0
   130c6:	b908      	cbnz	r0, 130cc <bt_att_send+0x88>
	return 0;
   130c8:	2000      	movs	r0, #0
   130ca:	e7e3      	b.n	13094 <bt_att_send+0x50>
	return list->head;
   130cc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   130ce:	b1c3      	cbz	r3, 13102 <bt_att_send+0xbe>
   130d0:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   130d4:	d015      	beq.n	13102 <bt_att_send+0xbe>
	return node->next;
   130d6:	681c      	ldr	r4, [r3, #0]
   130d8:	b10c      	cbz	r4, 130de <bt_att_send+0x9a>
   130da:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
		err = bt_att_chan_send(chan, buf, NULL);
   130de:	2200      	movs	r2, #0
   130e0:	4629      	mov	r1, r5
   130e2:	f009 fb19 	bl	1c718 <bt_att_chan_send>
		if (err >= 0) {
   130e6:	2800      	cmp	r0, #0
   130e8:	daee      	bge.n	130c8 <bt_att_send+0x84>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   130ea:	b154      	cbz	r4, 13102 <bt_att_send+0xbe>
Z_GENLIST_PEEK_NEXT(slist, snode)
   130ec:	f514 739e 	adds.w	r3, r4, #316	; 0x13c
   130f0:	d004      	beq.n	130fc <bt_att_send+0xb8>
	return node->next;
   130f2:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   130f6:	b10b      	cbz	r3, 130fc <bt_att_send+0xb8>
   130f8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   130fc:	4620      	mov	r0, r4
   130fe:	461c      	mov	r4, r3
   13100:	e7ed      	b.n	130de <bt_att_send+0x9a>
		k_queue_prepend(&att->tx_queue._queue, buf);
   13102:	4629      	mov	r1, r5
   13104:	4638      	mov	r0, r7
   13106:	f00a ff7b 	bl	1e000 <k_queue_prepend>
   1310a:	e7dd      	b.n	130c8 <bt_att_send+0x84>
   1310c:	00021f8d 	.word	0x00021f8d
   13110:	0001fdfa 	.word	0x0001fdfa

00013114 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   13114:	b538      	push	{r3, r4, r5, lr}
   13116:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   13118:	4605      	mov	r5, r0
   1311a:	b950      	cbnz	r0, 13132 <bt_att_req_send+0x1e>
   1311c:	4918      	ldr	r1, [pc, #96]	; (13180 <bt_att_req_send+0x6c>)
   1311e:	4819      	ldr	r0, [pc, #100]	; (13184 <bt_att_req_send+0x70>)
   13120:	f640 32eb 	movw	r2, #3051	; 0xbeb
   13124:	f007 fba4 	bl	1a870 <printk>
   13128:	f640 31eb 	movw	r1, #3051	; 0xbeb
   1312c:	4814      	ldr	r0, [pc, #80]	; (13180 <bt_att_req_send+0x6c>)
   1312e:	f007 fe45 	bl	1adbc <assert_post_action>
	__ASSERT_NO_MSG(req);
   13132:	b954      	cbnz	r4, 1314a <bt_att_req_send+0x36>
   13134:	4912      	ldr	r1, [pc, #72]	; (13180 <bt_att_req_send+0x6c>)
   13136:	4813      	ldr	r0, [pc, #76]	; (13184 <bt_att_req_send+0x70>)
   13138:	f640 32ec 	movw	r2, #3052	; 0xbec
   1313c:	f007 fb98 	bl	1a870 <printk>
   13140:	f640 31ec 	movw	r1, #3052	; 0xbec
   13144:	480e      	ldr	r0, [pc, #56]	; (13180 <bt_att_req_send+0x6c>)
   13146:	f007 fe39 	bl	1adbc <assert_post_action>

	att = att_get(conn);
   1314a:	4628      	mov	r0, r5
   1314c:	f7fe fff6 	bl	1213c <att_get>
	if (!att) {
   13150:	4605      	mov	r5, r0
   13152:	b930      	cbnz	r0, 13162 <bt_att_req_send+0x4e>
		net_buf_unref(req->buf);
   13154:	6920      	ldr	r0, [r4, #16]
   13156:	f002 fb15 	bl	15784 <net_buf_unref>
		req->buf = NULL;
		return -ENOTCONN;
   1315a:	f06f 0038 	mvn.w	r0, #56	; 0x38
		req->buf = NULL;
   1315e:	6125      	str	r5, [r4, #16]

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);

	return 0;
}
   13160:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   13162:	2300      	movs	r3, #0
   13164:	6023      	str	r3, [r4, #0]
	return list->tail;
   13166:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   13168:	b933      	cbnz	r3, 13178 <bt_att_req_send+0x64>
	list->head = node;
   1316a:	e9c0 4401 	strd	r4, r4, [r0, #4]
	att_req_send_process(att);
   1316e:	4628      	mov	r0, r5
   13170:	f009 fbcd 	bl	1c90e <att_req_send_process>
	return 0;
   13174:	2000      	movs	r0, #0
   13176:	e7f3      	b.n	13160 <bt_att_req_send+0x4c>
	parent->next = child;
   13178:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1317a:	6084      	str	r4, [r0, #8]
}
   1317c:	e7f7      	b.n	1316e <bt_att_req_send+0x5a>
   1317e:	bf00      	nop
   13180:	00021f8d 	.word	0x00021f8d
   13184:	0001fdfa 	.word	0x0001fdfa

00013188 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   13188:	b510      	push	{r4, lr}
   1318a:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   1318c:	b350      	cbz	r0, 131e4 <bt_att_req_cancel+0x5c>
   1318e:	b349      	cbz	r1, 131e4 <bt_att_req_cancel+0x5c>
		return;
	}

	att = att_get(conn);
   13190:	f7fe ffd4 	bl	1213c <att_get>
	if (!att) {
   13194:	b330      	cbz	r0, 131e4 <bt_att_req_cancel+0x5c>
	return list->head;
   13196:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   13198:	b15b      	cbz	r3, 131b2 <bt_att_req_cancel+0x2a>
   1319a:	f5b3 719e 	subs.w	r1, r3, #316	; 0x13c
   1319e:	d008      	beq.n	131b2 <bt_att_req_cancel+0x2a>
	return node->next;
   131a0:	681b      	ldr	r3, [r3, #0]
   131a2:	b10b      	cbz	r3, 131a8 <bt_att_req_cancel+0x20>
   131a4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
	if (chan->req != req) {
   131a8:	f8d1 20cc 	ldr.w	r2, [r1, #204]	; 0xcc
   131ac:	4294      	cmp	r4, r2
   131ae:	d006      	beq.n	131be <bt_att_req_cancel+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   131b0:	b96b      	cbnz	r3, 131ce <bt_att_req_cancel+0x46>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   131b2:	3004      	adds	r0, #4
   131b4:	4621      	mov	r1, r4
   131b6:	f009 faee 	bl	1c796 <sys_slist_find_and_remove.isra.0>

	att_req_destroy(req);
   131ba:	4620      	mov	r0, r4
   131bc:	e003      	b.n	131c6 <bt_att_req_cancel+0x3e>
	att_req_destroy(req);
   131be:	4620      	mov	r0, r4
	chan->req = &cancel;
   131c0:	4b09      	ldr	r3, [pc, #36]	; (131e8 <bt_att_req_cancel+0x60>)
   131c2:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
}
   131c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	att_req_destroy(req);
   131ca:	f009 bc4e 	b.w	1ca6a <att_req_destroy>
Z_GENLIST_PEEK_NEXT(slist, snode)
   131ce:	f513 729e 	adds.w	r2, r3, #316	; 0x13c
   131d2:	d004      	beq.n	131de <bt_att_req_cancel+0x56>
	return node->next;
   131d4:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   131d8:	b10a      	cbz	r2, 131de <bt_att_req_cancel+0x56>
   131da:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
{
   131de:	4619      	mov	r1, r3
   131e0:	4613      	mov	r3, r2
   131e2:	e7e1      	b.n	131a8 <bt_att_req_cancel+0x20>
}
   131e4:	bd10      	pop	{r4, pc}
   131e6:	bf00      	nop
   131e8:	2000abbc 	.word	0x2000abbc

000131ec <db_hash_set>:

static uint8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   131ec:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
   131ee:	4618      	mov	r0, r3
{
   131f0:	4614      	mov	r4, r2
	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
   131f2:	4907      	ldr	r1, [pc, #28]	; (13210 <db_hash_set+0x24>)
   131f4:	2210      	movs	r2, #16
   131f6:	47a0      	blx	r4
	if (len < 0) {
   131f8:	1e04      	subs	r4, r0, #0
   131fa:	da06      	bge.n	1320a <db_hash_set+0x1e>
		BT_ERR("Failed to decode value (err %zd)", len);
   131fc:	4622      	mov	r2, r4
   131fe:	2145      	movs	r1, #69	; 0x45
   13200:	4804      	ldr	r0, [pc, #16]	; (13214 <db_hash_set+0x28>)
   13202:	f007 fb35 	bl	1a870 <printk>
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
}
   13206:	4620      	mov	r0, r4
   13208:	bd10      	pop	{r4, pc}
	return 0;
   1320a:	2400      	movs	r4, #0
   1320c:	e7fb      	b.n	13206 <db_hash_set+0x1a>
   1320e:	bf00      	nop
   13210:	2000f9c4 	.word	0x2000f9c4
   13214:	000220e2 	.word	0x000220e2

00013218 <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
   13218:	2210      	movs	r2, #16
{
   1321a:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
   1321c:	4906      	ldr	r1, [pc, #24]	; (13238 <db_hash_store+0x20>)
   1321e:	4807      	ldr	r0, [pc, #28]	; (1323c <db_hash_store+0x24>)
   13220:	f7f8 fbdc 	bl	b9dc <settings_save_one>
	if (err) {
   13224:	4602      	mov	r2, r0
   13226:	b128      	cbz	r0, 13234 <db_hash_store+0x1c>
}
   13228:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
   1322c:	2145      	movs	r1, #69	; 0x45
   1322e:	4804      	ldr	r0, [pc, #16]	; (13240 <db_hash_store+0x28>)
   13230:	f007 bb1e 	b.w	1a870 <printk>
}
   13234:	bd08      	pop	{r3, pc}
   13236:	bf00      	nop
   13238:	2000f9b4 	.word	0x2000f9b4
   1323c:	00022108 	.word	0x00022108
   13240:	00022110 	.word	0x00022110

00013244 <find_cf_cfg>:
{
   13244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13246:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   13248:	2600      	movs	r6, #0
   1324a:	4d0e      	ldr	r5, [pc, #56]	; (13284 <find_cf_cfg+0x40>)
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1324c:	462f      	mov	r7, r5
		if (!conn) {
   1324e:	1c6a      	adds	r2, r5, #1
   13250:	b954      	cbnz	r4, 13268 <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   13252:	4669      	mov	r1, sp
   13254:	4610      	mov	r0, r2
   13256:	9400      	str	r4, [sp, #0]
   13258:	f8cd 4003 	str.w	r4, [sp, #3]
   1325c:	f009 fd07 	bl	1cc6e <bt_addr_le_cmp>
   13260:	b940      	cbnz	r0, 13274 <find_cf_cfg+0x30>
}
   13262:	4638      	mov	r0, r7
   13264:	b003      	add	sp, #12
   13266:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   13268:	4620      	mov	r0, r4
   1326a:	7829      	ldrb	r1, [r5, #0]
   1326c:	f008 ff9f 	bl	1c1ae <bt_conn_is_peer_addr_le>
   13270:	2800      	cmp	r0, #0
   13272:	d1f6      	bne.n	13262 <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   13274:	3601      	adds	r6, #1
   13276:	2e14      	cmp	r6, #20
   13278:	f105 0510 	add.w	r5, r5, #16
   1327c:	d1e6      	bne.n	1324c <find_cf_cfg+0x8>
	return NULL;
   1327e:	2700      	movs	r7, #0
   13280:	e7ef      	b.n	13262 <find_cf_cfg+0x1e>
   13282:	bf00      	nop
   13284:	2000abd4 	.word	0x2000abd4

00013288 <find_sc_cfg>:
{
   13288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1328a:	4606      	mov	r6, r0
   1328c:	460f      	mov	r7, r1
   1328e:	2400      	movs	r4, #0
   13290:	4d09      	ldr	r5, [pc, #36]	; (132b8 <find_sc_cfg+0x30>)
		if (id == sc_cfg[i].id &&
   13292:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   13296:	42b3      	cmp	r3, r6
   13298:	d107      	bne.n	132aa <find_sc_cfg+0x22>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   1329a:	4639      	mov	r1, r7
   1329c:	4628      	mov	r0, r5
   1329e:	f009 fce6 	bl	1cc6e <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   132a2:	b910      	cbnz	r0, 132aa <find_sc_cfg+0x22>
			return &sc_cfg[i];
   132a4:	4805      	ldr	r0, [pc, #20]	; (132bc <find_sc_cfg+0x34>)
   132a6:	4420      	add	r0, r4
}
   132a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   132aa:	340c      	adds	r4, #12
   132ac:	2cf0      	cmp	r4, #240	; 0xf0
   132ae:	f105 050c 	add.w	r5, r5, #12
   132b2:	d1ee      	bne.n	13292 <find_sc_cfg+0xa>
	return NULL;
   132b4:	2000      	movs	r0, #0
   132b6:	e7f7      	b.n	132a8 <find_sc_cfg+0x20>
   132b8:	2000f1ab 	.word	0x2000f1ab
   132bc:	2000f1aa 	.word	0x2000f1aa

000132c0 <gatt_sub_find>:
{
   132c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   132c2:	4604      	mov	r4, r0
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   132c4:	2600      	movs	r6, #0
   132c6:	4d0e      	ldr	r5, [pc, #56]	; (13300 <gatt_sub_find+0x40>)
		struct gatt_sub *sub = &subscriptions[i];
   132c8:	462f      	mov	r7, r5
		if (!conn) {
   132ca:	1c6a      	adds	r2, r5, #1
   132cc:	b954      	cbnz	r4, 132e4 <gatt_sub_find+0x24>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   132ce:	4669      	mov	r1, sp
   132d0:	4610      	mov	r0, r2
   132d2:	9400      	str	r4, [sp, #0]
   132d4:	f8cd 4003 	str.w	r4, [sp, #3]
   132d8:	f009 fcc9 	bl	1cc6e <bt_addr_le_cmp>
   132dc:	b940      	cbnz	r0, 132f0 <gatt_sub_find+0x30>
}
   132de:	4638      	mov	r0, r7
   132e0:	b003      	add	sp, #12
   132e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   132e4:	4620      	mov	r0, r4
   132e6:	7829      	ldrb	r1, [r5, #0]
   132e8:	f008 ff61 	bl	1c1ae <bt_conn_is_peer_addr_le>
   132ec:	2800      	cmp	r0, #0
   132ee:	d1f6      	bne.n	132de <gatt_sub_find+0x1e>
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   132f0:	3601      	adds	r6, #1
   132f2:	2e14      	cmp	r6, #20
   132f4:	f105 0510 	add.w	r5, r5, #16
   132f8:	d1e6      	bne.n	132c8 <gatt_sub_find+0x8>
	return NULL;
   132fa:	2700      	movs	r7, #0
   132fc:	e7ef      	b.n	132de <gatt_sub_find+0x1e>
   132fe:	bf00      	nop
   13300:	2000ae0c 	.word	0x2000ae0c

00013304 <find_cf_cfg_by_addr>:
{
   13304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13306:	4606      	mov	r6, r0
   13308:	460f      	mov	r7, r1
   1330a:	2400      	movs	r4, #0
   1330c:	4d0a      	ldr	r5, [pc, #40]	; (13338 <find_cf_cfg_by_addr+0x34>)
			if (id == cf_cfg[i].id &&
   1330e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   13312:	42b3      	cmp	r3, r6
   13314:	d107      	bne.n	13326 <find_cf_cfg_by_addr+0x22>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
   13316:	4629      	mov	r1, r5
   13318:	4638      	mov	r0, r7
   1331a:	f009 fca8 	bl	1cc6e <bt_addr_le_cmp>
			if (id == cf_cfg[i].id &&
   1331e:	b910      	cbnz	r0, 13326 <find_cf_cfg_by_addr+0x22>
				return &cf_cfg[i];
   13320:	4806      	ldr	r0, [pc, #24]	; (1333c <find_cf_cfg_by_addr+0x38>)
   13322:	4420      	add	r0, r4
}
   13324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   13326:	3410      	adds	r4, #16
   13328:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
   1332c:	f105 0510 	add.w	r5, r5, #16
   13330:	d1ed      	bne.n	1330e <find_cf_cfg_by_addr+0xa>
	return NULL;
   13332:	2000      	movs	r0, #0
   13334:	e7f6      	b.n	13324 <find_cf_cfg_by_addr+0x20>
   13336:	bf00      	nop
   13338:	2000abd5 	.word	0x2000abd5
   1333c:	2000abd4 	.word	0x2000abd4

00013340 <bt_gatt_attr_write_ccc>:
{
   13340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13344:	461f      	mov	r7, r3
   13346:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1334a:	4604      	mov	r4, r0
   1334c:	4688      	mov	r8, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1334e:	f8d1 900c 	ldr.w	r9, [r1, #12]
	if (offset) {
   13352:	2b00      	cmp	r3, #0
   13354:	d141      	bne.n	133da <bt_gatt_attr_write_ccc+0x9a>
	if (!len || len > sizeof(uint16_t)) {
   13356:	1e7b      	subs	r3, r7, #1
   13358:	2b01      	cmp	r3, #1
   1335a:	d841      	bhi.n	133e0 <bt_gatt_attr_write_ccc+0xa0>
		value = *(uint8_t *)buf;
   1335c:	7816      	ldrb	r6, [r2, #0]
	if (len < sizeof(uint16_t)) {
   1335e:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   13360:	4649      	mov	r1, r9
   13362:	bf14      	ite	ne
   13364:	8816      	ldrhne	r6, [r2, #0]
		value = *(uint8_t *)buf;
   13366:	b2b6      	uxtheq	r6, r6
	cfg = find_ccc_cfg(conn, ccc);
   13368:	f009 fc84 	bl	1cc74 <find_ccc_cfg>
	if (!cfg) {
   1336c:	4605      	mov	r5, r0
   1336e:	b9b0      	cbnz	r0, 1339e <bt_gatt_attr_write_ccc+0x5e>
		if (!value) {
   13370:	b916      	cbnz	r6, 13378 <bt_gatt_attr_write_ccc+0x38>
			return len;
   13372:	4638      	mov	r0, r7
}
   13374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   13378:	4649      	mov	r1, r9
   1337a:	f009 fc7b 	bl	1cc74 <find_ccc_cfg>
		if (!cfg) {
   1337e:	4605      	mov	r5, r0
   13380:	b930      	cbnz	r0, 13390 <bt_gatt_attr_write_ccc+0x50>
			BT_WARN("No space to store CCC cfg");
   13382:	4819      	ldr	r0, [pc, #100]	; (133e8 <bt_gatt_attr_write_ccc+0xa8>)
   13384:	2157      	movs	r1, #87	; 0x57
   13386:	f007 fa73 	bl	1a870 <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1338a:	f06f 0010 	mvn.w	r0, #16
   1338e:	e7f1      	b.n	13374 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   13390:	f104 0188 	add.w	r1, r4, #136	; 0x88
   13394:	3001      	adds	r0, #1
   13396:	f009 fca6 	bl	1cce6 <bt_addr_le_copy>
		cfg->id = conn->id;
   1339a:	7a23      	ldrb	r3, [r4, #8]
   1339c:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   1339e:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
   133a2:	b973      	cbnz	r3, 133c2 <bt_gatt_attr_write_ccc+0x82>
	if (cfg->value != ccc->value) {
   133a4:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
	cfg->value = value;
   133a8:	812e      	strh	r6, [r5, #8]
	if (cfg->value != ccc->value) {
   133aa:	42b3      	cmp	r3, r6
   133ac:	d003      	beq.n	133b6 <bt_gatt_attr_write_ccc+0x76>
		gatt_ccc_changed(attr, ccc);
   133ae:	4649      	mov	r1, r9
   133b0:	4640      	mov	r0, r8
   133b2:	f009 fbd5 	bl	1cb60 <gatt_ccc_changed>
	if (!value) {
   133b6:	2e00      	cmp	r6, #0
   133b8:	d1db      	bne.n	13372 <bt_gatt_attr_write_ccc+0x32>
		clear_ccc_cfg(cfg);
   133ba:	4628      	mov	r0, r5
   133bc:	f009 fc96 	bl	1ccec <clear_ccc_cfg>
   133c0:	e7d7      	b.n	13372 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   133c2:	4632      	mov	r2, r6
   133c4:	4641      	mov	r1, r8
   133c6:	4620      	mov	r0, r4
   133c8:	4798      	blx	r3
		if (write < 0) {
   133ca:	2800      	cmp	r0, #0
   133cc:	dbd2      	blt.n	13374 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   133ce:	1e44      	subs	r4, r0, #1
   133d0:	2c01      	cmp	r4, #1
   133d2:	d9e7      	bls.n	133a4 <bt_gatt_attr_write_ccc+0x64>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   133d4:	f06f 000d 	mvn.w	r0, #13
   133d8:	e7cc      	b.n	13374 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   133da:	f06f 0006 	mvn.w	r0, #6
   133de:	e7c9      	b.n	13374 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   133e0:	f06f 000c 	mvn.w	r0, #12
   133e4:	e7c6      	b.n	13374 <bt_gatt_attr_write_ccc+0x34>
   133e6:	bf00      	nop
   133e8:	0002213b 	.word	0x0002213b

000133ec <cf_write>:
{
   133ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   133f0:	461f      	mov	r7, r3
   133f2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   133f6:	4680      	mov	r8, r0
	if (offset > sizeof(cfg->data)) {
   133f8:	2b01      	cmp	r3, #1
{
   133fa:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
   133fc:	d845      	bhi.n	1348a <cf_write+0x9e>
	if (offset + len > sizeof(cfg->data)) {
   133fe:	443b      	add	r3, r7
   13400:	2b01      	cmp	r3, #1
   13402:	463d      	mov	r5, r7
   13404:	dc44      	bgt.n	13490 <cf_write+0xa4>
	cfg = find_cf_cfg(conn);
   13406:	f7ff ff1d 	bl	13244 <find_cf_cfg>
	if (!cfg) {
   1340a:	4604      	mov	r4, r0
   1340c:	b918      	cbnz	r0, 13416 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   1340e:	f7ff ff19 	bl	13244 <find_cf_cfg>
	if (!cfg) {
   13412:	4604      	mov	r4, r0
   13414:	b1d8      	cbz	r0, 1344e <cf_write+0x62>
   13416:	4632      	mov	r2, r6
   13418:	f104 0008 	add.w	r0, r4, #8
   1341c:	eb07 0e06 	add.w	lr, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
   13420:	4596      	cmp	lr, r2
   13422:	d11d      	bne.n	13460 <cf_write+0x74>
	for (i = 0U; i < len && i < last_byte; i++) {
   13424:	b12f      	cbz	r7, 13432 <cf_write+0x46>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
   13426:	7833      	ldrb	r3, [r6, #0]
   13428:	7a22      	ldrb	r2, [r4, #8]
   1342a:	f003 0307 	and.w	r3, r3, #7
   1342e:	4313      	orrs	r3, r2
   13430:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   13432:	f108 0188 	add.w	r1, r8, #136	; 0x88
   13436:	1c60      	adds	r0, r4, #1
   13438:	f009 fc55 	bl	1cce6 <bt_addr_le_copy>
	cfg->id = conn->id;
   1343c:	4620      	mov	r0, r4
   1343e:	f898 3008 	ldrb.w	r3, [r8, #8]
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13442:	2101      	movs	r1, #1
   13444:	f800 3b0c 	strb.w	r3, [r0], #12
   13448:	f009 fc5e 	bl	1cd08 <atomic_or>
}
   1344c:	e005      	b.n	1345a <cf_write+0x6e>
		BT_WARN("No space to store Client Supported Features");
   1344e:	2157      	movs	r1, #87	; 0x57
   13450:	4812      	ldr	r0, [pc, #72]	; (1349c <cf_write+0xb0>)
   13452:	f007 fa0d 	bl	1a870 <printk>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   13456:	f06f 0510 	mvn.w	r5, #16
}
   1345a:	4628      	mov	r0, r5
   1345c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uint8_t chg_bits = value[i] ^ cfg->data[i];
   13460:	2300      	movs	r3, #0
   13462:	f812 1b01 	ldrb.w	r1, [r2], #1
   13466:	f810 cb01 	ldrb.w	ip, [r0], #1
   1346a:	ea81 010c 	eor.w	r1, r1, ip
			if ((BIT(bit) & chg_bits) &&
   1346e:	fa21 f903 	lsr.w	r9, r1, r3
   13472:	f019 0f01 	tst.w	r9, #1
   13476:	d004      	beq.n	13482 <cf_write+0x96>
   13478:	fa2c f903 	lsr.w	r9, ip, r3
   1347c:	f019 0f01 	tst.w	r9, #1
   13480:	d109      	bne.n	13496 <cf_write+0xaa>
		for (bit = 0U; bit <= last_bit; bit++) {
   13482:	3301      	adds	r3, #1
   13484:	2b03      	cmp	r3, #3
   13486:	d1f2      	bne.n	1346e <cf_write+0x82>
   13488:	e7ca      	b.n	13420 <cf_write+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1348a:	f06f 0506 	mvn.w	r5, #6
   1348e:	e7e4      	b.n	1345a <cf_write+0x6e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   13490:	f06f 050c 	mvn.w	r5, #12
   13494:	e7e1      	b.n	1345a <cf_write+0x6e>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   13496:	f06f 0512 	mvn.w	r5, #18
   1349a:	e7de      	b.n	1345a <cf_write+0x6e>
   1349c:	0002215a 	.word	0x0002215a

000134a0 <sc_store>:
{
   134a0:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   134a2:	4605      	mov	r5, r0
   134a4:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   134a8:	4604      	mov	r4, r0
   134aa:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   134ac:	b1ca      	cbz	r2, 134e2 <sc_store+0x42>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   134ae:	ae02      	add	r6, sp, #8
   134b0:	2104      	movs	r1, #4
   134b2:	4630      	mov	r0, r6
   134b4:	f007 f942 	bl	1a73c <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   134b8:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   134ba:	462b      	mov	r3, r5
   134bc:	2124      	movs	r1, #36	; 0x24
   134be:	4a0a      	ldr	r2, [pc, #40]	; (134e8 <sc_store+0x48>)
   134c0:	a803      	add	r0, sp, #12
   134c2:	f7fb f8bb 	bl	e63c <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   134c6:	2204      	movs	r2, #4
   134c8:	f104 0108 	add.w	r1, r4, #8
   134cc:	a803      	add	r0, sp, #12
   134ce:	f7f8 fa85 	bl	b9dc <settings_save_one>
	if (err) {
   134d2:	4602      	mov	r2, r0
   134d4:	b118      	cbz	r0, 134de <sc_store+0x3e>
		BT_ERR("failed to store SC (err %d)", err);
   134d6:	2145      	movs	r1, #69	; 0x45
   134d8:	4804      	ldr	r0, [pc, #16]	; (134ec <sc_store+0x4c>)
   134da:	f007 f9c9 	bl	1a870 <printk>
}
   134de:	b00c      	add	sp, #48	; 0x30
   134e0:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   134e2:	9200      	str	r2, [sp, #0]
   134e4:	e7e9      	b.n	134ba <sc_store+0x1a>
   134e6:	bf00      	nop
   134e8:	000224aa 	.word	0x000224aa
   134ec:	0002218b 	.word	0x0002218b

000134f0 <sc_save>:
{
   134f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   134f4:	4680      	mov	r8, r0
   134f6:	460f      	mov	r7, r1
   134f8:	4616      	mov	r6, r2
   134fa:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   134fc:	f7ff fec4 	bl	13288 <find_sc_cfg>
	if (!cfg) {
   13500:	4604      	mov	r4, r0
   13502:	b998      	cbnz	r0, 1352c <sc_save+0x3c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   13504:	4669      	mov	r1, sp
   13506:	9000      	str	r0, [sp, #0]
   13508:	f8cd 0003 	str.w	r0, [sp, #3]
   1350c:	f7ff febc 	bl	13288 <find_sc_cfg>
		if (!cfg) {
   13510:	4604      	mov	r4, r0
   13512:	b930      	cbnz	r0, 13522 <sc_save+0x32>
			BT_ERR("unable to save SC: no cfg left");
   13514:	2145      	movs	r1, #69	; 0x45
   13516:	4813      	ldr	r0, [pc, #76]	; (13564 <sc_save+0x74>)
   13518:	f007 f9aa 	bl	1a870 <printk>
}
   1351c:	b002      	add	sp, #8
   1351e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   13522:	4639      	mov	r1, r7
		cfg->id = id;
   13524:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   13528:	f009 fbdd 	bl	1cce6 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1352c:	8922      	ldrh	r2, [r4, #8]
   1352e:	8963      	ldrh	r3, [r4, #10]
   13530:	b97a      	cbnz	r2, 13552 <sc_save+0x62>
   13532:	b983      	cbnz	r3, 13556 <sc_save+0x66>
		cfg->data.start = start;
   13534:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   13536:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   13538:	4621      	mov	r1, r4
   1353a:	f811 0b01 	ldrb.w	r0, [r1], #1
   1353e:	f008 fda2 	bl	1c086 <bt_addr_le_is_bonded>
   13542:	2800      	cmp	r0, #0
   13544:	d0ea      	beq.n	1351c <sc_save+0x2c>
		sc_store(cfg);
   13546:	4620      	mov	r0, r4
}
   13548:	b002      	add	sp, #8
   1354a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   1354e:	f7ff bfa7 	b.w	134a0 <sc_store>
	if (new_start >= *start && new_end <= *end) {
   13552:	4296      	cmp	r6, r2
   13554:	d302      	bcc.n	1355c <sc_save+0x6c>
   13556:	429d      	cmp	r5, r3
   13558:	d8ed      	bhi.n	13536 <sc_save+0x46>
   1355a:	e7df      	b.n	1351c <sc_save+0x2c>
	if (*end < new_end) {
   1355c:	429d      	cmp	r5, r3
		*start = new_start;
   1355e:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   13560:	d9ea      	bls.n	13538 <sc_save+0x48>
   13562:	e7e8      	b.n	13536 <sc_save+0x46>
   13564:	000221ac 	.word	0x000221ac

00013568 <sc_set>:
{
   13568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1356c:	460e      	mov	r6, r1
   1356e:	4690      	mov	r8, r2
   13570:	4699      	mov	r9, r3
	if (!name) {
   13572:	4604      	mov	r4, r0
{
   13574:	b087      	sub	sp, #28
	if (!name) {
   13576:	b948      	cbnz	r0, 1358c <sc_set+0x24>
		BT_ERR("Insufficient number of arguments");
   13578:	2145      	movs	r1, #69	; 0x45
   1357a:	4829      	ldr	r0, [pc, #164]	; (13620 <sc_set+0xb8>)
   1357c:	f007 f978 	bl	1a870 <printk>
		return -EINVAL;
   13580:	f06f 0515 	mvn.w	r5, #21
}
   13584:	4628      	mov	r0, r5
   13586:	b007      	add	sp, #28
   13588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   1358c:	a902      	add	r1, sp, #8
   1358e:	f008 fc04 	bl	1bd9a <bt_settings_decode_key>
	if (err) {
   13592:	4605      	mov	r5, r0
   13594:	b128      	cbz	r0, 135a2 <sc_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   13596:	4622      	mov	r2, r4
   13598:	2145      	movs	r1, #69	; 0x45
   1359a:	4822      	ldr	r0, [pc, #136]	; (13624 <sc_set+0xbc>)
   1359c:	f007 f968 	bl	1a870 <printk>
   135a0:	e7ee      	b.n	13580 <sc_set+0x18>
	settings_name_next(name, &next);
   135a2:	4620      	mov	r0, r4
   135a4:	a901      	add	r1, sp, #4
   135a6:	f007 fc82 	bl	1aeae <settings_name_next>
	if (!next) {
   135aa:	9801      	ldr	r0, [sp, #4]
   135ac:	b1d8      	cbz	r0, 135e6 <sc_set+0x7e>
		id = strtol(next, NULL, 10);
   135ae:	220a      	movs	r2, #10
   135b0:	4629      	mov	r1, r5
   135b2:	f008 fad3 	bl	1bb5c <strtol>
   135b6:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
   135b8:	4638      	mov	r0, r7
   135ba:	a902      	add	r1, sp, #8
   135bc:	f7ff fe64 	bl	13288 <find_sc_cfg>
	if (!cfg && len_rd) {
   135c0:	4604      	mov	r4, r0
   135c2:	bb28      	cbnz	r0, 13610 <sc_set+0xa8>
   135c4:	2e00      	cmp	r6, #0
   135c6:	d0dd      	beq.n	13584 <sc_set+0x1c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   135c8:	a904      	add	r1, sp, #16
   135ca:	9004      	str	r0, [sp, #16]
   135cc:	f8cd 0013 	str.w	r0, [sp, #19]
   135d0:	f7ff fe5a 	bl	13288 <find_sc_cfg>
		if (!cfg) {
   135d4:	4604      	mov	r4, r0
   135d6:	b940      	cbnz	r0, 135ea <sc_set+0x82>
			BT_ERR("Unable to restore SC: no cfg left");
   135d8:	2145      	movs	r1, #69	; 0x45
   135da:	4813      	ldr	r0, [pc, #76]	; (13628 <sc_set+0xc0>)
   135dc:	f007 f948 	bl	1a870 <printk>
			return -ENOMEM;
   135e0:	f06f 050b 	mvn.w	r5, #11
   135e4:	e7ce      	b.n	13584 <sc_set+0x1c>
		id = BT_ID_DEFAULT;
   135e6:	462f      	mov	r7, r5
   135e8:	e7e6      	b.n	135b8 <sc_set+0x50>
		cfg->id = id;
   135ea:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   135ee:	a902      	add	r1, sp, #8
   135f0:	f009 fb79 	bl	1cce6 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   135f4:	f104 0108 	add.w	r1, r4, #8
   135f8:	2204      	movs	r2, #4
   135fa:	4648      	mov	r0, r9
   135fc:	47c0      	blx	r8
		if (len < 0) {
   135fe:	1e04      	subs	r4, r0, #0
   13600:	dac0      	bge.n	13584 <sc_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
   13602:	4622      	mov	r2, r4
   13604:	2145      	movs	r1, #69	; 0x45
   13606:	4809      	ldr	r0, [pc, #36]	; (1362c <sc_set+0xc4>)
   13608:	f007 f932 	bl	1a870 <printk>
			return len;
   1360c:	4625      	mov	r5, r4
   1360e:	e7b9      	b.n	13584 <sc_set+0x1c>
	if (len_rd) {
   13610:	2e00      	cmp	r6, #0
   13612:	d1ef      	bne.n	135f4 <sc_set+0x8c>
		memset(cfg, 0, sizeof(*cfg));
   13614:	220c      	movs	r2, #12
   13616:	4631      	mov	r1, r6
   13618:	f008 fb99 	bl	1bd4e <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   1361c:	e7b2      	b.n	13584 <sc_set+0x1c>
   1361e:	bf00      	nop
   13620:	000210d9 	.word	0x000210d9
   13624:	000221d0 	.word	0x000221d0
   13628:	000221f1 	.word	0x000221f1
   1362c:	000220e2 	.word	0x000220e2

00013630 <gatt_send.constprop.0>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
   13630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13634:	4606      	mov	r6, r0
   13636:	4688      	mov	r8, r1
   13638:	4617      	mov	r7, r2
	if (params) {
   1363a:	461c      	mov	r4, r3
   1363c:	b31b      	cbz	r3, 13686 <gatt_send.constprop.0+0x56>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1363e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   13642:	2100      	movs	r1, #0
   13644:	f7ff fc3a 	bl	12ebc <bt_att_req_alloc>
		if (!req) {
   13648:	4605      	mov	r5, r0
   1364a:	b920      	cbnz	r0, 13656 <gatt_send.constprop.0+0x26>
			return -ENOMEM;
   1364c:	f06f 040b 	mvn.w	r4, #11
}
   13650:	4620      	mov	r0, r4
   13652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		req->destroy = destroy;
   13656:	2300      	movs	r3, #0
		req->user_data = params;
   13658:	6144      	str	r4, [r0, #20]
		err = bt_att_req_send(conn, req);
   1365a:	4601      	mov	r1, r0
		req->buf = buf;
   1365c:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
   13660:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
   13662:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
   13664:	4630      	mov	r0, r6
   13666:	f7ff fd55 	bl	13114 <bt_att_req_send>
		if (err) {
   1366a:	4604      	mov	r4, r0
   1366c:	2800      	cmp	r0, #0
   1366e:	d0ef      	beq.n	13650 <gatt_send.constprop.0+0x20>
			bt_att_req_free(req);
   13670:	4628      	mov	r0, r5
   13672:	f7ff fc39 	bl	12ee8 <bt_att_req_free>
	if (err) {
   13676:	2c00      	cmp	r4, #0
   13678:	d0ea      	beq.n	13650 <gatt_send.constprop.0+0x20>
		BT_ERR("Error sending ATT PDU: %d", err);
   1367a:	4622      	mov	r2, r4
   1367c:	2145      	movs	r1, #69	; 0x45
   1367e:	4804      	ldr	r0, [pc, #16]	; (13690 <gatt_send.constprop.0+0x60>)
   13680:	f007 f8f6 	bl	1a870 <printk>
   13684:	e7e4      	b.n	13650 <gatt_send.constprop.0+0x20>
		err = bt_att_send(conn, buf, NULL, NULL);
   13686:	461a      	mov	r2, r3
   13688:	f7ff fcdc 	bl	13044 <bt_att_send>
   1368c:	4604      	mov	r4, r0
   1368e:	e7f2      	b.n	13676 <gatt_send.constprop.0+0x46>
   13690:	00022218 	.word	0x00022218

00013694 <cf_set>:
{
   13694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13698:	4689      	mov	r9, r1
   1369a:	4617      	mov	r7, r2
   1369c:	4698      	mov	r8, r3
	if (!name) {
   1369e:	4605      	mov	r5, r0
{
   136a0:	b085      	sub	sp, #20
	if (!name) {
   136a2:	b948      	cbnz	r0, 136b8 <cf_set+0x24>
		BT_ERR("Insufficient number of arguments");
   136a4:	2145      	movs	r1, #69	; 0x45
   136a6:	4826      	ldr	r0, [pc, #152]	; (13740 <cf_set+0xac>)
   136a8:	f007 f8e2 	bl	1a870 <printk>
		return -EINVAL;
   136ac:	f06f 0415 	mvn.w	r4, #21
}
   136b0:	4620      	mov	r0, r4
   136b2:	b005      	add	sp, #20
   136b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   136b8:	a902      	add	r1, sp, #8
   136ba:	f008 fb6e 	bl	1bd9a <bt_settings_decode_key>
	if (err) {
   136be:	4604      	mov	r4, r0
   136c0:	b128      	cbz	r0, 136ce <cf_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   136c2:	462a      	mov	r2, r5
   136c4:	2145      	movs	r1, #69	; 0x45
   136c6:	481f      	ldr	r0, [pc, #124]	; (13744 <cf_set+0xb0>)
   136c8:	f007 f8d2 	bl	1a870 <printk>
   136cc:	e7ee      	b.n	136ac <cf_set+0x18>
	settings_name_next(name, &next);
   136ce:	4628      	mov	r0, r5
   136d0:	a901      	add	r1, sp, #4
   136d2:	f007 fbec 	bl	1aeae <settings_name_next>
	if (!next) {
   136d6:	9801      	ldr	r0, [sp, #4]
   136d8:	b1a8      	cbz	r0, 13706 <cf_set+0x72>
		id = strtol(next, NULL, 10);
   136da:	220a      	movs	r2, #10
   136dc:	4621      	mov	r1, r4
   136de:	f008 fa3d 	bl	1bb5c <strtol>
   136e2:	b2c6      	uxtb	r6, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
   136e4:	4630      	mov	r0, r6
   136e6:	a902      	add	r1, sp, #8
   136e8:	f7ff fe0c 	bl	13304 <find_cf_cfg_by_addr>
	if (!cfg) {
   136ec:	4605      	mov	r5, r0
   136ee:	b988      	cbnz	r0, 13714 <cf_set+0x80>
		cfg = find_cf_cfg(NULL);
   136f0:	f7ff fda8 	bl	13244 <find_cf_cfg>
		if (!cfg) {
   136f4:	4605      	mov	r5, r0
   136f6:	b940      	cbnz	r0, 1370a <cf_set+0x76>
			BT_ERR("Unable to restore CF: no cfg left");
   136f8:	2145      	movs	r1, #69	; 0x45
   136fa:	4813      	ldr	r0, [pc, #76]	; (13748 <cf_set+0xb4>)
   136fc:	f007 f8b8 	bl	1a870 <printk>
			return -ENOMEM;
   13700:	f06f 040b 	mvn.w	r4, #11
   13704:	e7d4      	b.n	136b0 <cf_set+0x1c>
		id = BT_ID_DEFAULT;
   13706:	4626      	mov	r6, r4
   13708:	e7ec      	b.n	136e4 <cf_set+0x50>
		cfg->id = id;
   1370a:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1370e:	a902      	add	r1, sp, #8
   13710:	f009 fae9 	bl	1cce6 <bt_addr_le_copy>
	if (len_rd) {
   13714:	f1b9 0f00 	cmp.w	r9, #0
   13718:	d00d      	beq.n	13736 <cf_set+0xa2>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   1371a:	f105 0108 	add.w	r1, r5, #8
   1371e:	2201      	movs	r2, #1
   13720:	4640      	mov	r0, r8
   13722:	47b8      	blx	r7
		if (len < 0) {
   13724:	1e05      	subs	r5, r0, #0
   13726:	dac3      	bge.n	136b0 <cf_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
   13728:	462a      	mov	r2, r5
   1372a:	2145      	movs	r1, #69	; 0x45
   1372c:	4807      	ldr	r0, [pc, #28]	; (1374c <cf_set+0xb8>)
   1372e:	f007 f89f 	bl	1a870 <printk>
			return len;
   13732:	462c      	mov	r4, r5
   13734:	e7bc      	b.n	136b0 <cf_set+0x1c>
		clear_cf_cfg(cfg);
   13736:	4628      	mov	r0, r5
   13738:	f009 fb1b 	bl	1cd72 <clear_cf_cfg>
   1373c:	e7b8      	b.n	136b0 <cf_set+0x1c>
   1373e:	bf00      	nop
   13740:	000210d9 	.word	0x000210d9
   13744:	000221d0 	.word	0x000221d0
   13748:	00022237 	.word	0x00022237
   1374c:	000220e2 	.word	0x000220e2

00013750 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   13750:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   13752:	6881      	ldr	r1, [r0, #8]
{
   13754:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13756:	4a07      	ldr	r2, [pc, #28]	; (13774 <remove_peer_from_attr+0x24>)
   13758:	4291      	cmp	r1, r2
   1375a:	d109      	bne.n	13770 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   1375c:	791a      	ldrb	r2, [r3, #4]
   1375e:	6819      	ldr	r1, [r3, #0]
   13760:	68c0      	ldr	r0, [r0, #12]
   13762:	f009 faa6 	bl	1ccb2 <ccc_find_cfg>
	if (cfg) {
   13766:	b118      	cbz	r0, 13770 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   13768:	220a      	movs	r2, #10
   1376a:	2100      	movs	r1, #0
   1376c:	f008 faef 	bl	1bd4e <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   13770:	2001      	movs	r0, #1
   13772:	bd08      	pop	{r3, pc}
   13774:	00013341 	.word	0x00013341

00013778 <ccc_load>:
{
   13778:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1377a:	4b21      	ldr	r3, [pc, #132]	; (13800 <ccc_load+0x88>)
{
   1377c:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1377e:	6882      	ldr	r2, [r0, #8]
   13780:	429a      	cmp	r2, r3
   13782:	d002      	beq.n	1378a <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   13784:	2001      	movs	r0, #1
}
   13786:	b002      	add	sp, #8
   13788:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   1378a:	68a3      	ldr	r3, [r4, #8]
   1378c:	68c6      	ldr	r6, [r0, #12]
   1378e:	b94b      	cbnz	r3, 137a4 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   13790:	4630      	mov	r0, r6
   13792:	7922      	ldrb	r2, [r4, #4]
   13794:	6821      	ldr	r1, [r4, #0]
   13796:	f009 fa8c 	bl	1ccb2 <ccc_find_cfg>
	if (!cfg) {
   1379a:	2800      	cmp	r0, #0
   1379c:	d0f2      	beq.n	13784 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   1379e:	f009 faa5 	bl	1ccec <clear_ccc_cfg>
   137a2:	e7ef      	b.n	13784 <ccc_load+0xc>
	} else if (!load->count) {
   137a4:	68e0      	ldr	r0, [r4, #12]
   137a6:	2800      	cmp	r0, #0
   137a8:	d0ed      	beq.n	13786 <ccc_load+0xe>
	if (load->entry->handle != handle) {
   137aa:	881b      	ldrh	r3, [r3, #0]
   137ac:	4299      	cmp	r1, r3
   137ae:	d00a      	beq.n	137c6 <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   137b0:	d9e8      	bls.n	13784 <ccc_load+0xc>
	load->count--;
   137b2:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   137b4:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   137b6:	3801      	subs	r0, #1
	load->entry++;
   137b8:	3304      	adds	r3, #4
	load->count--;
   137ba:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   137bc:	3800      	subs	r0, #0
   137be:	bf18      	it	ne
   137c0:	2001      	movne	r0, #1
	load->entry++;
   137c2:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   137c4:	e7df      	b.n	13786 <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   137c6:	4630      	mov	r0, r6
   137c8:	7922      	ldrb	r2, [r4, #4]
   137ca:	6821      	ldr	r1, [r4, #0]
   137cc:	f009 fa71 	bl	1ccb2 <ccc_find_cfg>
	if (!cfg) {
   137d0:	4605      	mov	r5, r0
   137d2:	b980      	cbnz	r0, 137f6 <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   137d4:	9000      	str	r0, [sp, #0]
   137d6:	4602      	mov	r2, r0
   137d8:	f8cd 0003 	str.w	r0, [sp, #3]
   137dc:	4669      	mov	r1, sp
   137de:	4630      	mov	r0, r6
   137e0:	f009 fa67 	bl	1ccb2 <ccc_find_cfg>
		if (!cfg) {
   137e4:	4605      	mov	r5, r0
   137e6:	2800      	cmp	r0, #0
   137e8:	d0e3      	beq.n	137b2 <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   137ea:	6821      	ldr	r1, [r4, #0]
   137ec:	3001      	adds	r0, #1
   137ee:	f009 fa7a 	bl	1cce6 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   137f2:	7923      	ldrb	r3, [r4, #4]
   137f4:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   137f6:	68a3      	ldr	r3, [r4, #8]
   137f8:	885b      	ldrh	r3, [r3, #2]
   137fa:	812b      	strh	r3, [r5, #8]
   137fc:	e7d9      	b.n	137b2 <ccc_load+0x3a>
   137fe:	bf00      	nop
   13800:	00013341 	.word	0x00013341

00013804 <ccc_save>:
{
   13804:	b538      	push	{r3, r4, r5, lr}
   13806:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13808:	4b0b      	ldr	r3, [pc, #44]	; (13838 <ccc_save+0x34>)
   1380a:	6882      	ldr	r2, [r0, #8]
{
   1380c:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   1380e:	429a      	cmp	r2, r3
   13810:	d10f      	bne.n	13832 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   13812:	7922      	ldrb	r2, [r4, #4]
   13814:	6821      	ldr	r1, [r4, #0]
   13816:	68c0      	ldr	r0, [r0, #12]
   13818:	f009 fa4b 	bl	1ccb2 <ccc_find_cfg>
	if (!cfg) {
   1381c:	b148      	cbz	r0, 13832 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   1381e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   13822:	8901      	ldrh	r1, [r0, #8]
   13824:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   13828:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   1382a:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   1382c:	8151      	strh	r1, [r2, #10]
	save->count++;
   1382e:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   13832:	2001      	movs	r0, #1
   13834:	bd38      	pop	{r3, r4, r5, pc}
   13836:	bf00      	nop
   13838:	00013341 	.word	0x00013341

0001383c <gatt_indicate>:
{
   1383c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13840:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
   13842:	8a92      	ldrh	r2, [r2, #20]
{
   13844:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   13846:	3202      	adds	r2, #2
   13848:	211d      	movs	r1, #29
{
   1384a:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   1384c:	f7ff f8b6 	bl	129bc <bt_att_create_pdu>
	if (!buf) {
   13850:	4605      	mov	r5, r0
   13852:	b1e8      	cbz	r0, 13890 <gatt_indicate+0x54>
	return net_buf_simple_add(&buf->b, len);
   13854:	f100 0808 	add.w	r8, r0, #8
   13858:	2102      	movs	r1, #2
   1385a:	4640      	mov	r0, r8
   1385c:	f002 f8a8 	bl	159b0 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   13860:	4606      	mov	r6, r0
   13862:	8aa1      	ldrh	r1, [r4, #20]
   13864:	f826 9b02 	strh.w	r9, [r6], #2
   13868:	4640      	mov	r0, r8
   1386a:	f002 f8a1 	bl	159b0 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1386e:	4630      	mov	r0, r6
   13870:	8aa2      	ldrh	r2, [r4, #20]
   13872:	6921      	ldr	r1, [r4, #16]
   13874:	f008 fa40 	bl	1bcf8 <memcpy>
	if (!params->func) {
   13878:	68a3      	ldr	r3, [r4, #8]
   1387a:	b933      	cbnz	r3, 1388a <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
   1387c:	461a      	mov	r2, r3
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
   1387e:	4629      	mov	r1, r5
   13880:	4638      	mov	r0, r7
}
   13882:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
   13886:	f7ff bed3 	b.w	13630 <gatt_send.constprop.0>
   1388a:	4623      	mov	r3, r4
   1388c:	4a04      	ldr	r2, [pc, #16]	; (138a0 <gatt_indicate+0x64>)
   1388e:	e7f6      	b.n	1387e <gatt_indicate+0x42>
		BT_WARN("No buffer available to send indication");
   13890:	2157      	movs	r1, #87	; 0x57
   13892:	4804      	ldr	r0, [pc, #16]	; (138a4 <gatt_indicate+0x68>)
   13894:	f006 ffec 	bl	1a870 <printk>
}
   13898:	f06f 000b 	mvn.w	r0, #11
   1389c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   138a0:	0001cb93 	.word	0x0001cb93
   138a4:	0002225e 	.word	0x0002225e

000138a8 <gatt_notify>:
{
   138a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   138ac:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
   138ae:	8992      	ldrh	r2, [r2, #12]
{
   138b0:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   138b2:	3202      	adds	r2, #2
   138b4:	211b      	movs	r1, #27
{
   138b6:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   138b8:	f7ff f880 	bl	129bc <bt_att_create_pdu>
	if (!buf) {
   138bc:	4605      	mov	r5, r0
   138be:	b1c8      	cbz	r0, 138f4 <gatt_notify+0x4c>
   138c0:	f100 0908 	add.w	r9, r0, #8
   138c4:	2102      	movs	r1, #2
   138c6:	4648      	mov	r0, r9
   138c8:	f002 f872 	bl	159b0 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   138cc:	4606      	mov	r6, r0
   138ce:	89a1      	ldrh	r1, [r4, #12]
   138d0:	f826 8b02 	strh.w	r8, [r6], #2
   138d4:	4648      	mov	r0, r9
   138d6:	f002 f86b 	bl	159b0 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   138da:	89a2      	ldrh	r2, [r4, #12]
   138dc:	68a1      	ldr	r1, [r4, #8]
   138de:	4630      	mov	r0, r6
   138e0:	f008 fa0a 	bl	1bcf8 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   138e4:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   138e8:	4629      	mov	r1, r5
   138ea:	4638      	mov	r0, r7
}
   138ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   138f0:	f7ff bba8 	b.w	13044 <bt_att_send>
		BT_WARN("No buffer available to send notification");
   138f4:	2157      	movs	r1, #87	; 0x57
   138f6:	4803      	ldr	r0, [pc, #12]	; (13904 <gatt_notify+0x5c>)
   138f8:	f006 ffba 	bl	1a870 <printk>
}
   138fc:	f06f 000b 	mvn.w	r0, #11
   13900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13904:	0002228a 	.word	0x0002228a

00013908 <notify_cb>:
{
   13908:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1390c:	4b38      	ldr	r3, [pc, #224]	; (139f0 <notify_cb+0xe8>)
{
   1390e:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13910:	6882      	ldr	r2, [r0, #8]
{
   13912:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   13914:	429a      	cmp	r2, r3
   13916:	d003      	beq.n	13920 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
   13918:	2001      	movs	r0, #1
}
   1391a:	b003      	add	sp, #12
   1391c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
   13920:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   13924:	4b33      	ldr	r3, [pc, #204]	; (139f4 <notify_cb+0xec>)
   13926:	4599      	cmp	r9, r3
   13928:	d01a      	beq.n	13960 <notify_cb+0x58>
   1392a:	f04f 0b00 	mov.w	fp, #0
   1392e:	f109 0701 	add.w	r7, r9, #1
   13932:	f109 0a65 	add.w	sl, r9, #101	; 0x65
		if (cfg->value != data->type) {
   13936:	f8b7 2007 	ldrh.w	r2, [r7, #7]
   1393a:	89a3      	ldrh	r3, [r4, #12]
   1393c:	429a      	cmp	r2, r3
   1393e:	d10b      	bne.n	13958 <notify_cb+0x50>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   13940:	4639      	mov	r1, r7
   13942:	f817 0c01 	ldrb.w	r0, [r7, #-1]
   13946:	f7fd feab 	bl	116a0 <bt_conn_lookup_addr_le>
		if (!conn) {
   1394a:	4605      	mov	r5, r0
   1394c:	b120      	cbz	r0, 13958 <notify_cb+0x50>
		if (conn->state != BT_CONN_CONNECTED) {
   1394e:	7a83      	ldrb	r3, [r0, #10]
   13950:	2b07      	cmp	r3, #7
   13952:	d029      	beq.n	139a8 <notify_cb+0xa0>
			bt_conn_unref(conn);
   13954:	f7fd fd82 	bl	1145c <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   13958:	370a      	adds	r7, #10
   1395a:	4557      	cmp	r7, sl
   1395c:	d1eb      	bne.n	13936 <notify_cb+0x2e>
   1395e:	e7db      	b.n	13918 <notify_cb+0x10>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   13960:	2600      	movs	r6, #0
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   13962:	4637      	mov	r7, r6
   13964:	4d24      	ldr	r5, [pc, #144]	; (139f8 <notify_cb+0xf0>)
   13966:	4669      	mov	r1, sp
   13968:	4628      	mov	r0, r5
   1396a:	9700      	str	r7, [sp, #0]
   1396c:	f8cd 7003 	str.w	r7, [sp, #3]
   13970:	f009 f97d 	bl	1cc6e <bt_addr_le_cmp>
   13974:	b178      	cbz	r0, 13996 <notify_cb+0x8e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   13976:	2207      	movs	r2, #7
   13978:	4629      	mov	r1, r5
   1397a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   1397e:	f7fd fecf 	bl	11720 <bt_conn_lookup_state_le>
			if (!conn) {
   13982:	b970      	cbnz	r0, 139a2 <notify_cb+0x9a>
				sc = (struct sc_data *)data->ind_params->data;
   13984:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   13986:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   13988:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1398a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   1398e:	8853      	ldrh	r3, [r2, #2]
   13990:	8812      	ldrh	r2, [r2, #0]
   13992:	f7ff fdad 	bl	134f0 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   13996:	3601      	adds	r6, #1
   13998:	2e14      	cmp	r6, #20
   1399a:	f105 050c 	add.w	r5, r5, #12
   1399e:	d1e2      	bne.n	13966 <notify_cb+0x5e>
   139a0:	e7c3      	b.n	1392a <notify_cb+0x22>
			bt_conn_unref(conn);
   139a2:	f7fd fd5b 	bl	1145c <bt_conn_unref>
   139a6:	e7f6      	b.n	13996 <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   139a8:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
   139ac:	b123      	cbz	r3, 139b8 <notify_cb+0xb0>
   139ae:	4641      	mov	r1, r8
   139b0:	4798      	blx	r3
   139b2:	b908      	cbnz	r0, 139b8 <notify_cb+0xb0>
			bt_conn_unref(conn);
   139b4:	4628      	mov	r0, r5
   139b6:	e7cd      	b.n	13954 <notify_cb+0x4c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   139b8:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
   139ba:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   139bc:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   139be:	88a1      	ldrh	r1, [r4, #4]
   139c0:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
   139c2:	d10f      	bne.n	139e4 <notify_cb+0xdc>
			err = gatt_indicate(conn, data->handle,
   139c4:	f7ff ff3a 	bl	1383c <gatt_indicate>
			if (err == 0) {
   139c8:	4606      	mov	r6, r0
   139ca:	b918      	cbnz	r0, 139d4 <notify_cb+0xcc>
				data->ind_params->_ref++;
   139cc:	6922      	ldr	r2, [r4, #16]
   139ce:	7d93      	ldrb	r3, [r2, #22]
   139d0:	3301      	adds	r3, #1
   139d2:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   139d4:	4628      	mov	r0, r5
   139d6:	f7fd fd41 	bl	1145c <bt_conn_unref>
		if (err < 0) {
   139da:	2e00      	cmp	r6, #0
   139dc:	db06      	blt.n	139ec <notify_cb+0xe4>
		data->err = 0;
   139de:	f8c4 b008 	str.w	fp, [r4, #8]
   139e2:	e7b9      	b.n	13958 <notify_cb+0x50>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   139e4:	f7ff ff60 	bl	138a8 <gatt_notify>
   139e8:	4606      	mov	r6, r0
   139ea:	e7f3      	b.n	139d4 <notify_cb+0xcc>
			return BT_GATT_ITER_STOP;
   139ec:	2000      	movs	r0, #0
   139ee:	e794      	b.n	1391a <notify_cb+0x12>
   139f0:	00013341 	.word	0x00013341
   139f4:	2000847c 	.word	0x2000847c
   139f8:	2000f1ab 	.word	0x2000f1ab

000139fc <bt_gatt_clear_sc>:
{
   139fc:	b570      	push	{r4, r5, r6, lr}
   139fe:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   13a00:	f7ff fc42 	bl	13288 <find_sc_cfg>
	if (!cfg) {
   13a04:	4604      	mov	r4, r0
   13a06:	b1e8      	cbz	r0, 13a44 <bt_gatt_clear_sc+0x48>
		if (cfg->id) {
   13a08:	4605      	mov	r5, r0
   13a0a:	f815 2b01 	ldrb.w	r2, [r5], #1
   13a0e:	b1e2      	cbz	r2, 13a4a <bt_gatt_clear_sc+0x4e>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   13a10:	ae02      	add	r6, sp, #8
   13a12:	2104      	movs	r1, #4
   13a14:	4630      	mov	r0, r6
   13a16:	f006 fe91 	bl	1a73c <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   13a1a:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   13a1c:	4a0c      	ldr	r2, [pc, #48]	; (13a50 <bt_gatt_clear_sc+0x54>)
   13a1e:	462b      	mov	r3, r5
   13a20:	2124      	movs	r1, #36	; 0x24
   13a22:	a803      	add	r0, sp, #12
   13a24:	f7fa fe0a 	bl	e63c <bt_settings_encode_key>
		err = settings_delete(key);
   13a28:	a803      	add	r0, sp, #12
   13a2a:	f007 fa19 	bl	1ae60 <settings_delete>
		if (err) {
   13a2e:	4602      	mov	r2, r0
   13a30:	b118      	cbz	r0, 13a3a <bt_gatt_clear_sc+0x3e>
			BT_ERR("failed to delete SC (err %d)", err);
   13a32:	2145      	movs	r1, #69	; 0x45
   13a34:	4807      	ldr	r0, [pc, #28]	; (13a54 <bt_gatt_clear_sc+0x58>)
   13a36:	f006 ff1b 	bl	1a870 <printk>
	memset(cfg, 0, sizeof(*cfg));
   13a3a:	220c      	movs	r2, #12
   13a3c:	2100      	movs	r1, #0
   13a3e:	4620      	mov	r0, r4
   13a40:	f008 f985 	bl	1bd4e <memset>
}
   13a44:	2000      	movs	r0, #0
   13a46:	b00c      	add	sp, #48	; 0x30
   13a48:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   13a4a:	9200      	str	r2, [sp, #0]
   13a4c:	e7e6      	b.n	13a1c <bt_gatt_clear_sc+0x20>
   13a4e:	bf00      	nop
   13a50:	000224aa 	.word	0x000224aa
   13a54:	000222b8 	.word	0x000222b8

00013a58 <sc_clear>:
{
   13a58:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13a5a:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   13a5e:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13a60:	4631      	mov	r1, r6
   13a62:	7a00      	ldrb	r0, [r0, #8]
   13a64:	f008 fb0f 	bl	1c086 <bt_addr_le_is_bonded>
   13a68:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   13a6a:	4631      	mov	r1, r6
   13a6c:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13a6e:	b14d      	cbz	r5, 13a84 <sc_clear+0x2c>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   13a70:	f7ff ffc4 	bl	139fc <bt_gatt_clear_sc>
		if (err) {
   13a74:	4602      	mov	r2, r0
   13a76:	b170      	cbz	r0, 13a96 <sc_clear+0x3e>
}
   13a78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
   13a7c:	2145      	movs	r1, #69	; 0x45
   13a7e:	4806      	ldr	r0, [pc, #24]	; (13a98 <sc_clear+0x40>)
   13a80:	f006 bef6 	b.w	1a870 <printk>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   13a84:	f7ff fc00 	bl	13288 <find_sc_cfg>
		if (cfg) {
   13a88:	b128      	cbz	r0, 13a96 <sc_clear+0x3e>
	memset(cfg, 0, sizeof(*cfg));
   13a8a:	4629      	mov	r1, r5
}
   13a8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   13a90:	220c      	movs	r2, #12
   13a92:	f008 b95c 	b.w	1bd4e <memset>
}
   13a96:	bd70      	pop	{r4, r5, r6, pc}
   13a98:	000222da 	.word	0x000222da

00013a9c <disconnected_cb>:
{
   13a9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13aa0:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13aa2:	4b26      	ldr	r3, [pc, #152]	; (13b3c <disconnected_cb+0xa0>)
   13aa4:	6882      	ldr	r2, [r0, #8]
{
   13aa6:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   13aa8:	429a      	cmp	r2, r3
   13aaa:	d130      	bne.n	13b0e <disconnected_cb+0x72>
	ccc = attr->user_data;
   13aac:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
   13aae:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
   13ab2:	b363      	cbz	r3, 13b0e <disconnected_cb+0x72>
	value_used = false;
   13ab4:	f04f 0800 	mov.w	r8, #0
				if (ccc == &sc_ccc) {
   13ab8:	f8df b084 	ldr.w	fp, [pc, #132]	; 13b40 <disconnected_cb+0xa4>
   13abc:	1c6c      	adds	r4, r5, #1
   13abe:	f105 0a65 	add.w	sl, r5, #101	; 0x65
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13ac2:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
   13ac6:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   13aca:	b19b      	cbz	r3, 13af4 <disconnected_cb+0x58>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   13acc:	4622      	mov	r2, r4
   13ace:	4630      	mov	r0, r6
   13ad0:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   13ad4:	f008 fb6b 	bl	1c1ae <bt_conn_is_peer_addr_le>
   13ad8:	b9e0      	cbnz	r0, 13b14 <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   13ada:	4621      	mov	r1, r4
   13adc:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   13ae0:	f7fd fdde 	bl	116a0 <bt_conn_lookup_addr_le>
			if (tmp) {
   13ae4:	b130      	cbz	r0, 13af4 <disconnected_cb+0x58>
				if (tmp->state == BT_CONN_CONNECTED) {
   13ae6:	7a83      	ldrb	r3, [r0, #10]
					value_used = true;
   13ae8:	2b07      	cmp	r3, #7
   13aea:	bf08      	it	eq
   13aec:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
   13af0:	f7fd fcb4 	bl	1145c <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   13af4:	340a      	adds	r4, #10
   13af6:	45a2      	cmp	sl, r4
   13af8:	d1e5      	bne.n	13ac6 <disconnected_cb+0x2a>
	if (!value_used) {
   13afa:	f1b8 0f00 	cmp.w	r8, #0
   13afe:	d106      	bne.n	13b0e <disconnected_cb+0x72>
		if (ccc->cfg_changed) {
   13b00:	6eab      	ldr	r3, [r5, #104]	; 0x68
		ccc->value = 0U;
   13b02:	f8a5 8064 	strh.w	r8, [r5, #100]	; 0x64
		if (ccc->cfg_changed) {
   13b06:	b113      	cbz	r3, 13b0e <disconnected_cb+0x72>
			ccc->cfg_changed(attr, ccc->value);
   13b08:	4641      	mov	r1, r8
   13b0a:	4638      	mov	r0, r7
   13b0c:	4798      	blx	r3
}
   13b0e:	2001      	movs	r0, #1
   13b10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13b14:	4649      	mov	r1, r9
   13b16:	7a30      	ldrb	r0, [r6, #8]
   13b18:	f008 fab5 	bl	1c086 <bt_addr_le_is_bonded>
   13b1c:	b940      	cbnz	r0, 13b30 <disconnected_cb+0x94>
				if (ccc == &sc_ccc) {
   13b1e:	455d      	cmp	r5, fp
   13b20:	d102      	bne.n	13b28 <disconnected_cb+0x8c>
					sc_clear(conn);
   13b22:	4630      	mov	r0, r6
   13b24:	f7ff ff98 	bl	13a58 <sc_clear>
				clear_ccc_cfg(cfg);
   13b28:	1e60      	subs	r0, r4, #1
   13b2a:	f009 f8df 	bl	1ccec <clear_ccc_cfg>
   13b2e:	e7e1      	b.n	13af4 <disconnected_cb+0x58>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   13b30:	4649      	mov	r1, r9
   13b32:	4620      	mov	r0, r4
   13b34:	f009 f8d7 	bl	1cce6 <bt_addr_le_copy>
   13b38:	e7dc      	b.n	13af4 <disconnected_cb+0x58>
   13b3a:	bf00      	nop
   13b3c:	00013341 	.word	0x00013341
   13b40:	2000847c 	.word	0x2000847c

00013b44 <sc_commit>:
{
   13b44:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13b46:	490b      	ldr	r1, [pc, #44]	; (13b74 <sc_commit+0x30>)
   13b48:	e8d1 3fef 	ldaex	r3, [r1]
   13b4c:	f023 0302 	bic.w	r3, r3, #2
   13b50:	e8c1 3fe2 	stlex	r2, r3, [r1]
   13b54:	2a00      	cmp	r2, #0
   13b56:	d1f7      	bne.n	13b48 <sc_commit+0x4>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13b58:	4608      	mov	r0, r1
   13b5a:	f009 f8e0 	bl	1cd1e <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   13b5e:	07c3      	lsls	r3, r0, #31
   13b60:	d506      	bpl.n	13b70 <sc_commit+0x2c>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13b62:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13b66:	2300      	movs	r3, #0
   13b68:	4803      	ldr	r0, [pc, #12]	; (13b78 <sc_commit+0x34>)
   13b6a:	3930      	subs	r1, #48	; 0x30
   13b6c:	f005 ff0a 	bl	19984 <k_delayed_work_submit_to_queue>
}
   13b70:	2000      	movs	r0, #0
   13b72:	bd08      	pop	{r3, pc}
   13b74:	20009c68 	.word	0x20009c68
   13b78:	2000a540 	.word	0x2000a540

00013b7c <gatt_write_ccc.constprop.0>:
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
   13b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13b80:	4688      	mov	r8, r1
   13b82:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
   13b84:	2112      	movs	r1, #18
   13b86:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
   13b88:	4606      	mov	r6, r0
   13b8a:	461d      	mov	r5, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
   13b8c:	f7fe ff16 	bl	129bc <bt_att_create_pdu>
	if (!buf) {
   13b90:	4604      	mov	r4, r0
   13b92:	b1c0      	cbz	r0, 13bc6 <gatt_write_ccc.constprop.0+0x4a>
   13b94:	f100 0908 	add.w	r9, r0, #8
   13b98:	2102      	movs	r1, #2
   13b9a:	4648      	mov	r0, r9
   13b9c:	f001 ff08 	bl	159b0 <net_buf_simple_add>
	net_buf_simple_add_le16(&buf->b, val);
   13ba0:	4639      	mov	r1, r7
	req->handle = sys_cpu_to_le16(handle);
   13ba2:	f8a0 8000 	strh.w	r8, [r0]
   13ba6:	4648      	mov	r0, r9
   13ba8:	f009 fbf7 	bl	1d39a <net_buf_simple_add_le16>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13bac:	2104      	movs	r1, #4
   13bae:	f105 0010 	add.w	r0, r5, #16
   13bb2:	f009 f8a9 	bl	1cd08 <atomic_or>
	return gatt_send(conn, buf, func, params, NULL);
   13bb6:	462b      	mov	r3, r5
   13bb8:	4621      	mov	r1, r4
   13bba:	4630      	mov	r0, r6
}
   13bbc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
   13bc0:	4a03      	ldr	r2, [pc, #12]	; (13bd0 <gatt_write_ccc.constprop.0+0x54>)
   13bc2:	f7ff bd35 	b.w	13630 <gatt_send.constprop.0>
}
   13bc6:	f06f 000b 	mvn.w	r0, #11
   13bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13bce:	bf00      	nop
   13bd0:	0001ce01 	.word	0x0001ce01

00013bd4 <sc_indicate_rsp>:
{
   13bd4:	b510      	push	{r4, lr}
   13bd6:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13bd8:	4910      	ldr	r1, [pc, #64]	; (13c1c <sc_indicate_rsp+0x48>)
   13bda:	e8d1 3fef 	ldaex	r3, [r1]
   13bde:	f023 0302 	bic.w	r3, r3, #2
   13be2:	e8c1 3fe2 	stlex	r2, r3, [r1]
   13be6:	2a00      	cmp	r2, #0
   13be8:	d1f7      	bne.n	13bda <sc_indicate_rsp+0x6>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13bea:	4608      	mov	r0, r1
   13bec:	f009 f897 	bl	1cd1e <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   13bf0:	07c2      	lsls	r2, r0, #31
   13bf2:	d505      	bpl.n	13c00 <sc_indicate_rsp+0x2c>
   13bf4:	2200      	movs	r2, #0
   13bf6:	2300      	movs	r3, #0
   13bf8:	4809      	ldr	r0, [pc, #36]	; (13c20 <sc_indicate_rsp+0x4c>)
   13bfa:	3930      	subs	r1, #48	; 0x30
   13bfc:	f005 fec2 	bl	19984 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
   13c00:	4620      	mov	r0, r4
   13c02:	f7ff fb1f 	bl	13244 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   13c06:	b140      	cbz	r0, 13c1a <sc_indicate_rsp+0x46>
   13c08:	7a03      	ldrb	r3, [r0, #8]
   13c0a:	07db      	lsls	r3, r3, #31
   13c0c:	d505      	bpl.n	13c1a <sc_indicate_rsp+0x46>
}
   13c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13c12:	2101      	movs	r1, #1
   13c14:	300c      	adds	r0, #12
   13c16:	f009 b877 	b.w	1cd08 <atomic_or>
   13c1a:	bd10      	pop	{r4, pc}
   13c1c:	20009c68 	.word	0x20009c68
   13c20:	2000a540 	.word	0x2000a540

00013c24 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13c24:	2201      	movs	r2, #1
{
   13c26:	b570      	push	{r4, r5, r6, lr}
   13c28:	4b26      	ldr	r3, [pc, #152]	; (13cc4 <bt_gatt_init+0xa0>)
   13c2a:	e8d3 1fef 	ldaex	r1, [r3]
   13c2e:	2900      	cmp	r1, #0
   13c30:	d103      	bne.n	13c3a <bt_gatt_init+0x16>
   13c32:	e8c3 2fe0 	stlex	r0, r2, [r3]
   13c36:	2800      	cmp	r0, #0
   13c38:	d1f7      	bne.n	13c2a <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   13c3a:	d142      	bne.n	13cc2 <bt_gatt_init+0x9e>
   13c3c:	4b22      	ldr	r3, [pc, #136]	; (13cc8 <bt_gatt_init+0xa4>)
   13c3e:	e8d3 1fef 	ldaex	r1, [r3]
   13c42:	2900      	cmp	r1, #0
   13c44:	d103      	bne.n	13c4e <bt_gatt_init+0x2a>
   13c46:	e8c3 2fe0 	stlex	r0, r2, [r3]
   13c4a:	2800      	cmp	r0, #0
   13c4c:	d1f7      	bne.n	13c3e <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   13c4e:	d034      	beq.n	13cba <bt_gatt_init+0x96>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   13c50:	4c1e      	ldr	r4, [pc, #120]	; (13ccc <bt_gatt_init+0xa8>)
   13c52:	2230      	movs	r2, #48	; 0x30
   13c54:	2100      	movs	r1, #0
   13c56:	4620      	mov	r0, r4
   13c58:	f008 f879 	bl	1bd4e <memset>
   13c5c:	4b1c      	ldr	r3, [pc, #112]	; (13cd0 <bt_gatt_init+0xac>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13c5e:	4621      	mov	r1, r4
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   13c60:	6063      	str	r3, [r4, #4]
   13c62:	4c1c      	ldr	r4, [pc, #112]	; (13cd4 <bt_gatt_init+0xb0>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13c64:	2300      	movs	r3, #0
   13c66:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13c6a:	481b      	ldr	r0, [pc, #108]	; (13cd8 <bt_gatt_init+0xb4>)
   13c6c:	f005 fe8a 	bl	19984 <k_delayed_work_submit_to_queue>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   13c70:	2100      	movs	r1, #0
   13c72:	f104 0020 	add.w	r0, r4, #32
   13c76:	2230      	movs	r2, #48	; 0x30
   13c78:	f008 f869 	bl	1bd4e <memset>
   13c7c:	4b17      	ldr	r3, [pc, #92]	; (13cdc <bt_gatt_init+0xb8>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13c7e:	f104 0050 	add.w	r0, r4, #80	; 0x50
   13c82:	6263      	str	r3, [r4, #36]	; 0x24
   13c84:	2102      	movs	r1, #2
}
   13c86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13c8a:	f009 b83d 	b.w	1cd08 <atomic_or>
		last_static_handle += svc->attr_count;
   13c8e:	4a14      	ldr	r2, [pc, #80]	; (13ce0 <bt_gatt_init+0xbc>)
   13c90:	6863      	ldr	r3, [r4, #4]
   13c92:	8811      	ldrh	r1, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   13c94:	3408      	adds	r4, #8
		last_static_handle += svc->attr_count;
   13c96:	440b      	add	r3, r1
   13c98:	8013      	strh	r3, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   13c9a:	42ac      	cmp	r4, r5
   13c9c:	d90a      	bls.n	13cb4 <bt_gatt_init+0x90>
   13c9e:	4631      	mov	r1, r6
   13ca0:	4810      	ldr	r0, [pc, #64]	; (13ce4 <bt_gatt_init+0xc0>)
   13ca2:	f44f 6283 	mov.w	r2, #1048	; 0x418
   13ca6:	f006 fde3 	bl	1a870 <printk>
   13caa:	f44f 6183 	mov.w	r1, #1048	; 0x418
   13cae:	4630      	mov	r0, r6
   13cb0:	f007 f884 	bl	1adbc <assert_post_action>
   13cb4:	42ac      	cmp	r4, r5
   13cb6:	d3ea      	bcc.n	13c8e <bt_gatt_init+0x6a>
   13cb8:	e7ca      	b.n	13c50 <bt_gatt_init+0x2c>
   13cba:	4c0b      	ldr	r4, [pc, #44]	; (13ce8 <bt_gatt_init+0xc4>)
   13cbc:	4d0b      	ldr	r5, [pc, #44]	; (13cec <bt_gatt_init+0xc8>)
   13cbe:	4e0c      	ldr	r6, [pc, #48]	; (13cf0 <bt_gatt_init+0xcc>)
   13cc0:	e7eb      	b.n	13c9a <bt_gatt_init+0x76>
}
   13cc2:	bd70      	pop	{r4, r5, r6, pc}
   13cc4:	2000ad14 	.word	0x2000ad14
   13cc8:	2000ae08 	.word	0x2000ae08
   13ccc:	20009be8 	.word	0x20009be8
   13cd0:	0001d0f9 	.word	0x0001d0f9
   13cd4:	20009c18 	.word	0x20009c18
   13cd8:	2000a540 	.word	0x2000a540
   13cdc:	000142b5 	.word	0x000142b5
   13ce0:	2000f1a8 	.word	0x2000f1a8
   13ce4:	0001fdfa 	.word	0x0001fdfa
   13ce8:	0001e5d4 	.word	0x0001e5d4
   13cec:	0001e604 	.word	0x0001e604
   13cf0:	000222f5 	.word	0x000222f5

00013cf4 <bt_gatt_attr_get_handle>:
{
   13cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   13cf8:	4604      	mov	r4, r0
   13cfa:	b910      	cbnz	r0, 13d02 <bt_gatt_attr_get_handle+0xe>
		return 0;
   13cfc:	2000      	movs	r0, #0
}
   13cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (attr->handle) {
   13d02:	8a00      	ldrh	r0, [r0, #16]
   13d04:	2800      	cmp	r0, #0
   13d06:	d1fa      	bne.n	13cfe <bt_gatt_attr_get_handle+0xa>
	uint16_t handle = 1;
   13d08:	f04f 0801 	mov.w	r8, #1
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13d0c:	4d17      	ldr	r5, [pc, #92]	; (13d6c <bt_gatt_attr_get_handle+0x78>)
   13d0e:	4e18      	ldr	r6, [pc, #96]	; (13d70 <bt_gatt_attr_get_handle+0x7c>)
   13d10:	4f18      	ldr	r7, [pc, #96]	; (13d74 <bt_gatt_attr_get_handle+0x80>)
   13d12:	42b5      	cmp	r5, r6
   13d14:	d90a      	bls.n	13d2c <bt_gatt_attr_get_handle+0x38>
   13d16:	4639      	mov	r1, r7
   13d18:	4817      	ldr	r0, [pc, #92]	; (13d78 <bt_gatt_attr_get_handle+0x84>)
   13d1a:	f240 522d 	movw	r2, #1325	; 0x52d
   13d1e:	f006 fda7 	bl	1a870 <printk>
   13d22:	f240 512d 	movw	r1, #1325	; 0x52d
   13d26:	4638      	mov	r0, r7
   13d28:	f007 f848 	bl	1adbc <assert_post_action>
   13d2c:	42b5      	cmp	r5, r6
   13d2e:	d2e5      	bcs.n	13cfc <bt_gatt_attr_get_handle+0x8>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   13d30:	e9d5 c100 	ldrd	ip, r1, [r5]
		if ((attr < &static_svc->attrs[0]) ||
   13d34:	4564      	cmp	r4, ip
   13d36:	d306      	bcc.n	13d46 <bt_gatt_attr_get_handle+0x52>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   13d38:	f04f 0e14 	mov.w	lr, #20
   13d3c:	fb0e c301 	mla	r3, lr, r1, ip
   13d40:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
   13d42:	429c      	cmp	r4, r3
   13d44:	d910      	bls.n	13d68 <bt_gatt_attr_get_handle+0x74>
			handle += static_svc->attr_count;
   13d46:	eb08 0001 	add.w	r0, r8, r1
   13d4a:	b280      	uxth	r0, r0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13d4c:	4680      	mov	r8, r0
   13d4e:	3508      	adds	r5, #8
   13d50:	e7df      	b.n	13d12 <bt_gatt_attr_get_handle+0x1e>
			if (attr == &static_svc->attrs[i]) {
   13d52:	fb0e c302 	mla	r3, lr, r2, ip
   13d56:	429c      	cmp	r4, r3
   13d58:	d0d1      	beq.n	13cfe <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   13d5a:	3201      	adds	r2, #1
   13d5c:	eb08 0302 	add.w	r3, r8, r2
   13d60:	4291      	cmp	r1, r2
   13d62:	b298      	uxth	r0, r3
   13d64:	d1f5      	bne.n	13d52 <bt_gatt_attr_get_handle+0x5e>
   13d66:	e7f1      	b.n	13d4c <bt_gatt_attr_get_handle+0x58>
   13d68:	2200      	movs	r2, #0
   13d6a:	e7f7      	b.n	13d5c <bt_gatt_attr_get_handle+0x68>
   13d6c:	0001e5d4 	.word	0x0001e5d4
   13d70:	0001e604 	.word	0x0001e604
   13d74:	000222f5 	.word	0x000222f5
   13d78:	0001fdfa 	.word	0x0001fdfa

00013d7c <bt_gatt_foreach_attr_type>:
{
   13d7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d80:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   13d82:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   13d86:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   13d8a:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   13d8c:	2d00      	cmp	r5, #0
   13d8e:	bf08      	it	eq
   13d90:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   13d92:	4b2b      	ldr	r3, [pc, #172]	; (13e40 <bt_gatt_foreach_attr_type+0xc4>)
{
   13d94:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   13d96:	881b      	ldrh	r3, [r3, #0]
{
   13d98:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   13d9a:	4283      	cmp	r3, r0
   13d9c:	d24b      	bcs.n	13e36 <bt_gatt_foreach_attr_type+0xba>
}
   13d9e:	b003      	add	sp, #12
   13da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   13da4:	6873      	ldr	r3, [r6, #4]
   13da6:	4423      	add	r3, r4
   13da8:	42bb      	cmp	r3, r7
   13daa:	d241      	bcs.n	13e30 <bt_gatt_foreach_attr_type+0xb4>
				handle += static_svc->attr_count;
   13dac:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13dae:	3608      	adds	r6, #8
   13db0:	4b24      	ldr	r3, [pc, #144]	; (13e44 <bt_gatt_foreach_attr_type+0xc8>)
   13db2:	429e      	cmp	r6, r3
   13db4:	d90a      	bls.n	13dcc <bt_gatt_foreach_attr_type+0x50>
   13db6:	4659      	mov	r1, fp
   13db8:	4823      	ldr	r0, [pc, #140]	; (13e48 <bt_gatt_foreach_attr_type+0xcc>)
   13dba:	f240 52f1 	movw	r2, #1521	; 0x5f1
   13dbe:	f006 fd57 	bl	1a870 <printk>
   13dc2:	f240 51f1 	movw	r1, #1521	; 0x5f1
   13dc6:	4658      	mov	r0, fp
   13dc8:	f006 fff8 	bl	1adbc <assert_post_action>
   13dcc:	4b1d      	ldr	r3, [pc, #116]	; (13e44 <bt_gatt_foreach_attr_type+0xc8>)
   13dce:	429e      	cmp	r6, r3
   13dd0:	d3e8      	bcc.n	13da4 <bt_gatt_foreach_attr_type+0x28>
   13dd2:	e7e4      	b.n	13d9e <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   13dd4:	4640      	mov	r0, r8
   13dd6:	5889      	ldr	r1, [r1, r2]
   13dd8:	9301      	str	r3, [sp, #4]
   13dda:	f008 f802 	bl	1bde2 <bt_uuid_cmp>
   13dde:	9b01      	ldr	r3, [sp, #4]
   13de0:	b198      	cbz	r0, 13e0a <bt_gatt_foreach_attr_type+0x8e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   13de2:	3401      	adds	r4, #1
   13de4:	f10a 0a01 	add.w	sl, sl, #1
   13de8:	b2a4      	uxth	r4, r4
   13dea:	6873      	ldr	r3, [r6, #4]
   13dec:	4553      	cmp	r3, sl
   13dee:	d9de      	bls.n	13dae <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   13df0:	9b00      	ldr	r3, [sp, #0]
   13df2:	429c      	cmp	r4, r3
   13df4:	d8d3      	bhi.n	13d9e <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   13df6:	42bc      	cmp	r4, r7
   13df8:	d3f3      	bcc.n	13de2 <bt_gatt_foreach_attr_type+0x66>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   13dfa:	2314      	movs	r3, #20
   13dfc:	fb03 f20a 	mul.w	r2, r3, sl
   13e00:	6831      	ldr	r1, [r6, #0]
   13e02:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   13e04:	f1b8 0f00 	cmp.w	r8, #0
   13e08:	d1e4      	bne.n	13dd4 <bt_gatt_foreach_attr_type+0x58>
	if (attr_data && attr_data != attr->user_data) {
   13e0a:	f1b9 0f00 	cmp.w	r9, #0
   13e0e:	d10b      	bne.n	13e28 <bt_gatt_foreach_attr_type+0xac>
	*num_matches -= 1;
   13e10:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   13e12:	4618      	mov	r0, r3
	*num_matches -= 1;
   13e14:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   13e16:	4621      	mov	r1, r4
   13e18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   13e1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13e1c:	4798      	blx	r3
	if (!*num_matches) {
   13e1e:	2d00      	cmp	r5, #0
   13e20:	d0bd      	beq.n	13d9e <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   13e22:	2800      	cmp	r0, #0
   13e24:	d1dd      	bne.n	13de2 <bt_gatt_foreach_attr_type+0x66>
   13e26:	e7ba      	b.n	13d9e <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   13e28:	68da      	ldr	r2, [r3, #12]
   13e2a:	4591      	cmp	r9, r2
   13e2c:	d1d9      	bne.n	13de2 <bt_gatt_foreach_attr_type+0x66>
   13e2e:	e7ef      	b.n	13e10 <bt_gatt_foreach_attr_type+0x94>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   13e30:	f04f 0a00 	mov.w	sl, #0
   13e34:	e7d9      	b.n	13dea <bt_gatt_foreach_attr_type+0x6e>
		uint16_t handle = 1;
   13e36:	2401      	movs	r4, #1
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13e38:	4e04      	ldr	r6, [pc, #16]	; (13e4c <bt_gatt_foreach_attr_type+0xd0>)
   13e3a:	f8df b014 	ldr.w	fp, [pc, #20]	; 13e50 <bt_gatt_foreach_attr_type+0xd4>
   13e3e:	e7b7      	b.n	13db0 <bt_gatt_foreach_attr_type+0x34>
   13e40:	2000f1a8 	.word	0x2000f1a8
   13e44:	0001e604 	.word	0x0001e604
   13e48:	0001fdfa 	.word	0x0001fdfa
   13e4c:	0001e5d4 	.word	0x0001e5d4
   13e50:	000222f5 	.word	0x000222f5

00013e54 <db_hash_gen>:
	uint8_t key[16] = {};
   13e54:	2300      	movs	r3, #0
{
   13e56:	b530      	push	{r4, r5, lr}
   13e58:	b0c9      	sub	sp, #292	; 0x124
   13e5a:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   13e5c:	4669      	mov	r1, sp
   13e5e:	aa1c      	add	r2, sp, #112	; 0x70
   13e60:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   13e62:	e9cd 3300 	strd	r3, r3, [sp]
   13e66:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   13e6a:	f007 fb6e 	bl	1b54a <tc_cmac_setup>
   13e6e:	b928      	cbnz	r0, 13e7c <db_hash_gen+0x28>
		BT_ERR("Unable to setup AES CMAC");
   13e70:	2145      	movs	r1, #69	; 0x45
   13e72:	4812      	ldr	r0, [pc, #72]	; (13ebc <db_hash_gen+0x68>)
		BT_ERR("Unable to calculate hash");
   13e74:	f006 fcfc 	bl	1a870 <printk>
}
   13e78:	b049      	add	sp, #292	; 0x124
   13e7a:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   13e7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13e80:	2001      	movs	r0, #1
   13e82:	4a0f      	ldr	r2, [pc, #60]	; (13ec0 <db_hash_gen+0x6c>)
   13e84:	ab04      	add	r3, sp, #16
   13e86:	f009 f92c 	bl	1d0e2 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   13e8a:	480e      	ldr	r0, [pc, #56]	; (13ec4 <db_hash_gen+0x70>)
   13e8c:	a904      	add	r1, sp, #16
   13e8e:	f007 fbf2 	bl	1b676 <tc_cmac_final>
   13e92:	b910      	cbnz	r0, 13e9a <db_hash_gen+0x46>
		BT_ERR("Unable to calculate hash");
   13e94:	2145      	movs	r1, #69	; 0x45
   13e96:	480c      	ldr	r0, [pc, #48]	; (13ec8 <db_hash_gen+0x74>)
   13e98:	e7ec      	b.n	13e74 <db_hash_gen+0x20>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   13e9a:	2208      	movs	r2, #8
   13e9c:	4b09      	ldr	r3, [pc, #36]	; (13ec4 <db_hash_gen+0x70>)
   13e9e:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   13ea2:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   13ea4:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
	for (i = 0; i < (length/2); i++) {
   13ea8:	3a01      	subs	r2, #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   13eaa:	f803 5b01 	strb.w	r5, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   13eae:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   13eb0:	d1f7      	bne.n	13ea2 <db_hash_gen+0x4e>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   13eb2:	2c00      	cmp	r4, #0
   13eb4:	d0e0      	beq.n	13e78 <db_hash_gen+0x24>
		db_hash_store();
   13eb6:	f7ff f9af 	bl	13218 <db_hash_store>
   13eba:	e7dd      	b.n	13e78 <db_hash_gen+0x24>
   13ebc:	00022325 	.word	0x00022325
   13ec0:	0001cbc3 	.word	0x0001cbc3
   13ec4:	2000f9b4 	.word	0x2000f9b4
   13ec8:	00022343 	.word	0x00022343

00013ecc <db_hash_commit>:
{
   13ecc:	b510      	push	{r4, lr}
	err = k_delayed_work_cancel(&db_hash_work);
   13ece:	4821      	ldr	r0, [pc, #132]	; (13f54 <db_hash_commit+0x88>)
   13ed0:	f005 fdc8 	bl	19a64 <k_delayed_work_cancel>
	if (!err) {
   13ed4:	b908      	cbnz	r0, 13eda <db_hash_commit+0xe>
		db_hash_gen(false);
   13ed6:	f7ff ffbd 	bl	13e54 <db_hash_gen>
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
   13eda:	2210      	movs	r2, #16
   13edc:	491e      	ldr	r1, [pc, #120]	; (13f58 <db_hash_commit+0x8c>)
   13ede:	481f      	ldr	r0, [pc, #124]	; (13f5c <db_hash_commit+0x90>)
   13ee0:	f007 fef9 	bl	1bcd6 <memcmp>
   13ee4:	b968      	cbnz	r0, 13f02 <db_hash_commit+0x36>
		k_delayed_work_cancel(&gatt_sc.work);
   13ee6:	481e      	ldr	r0, [pc, #120]	; (13f60 <db_hash_commit+0x94>)
   13ee8:	f005 fdbc 	bl	19a64 <k_delayed_work_cancel>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13eec:	4b1d      	ldr	r3, [pc, #116]	; (13f64 <db_hash_commit+0x98>)
   13eee:	e8d3 2fef 	ldaex	r2, [r3]
   13ef2:	f022 0201 	bic.w	r2, r2, #1
   13ef6:	e8c3 2fe1 	stlex	r1, r2, [r3]
   13efa:	2900      	cmp	r1, #0
   13efc:	d1f7      	bne.n	13eee <db_hash_commit+0x22>
}
   13efe:	2000      	movs	r0, #0
   13f00:	bd10      	pop	{r4, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   13f02:	4c19      	ldr	r4, [pc, #100]	; (13f68 <db_hash_commit+0x9c>)
   13f04:	2101      	movs	r1, #1
   13f06:	f104 0050 	add.w	r0, r4, #80	; 0x50
   13f0a:	f008 fefd 	bl	1cd08 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   13f0e:	07c2      	lsls	r2, r0, #31
   13f10:	d410      	bmi.n	13f34 <db_hash_commit+0x68>
		gatt_sc.start = start;
   13f12:	4b16      	ldr	r3, [pc, #88]	; (13f6c <db_hash_commit+0xa0>)
   13f14:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13f16:	4813      	ldr	r0, [pc, #76]	; (13f64 <db_hash_commit+0x98>)
   13f18:	f008 ff01 	bl	1cd1e <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   13f1c:	0783      	lsls	r3, r0, #30
   13f1e:	d406      	bmi.n	13f2e <db_hash_commit+0x62>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13f20:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13f24:	2300      	movs	r3, #0
   13f26:	490e      	ldr	r1, [pc, #56]	; (13f60 <db_hash_commit+0x94>)
   13f28:	4811      	ldr	r0, [pc, #68]	; (13f70 <db_hash_commit+0xa4>)
   13f2a:	f005 fd2b 	bl	19984 <k_delayed_work_submit_to_queue>
	db_hash_store();
   13f2e:	f7ff f973 	bl	13218 <db_hash_store>
	return 0;
   13f32:	e7e4      	b.n	13efe <db_hash_commit+0x32>
	if (new_start >= *start && new_end <= *end) {
   13f34:	8b23      	ldrh	r3, [r4, #24]
   13f36:	8b62      	ldrh	r2, [r4, #26]
   13f38:	2b01      	cmp	r3, #1
   13f3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13f3e:	d805      	bhi.n	13f4c <db_hash_commit+0x80>
   13f40:	429a      	cmp	r2, r3
   13f42:	d0f4      	beq.n	13f2e <db_hash_commit+0x62>
		*end = new_end;
   13f44:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13f48:	8363      	strh	r3, [r4, #26]
   13f4a:	e7e4      	b.n	13f16 <db_hash_commit+0x4a>
	if (*end < new_end) {
   13f4c:	429a      	cmp	r2, r3
		*start = new_start;
   13f4e:	8321      	strh	r1, [r4, #24]
	if (*end < new_end) {
   13f50:	d0e1      	beq.n	13f16 <db_hash_commit+0x4a>
   13f52:	e7f7      	b.n	13f44 <db_hash_commit+0x78>
   13f54:	20009be8 	.word	0x20009be8
   13f58:	2000f9b4 	.word	0x2000f9b4
   13f5c:	2000f9c4 	.word	0x2000f9c4
   13f60:	20009c38 	.word	0x20009c38
   13f64:	20009c68 	.word	0x20009c68
   13f68:	20009c18 	.word	0x20009c18
   13f6c:	ffff0001 	.word	0xffff0001
   13f70:	2000a540 	.word	0x2000a540

00013f74 <ccc_set_direct>:
{
   13f74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13f78:	b0b9      	sub	sp, #228	; 0xe4
   13f7a:	4688      	mov	r8, r1
   13f7c:	4616      	mov	r6, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   13f7e:	492c      	ldr	r1, [pc, #176]	; (14030 <ccc_set_direct+0xbc>)
   13f80:	466a      	mov	r2, sp
   13f82:	9840      	ldr	r0, [sp, #256]	; 0x100
{
   13f84:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   13f86:	f006 ff6f 	bl	1ae68 <settings_name_steq>
   13f8a:	b948      	cbnz	r0, 13fa0 <ccc_set_direct+0x2c>
			BT_ERR("Invalid key");
   13f8c:	2145      	movs	r1, #69	; 0x45
   13f8e:	4829      	ldr	r0, [pc, #164]	; (14034 <ccc_set_direct+0xc0>)
   13f90:	f006 fc6e 	bl	1a870 <printk>
   13f94:	f06f 0515 	mvn.w	r5, #21
}
   13f98:	4628      	mov	r0, r5
   13f9a:	b039      	add	sp, #228	; 0xe4
   13f9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   13fa0:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
   13fa2:	a901      	add	r1, sp, #4
   13fa4:	4620      	mov	r0, r4
   13fa6:	f006 ff82 	bl	1aeae <settings_name_next>
		if (!name) {
   13faa:	b93c      	cbnz	r4, 13fbc <ccc_set_direct+0x48>
			BT_ERR("Insufficient number of arguments");
   13fac:	2145      	movs	r1, #69	; 0x45
   13fae:	4822      	ldr	r0, [pc, #136]	; (14038 <ccc_set_direct+0xc4>)
   13fb0:	f006 fc5e 	bl	1a870 <printk>
			return -EINVAL;
   13fb4:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
   13fb8:	4625      	mov	r5, r4
   13fba:	e7ed      	b.n	13f98 <ccc_set_direct+0x24>
		} else if (!next) {
   13fbc:	9801      	ldr	r0, [sp, #4]
   13fbe:	b978      	cbnz	r0, 13fe0 <ccc_set_direct+0x6c>
		err = bt_settings_decode_key(name, &addr);
   13fc0:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
   13fc4:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   13fc8:	4649      	mov	r1, r9
   13fca:	4620      	mov	r0, r4
   13fcc:	f007 fee5 	bl	1bd9a <bt_settings_decode_key>
		if (err) {
   13fd0:	4605      	mov	r5, r0
   13fd2:	b150      	cbz	r0, 13fea <ccc_set_direct+0x76>
			BT_ERR("Unable to decode address %s", log_strdup(name));
   13fd4:	4622      	mov	r2, r4
   13fd6:	2145      	movs	r1, #69	; 0x45
   13fd8:	4818      	ldr	r0, [pc, #96]	; (1403c <ccc_set_direct+0xc8>)
   13fda:	f006 fc49 	bl	1a870 <printk>
   13fde:	e7e9      	b.n	13fb4 <ccc_set_direct+0x40>
			load.addr_with_id.id = strtol(next, NULL, 10);
   13fe0:	220a      	movs	r2, #10
   13fe2:	2100      	movs	r1, #0
   13fe4:	f007 fdba 	bl	1bb5c <strtol>
   13fe8:	e7ea      	b.n	13fc0 <ccc_set_direct+0x4c>
		load.addr_with_id.addr = &addr;
   13fea:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
   13fee:	f1b8 0f00 	cmp.w	r8, #0
   13ff2:	d019      	beq.n	14028 <ccc_set_direct+0xb4>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   13ff4:	f10d 0820 	add.w	r8, sp, #32
   13ff8:	22c0      	movs	r2, #192	; 0xc0
   13ffa:	4641      	mov	r1, r8
   13ffc:	4638      	mov	r0, r7
   13ffe:	47b0      	blx	r6
			if (len < 0) {
   14000:	1e04      	subs	r4, r0, #0
   14002:	da05      	bge.n	14010 <ccc_set_direct+0x9c>
				BT_ERR("Failed to decode value (err %zd)", len);
   14004:	4622      	mov	r2, r4
   14006:	2145      	movs	r1, #69	; 0x45
   14008:	480d      	ldr	r0, [pc, #52]	; (14040 <ccc_set_direct+0xcc>)
   1400a:	f006 fc31 	bl	1a870 <printk>
				return len;
   1400e:	e7d3      	b.n	13fb8 <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
   14010:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
   14012:	f8cd 8018 	str.w	r8, [sp, #24]
			load.count = len / sizeof(*ccc_store);
   14016:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   14018:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1401c:	2001      	movs	r0, #1
   1401e:	4a09      	ldr	r2, [pc, #36]	; (14044 <ccc_set_direct+0xd0>)
   14020:	ab04      	add	r3, sp, #16
   14022:	f009 f85e 	bl	1d0e2 <bt_gatt_foreach_attr>
	return 0;
   14026:	e7b7      	b.n	13f98 <ccc_set_direct+0x24>
			load.count = 0;
   14028:	e9cd 0006 	strd	r0, r0, [sp, #24]
   1402c:	e7f4      	b.n	14018 <ccc_set_direct+0xa4>
   1402e:	bf00      	nop
   14030:	00022361 	.word	0x00022361
   14034:	00022368 	.word	0x00022368
   14038:	000210d9 	.word	0x000210d9
   1403c:	000221d0 	.word	0x000221d0
   14040:	000220e2 	.word	0x000220e2
   14044:	00013779 	.word	0x00013779

00014048 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   14048:	2300      	movs	r3, #0
{
   1404a:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1404c:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1404e:	f7ff fe51 	bl	13cf4 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   14052:	1c41      	adds	r1, r0, #1
   14054:	b289      	uxth	r1, r1
   14056:	4608      	mov	r0, r1
   14058:	4a03      	ldr	r2, [pc, #12]	; (14068 <bt_gatt_attr_next+0x20>)
   1405a:	ab01      	add	r3, sp, #4
   1405c:	f009 f841 	bl	1d0e2 <bt_gatt_foreach_attr>
}
   14060:	9801      	ldr	r0, [sp, #4]
   14062:	b003      	add	sp, #12
   14064:	f85d fb04 	ldr.w	pc, [sp], #4
   14068:	0001cb5b 	.word	0x0001cb5b

0001406c <bt_gatt_notify_cb>:
{
   1406c:	b530      	push	{r4, r5, lr}
   1406e:	4604      	mov	r4, r0
	__ASSERT(params, "invalid parameters\n");
   14070:	460d      	mov	r5, r1
{
   14072:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   14074:	b951      	cbnz	r1, 1408c <bt_gatt_notify_cb+0x20>
   14076:	4940      	ldr	r1, [pc, #256]	; (14178 <bt_gatt_notify_cb+0x10c>)
   14078:	4840      	ldr	r0, [pc, #256]	; (1417c <bt_gatt_notify_cb+0x110>)
   1407a:	f640 023d 	movw	r2, #2109	; 0x83d
   1407e:	f006 fbf7 	bl	1a870 <printk>
   14082:	f640 013d 	movw	r1, #2109	; 0x83d
   14086:	483c      	ldr	r0, [pc, #240]	; (14178 <bt_gatt_notify_cb+0x10c>)
   14088:	f006 fe98 	bl	1adbc <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
   1408c:	686b      	ldr	r3, [r5, #4]
   1408e:	b953      	cbnz	r3, 140a6 <bt_gatt_notify_cb+0x3a>
   14090:	4939      	ldr	r1, [pc, #228]	; (14178 <bt_gatt_notify_cb+0x10c>)
   14092:	483a      	ldr	r0, [pc, #232]	; (1417c <bt_gatt_notify_cb+0x110>)
   14094:	f640 023e 	movw	r2, #2110	; 0x83e
   14098:	f006 fbea 	bl	1a870 <printk>
   1409c:	f640 013e 	movw	r1, #2110	; 0x83e
   140a0:	4835      	ldr	r0, [pc, #212]	; (14178 <bt_gatt_notify_cb+0x10c>)
   140a2:	f006 fe8b 	bl	1adbc <assert_post_action>
   140a6:	4836      	ldr	r0, [pc, #216]	; (14180 <bt_gatt_notify_cb+0x114>)
   140a8:	f008 fe39 	bl	1cd1e <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   140ac:	0782      	lsls	r2, r0, #30
   140ae:	d55d      	bpl.n	1416c <bt_gatt_notify_cb+0x100>
	data.attr = params->attr;
   140b0:	6868      	ldr	r0, [r5, #4]
   140b2:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   140b4:	b114      	cbz	r4, 140bc <bt_gatt_notify_cb+0x50>
   140b6:	7aa3      	ldrb	r3, [r4, #10]
   140b8:	2b07      	cmp	r3, #7
   140ba:	d15a      	bne.n	14172 <bt_gatt_notify_cb+0x106>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   140bc:	f7ff fe1a 	bl	13cf4 <bt_gatt_attr_get_handle>
   140c0:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   140c4:	b918      	cbnz	r0, 140ce <bt_gatt_notify_cb+0x62>
		return -ENOENT;
   140c6:	f06f 0001 	mvn.w	r0, #1
}
   140ca:	b00b      	add	sp, #44	; 0x2c
   140cc:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   140ce:	682a      	ldr	r2, [r5, #0]
   140d0:	b9aa      	cbnz	r2, 140fe <bt_gatt_notify_cb+0x92>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   140d2:	9b05      	ldr	r3, [sp, #20]
   140d4:	a904      	add	r1, sp, #16
   140d6:	6818      	ldr	r0, [r3, #0]
   140d8:	2300      	movs	r3, #0
   140da:	f88d 3010 	strb.w	r3, [sp, #16]
   140de:	f642 0303 	movw	r3, #10243	; 0x2803
   140e2:	f8ad 3012 	strh.w	r3, [sp, #18]
   140e6:	f007 fe7c 	bl	1bde2 <bt_uuid_cmp>
   140ea:	b1c0      	cbz	r0, 1411e <bt_gatt_notify_cb+0xb2>
		return gatt_notify(conn, data.handle, params);
   140ec:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   140f0:	b314      	cbz	r4, 14138 <bt_gatt_notify_cb+0xcc>
		return gatt_notify(conn, data.handle, params);
   140f2:	4601      	mov	r1, r0
   140f4:	462a      	mov	r2, r5
   140f6:	4620      	mov	r0, r4
   140f8:	f7ff fbd6 	bl	138a8 <gatt_notify>
   140fc:	e7e5      	b.n	140ca <bt_gatt_notify_cb+0x5e>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   140fe:	a905      	add	r1, sp, #20
   14100:	9102      	str	r1, [sp, #8]
   14102:	4920      	ldr	r1, [pc, #128]	; (14184 <bt_gatt_notify_cb+0x118>)
	found->attr = NULL;
   14104:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   14106:	9101      	str	r1, [sp, #4]
   14108:	2101      	movs	r1, #1
   1410a:	9100      	str	r1, [sp, #0]
   1410c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   14110:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   14112:	f7ff fe33 	bl	13d7c <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   14116:	9b05      	ldr	r3, [sp, #20]
   14118:	2b00      	cmp	r3, #0
   1411a:	d1da      	bne.n	140d2 <bt_gatt_notify_cb+0x66>
   1411c:	e7d3      	b.n	140c6 <bt_gatt_notify_cb+0x5a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1411e:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   14120:	68c3      	ldr	r3, [r0, #12]
   14122:	799b      	ldrb	r3, [r3, #6]
   14124:	06db      	lsls	r3, r3, #27
   14126:	d402      	bmi.n	1412e <bt_gatt_notify_cb+0xc2>
			return -EINVAL;
   14128:	f06f 0015 	mvn.w	r0, #21
   1412c:	e7cd      	b.n	140ca <bt_gatt_notify_cb+0x5e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1412e:	f008 ff8a 	bl	1d046 <bt_gatt_attr_value_handle>
   14132:	f8ad 0018 	strh.w	r0, [sp, #24]
   14136:	e7d9      	b.n	140ec <bt_gatt_notify_cb+0x80>
	data.err = -ENOTCONN;
   14138:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1413c:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   14140:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   14142:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14144:	f8ad 2012 	strh.w	r2, [sp, #18]
   14148:	aa05      	add	r2, sp, #20
   1414a:	9202      	str	r2, [sp, #8]
   1414c:	4a0e      	ldr	r2, [pc, #56]	; (14188 <bt_gatt_notify_cb+0x11c>)
	data.type = BT_GATT_CCC_NOTIFY;
   1414e:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14152:	e9cd 3200 	strd	r3, r2, [sp]
   14156:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1415a:	4623      	mov	r3, r4
   1415c:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   1415e:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14160:	f88d 4010 	strb.w	r4, [sp, #16]
   14164:	f7ff fe0a 	bl	13d7c <bt_gatt_foreach_attr_type>
	return data.err;
   14168:	9807      	ldr	r0, [sp, #28]
   1416a:	e7ae      	b.n	140ca <bt_gatt_notify_cb+0x5e>
		return -EAGAIN;
   1416c:	f06f 000a 	mvn.w	r0, #10
   14170:	e7ab      	b.n	140ca <bt_gatt_notify_cb+0x5e>
		return -ENOTCONN;
   14172:	f06f 0038 	mvn.w	r0, #56	; 0x38
   14176:	e7a8      	b.n	140ca <bt_gatt_notify_cb+0x5e>
   14178:	000222f5 	.word	0x000222f5
   1417c:	0001fdfa 	.word	0x0001fdfa
   14180:	20008094 	.word	0x20008094
   14184:	0001cbb7 	.word	0x0001cbb7
   14188:	00013909 	.word	0x00013909

0001418c <bt_gatt_indicate>:
{
   1418c:	b530      	push	{r4, r5, lr}
   1418e:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   14190:	460c      	mov	r4, r1
{
   14192:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   14194:	b951      	cbnz	r1, 141ac <bt_gatt_indicate+0x20>
   14196:	4942      	ldr	r1, [pc, #264]	; (142a0 <bt_gatt_indicate+0x114>)
   14198:	4842      	ldr	r0, [pc, #264]	; (142a4 <bt_gatt_indicate+0x118>)
   1419a:	f640 0289 	movw	r2, #2185	; 0x889
   1419e:	f006 fb67 	bl	1a870 <printk>
   141a2:	f640 0189 	movw	r1, #2185	; 0x889
   141a6:	483e      	ldr	r0, [pc, #248]	; (142a0 <bt_gatt_indicate+0x114>)
   141a8:	f006 fe08 	bl	1adbc <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
   141ac:	6863      	ldr	r3, [r4, #4]
   141ae:	b953      	cbnz	r3, 141c6 <bt_gatt_indicate+0x3a>
   141b0:	493b      	ldr	r1, [pc, #236]	; (142a0 <bt_gatt_indicate+0x114>)
   141b2:	483c      	ldr	r0, [pc, #240]	; (142a4 <bt_gatt_indicate+0x118>)
   141b4:	f640 028a 	movw	r2, #2186	; 0x88a
   141b8:	f006 fb5a 	bl	1a870 <printk>
   141bc:	f640 018a 	movw	r1, #2186	; 0x88a
   141c0:	4837      	ldr	r0, [pc, #220]	; (142a0 <bt_gatt_indicate+0x114>)
   141c2:	f006 fdfb 	bl	1adbc <assert_post_action>
   141c6:	4838      	ldr	r0, [pc, #224]	; (142a8 <bt_gatt_indicate+0x11c>)
   141c8:	f008 fda9 	bl	1cd1e <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   141cc:	0782      	lsls	r2, r0, #30
   141ce:	d561      	bpl.n	14294 <bt_gatt_indicate+0x108>
	data.attr = params->attr;
   141d0:	6860      	ldr	r0, [r4, #4]
   141d2:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   141d4:	b115      	cbz	r5, 141dc <bt_gatt_indicate+0x50>
   141d6:	7aab      	ldrb	r3, [r5, #10]
   141d8:	2b07      	cmp	r3, #7
   141da:	d15e      	bne.n	1429a <bt_gatt_indicate+0x10e>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   141dc:	f7ff fd8a 	bl	13cf4 <bt_gatt_attr_get_handle>
   141e0:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   141e4:	b918      	cbnz	r0, 141ee <bt_gatt_indicate+0x62>
		return -ENOENT;
   141e6:	f06f 0001 	mvn.w	r0, #1
}
   141ea:	b00b      	add	sp, #44	; 0x2c
   141ec:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   141ee:	6822      	ldr	r2, [r4, #0]
   141f0:	b9ba      	cbnz	r2, 14222 <bt_gatt_indicate+0x96>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   141f2:	9b05      	ldr	r3, [sp, #20]
   141f4:	a904      	add	r1, sp, #16
   141f6:	6818      	ldr	r0, [r3, #0]
   141f8:	2300      	movs	r3, #0
   141fa:	f88d 3010 	strb.w	r3, [sp, #16]
   141fe:	f642 0303 	movw	r3, #10243	; 0x2803
   14202:	f8ad 3012 	strh.w	r3, [sp, #18]
   14206:	f007 fdec 	bl	1bde2 <bt_uuid_cmp>
   1420a:	b1d0      	cbz	r0, 14242 <bt_gatt_indicate+0xb6>
		return gatt_indicate(conn, data.handle, params);
   1420c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   14210:	b325      	cbz	r5, 1425c <bt_gatt_indicate+0xd0>
		params->_ref = 1;
   14212:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   14214:	4601      	mov	r1, r0
   14216:	4622      	mov	r2, r4
   14218:	4628      	mov	r0, r5
		params->_ref = 1;
   1421a:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1421c:	f7ff fb0e 	bl	1383c <gatt_indicate>
   14220:	e7e3      	b.n	141ea <bt_gatt_indicate+0x5e>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   14222:	a905      	add	r1, sp, #20
   14224:	9102      	str	r1, [sp, #8]
   14226:	4921      	ldr	r1, [pc, #132]	; (142ac <bt_gatt_indicate+0x120>)
	found->attr = NULL;
   14228:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1422a:	9101      	str	r1, [sp, #4]
   1422c:	2101      	movs	r1, #1
   1422e:	9100      	str	r1, [sp, #0]
   14230:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   14234:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   14236:	f7ff fda1 	bl	13d7c <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1423a:	9b05      	ldr	r3, [sp, #20]
   1423c:	2b00      	cmp	r3, #0
   1423e:	d1d8      	bne.n	141f2 <bt_gatt_indicate+0x66>
   14240:	e7d1      	b.n	141e6 <bt_gatt_indicate+0x5a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   14242:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   14244:	68c3      	ldr	r3, [r0, #12]
   14246:	799b      	ldrb	r3, [r3, #6]
   14248:	069b      	lsls	r3, r3, #26
   1424a:	d402      	bmi.n	14252 <bt_gatt_indicate+0xc6>
			return -EINVAL;
   1424c:	f06f 0015 	mvn.w	r0, #21
   14250:	e7cb      	b.n	141ea <bt_gatt_indicate+0x5e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   14252:	f008 fef8 	bl	1d046 <bt_gatt_attr_value_handle>
   14256:	f8ad 0018 	strh.w	r0, [sp, #24]
   1425a:	e7d7      	b.n	1420c <bt_gatt_indicate+0x80>
	data.err = -ENOTCONN;
   1425c:	f06f 0338 	mvn.w	r3, #56	; 0x38
   14260:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   14262:	2302      	movs	r3, #2
   14264:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14268:	f642 1302 	movw	r3, #10498	; 0x2902
   1426c:	f8ad 3012 	strh.w	r3, [sp, #18]
   14270:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   14272:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14274:	9302      	str	r3, [sp, #8]
   14276:	4b0e      	ldr	r3, [pc, #56]	; (142b0 <bt_gatt_indicate+0x124>)
   14278:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1427c:	9301      	str	r3, [sp, #4]
   1427e:	2301      	movs	r3, #1
   14280:	aa04      	add	r2, sp, #16
   14282:	9300      	str	r3, [sp, #0]
   14284:	462b      	mov	r3, r5
	data.ind_params = params;
   14286:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14288:	f88d 5010 	strb.w	r5, [sp, #16]
   1428c:	f7ff fd76 	bl	13d7c <bt_gatt_foreach_attr_type>
	return data.err;
   14290:	9807      	ldr	r0, [sp, #28]
   14292:	e7aa      	b.n	141ea <bt_gatt_indicate+0x5e>
		return -EAGAIN;
   14294:	f06f 000a 	mvn.w	r0, #10
   14298:	e7a7      	b.n	141ea <bt_gatt_indicate+0x5e>
		return -ENOTCONN;
   1429a:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1429e:	e7a4      	b.n	141ea <bt_gatt_indicate+0x5e>
   142a0:	000222f5 	.word	0x000222f5
   142a4:	0001fdfa 	.word	0x0001fdfa
   142a8:	20008094 	.word	0x20008094
   142ac:	0001cbb7 	.word	0x0001cbb7
   142b0:	00013909 	.word	0x00013909

000142b4 <sc_process>:
{
   142b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   142b6:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   142ba:	4604      	mov	r4, r0
   142bc:	4628      	mov	r0, r5
   142be:	f008 fd2e 	bl	1cd1e <atomic_get>
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   142c2:	0783      	lsls	r3, r0, #30
   142c4:	d50a      	bpl.n	142dc <sc_process+0x28>
   142c6:	491b      	ldr	r1, [pc, #108]	; (14334 <sc_process+0x80>)
   142c8:	481b      	ldr	r0, [pc, #108]	; (14338 <sc_process+0x84>)
   142ca:	f240 32ae 	movw	r2, #942	; 0x3ae
   142ce:	f006 facf 	bl	1a870 <printk>
   142d2:	f240 31ae 	movw	r1, #942	; 0x3ae
   142d6:	4817      	ldr	r0, [pc, #92]	; (14334 <sc_process+0x80>)
   142d8:	f006 fd70 	bl	1adbc <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   142dc:	f834 3c08 	ldrh.w	r3, [r4, #-8]
   142e0:	f8ad 3004 	strh.w	r3, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   142e4:	f834 3c06 	ldrh.w	r3, [r4, #-6]
   142e8:	f8ad 3006 	strh.w	r3, [sp, #6]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   142ec:	e8d5 3fef 	ldaex	r3, [r5]
   142f0:	f023 0301 	bic.w	r3, r3, #1
   142f4:	e8c5 3fe2 	stlex	r2, r3, [r5]
   142f8:	2a00      	cmp	r2, #0
   142fa:	d1f7      	bne.n	142ec <sc_process+0x38>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   142fc:	4b0f      	ldr	r3, [pc, #60]	; (1433c <sc_process+0x88>)
	sc->start = 0U;
   142fe:	2000      	movs	r0, #0
	sc->params.attr = &_1_gatt_svc.attrs[2];
   14300:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   14304:	4b0e      	ldr	r3, [pc, #56]	; (14340 <sc_process+0x8c>)
	sc->start = 0U;
   14306:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->params.func = sc_indicate_rsp;
   1430a:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1430e:	ab01      	add	r3, sp, #4
   14310:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   14314:	2304      	movs	r3, #4
	sc->end = 0U;
   14316:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   1431a:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1431e:	f1a4 0120 	sub.w	r1, r4, #32
   14322:	f7ff ff33 	bl	1418c <bt_gatt_indicate>
   14326:	b918      	cbnz	r0, 14330 <sc_process+0x7c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14328:	2102      	movs	r1, #2
   1432a:	4628      	mov	r0, r5
   1432c:	f008 fcec 	bl	1cd08 <atomic_or>
}
   14330:	b003      	add	sp, #12
   14332:	bd30      	pop	{r4, r5, pc}
   14334:	000222f5 	.word	0x000222f5
   14338:	0001fdfa 	.word	0x0001fdfa
   1433c:	0001ee08 	.word	0x0001ee08
   14340:	00013bd5 	.word	0x00013bd5

00014344 <update_ccc>:
{
   14344:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   14348:	4b32      	ldr	r3, [pc, #200]	; (14414 <update_ccc+0xd0>)
   1434a:	6881      	ldr	r1, [r0, #8]
{
   1434c:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1434e:	4299      	cmp	r1, r3
   14350:	d15c      	bne.n	1440c <update_ccc+0xc8>
	ccc = attr->user_data;
   14352:	68c7      	ldr	r7, [r0, #12]
	struct bt_conn *conn = data->conn;
   14354:	6816      	ldr	r6, [r2, #0]
				BT_WARN("CCC %p not writable", attr);
   14356:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 14418 <update_ccc+0xd4>
   1435a:	1c7d      	adds	r5, r7, #1
   1435c:	f107 0865 	add.w	r8, r7, #101	; 0x65
		if (!cfg->value ||
   14360:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   14364:	b193      	cbz	r3, 1438c <update_ccc+0x48>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   14366:	462a      	mov	r2, r5
   14368:	4630      	mov	r0, r6
   1436a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1436e:	f007 ff1e 	bl	1c1ae <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   14372:	b158      	cbz	r0, 1438c <update_ccc+0x48>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   14374:	222a      	movs	r2, #42	; 0x2a
   14376:	4621      	mov	r1, r4
   14378:	4630      	mov	r0, r6
   1437a:	f008 fec0 	bl	1d0fe <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1437e:	2803      	cmp	r0, #3
   14380:	d108      	bne.n	14394 <update_ccc+0x50>
				BT_WARN("CCC %p not writable", attr);
   14382:	4622      	mov	r2, r4
   14384:	2157      	movs	r1, #87	; 0x57
   14386:	4648      	mov	r0, r9
   14388:	f006 fa72 	bl	1a870 <printk>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1438c:	350a      	adds	r5, #10
   1438e:	4545      	cmp	r5, r8
   14390:	d1e6      	bne.n	14360 <update_ccc+0x1c>
   14392:	e03b      	b.n	1440c <update_ccc+0xc8>
		gatt_ccc_changed(attr, ccc);
   14394:	4639      	mov	r1, r7
   14396:	4620      	mov	r0, r4
   14398:	f008 fbe2 	bl	1cb60 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1439c:	4b1f      	ldr	r3, [pc, #124]	; (1441c <update_ccc+0xd8>)
   1439e:	429f      	cmp	r7, r3
   143a0:	d134      	bne.n	1440c <update_ccc+0xc8>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   143a2:	7a30      	ldrb	r0, [r6, #8]
   143a4:	f106 0188 	add.w	r1, r6, #136	; 0x88
   143a8:	f7fe ff6e 	bl	13288 <find_sc_cfg>
	if (!cfg) {
   143ac:	4604      	mov	r4, r0
   143ae:	b368      	cbz	r0, 1440c <update_ccc+0xc8>
	if (!(cfg->data.start || cfg->data.end)) {
   143b0:	8902      	ldrh	r2, [r0, #8]
   143b2:	8943      	ldrh	r3, [r0, #10]
   143b4:	ea52 0103 	orrs.w	r1, r2, r3
   143b8:	d028      	beq.n	1440c <update_ccc+0xc8>
	index = bt_conn_index(conn);
   143ba:	4630      	mov	r0, r6
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   143bc:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   143c0:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   143c4:	f7fd fca2 	bl	11d0c <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   143c8:	2318      	movs	r3, #24
   143ca:	4915      	ldr	r1, [pc, #84]	; (14420 <update_ccc+0xdc>)
   143cc:	4a15      	ldr	r2, [pc, #84]	; (14424 <update_ccc+0xe0>)
   143ce:	fb03 1300 	mla	r3, r3, r0, r1
   143d2:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   143d4:	4a14      	ldr	r2, [pc, #80]	; (14428 <update_ccc+0xe4>)
   143d6:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   143d8:	aa01      	add	r2, sp, #4
   143da:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   143dc:	2204      	movs	r2, #4
   143de:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   143e0:	b203      	sxth	r3, r0
   143e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   143e6:	4630      	mov	r0, r6
   143e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   143ec:	f7ff fece 	bl	1418c <bt_gatt_indicate>
   143f0:	b118      	cbz	r0, 143fa <update_ccc+0xb6>
		BT_ERR("SC restore indication failed");
   143f2:	2145      	movs	r1, #69	; 0x45
   143f4:	480d      	ldr	r0, [pc, #52]	; (1442c <update_ccc+0xe8>)
   143f6:	f006 fa3b 	bl	1a870 <printk>
	memset(&cfg->data, 0, sizeof(cfg->data));
   143fa:	2204      	movs	r2, #4
   143fc:	2100      	movs	r1, #0
   143fe:	f104 0008 	add.w	r0, r4, #8
   14402:	f007 fca4 	bl	1bd4e <memset>
		sc_store(cfg);
   14406:	4620      	mov	r0, r4
   14408:	f7ff f84a 	bl	134a0 <sc_store>
}
   1440c:	2001      	movs	r0, #1
   1440e:	b003      	add	sp, #12
   14410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14414:	00013341 	.word	0x00013341
   14418:	00022379 	.word	0x00022379
   1441c:	2000847c 	.word	0x2000847c
   14420:	2000ad18 	.word	0x2000ad18
   14424:	0001ee08 	.word	0x0001ee08
   14428:	0001cffd 	.word	0x0001cffd
   1442c:	00022392 	.word	0x00022392

00014430 <bt_gatt_is_subscribed>:
{
   14430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14432:	460c      	mov	r4, r1
   14434:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
   14436:	4606      	mov	r6, r0
   14438:	b950      	cbnz	r0, 14450 <bt_gatt_is_subscribed+0x20>
   1443a:	4930      	ldr	r1, [pc, #192]	; (144fc <bt_gatt_is_subscribed+0xcc>)
   1443c:	4830      	ldr	r0, [pc, #192]	; (14500 <bt_gatt_is_subscribed+0xd0>)
   1443e:	f640 12b5 	movw	r2, #2485	; 0x9b5
   14442:	f006 fa15 	bl	1a870 <printk>
   14446:	f640 11b5 	movw	r1, #2485	; 0x9b5
   1444a:	482c      	ldr	r0, [pc, #176]	; (144fc <bt_gatt_is_subscribed+0xcc>)
   1444c:	f006 fcb6 	bl	1adbc <assert_post_action>
	__ASSERT(attr, "invalid parameter\n");
   14450:	b954      	cbnz	r4, 14468 <bt_gatt_is_subscribed+0x38>
   14452:	492a      	ldr	r1, [pc, #168]	; (144fc <bt_gatt_is_subscribed+0xcc>)
   14454:	482a      	ldr	r0, [pc, #168]	; (14500 <bt_gatt_is_subscribed+0xd0>)
   14456:	f640 12b6 	movw	r2, #2486	; 0x9b6
   1445a:	f006 fa09 	bl	1a870 <printk>
   1445e:	f640 11b6 	movw	r1, #2486	; 0x9b6
   14462:	4826      	ldr	r0, [pc, #152]	; (144fc <bt_gatt_is_subscribed+0xcc>)
   14464:	f006 fcaa 	bl	1adbc <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   14468:	7ab3      	ldrb	r3, [r6, #10]
   1446a:	2b07      	cmp	r3, #7
   1446c:	d130      	bne.n	144d0 <bt_gatt_is_subscribed+0xa0>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   1446e:	2300      	movs	r3, #0
   14470:	f88d 3004 	strb.w	r3, [sp, #4]
   14474:	f642 0303 	movw	r3, #10243	; 0x2803
   14478:	6820      	ldr	r0, [r4, #0]
   1447a:	a901      	add	r1, sp, #4
   1447c:	f8ad 3006 	strh.w	r3, [sp, #6]
   14480:	f007 fcaf 	bl	1bde2 <bt_uuid_cmp>
   14484:	b940      	cbnz	r0, 14498 <bt_gatt_is_subscribed+0x68>
		if (!(chrc->properties &
   14486:	68e3      	ldr	r3, [r4, #12]
   14488:	799b      	ldrb	r3, [r3, #6]
   1448a:	f013 0030 	ands.w	r0, r3, #48	; 0x30
   1448e:	d020      	beq.n	144d2 <bt_gatt_is_subscribed+0xa2>
		attr = bt_gatt_attr_next(attr);
   14490:	4620      	mov	r0, r4
   14492:	f7ff fdd9 	bl	14048 <bt_gatt_attr_next>
   14496:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   14498:	2300      	movs	r3, #0
   1449a:	6820      	ldr	r0, [r4, #0]
   1449c:	f88d 3004 	strb.w	r3, [sp, #4]
   144a0:	f642 1302 	movw	r3, #10498	; 0x2902
   144a4:	a901      	add	r1, sp, #4
   144a6:	f8ad 3006 	strh.w	r3, [sp, #6]
   144aa:	f007 fc9a 	bl	1bde2 <bt_uuid_cmp>
   144ae:	b118      	cbz	r0, 144b8 <bt_gatt_is_subscribed+0x88>
		attr = bt_gatt_attr_next(attr);
   144b0:	4620      	mov	r0, r4
   144b2:	f7ff fdc9 	bl	14048 <bt_gatt_attr_next>
   144b6:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   144b8:	2500      	movs	r5, #0
   144ba:	f642 1302 	movw	r3, #10498	; 0x2902
   144be:	6820      	ldr	r0, [r4, #0]
   144c0:	a901      	add	r1, sp, #4
   144c2:	f88d 5004 	strb.w	r5, [sp, #4]
   144c6:	f8ad 3006 	strh.w	r3, [sp, #6]
   144ca:	f007 fc8a 	bl	1bde2 <bt_uuid_cmp>
   144ce:	b110      	cbz	r0, 144d6 <bt_gatt_is_subscribed+0xa6>
		return false;
   144d0:	2000      	movs	r0, #0
}
   144d2:	b003      	add	sp, #12
   144d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ccc = attr->user_data;
   144d6:	68e5      	ldr	r5, [r4, #12]
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   144d8:	1c6c      	adds	r4, r5, #1
   144da:	3565      	adds	r5, #101	; 0x65
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   144dc:	4622      	mov	r2, r4
   144de:	4630      	mov	r0, r6
   144e0:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   144e4:	f007 fe63 	bl	1c1ae <bt_conn_is_peer_addr_le>
   144e8:	b118      	cbz	r0, 144f2 <bt_gatt_is_subscribed+0xc2>
   144ea:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   144ee:	421f      	tst	r7, r3
   144f0:	d1ef      	bne.n	144d2 <bt_gatt_is_subscribed+0xa2>
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   144f2:	340a      	adds	r4, #10
   144f4:	42ac      	cmp	r4, r5
   144f6:	d1f1      	bne.n	144dc <bt_gatt_is_subscribed+0xac>
   144f8:	e7ea      	b.n	144d0 <bt_gatt_is_subscribed+0xa0>
   144fa:	bf00      	nop
   144fc:	000222f5 	.word	0x000222f5
   14500:	0001fdfa 	.word	0x0001fdfa

00014504 <bt_gatt_discover>:
{
   14504:	b5f0      	push	{r4, r5, r6, r7, lr}
   14506:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   14508:	4605      	mov	r5, r0
{
   1450a:	b085      	sub	sp, #20
	__ASSERT(conn, "invalid parameters\n");
   1450c:	b950      	cbnz	r0, 14524 <bt_gatt_discover+0x20>
   1450e:	4989      	ldr	r1, [pc, #548]	; (14734 <bt_gatt_discover+0x230>)
   14510:	4889      	ldr	r0, [pc, #548]	; (14738 <bt_gatt_discover+0x234>)
   14512:	f640 5277 	movw	r2, #3447	; 0xd77
   14516:	f006 f9ab 	bl	1a870 <printk>
   1451a:	f640 5177 	movw	r1, #3447	; 0xd77
   1451e:	4885      	ldr	r0, [pc, #532]	; (14734 <bt_gatt_discover+0x230>)
   14520:	f006 fc4c 	bl	1adbc <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   14524:	b10c      	cbz	r4, 1452a <bt_gatt_discover+0x26>
   14526:	6863      	ldr	r3, [r4, #4]
   14528:	b953      	cbnz	r3, 14540 <bt_gatt_discover+0x3c>
   1452a:	4982      	ldr	r1, [pc, #520]	; (14734 <bt_gatt_discover+0x230>)
   1452c:	4882      	ldr	r0, [pc, #520]	; (14738 <bt_gatt_discover+0x234>)
   1452e:	f640 5278 	movw	r2, #3448	; 0xd78
   14532:	f006 f99d 	bl	1a870 <printk>
   14536:	f640 5178 	movw	r1, #3448	; 0xd78
   1453a:	487e      	ldr	r0, [pc, #504]	; (14734 <bt_gatt_discover+0x230>)
   1453c:	f006 fc3e 	bl	1adbc <assert_post_action>
	__ASSERT((params->start_handle && params->end_handle),
   14540:	8923      	ldrh	r3, [r4, #8]
   14542:	b10b      	cbz	r3, 14548 <bt_gatt_discover+0x44>
   14544:	89e3      	ldrh	r3, [r4, #14]
   14546:	b953      	cbnz	r3, 1455e <bt_gatt_discover+0x5a>
   14548:	497a      	ldr	r1, [pc, #488]	; (14734 <bt_gatt_discover+0x230>)
   1454a:	487b      	ldr	r0, [pc, #492]	; (14738 <bt_gatt_discover+0x234>)
   1454c:	f640 5279 	movw	r2, #3449	; 0xd79
   14550:	f006 f98e 	bl	1a870 <printk>
   14554:	f640 5179 	movw	r1, #3449	; 0xd79
   14558:	4876      	ldr	r0, [pc, #472]	; (14734 <bt_gatt_discover+0x230>)
   1455a:	f006 fc2f 	bl	1adbc <assert_post_action>
	__ASSERT((params->start_handle <= params->end_handle),
   1455e:	8922      	ldrh	r2, [r4, #8]
   14560:	89e3      	ldrh	r3, [r4, #14]
   14562:	429a      	cmp	r2, r3
   14564:	d90a      	bls.n	1457c <bt_gatt_discover+0x78>
   14566:	4973      	ldr	r1, [pc, #460]	; (14734 <bt_gatt_discover+0x230>)
   14568:	4873      	ldr	r0, [pc, #460]	; (14738 <bt_gatt_discover+0x234>)
   1456a:	f640 527b 	movw	r2, #3451	; 0xd7b
   1456e:	f006 f97f 	bl	1a870 <printk>
   14572:	f640 517b 	movw	r1, #3451	; 0xd7b
   14576:	486f      	ldr	r0, [pc, #444]	; (14734 <bt_gatt_discover+0x230>)
   14578:	f006 fc20 	bl	1adbc <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1457c:	7aab      	ldrb	r3, [r5, #10]
   1457e:	2b07      	cmp	r3, #7
   14580:	f040 80d5 	bne.w	1472e <bt_gatt_discover+0x22a>
	switch (params->type) {
   14584:	7c22      	ldrb	r2, [r4, #16]
   14586:	2a05      	cmp	r2, #5
   14588:	f200 80cc 	bhi.w	14724 <bt_gatt_discover+0x220>
   1458c:	e8df f002 	tbb	[pc, r2]
   14590:	64640303 	.word	0x64640303
   14594:	b683      	.short	0xb683
		if (params->uuid) {
   14596:	6823      	ldr	r3, [r4, #0]
   14598:	2b00      	cmp	r3, #0
   1459a:	d03e      	beq.n	1461a <bt_gatt_discover+0x116>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_REQ, sizeof(*req));
   1459c:	2206      	movs	r2, #6
   1459e:	4628      	mov	r0, r5
   145a0:	4611      	mov	r1, r2
   145a2:	f7fe fa0b 	bl	129bc <bt_att_create_pdu>
	if (!buf) {
   145a6:	4606      	mov	r6, r0
   145a8:	b918      	cbnz	r0, 145b2 <bt_gatt_discover+0xae>
		return -ENOMEM;
   145aa:	f06f 000b 	mvn.w	r0, #11
}
   145ae:	b005      	add	sp, #20
   145b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   145b2:	f100 0708 	add.w	r7, r0, #8
   145b6:	2106      	movs	r1, #6
   145b8:	4638      	mov	r0, r7
   145ba:	f001 f9f9 	bl	159b0 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   145be:	8923      	ldrh	r3, [r4, #8]
	switch (params->uuid->type) {
   145c0:	6821      	ldr	r1, [r4, #0]
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   145c2:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   145c4:	89e3      	ldrh	r3, [r4, #14]
   145c6:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   145c8:	7c23      	ldrb	r3, [r4, #16]
		uuid_val = BT_UUID_GATT_SECONDARY_VAL;
   145ca:	2b00      	cmp	r3, #0
   145cc:	f642 0301 	movw	r3, #10241	; 0x2801
   145d0:	bf08      	it	eq
   145d2:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
   145d6:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   145d8:	780a      	ldrb	r2, [r1, #0]
   145da:	b15a      	cbz	r2, 145f4 <bt_gatt_discover+0xf0>
   145dc:	2a02      	cmp	r2, #2
   145de:	d016      	beq.n	1460e <bt_gatt_discover+0x10a>
		BT_ERR("Unknown UUID type %u", params->uuid->type);
   145e0:	4856      	ldr	r0, [pc, #344]	; (1473c <bt_gatt_discover+0x238>)
   145e2:	2145      	movs	r1, #69	; 0x45
   145e4:	f006 f944 	bl	1a870 <printk>
		net_buf_unref(buf);
   145e8:	4630      	mov	r0, r6
   145ea:	f001 f8cb 	bl	15784 <net_buf_unref>
	return -EINVAL;
   145ee:	f06f 0015 	mvn.w	r0, #21
   145f2:	e7dc      	b.n	145ae <bt_gatt_discover+0xaa>
	net_buf_simple_add_le16(&buf->b, val);
   145f4:	4638      	mov	r0, r7
   145f6:	8849      	ldrh	r1, [r1, #2]
   145f8:	f008 fecf 	bl	1d39a <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_find_type_rsp, params, NULL);
   145fc:	4623      	mov	r3, r4
   145fe:	4a50      	ldr	r2, [pc, #320]	; (14740 <bt_gatt_discover+0x23c>)
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   14600:	4631      	mov	r1, r6
   14602:	4628      	mov	r0, r5
}
   14604:	b005      	add	sp, #20
   14606:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   1460a:	f7ff b811 	b.w	13630 <gatt_send.constprop.0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1460e:	2210      	movs	r2, #16
   14610:	4638      	mov	r0, r7
   14612:	3101      	adds	r1, #1
   14614:	f008 feae 	bl	1d374 <net_buf_simple_add_mem>
   14618:	e7f0      	b.n	145fc <bt_gatt_discover+0xf8>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_REQ, sizeof(*req));
   1461a:	2204      	movs	r2, #4
   1461c:	2110      	movs	r1, #16
   1461e:	4628      	mov	r0, r5
   14620:	f7fe f9cc 	bl	129bc <bt_att_create_pdu>
	if (!buf) {
   14624:	4606      	mov	r6, r0
   14626:	2800      	cmp	r0, #0
   14628:	d0bf      	beq.n	145aa <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   1462a:	f100 0708 	add.w	r7, r0, #8
   1462e:	2104      	movs	r1, #4
   14630:	4638      	mov	r0, r7
   14632:	f001 f9bd 	bl	159b0 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   14636:	8923      	ldrh	r3, [r4, #8]
   14638:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   1463a:	89e3      	ldrh	r3, [r4, #14]
   1463c:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   1463e:	7c23      	ldrb	r3, [r4, #16]
   14640:	b93b      	cbnz	r3, 14652 <bt_gatt_discover+0x14e>
	net_buf_simple_add_le16(&buf->b, val);
   14642:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   14646:	4638      	mov	r0, r7
   14648:	f008 fea7 	bl	1d39a <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_group_rsp, params, NULL);
   1464c:	4623      	mov	r3, r4
   1464e:	4a3d      	ldr	r2, [pc, #244]	; (14744 <bt_gatt_discover+0x240>)
   14650:	e7d6      	b.n	14600 <bt_gatt_discover+0xfc>
   14652:	f642 0101 	movw	r1, #10241	; 0x2801
   14656:	e7f6      	b.n	14646 <bt_gatt_discover+0x142>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
   14658:	2204      	movs	r2, #4
   1465a:	2108      	movs	r1, #8
   1465c:	4628      	mov	r0, r5
   1465e:	f7fe f9ad 	bl	129bc <bt_att_create_pdu>
	if (!buf) {
   14662:	4606      	mov	r6, r0
   14664:	2800      	cmp	r0, #0
   14666:	d0a0      	beq.n	145aa <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   14668:	f100 0708 	add.w	r7, r0, #8
   1466c:	2104      	movs	r1, #4
   1466e:	4638      	mov	r0, r7
   14670:	f001 f99e 	bl	159b0 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   14674:	8923      	ldrh	r3, [r4, #8]
   14676:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   14678:	89e3      	ldrh	r3, [r4, #14]
   1467a:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   1467c:	7c23      	ldrb	r3, [r4, #16]
	net_buf_simple_add_le16(&buf->b, val);
   1467e:	4638      	mov	r0, r7
   14680:	2b02      	cmp	r3, #2
   14682:	bf0c      	ite	eq
   14684:	f642 0102 	movweq	r1, #10242	; 0x2802
   14688:	f642 0103 	movwne	r1, #10243	; 0x2803
   1468c:	f008 fe85 	bl	1d39a <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_type_rsp, params, NULL);
   14690:	4623      	mov	r3, r4
   14692:	4a2d      	ldr	r2, [pc, #180]	; (14748 <bt_gatt_discover+0x244>)
   14694:	e7b4      	b.n	14600 <bt_gatt_discover+0xfc>
		if (params->uuid &&
   14696:	6820      	ldr	r0, [r4, #0]
   14698:	b380      	cbz	r0, 146fc <bt_gatt_discover+0x1f8>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   1469a:	2600      	movs	r6, #0
   1469c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   146a0:	4669      	mov	r1, sp
   146a2:	f88d 6000 	strb.w	r6, [sp]
   146a6:	f8ad 3002 	strh.w	r3, [sp, #2]
   146aa:	f007 fb9a 	bl	1bde2 <bt_uuid_cmp>
		if (params->uuid &&
   146ae:	2800      	cmp	r0, #0
   146b0:	d09d      	beq.n	145ee <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   146b2:	f642 0301 	movw	r3, #10241	; 0x2801
   146b6:	6820      	ldr	r0, [r4, #0]
   146b8:	a901      	add	r1, sp, #4
   146ba:	f88d 6004 	strb.w	r6, [sp, #4]
   146be:	f8ad 3006 	strh.w	r3, [sp, #6]
   146c2:	f007 fb8e 	bl	1bde2 <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   146c6:	2800      	cmp	r0, #0
   146c8:	d091      	beq.n	145ee <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   146ca:	f642 0302 	movw	r3, #10242	; 0x2802
   146ce:	6820      	ldr	r0, [r4, #0]
   146d0:	a902      	add	r1, sp, #8
   146d2:	f88d 6008 	strb.w	r6, [sp, #8]
   146d6:	f8ad 300a 	strh.w	r3, [sp, #10]
   146da:	f007 fb82 	bl	1bde2 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   146de:	2800      	cmp	r0, #0
   146e0:	d085      	beq.n	145ee <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
   146e2:	f642 0303 	movw	r3, #10243	; 0x2803
   146e6:	6820      	ldr	r0, [r4, #0]
   146e8:	a903      	add	r1, sp, #12
   146ea:	f88d 600c 	strb.w	r6, [sp, #12]
   146ee:	f8ad 300e 	strh.w	r3, [sp, #14]
   146f2:	f007 fb76 	bl	1bde2 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   146f6:	2800      	cmp	r0, #0
   146f8:	f43f af79 	beq.w	145ee <bt_gatt_discover+0xea>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_REQ, sizeof(*req));
   146fc:	2204      	movs	r2, #4
   146fe:	4628      	mov	r0, r5
   14700:	4611      	mov	r1, r2
   14702:	f7fe f95b 	bl	129bc <bt_att_create_pdu>
	if (!buf) {
   14706:	4606      	mov	r6, r0
   14708:	2800      	cmp	r0, #0
   1470a:	f43f af4e 	beq.w	145aa <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   1470e:	2104      	movs	r1, #4
   14710:	3008      	adds	r0, #8
   14712:	f001 f94d 	bl	159b0 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   14716:	8923      	ldrh	r3, [r4, #8]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   14718:	4a0c      	ldr	r2, [pc, #48]	; (1474c <bt_gatt_discover+0x248>)
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   1471a:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   1471c:	89e3      	ldrh	r3, [r4, #14]
   1471e:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   14720:	4623      	mov	r3, r4
   14722:	e76d      	b.n	14600 <bt_gatt_discover+0xfc>
		BT_ERR("Invalid discovery type: %u", params->type);
   14724:	2145      	movs	r1, #69	; 0x45
   14726:	480a      	ldr	r0, [pc, #40]	; (14750 <bt_gatt_discover+0x24c>)
   14728:	f006 f8a2 	bl	1a870 <printk>
   1472c:	e75f      	b.n	145ee <bt_gatt_discover+0xea>
		return -ENOTCONN;
   1472e:	f06f 0038 	mvn.w	r0, #56	; 0x38
   14732:	e73c      	b.n	145ae <bt_gatt_discover+0xaa>
   14734:	000222f5 	.word	0x000222f5
   14738:	0001fdfa 	.word	0x0001fdfa
   1473c:	000223b4 	.word	0x000223b4
   14740:	0001d17f 	.word	0x0001d17f
   14744:	00014755 	.word	0x00014755
   14748:	0001485d 	.word	0x0001485d
   1474c:	00014b0d 	.word	0x00014b0d
   14750:	000223ce 	.word	0x000223ce

00014754 <gatt_read_group_rsp>:
{
   14754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14758:	b08f      	sub	sp, #60	; 0x3c
   1475a:	4681      	mov	r9, r0
   1475c:	4617      	mov	r7, r2
   1475e:	9d18      	ldr	r5, [sp, #96]	; 0x60
	if (err) {
   14760:	b131      	cbz	r1, 14770 <gatt_read_group_rsp+0x1c>
		params->func(conn, NULL, params);
   14762:	462a      	mov	r2, r5
   14764:	2100      	movs	r1, #0
   14766:	686b      	ldr	r3, [r5, #4]
}
   14768:	b00f      	add	sp, #60	; 0x3c
   1476a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   1476e:	4718      	bx	r3
	switch (rsp->len) {
   14770:	7812      	ldrb	r2, [r2, #0]
   14772:	2a06      	cmp	r2, #6
   14774:	d00d      	beq.n	14792 <gatt_read_group_rsp+0x3e>
   14776:	2a14      	cmp	r2, #20
   14778:	d021      	beq.n	147be <gatt_read_group_rsp+0x6a>
		BT_ERR("Invalid data len %u", rsp->len);
   1477a:	2145      	movs	r1, #69	; 0x45
   1477c:	4836      	ldr	r0, [pc, #216]	; (14858 <gatt_read_group_rsp+0x104>)
   1477e:	f006 f877 	bl	1a870 <printk>
	params->func(conn, NULL, params);
   14782:	462a      	mov	r2, r5
   14784:	2100      	movs	r1, #0
   14786:	4648      	mov	r0, r9
   14788:	686b      	ldr	r3, [r5, #4]
   1478a:	4798      	blx	r3
}
   1478c:	b00f      	add	sp, #60	; 0x3c
   1478e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		u.uuid.type = BT_UUID_TYPE_16;
   14792:	f88d 1010 	strb.w	r1, [sp, #16]
	uint16_t start_handle, end_handle = 0U;
   14796:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   14798:	3b01      	subs	r3, #1
   1479a:	b29c      	uxth	r4, r3
   1479c:	f107 0801 	add.w	r8, r7, #1
   147a0:	783b      	ldrb	r3, [r7, #0]
   147a2:	42a3      	cmp	r3, r4
   147a4:	d90f      	bls.n	147c6 <gatt_read_group_rsp+0x72>
	if (length == 0U && end_handle) {
   147a6:	2c00      	cmp	r4, #0
   147a8:	d1eb      	bne.n	14782 <gatt_read_group_rsp+0x2e>
   147aa:	2e00      	cmp	r6, #0
   147ac:	d0e9      	beq.n	14782 <gatt_read_group_rsp+0x2e>
	gatt_discover_next(conn, handle, params);
   147ae:	462a      	mov	r2, r5
   147b0:	4631      	mov	r1, r6
   147b2:	4648      	mov	r0, r9
}
   147b4:	b00f      	add	sp, #60	; 0x3c
   147b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   147ba:	f008 bcc3 	b.w	1d144 <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   147be:	2202      	movs	r2, #2
   147c0:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
   147c4:	e7e7      	b.n	14796 <gatt_read_group_rsp+0x42>
		struct bt_gatt_attr attr = {};
   147c6:	2214      	movs	r2, #20
   147c8:	2100      	movs	r1, #0
   147ca:	a809      	add	r0, sp, #36	; 0x24
   147cc:	f007 fabf 	bl	1bd4e <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   147d0:	f8b8 a000 	ldrh.w	sl, [r8]
   147d4:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
   147d8:	2b00      	cmp	r3, #0
   147da:	d0d2      	beq.n	14782 <gatt_read_group_rsp+0x2e>
		end_handle = sys_le16_to_cpu(data->end_handle);
   147dc:	f8b8 b002 	ldrh.w	fp, [r8, #2]
   147e0:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
   147e4:	2e00      	cmp	r6, #0
   147e6:	d0cc      	beq.n	14782 <gatt_read_group_rsp+0x2e>
   147e8:	42b3      	cmp	r3, r6
   147ea:	d8ca      	bhi.n	14782 <gatt_read_group_rsp+0x2e>
		switch (u.uuid.type) {
   147ec:	f89d 3010 	ldrb.w	r3, [sp, #16]
   147f0:	b323      	cbz	r3, 1483c <gatt_read_group_rsp+0xe8>
   147f2:	2b02      	cmp	r3, #2
   147f4:	d02a      	beq.n	1484c <gatt_read_group_rsp+0xf8>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   147f6:	f04f 0300 	mov.w	r3, #0
   147fa:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   147fe:	7c2b      	ldrb	r3, [r5, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14800:	462a      	mov	r2, r5
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   14802:	2b00      	cmp	r3, #0
   14804:	f642 0301 	movw	r3, #10241	; 0x2801
   14808:	bf08      	it	eq
   1480a:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   1480e:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
   14812:	ab04      	add	r3, sp, #16
   14814:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   14816:	ab01      	add	r3, sp, #4
   14818:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
   1481a:	ab02      	add	r3, sp, #8
   1481c:	930c      	str	r3, [sp, #48]	; 0x30
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1481e:	4648      	mov	r0, r9
   14820:	686b      	ldr	r3, [r5, #4]
		value.end_handle = end_handle;
   14822:	f8ad b00c 	strh.w	fp, [sp, #12]
		attr.handle = start_handle;
   14826:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1482a:	a909      	add	r1, sp, #36	; 0x24
   1482c:	4798      	blx	r3
   1482e:	2800      	cmp	r0, #0
   14830:	d0ac      	beq.n	1478c <gatt_read_group_rsp+0x38>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   14832:	783a      	ldrb	r2, [r7, #0]
   14834:	1aa4      	subs	r4, r4, r2
   14836:	b2a4      	uxth	r4, r4
   14838:	4490      	add	r8, r2
   1483a:	e7b1      	b.n	147a0 <gatt_read_group_rsp+0x4c>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   1483c:	2202      	movs	r2, #2
   1483e:	f108 0104 	add.w	r1, r8, #4
   14842:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   14846:	f007 fa57 	bl	1bcf8 <memcpy>
			break;
   1484a:	e7d4      	b.n	147f6 <gatt_read_group_rsp+0xa2>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   1484c:	2210      	movs	r2, #16
   1484e:	f108 0104 	add.w	r1, r8, #4
   14852:	f10d 0011 	add.w	r0, sp, #17
   14856:	e7f6      	b.n	14846 <gatt_read_group_rsp+0xf2>
   14858:	000223ee 	.word	0x000223ee

0001485c <gatt_read_type_rsp>:
{
   1485c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14860:	b091      	sub	sp, #68	; 0x44
   14862:	4607      	mov	r7, r0
   14864:	4690      	mov	r8, r2
   14866:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	if (err) {
   14868:	b131      	cbz	r1, 14878 <gatt_read_type_rsp+0x1c>
		params->func(conn, NULL, params);
   1486a:	462a      	mov	r2, r5
   1486c:	2100      	movs	r1, #0
   1486e:	686b      	ldr	r3, [r5, #4]
}
   14870:	b011      	add	sp, #68	; 0x44
   14872:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   14876:	4718      	bx	r3
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   14878:	7c28      	ldrb	r0, [r5, #16]
	switch (rsp->len) {
   1487a:	7812      	ldrb	r2, [r2, #0]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   1487c:	2802      	cmp	r0, #2
   1487e:	f040 8089 	bne.w	14994 <gatt_read_type_rsp+0x138>
	switch (rsp->len) {
   14882:	2a06      	cmp	r2, #6
   14884:	d01c      	beq.n	148c0 <gatt_read_type_rsp+0x64>
   14886:	2a08      	cmp	r2, #8
   14888:	f040 8088 	bne.w	1499c <gatt_read_type_rsp+0x140>
		u.uuid.type = BT_UUID_TYPE_16;
   1488c:	f88d 1018 	strb.w	r1, [sp, #24]
	uint16_t handle = 0U;
   14890:	2600      	movs	r6, #0
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14892:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
   14894:	1e5c      	subs	r4, r3, #1
   14896:	b2a4      	uxth	r4, r4
   14898:	f108 0901 	add.w	r9, r8, #1
			value.uuid = &u.uuid;
   1489c:	f10d 0a18 	add.w	sl, sp, #24
	for (length--, pdu = rsp->data; length >= rsp->len;
   148a0:	f898 3000 	ldrb.w	r3, [r8]
   148a4:	42a3      	cmp	r3, r4
   148a6:	d90e      	bls.n	148c6 <gatt_read_type_rsp+0x6a>
	if (length == 0U && handle) {
   148a8:	2c00      	cmp	r4, #0
   148aa:	d17b      	bne.n	149a4 <gatt_read_type_rsp+0x148>
   148ac:	2e00      	cmp	r6, #0
   148ae:	d079      	beq.n	149a4 <gatt_read_type_rsp+0x148>
	gatt_discover_next(conn, handle, params);
   148b0:	462a      	mov	r2, r5
   148b2:	4631      	mov	r1, r6
   148b4:	4638      	mov	r0, r7
}
   148b6:	b011      	add	sp, #68	; 0x44
   148b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   148bc:	f008 bc42 	b.w	1d144 <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   148c0:	f88d 0018 	strb.w	r0, [sp, #24]
		break;
   148c4:	e7e4      	b.n	14890 <gatt_read_type_rsp+0x34>
		handle = sys_le16_to_cpu(data->handle);
   148c6:	f8b9 3000 	ldrh.w	r3, [r9]
   148ca:	b29e      	uxth	r6, r3
		if (!handle) {
   148cc:	2e00      	cmp	r6, #0
   148ce:	d069      	beq.n	149a4 <gatt_read_type_rsp+0x148>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   148d0:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   148d4:	f8ad 2014 	strh.w	r2, [sp, #20]
   148d8:	b290      	uxth	r0, r2
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
   148da:	f8b9 2004 	ldrh.w	r2, [r9, #4]
   148de:	b291      	uxth	r1, r2
   148e0:	f8ad 2016 	strh.w	r2, [sp, #22]
		switch (u.uuid.type) {
   148e4:	f89d 2018 	ldrb.w	r2, [sp, #24]
   148e8:	b182      	cbz	r2, 1490c <gatt_read_type_rsp+0xb0>
   148ea:	2a02      	cmp	r2, #2
   148ec:	d019      	beq.n	14922 <gatt_read_type_rsp+0xc6>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   148ee:	6829      	ldr	r1, [r5, #0]
   148f0:	2900      	cmp	r1, #0
   148f2:	d036      	beq.n	14962 <gatt_read_type_rsp+0x106>
   148f4:	4650      	mov	r0, sl
   148f6:	9301      	str	r3, [sp, #4]
   148f8:	f007 fa73 	bl	1bde2 <bt_uuid_cmp>
   148fc:	9b01      	ldr	r3, [sp, #4]
   148fe:	b380      	cbz	r0, 14962 <gatt_read_type_rsp+0x106>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   14900:	f898 2000 	ldrb.w	r2, [r8]
   14904:	1aa4      	subs	r4, r4, r2
   14906:	b2a4      	uxth	r4, r4
   14908:	4491      	add	r9, r2
   1490a:	e7c9      	b.n	148a0 <gatt_read_type_rsp+0x44>
			value.uuid = &u.uuid;
   1490c:	f8cd a010 	str.w	sl, [sp, #16]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
   14910:	f899 2006 	ldrb.w	r2, [r9, #6]
   14914:	f899 1007 	ldrb.w	r1, [r9, #7]
   14918:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1491c:	f8ad 201a 	strh.w	r2, [sp, #26]
			break;
   14920:	e7e5      	b.n	148ee <gatt_read_type_rsp+0x92>
			params->_included.start_handle = value.start_handle;
   14922:	8168      	strh	r0, [r5, #10]
			params->_included.end_handle = value.end_handle;
   14924:	81a9      	strh	r1, [r5, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
   14926:	4638      	mov	r0, r7
   14928:	210a      	movs	r1, #10
			params->_included.attr_handle = handle;
   1492a:	812e      	strh	r6, [r5, #8]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
   1492c:	9201      	str	r2, [sp, #4]
   1492e:	f7fe f845 	bl	129bc <bt_att_create_pdu>
	if (!buf) {
   14932:	4604      	mov	r4, r0
   14934:	b190      	cbz	r0, 1495c <gatt_read_type_rsp+0x100>
   14936:	9a01      	ldr	r2, [sp, #4]
   14938:	3008      	adds	r0, #8
   1493a:	4611      	mov	r1, r2
   1493c:	f001 f838 	bl	159b0 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   14940:	896b      	ldrh	r3, [r5, #10]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
   14942:	4621      	mov	r1, r4
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   14944:	8003      	strh	r3, [r0, #0]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
   14946:	4a49      	ldr	r2, [pc, #292]	; (14a6c <gatt_read_type_rsp+0x210>)
   14948:	462b      	mov	r3, r5
   1494a:	4638      	mov	r0, r7
   1494c:	f7fe fe70 	bl	13630 <gatt_send.constprop.0>
			return read_included_uuid(conn, params);
   14950:	b286      	uxth	r6, r0
	if (!handle) {
   14952:	2e00      	cmp	r6, #0
   14954:	d1ac      	bne.n	148b0 <gatt_read_type_rsp+0x54>
}
   14956:	b011      	add	sp, #68	; 0x44
   14958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
   1495c:	f06f 000b 	mvn.w	r0, #11
   14960:	e7f6      	b.n	14950 <gatt_read_type_rsp+0xf4>
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14962:	f642 0202 	movw	r2, #10242	; 0x2802
   14966:	f8ad 200e 	strh.w	r2, [sp, #14]
   1496a:	aa03      	add	r2, sp, #12
   1496c:	e9cd 2b0b 	strd	r2, fp, [sp, #44]	; 0x2c
   14970:	aa04      	add	r2, sp, #16
   14972:	920e      	str	r2, [sp, #56]	; 0x38
		attr.handle = handle;
   14974:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14978:	462a      	mov	r2, r5
   1497a:	4638      	mov	r0, r7
   1497c:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1497e:	f88d b00c 	strb.w	fp, [sp, #12]
   14982:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   14986:	f88d b03e 	strb.w	fp, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1498a:	a90b      	add	r1, sp, #44	; 0x2c
   1498c:	4798      	blx	r3
   1498e:	2800      	cmp	r0, #0
   14990:	d1b6      	bne.n	14900 <gatt_read_type_rsp+0xa4>
   14992:	e7e0      	b.n	14956 <gatt_read_type_rsp+0xfa>
	switch (rsp->len) {
   14994:	2a07      	cmp	r2, #7
   14996:	d00b      	beq.n	149b0 <gatt_read_type_rsp+0x154>
   14998:	2a15      	cmp	r2, #21
   1499a:	d02e      	beq.n	149fa <gatt_read_type_rsp+0x19e>
		BT_ERR("Invalid data len %u", rsp->len);
   1499c:	2145      	movs	r1, #69	; 0x45
   1499e:	4834      	ldr	r0, [pc, #208]	; (14a70 <gatt_read_type_rsp+0x214>)
   149a0:	f005 ff66 	bl	1a870 <printk>
	params->func(conn, NULL, params);
   149a4:	462a      	mov	r2, r5
   149a6:	2100      	movs	r1, #0
   149a8:	4638      	mov	r0, r7
   149aa:	686b      	ldr	r3, [r5, #4]
   149ac:	4798      	blx	r3
	if (!handle) {
   149ae:	e7d2      	b.n	14956 <gatt_read_type_rsp+0xfa>
		u.uuid.type = BT_UUID_TYPE_16;
   149b0:	f88d 1018 	strb.w	r1, [sp, #24]
	uint16_t handle = 0U;
   149b4:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   149b6:	1e5c      	subs	r4, r3, #1
   149b8:	b2a4      	uxth	r4, r4
   149ba:	f108 0901 	add.w	r9, r8, #1
   149be:	f10d 0a18 	add.w	sl, sp, #24
   149c2:	f898 3000 	ldrb.w	r3, [r8]
   149c6:	42a3      	cmp	r3, r4
   149c8:	f63f af6e 	bhi.w	148a8 <gatt_read_type_rsp+0x4c>
		handle = sys_le16_to_cpu(data->handle);
   149cc:	f8b9 b000 	ldrh.w	fp, [r9]
   149d0:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
   149d4:	2e00      	cmp	r6, #0
   149d6:	d0e5      	beq.n	149a4 <gatt_read_type_rsp+0x148>
		switch (u.uuid.type) {
   149d8:	f89d 3018 	ldrb.w	r3, [sp, #24]
   149dc:	b18b      	cbz	r3, 14a02 <gatt_read_type_rsp+0x1a6>
   149de:	2b02      	cmp	r3, #2
   149e0:	d018      	beq.n	14a14 <gatt_read_type_rsp+0x1b8>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   149e2:	6829      	ldr	r1, [r5, #0]
   149e4:	b1f1      	cbz	r1, 14a24 <gatt_read_type_rsp+0x1c8>
   149e6:	4650      	mov	r0, sl
   149e8:	f007 f9fb 	bl	1bde2 <bt_uuid_cmp>
   149ec:	b1d0      	cbz	r0, 14a24 <gatt_read_type_rsp+0x1c8>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   149ee:	f898 2000 	ldrb.w	r2, [r8]
   149f2:	1aa4      	subs	r4, r4, r2
   149f4:	b2a4      	uxth	r4, r4
   149f6:	4491      	add	r9, r2
   149f8:	e7e3      	b.n	149c2 <gatt_read_type_rsp+0x166>
		u.uuid.type = BT_UUID_TYPE_128;
   149fa:	2202      	movs	r2, #2
   149fc:	f88d 2018 	strb.w	r2, [sp, #24]
		break;
   14a00:	e7d8      	b.n	149b4 <gatt_read_type_rsp+0x158>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
   14a02:	f899 3005 	ldrb.w	r3, [r9, #5]
   14a06:	f899 2006 	ldrb.w	r2, [r9, #6]
   14a0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   14a0e:	f8ad 301a 	strh.w	r3, [sp, #26]
			break;
   14a12:	e7e6      	b.n	149e2 <gatt_read_type_rsp+0x186>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
   14a14:	2210      	movs	r2, #16
   14a16:	f109 0105 	add.w	r1, r9, #5
   14a1a:	f10d 0019 	add.w	r0, sp, #25
   14a1e:	f007 f96b 	bl	1bcf8 <memcpy>
			break;
   14a22:	e7de      	b.n	149e2 <gatt_read_type_rsp+0x186>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   14a24:	f8b9 2003 	ldrh.w	r2, [r9, #3]
   14a28:	f899 3002 	ldrb.w	r3, [r9, #2]
   14a2c:	f8ad 2014 	strh.w	r2, [sp, #20]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14a30:	f642 0203 	movw	r2, #10243	; 0x2803
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   14a34:	f88d 3016 	strb.w	r3, [sp, #22]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14a38:	2300      	movs	r3, #0
   14a3a:	f8ad 200e 	strh.w	r2, [sp, #14]
   14a3e:	aa03      	add	r2, sp, #12
   14a40:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
   14a44:	aa04      	add	r2, sp, #16
   14a46:	f88d 300c 	strb.w	r3, [sp, #12]
   14a4a:	930d      	str	r3, [sp, #52]	; 0x34
   14a4c:	920e      	str	r2, [sp, #56]	; 0x38
   14a4e:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14a52:	462a      	mov	r2, r5
   14a54:	4638      	mov	r0, r7
   14a56:	686b      	ldr	r3, [r5, #4]
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   14a58:	f8cd a010 	str.w	sl, [sp, #16]
		attr.handle = handle;
   14a5c:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14a60:	a90b      	add	r1, sp, #44	; 0x2c
   14a62:	4798      	blx	r3
   14a64:	2800      	cmp	r0, #0
   14a66:	d1c2      	bne.n	149ee <gatt_read_type_rsp+0x192>
   14a68:	e775      	b.n	14956 <gatt_read_type_rsp+0xfa>
   14a6a:	bf00      	nop
   14a6c:	00014a75 	.word	0x00014a75
   14a70:	000223ee 	.word	0x000223ee

00014a74 <read_included_uuid_cb>:
{
   14a74:	b570      	push	{r4, r5, r6, lr}
	if (length != 16U) {
   14a76:	2b10      	cmp	r3, #16
{
   14a78:	b08e      	sub	sp, #56	; 0x38
   14a7a:	4611      	mov	r1, r2
   14a7c:	4605      	mov	r5, r0
   14a7e:	461a      	mov	r2, r3
   14a80:	9c12      	ldr	r4, [sp, #72]	; 0x48
	if (length != 16U) {
   14a82:	d00b      	beq.n	14a9c <read_included_uuid_cb+0x28>
		BT_ERR("Invalid data len %u", length);
   14a84:	2145      	movs	r1, #69	; 0x45
   14a86:	4820      	ldr	r0, [pc, #128]	; (14b08 <read_included_uuid_cb+0x94>)
   14a88:	f005 fef2 	bl	1a870 <printk>
		params->func(conn, NULL, params);
   14a8c:	4622      	mov	r2, r4
   14a8e:	2100      	movs	r1, #0
   14a90:	4628      	mov	r0, r5
   14a92:	6863      	ldr	r3, [r4, #4]
}
   14a94:	b00e      	add	sp, #56	; 0x38
   14a96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->func(conn, NULL, params);
   14a9a:	4718      	bx	r3
	value.start_handle = params->_included.start_handle;
   14a9c:	8963      	ldrh	r3, [r4, #10]
	value.uuid = &u.uuid;
   14a9e:	ae04      	add	r6, sp, #16
	value.start_handle = params->_included.start_handle;
   14aa0:	f8ad 300c 	strh.w	r3, [sp, #12]
	value.end_handle = params->_included.end_handle;
   14aa4:	89a3      	ldrh	r3, [r4, #12]
	memcpy(u.u128.val, pdu, length);
   14aa6:	f10d 0011 	add.w	r0, sp, #17
	value.end_handle = params->_included.end_handle;
   14aaa:	f8ad 300e 	strh.w	r3, [sp, #14]
	u.uuid.type = BT_UUID_TYPE_128;
   14aae:	2302      	movs	r3, #2
	value.uuid = &u.uuid;
   14ab0:	9602      	str	r6, [sp, #8]
	u.uuid.type = BT_UUID_TYPE_128;
   14ab2:	f88d 3010 	strb.w	r3, [sp, #16]
	memcpy(u.u128.val, pdu, length);
   14ab6:	f007 f91f 	bl	1bcf8 <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14aba:	6821      	ldr	r1, [r4, #0]
   14abc:	b9c9      	cbnz	r1, 14af2 <read_included_uuid_cb+0x7e>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14abe:	f642 0202 	movw	r2, #10242	; 0x2802
   14ac2:	2300      	movs	r3, #0
   14ac4:	f8ad 2006 	strh.w	r2, [sp, #6]
   14ac8:	aa01      	add	r2, sp, #4
   14aca:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
   14ace:	f88d 3004 	strb.w	r3, [sp, #4]
   14ad2:	930b      	str	r3, [sp, #44]	; 0x2c
   14ad4:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	attr.handle = params->_included.attr_handle;
   14ad8:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14ada:	aa02      	add	r2, sp, #8
   14adc:	920c      	str	r2, [sp, #48]	; 0x30
	attr.handle = params->_included.attr_handle;
   14ade:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14ae2:	4622      	mov	r2, r4
   14ae4:	4628      	mov	r0, r5
   14ae6:	6863      	ldr	r3, [r4, #4]
   14ae8:	a909      	add	r1, sp, #36	; 0x24
   14aea:	4798      	blx	r3
   14aec:	b930      	cbnz	r0, 14afc <read_included_uuid_cb+0x88>
}
   14aee:	b00e      	add	sp, #56	; 0x38
   14af0:	bd70      	pop	{r4, r5, r6, pc}
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14af2:	4630      	mov	r0, r6
   14af4:	f007 f975 	bl	1bde2 <bt_uuid_cmp>
   14af8:	2800      	cmp	r0, #0
   14afa:	d0e0      	beq.n	14abe <read_included_uuid_cb+0x4a>
	gatt_discover_next(conn, params->start_handle, params);
   14afc:	4622      	mov	r2, r4
   14afe:	4628      	mov	r0, r5
   14b00:	8921      	ldrh	r1, [r4, #8]
   14b02:	f008 fb1f 	bl	1d144 <gatt_discover_next>
	return;
   14b06:	e7f2      	b.n	14aee <read_included_uuid_cb+0x7a>
   14b08:	000223ee 	.word	0x000223ee

00014b0c <gatt_find_info_rsp>:
{
   14b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b10:	b08f      	sub	sp, #60	; 0x3c
   14b12:	4680      	mov	r8, r0
   14b14:	4614      	mov	r4, r2
   14b16:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
   14b18:	b941      	cbnz	r1, 14b2c <gatt_find_info_rsp+0x20>
	switch (rsp->format) {
   14b1a:	7812      	ldrb	r2, [r2, #0]
   14b1c:	2a01      	cmp	r2, #1
   14b1e:	d00b      	beq.n	14b38 <gatt_find_info_rsp+0x2c>
   14b20:	2a02      	cmp	r2, #2
   14b22:	d022      	beq.n	14b6a <gatt_find_info_rsp+0x5e>
		BT_ERR("Invalid format %u", rsp->format);
   14b24:	2145      	movs	r1, #69	; 0x45
   14b26:	484b      	ldr	r0, [pc, #300]	; (14c54 <gatt_find_info_rsp+0x148>)
   14b28:	f005 fea2 	bl	1a870 <printk>
	params->func(conn, NULL, params);
   14b2c:	4632      	mov	r2, r6
   14b2e:	2100      	movs	r1, #0
   14b30:	4640      	mov	r0, r8
   14b32:	6873      	ldr	r3, [r6, #4]
   14b34:	4798      	blx	r3
   14b36:	e08a      	b.n	14c4e <gatt_find_info_rsp+0x142>
		len = sizeof(*info.i16);
   14b38:	f04f 0a04 	mov.w	sl, #4
		u.uuid.type = BT_UUID_TYPE_16;
   14b3c:	f88d 1010 	strb.w	r1, [sp, #16]
	length--;
   14b40:	3b01      	subs	r3, #1
   14b42:	b29b      	uxth	r3, r3
	if (length < len) {
   14b44:	4553      	cmp	r3, sl
   14b46:	d3f1      	bcc.n	14b2c <gatt_find_info_rsp+0x20>
	bool skip = false;
   14b48:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   14b4c:	fbb3 f3fa 	udiv	r3, r3, sl
	uint16_t handle = 0U;
   14b50:	46cb      	mov	fp, r9
			skip = false;
   14b52:	464d      	mov	r5, r9
	for (i = length / len, pdu = rsp->info; i != 0;
   14b54:	9300      	str	r3, [sp, #0]
   14b56:	3401      	adds	r4, #1
   14b58:	af04      	add	r7, sp, #16
   14b5a:	9b00      	ldr	r3, [sp, #0]
   14b5c:	b953      	cbnz	r3, 14b74 <gatt_find_info_rsp+0x68>
	gatt_discover_next(conn, handle, params);
   14b5e:	4632      	mov	r2, r6
   14b60:	4659      	mov	r1, fp
   14b62:	4640      	mov	r0, r8
   14b64:	f008 faee 	bl	1d144 <gatt_discover_next>
	return;
   14b68:	e071      	b.n	14c4e <gatt_find_info_rsp+0x142>
		len = sizeof(*info.i128);
   14b6a:	f04f 0a12 	mov.w	sl, #18
		u.uuid.type = BT_UUID_TYPE_128;
   14b6e:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
   14b72:	e7e5      	b.n	14b40 <gatt_find_info_rsp+0x34>
		handle = sys_le16_to_cpu(info.i16->handle);
   14b74:	8823      	ldrh	r3, [r4, #0]
   14b76:	9301      	str	r3, [sp, #4]
   14b78:	f8bd b004 	ldrh.w	fp, [sp, #4]
		if (skip) {
   14b7c:	f1b9 0f00 	cmp.w	r9, #0
   14b80:	d151      	bne.n	14c26 <gatt_find_info_rsp+0x11a>
		switch (u.uuid.type) {
   14b82:	f89d 3010 	ldrb.w	r3, [sp, #16]
   14b86:	2b00      	cmp	r3, #0
   14b88:	d03a      	beq.n	14c00 <gatt_find_info_rsp+0xf4>
   14b8a:	2b02      	cmp	r3, #2
   14b8c:	d03f      	beq.n	14c0e <gatt_find_info_rsp+0x102>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14b8e:	6831      	ldr	r1, [r6, #0]
   14b90:	2900      	cmp	r1, #0
   14b92:	d143      	bne.n	14c1c <gatt_find_info_rsp+0x110>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   14b94:	7c33      	ldrb	r3, [r6, #16]
   14b96:	2b04      	cmp	r3, #4
   14b98:	d148      	bne.n	14c2c <gatt_find_info_rsp+0x120>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   14b9a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   14b9e:	4638      	mov	r0, r7
   14ba0:	a902      	add	r1, sp, #8
   14ba2:	f88d 5008 	strb.w	r5, [sp, #8]
   14ba6:	f8ad 300a 	strh.w	r3, [sp, #10]
   14baa:	f007 f91a 	bl	1bde2 <bt_uuid_cmp>
   14bae:	b310      	cbz	r0, 14bf6 <gatt_find_info_rsp+0xea>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   14bb0:	f642 0301 	movw	r3, #10241	; 0x2801
   14bb4:	4638      	mov	r0, r7
   14bb6:	a903      	add	r1, sp, #12
   14bb8:	f88d 500c 	strb.w	r5, [sp, #12]
   14bbc:	f8ad 300e 	strh.w	r3, [sp, #14]
   14bc0:	f007 f90f 	bl	1bde2 <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   14bc4:	b1b8      	cbz	r0, 14bf6 <gatt_find_info_rsp+0xea>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   14bc6:	f642 0302 	movw	r3, #10242	; 0x2802
   14bca:	4638      	mov	r0, r7
   14bcc:	a909      	add	r1, sp, #36	; 0x24
   14bce:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   14bd2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   14bd6:	f007 f904 	bl	1bde2 <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   14bda:	b160      	cbz	r0, 14bf6 <gatt_find_info_rsp+0xea>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   14bdc:	f642 0303 	movw	r3, #10243	; 0x2803
   14be0:	4638      	mov	r0, r7
   14be2:	a909      	add	r1, sp, #36	; 0x24
   14be4:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   14be8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   14bec:	f007 f8f9 	bl	1bde2 <bt_uuid_cmp>
   14bf0:	b9e0      	cbnz	r0, 14c2c <gatt_find_info_rsp+0x120>
				skip = true;
   14bf2:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
   14bf6:	9b00      	ldr	r3, [sp, #0]
   14bf8:	4454      	add	r4, sl
   14bfa:	3b01      	subs	r3, #1
   14bfc:	9300      	str	r3, [sp, #0]
   14bfe:	e7ac      	b.n	14b5a <gatt_find_info_rsp+0x4e>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   14c00:	78a3      	ldrb	r3, [r4, #2]
   14c02:	78e2      	ldrb	r2, [r4, #3]
   14c04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   14c08:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
   14c0c:	e7bf      	b.n	14b8e <gatt_find_info_rsp+0x82>
			memcpy(u.u128.val, info.i128->uuid, 16);
   14c0e:	2210      	movs	r2, #16
   14c10:	1ca1      	adds	r1, r4, #2
   14c12:	f10d 0011 	add.w	r0, sp, #17
   14c16:	f007 f86f 	bl	1bcf8 <memcpy>
			break;
   14c1a:	e7b8      	b.n	14b8e <gatt_find_info_rsp+0x82>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14c1c:	4638      	mov	r0, r7
   14c1e:	f007 f8e0 	bl	1bde2 <bt_uuid_cmp>
   14c22:	2800      	cmp	r0, #0
   14c24:	d0b6      	beq.n	14b94 <gatt_find_info_rsp+0x88>
			skip = false;
   14c26:	f04f 0900 	mov.w	r9, #0
   14c2a:	e7e4      	b.n	14bf6 <gatt_find_info_rsp+0xea>
		attr.handle = handle;
   14c2c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14c30:	4632      	mov	r2, r6
		attr.handle = handle;
   14c32:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14c36:	4640      	mov	r0, r8
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14c38:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
   14c3c:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14c40:	6873      	ldr	r3, [r6, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14c42:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14c46:	a909      	add	r1, sp, #36	; 0x24
   14c48:	4798      	blx	r3
   14c4a:	2800      	cmp	r0, #0
   14c4c:	d1d3      	bne.n	14bf6 <gatt_find_info_rsp+0xea>
}
   14c4e:	b00f      	add	sp, #60	; 0x3c
   14c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c54:	00022407 	.word	0x00022407

00014c58 <bt_gatt_read>:
{
   14c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14c5c:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   14c5e:	4605      	mov	r5, r0
   14c60:	b950      	cbnz	r0, 14c78 <bt_gatt_read+0x20>
   14c62:	4945      	ldr	r1, [pc, #276]	; (14d78 <bt_gatt_read+0x120>)
   14c64:	4845      	ldr	r0, [pc, #276]	; (14d7c <bt_gatt_read+0x124>)
   14c66:	f640 62a6 	movw	r2, #3750	; 0xea6
   14c6a:	f005 fe01 	bl	1a870 <printk>
   14c6e:	f640 61a6 	movw	r1, #3750	; 0xea6
   14c72:	4841      	ldr	r0, [pc, #260]	; (14d78 <bt_gatt_read+0x120>)
   14c74:	f006 f8a2 	bl	1adbc <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   14c78:	b10c      	cbz	r4, 14c7e <bt_gatt_read+0x26>
   14c7a:	6823      	ldr	r3, [r4, #0]
   14c7c:	b953      	cbnz	r3, 14c94 <bt_gatt_read+0x3c>
   14c7e:	493e      	ldr	r1, [pc, #248]	; (14d78 <bt_gatt_read+0x120>)
   14c80:	483e      	ldr	r0, [pc, #248]	; (14d7c <bt_gatt_read+0x124>)
   14c82:	f640 62a7 	movw	r2, #3751	; 0xea7
   14c86:	f005 fdf3 	bl	1a870 <printk>
   14c8a:	f640 61a7 	movw	r1, #3751	; 0xea7
   14c8e:	483a      	ldr	r0, [pc, #232]	; (14d78 <bt_gatt_read+0x120>)
   14c90:	f006 f894 	bl	1adbc <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   14c94:	7aab      	ldrb	r3, [r5, #10]
   14c96:	2b07      	cmp	r3, #7
   14c98:	d16a      	bne.n	14d70 <bt_gatt_read+0x118>
	if (params->handle_count == 0) {
   14c9a:	6862      	ldr	r2, [r4, #4]
   14c9c:	bb22      	cbnz	r2, 14ce8 <bt_gatt_read+0x90>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
   14c9e:	2204      	movs	r2, #4
   14ca0:	2108      	movs	r1, #8
   14ca2:	4628      	mov	r0, r5
   14ca4:	f7fd fe8a 	bl	129bc <bt_att_create_pdu>
	if (!buf) {
   14ca8:	4606      	mov	r6, r0
   14caa:	b918      	cbnz	r0, 14cb4 <bt_gatt_read+0x5c>
		return -ENOMEM;
   14cac:	f06f 000b 	mvn.w	r0, #11
}
   14cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14cb4:	f100 0708 	add.w	r7, r0, #8
   14cb8:	2104      	movs	r1, #4
   14cba:	4638      	mov	r0, r7
   14cbc:	f000 fe78 	bl	159b0 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->by_uuid.start_handle);
   14cc0:	8923      	ldrh	r3, [r4, #8]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
   14cc2:	68e1      	ldr	r1, [r4, #12]
	req->start_handle = sys_cpu_to_le16(params->by_uuid.start_handle);
   14cc4:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->by_uuid.end_handle);
   14cc6:	8963      	ldrh	r3, [r4, #10]
   14cc8:	8043      	strh	r3, [r0, #2]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
   14cca:	780b      	ldrb	r3, [r1, #0]
   14ccc:	b933      	cbnz	r3, 14cdc <bt_gatt_read+0x84>
	net_buf_simple_add_le16(&buf->b, val);
   14cce:	4638      	mov	r0, r7
   14cd0:	8849      	ldrh	r1, [r1, #2]
   14cd2:	f008 fb62 	bl	1d39a <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
   14cd6:	4623      	mov	r3, r4
   14cd8:	4a29      	ldr	r2, [pc, #164]	; (14d80 <bt_gatt_read+0x128>)
   14cda:	e01a      	b.n	14d12 <bt_gatt_read+0xba>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14cdc:	2210      	movs	r2, #16
   14cde:	4638      	mov	r0, r7
   14ce0:	3101      	adds	r1, #1
   14ce2:	f008 fb47 	bl	1d374 <net_buf_simple_add_mem>
   14ce6:	e7f6      	b.n	14cd6 <bt_gatt_read+0x7e>
	if (params->handle_count > 1) {
   14ce8:	2a01      	cmp	r2, #1
   14cea:	d01f      	beq.n	14d2c <bt_gatt_read+0xd4>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_REQ,
   14cec:	210e      	movs	r1, #14
   14cee:	4628      	mov	r0, r5
   14cf0:	0052      	lsls	r2, r2, #1
   14cf2:	f7fd fe63 	bl	129bc <bt_att_create_pdu>
	if (!buf) {
   14cf6:	4606      	mov	r6, r0
   14cf8:	2800      	cmp	r0, #0
   14cfa:	d0d7      	beq.n	14cac <bt_gatt_read+0x54>
   14cfc:	2700      	movs	r7, #0
	net_buf_simple_add_le16(&buf->b, val);
   14cfe:	f100 0808 	add.w	r8, r0, #8
	for (i = 0U; i < params->handle_count; i++) {
   14d02:	6862      	ldr	r2, [r4, #4]
   14d04:	b2fb      	uxtb	r3, r7
   14d06:	429a      	cmp	r2, r3
   14d08:	f107 0701 	add.w	r7, r7, #1
   14d0c:	d807      	bhi.n	14d1e <bt_gatt_read+0xc6>
	return gatt_send(conn, buf, gatt_read_mult_rsp, params, NULL);
   14d0e:	4623      	mov	r3, r4
   14d10:	4a1c      	ldr	r2, [pc, #112]	; (14d84 <bt_gatt_read+0x12c>)
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
   14d12:	4631      	mov	r1, r6
   14d14:	4628      	mov	r0, r5
}
   14d16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
   14d1a:	f7fe bc89 	b.w	13630 <gatt_send.constprop.0>
		net_buf_add_le16(buf, params->handles[i]);
   14d1e:	68a2      	ldr	r2, [r4, #8]
   14d20:	4640      	mov	r0, r8
   14d22:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   14d26:	f008 fb38 	bl	1d39a <net_buf_simple_add_le16>
	for (i = 0U; i < params->handle_count; i++) {
   14d2a:	e7ea      	b.n	14d02 <bt_gatt_read+0xaa>
	if (params->single.offset) {
   14d2c:	8963      	ldrh	r3, [r4, #10]
   14d2e:	b183      	cbz	r3, 14d52 <bt_gatt_read+0xfa>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_BLOB_REQ, sizeof(*req));
   14d30:	2204      	movs	r2, #4
   14d32:	210c      	movs	r1, #12
   14d34:	4628      	mov	r0, r5
   14d36:	f7fd fe41 	bl	129bc <bt_att_create_pdu>
	if (!buf) {
   14d3a:	4606      	mov	r6, r0
   14d3c:	2800      	cmp	r0, #0
   14d3e:	d0b5      	beq.n	14cac <bt_gatt_read+0x54>
	return net_buf_simple_add(&buf->b, len);
   14d40:	2104      	movs	r1, #4
   14d42:	3008      	adds	r0, #8
   14d44:	f000 fe34 	bl	159b0 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
   14d48:	8923      	ldrh	r3, [r4, #8]
   14d4a:	8003      	strh	r3, [r0, #0]
	req->offset = sys_cpu_to_le16(params->single.offset);
   14d4c:	8963      	ldrh	r3, [r4, #10]
   14d4e:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
   14d50:	e7c1      	b.n	14cd6 <bt_gatt_read+0x7e>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
   14d52:	2202      	movs	r2, #2
   14d54:	210a      	movs	r1, #10
   14d56:	4628      	mov	r0, r5
   14d58:	f7fd fe30 	bl	129bc <bt_att_create_pdu>
	if (!buf) {
   14d5c:	4606      	mov	r6, r0
   14d5e:	2800      	cmp	r0, #0
   14d60:	d0a4      	beq.n	14cac <bt_gatt_read+0x54>
   14d62:	2102      	movs	r1, #2
   14d64:	3008      	adds	r0, #8
   14d66:	f000 fe23 	bl	159b0 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
   14d6a:	8923      	ldrh	r3, [r4, #8]
   14d6c:	8003      	strh	r3, [r0, #0]
   14d6e:	e7b2      	b.n	14cd6 <bt_gatt_read+0x7e>
		return -ENOTCONN;
   14d70:	f06f 0038 	mvn.w	r0, #56	; 0x38
   14d74:	e79c      	b.n	14cb0 <bt_gatt_read+0x58>
   14d76:	bf00      	nop
   14d78:	000222f5 	.word	0x000222f5
   14d7c:	0001fdfa 	.word	0x0001fdfa
   14d80:	00014d89 	.word	0x00014d89
   14d84:	0001cd25 	.word	0x0001cd25

00014d88 <gatt_read_rsp>:
{
   14d88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   14d8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   14d8e:	4606      	mov	r6, r0
   14d90:	4690      	mov	r8, r2
   14d92:	461d      	mov	r5, r3
	if (err || !length) {
   14d94:	460f      	mov	r7, r1
   14d96:	b901      	cbnz	r1, 14d9a <gatt_read_rsp+0x12>
   14d98:	b953      	cbnz	r3, 14db0 <gatt_read_rsp+0x28>
		params->func(conn, err, params, NULL, 0);
   14d9a:	2300      	movs	r3, #0
   14d9c:	4622      	mov	r2, r4
   14d9e:	4639      	mov	r1, r7
   14da0:	930a      	str	r3, [sp, #40]	; 0x28
   14da2:	6825      	ldr	r5, [r4, #0]
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   14da4:	4630      	mov	r0, r6
   14da6:	46ac      	mov	ip, r5
}
   14da8:	b003      	add	sp, #12
   14daa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   14dae:	4760      	bx	ip
	if (!params->handle_count) {
   14db0:	6863      	ldr	r3, [r4, #4]
   14db2:	2b00      	cmp	r3, #0
   14db4:	d141      	bne.n	14e3a <gatt_read_rsp+0xb2>
	for (length--, pdu = rsp->data; length;
   14db6:	3d01      	subs	r5, #1
   14db8:	b2ad      	uxth	r5, r5
   14dba:	f102 0901 	add.w	r9, r2, #1
   14dbe:	b305      	cbz	r5, 14e02 <gatt_read_rsp+0x7a>
		handle = sys_le16_to_cpu(data->handle);
   14dc0:	f8b9 2000 	ldrh.w	r2, [r9]
   14dc4:	b293      	uxth	r3, r2
		if (!handle) {
   14dc6:	b933      	cbnz	r3, 14dd6 <gatt_read_rsp+0x4e>
			BT_ERR("Invalid handle");
   14dc8:	2145      	movs	r1, #69	; 0x45
   14dca:	482c      	ldr	r0, [pc, #176]	; (14e7c <gatt_read_rsp+0xf4>)
}
   14dcc:	b003      	add	sp, #12
   14dce:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			BT_ERR("Invalid handle");
   14dd2:	f005 bd4d 	b.w	1a870 <printk>
		len = rsp->len > length ? length - 2 : rsp->len - 2;
   14dd6:	f898 3000 	ldrb.w	r3, [r8]
		params->by_uuid.start_handle = handle;
   14dda:	8122      	strh	r2, [r4, #8]
		len = rsp->len > length ? length - 2 : rsp->len - 2;
   14ddc:	42ab      	cmp	r3, r5
   14dde:	bf8c      	ite	hi
   14de0:	1eab      	subhi	r3, r5, #2
   14de2:	3b02      	subls	r3, #2
   14de4:	b29b      	uxth	r3, r3
		if (params->func(conn, 0, params, data->value, len) ==
   14de6:	9300      	str	r3, [sp, #0]
   14de8:	4622      	mov	r2, r4
   14dea:	2100      	movs	r1, #0
   14dec:	4630      	mov	r0, r6
   14dee:	6827      	ldr	r7, [r4, #0]
   14df0:	f109 0302 	add.w	r3, r9, #2
   14df4:	47b8      	blx	r7
   14df6:	2800      	cmp	r0, #0
   14df8:	d03d      	beq.n	14e76 <gatt_read_rsp+0xee>
		if (rsp->len > length) {
   14dfa:	f898 1000 	ldrb.w	r1, [r8]
   14dfe:	428d      	cmp	r5, r1
   14e00:	d20b      	bcs.n	14e1a <gatt_read_rsp+0x92>
	if (bt_gatt_read(conn, params) < 0) {
   14e02:	4621      	mov	r1, r4
   14e04:	4630      	mov	r0, r6
   14e06:	f7ff ff27 	bl	14c58 <bt_gatt_read>
   14e0a:	2800      	cmp	r0, #0
   14e0c:	da33      	bge.n	14e76 <gatt_read_rsp+0xee>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   14e0e:	2300      	movs	r3, #0
   14e10:	930a      	str	r3, [sp, #40]	; 0x28
   14e12:	6825      	ldr	r5, [r4, #0]
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   14e14:	4622      	mov	r2, r4
   14e16:	210e      	movs	r1, #14
   14e18:	e7c4      	b.n	14da4 <gatt_read_rsp+0x1c>
		if (params->by_uuid.start_handle == params->by_uuid.end_handle) {
   14e1a:	8922      	ldrh	r2, [r4, #8]
   14e1c:	8960      	ldrh	r0, [r4, #10]
   14e1e:	4290      	cmp	r0, r2
   14e20:	d105      	bne.n	14e2e <gatt_read_rsp+0xa6>
			params->func(conn, 0, params, NULL, 0);
   14e22:	2300      	movs	r3, #0
   14e24:	930a      	str	r3, [sp, #40]	; 0x28
   14e26:	6825      	ldr	r5, [r4, #0]
		params->func(conn, 0, params, NULL, 0);
   14e28:	4622      	mov	r2, r4
   14e2a:	4619      	mov	r1, r3
   14e2c:	e7ba      	b.n	14da4 <gatt_read_rsp+0x1c>
		params->by_uuid.start_handle++;
   14e2e:	3201      	adds	r2, #1
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   14e30:	1a6d      	subs	r5, r5, r1
		params->by_uuid.start_handle++;
   14e32:	8122      	strh	r2, [r4, #8]
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   14e34:	b2ad      	uxth	r5, r5
   14e36:	4489      	add	r9, r1
   14e38:	e7c1      	b.n	14dbe <gatt_read_rsp+0x36>
	if (params->func(conn, 0, params, pdu, length) == BT_GATT_ITER_STOP) {
   14e3a:	9500      	str	r5, [sp, #0]
   14e3c:	4613      	mov	r3, r2
   14e3e:	f8d4 c000 	ldr.w	ip, [r4]
   14e42:	4622      	mov	r2, r4
   14e44:	47e0      	blx	ip
   14e46:	b1b0      	cbz	r0, 14e76 <gatt_read_rsp+0xee>
	if (length < (bt_att_get_mtu(conn) - 1)) {
   14e48:	4630      	mov	r0, r6
   14e4a:	f007 fded 	bl	1ca28 <bt_att_get_mtu>
   14e4e:	3801      	subs	r0, #1
   14e50:	4285      	cmp	r5, r0
   14e52:	da03      	bge.n	14e5c <gatt_read_rsp+0xd4>
		params->func(conn, 0, params, NULL, 0);
   14e54:	970a      	str	r7, [sp, #40]	; 0x28
   14e56:	463b      	mov	r3, r7
   14e58:	6825      	ldr	r5, [r4, #0]
   14e5a:	e7e5      	b.n	14e28 <gatt_read_rsp+0xa0>
	params->single.offset += length;
   14e5c:	8963      	ldrh	r3, [r4, #10]
	if (bt_gatt_read(conn, params) < 0) {
   14e5e:	4621      	mov	r1, r4
	params->single.offset += length;
   14e60:	441d      	add	r5, r3
	if (bt_gatt_read(conn, params) < 0) {
   14e62:	4630      	mov	r0, r6
	params->single.offset += length;
   14e64:	8165      	strh	r5, [r4, #10]
	if (bt_gatt_read(conn, params) < 0) {
   14e66:	f7ff fef7 	bl	14c58 <bt_gatt_read>
   14e6a:	2800      	cmp	r0, #0
   14e6c:	da03      	bge.n	14e76 <gatt_read_rsp+0xee>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   14e6e:	970a      	str	r7, [sp, #40]	; 0x28
   14e70:	463b      	mov	r3, r7
   14e72:	6825      	ldr	r5, [r4, #0]
   14e74:	e7ce      	b.n	14e14 <gatt_read_rsp+0x8c>
}
   14e76:	b003      	add	sp, #12
   14e78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14e7c:	0002241e 	.word	0x0002241e

00014e80 <bt_gatt_subscribe>:
{
   14e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14e82:	460d      	mov	r5, r1
	__ASSERT(conn, "invalid parameters\n");
   14e84:	4606      	mov	r6, r0
   14e86:	b950      	cbnz	r0, 14e9e <bt_gatt_subscribe+0x1e>
   14e88:	4944      	ldr	r1, [pc, #272]	; (14f9c <bt_gatt_subscribe+0x11c>)
   14e8a:	4845      	ldr	r0, [pc, #276]	; (14fa0 <bt_gatt_subscribe+0x120>)
   14e8c:	f640 72fb 	movw	r2, #4091	; 0xffb
   14e90:	f005 fcee 	bl	1a870 <printk>
   14e94:	f640 71fb 	movw	r1, #4091	; 0xffb
   14e98:	4840      	ldr	r0, [pc, #256]	; (14f9c <bt_gatt_subscribe+0x11c>)
   14e9a:	f005 ff8f 	bl	1adbc <assert_post_action>
	__ASSERT(params && params->notify,  "invalid parameters\n");
   14e9e:	b10d      	cbz	r5, 14ea4 <bt_gatt_subscribe+0x24>
   14ea0:	682b      	ldr	r3, [r5, #0]
   14ea2:	b953      	cbnz	r3, 14eba <bt_gatt_subscribe+0x3a>
   14ea4:	493d      	ldr	r1, [pc, #244]	; (14f9c <bt_gatt_subscribe+0x11c>)
   14ea6:	483e      	ldr	r0, [pc, #248]	; (14fa0 <bt_gatt_subscribe+0x120>)
   14ea8:	f640 72fc 	movw	r2, #4092	; 0xffc
   14eac:	f005 fce0 	bl	1a870 <printk>
   14eb0:	f640 71fc 	movw	r1, #4092	; 0xffc
   14eb4:	4839      	ldr	r0, [pc, #228]	; (14f9c <bt_gatt_subscribe+0x11c>)
   14eb6:	f005 ff81 	bl	1adbc <assert_post_action>
	__ASSERT(params->value, "invalid parameters\n");
   14eba:	89ab      	ldrh	r3, [r5, #12]
   14ebc:	b953      	cbnz	r3, 14ed4 <bt_gatt_subscribe+0x54>
   14ebe:	4937      	ldr	r1, [pc, #220]	; (14f9c <bt_gatt_subscribe+0x11c>)
   14ec0:	4837      	ldr	r0, [pc, #220]	; (14fa0 <bt_gatt_subscribe+0x120>)
   14ec2:	f640 72fd 	movw	r2, #4093	; 0xffd
   14ec6:	f005 fcd3 	bl	1a870 <printk>
   14eca:	f640 71fd 	movw	r1, #4093	; 0xffd
   14ece:	4833      	ldr	r0, [pc, #204]	; (14f9c <bt_gatt_subscribe+0x11c>)
   14ed0:	f005 ff74 	bl	1adbc <assert_post_action>
	__ASSERT(params->ccc_handle, "invalid parameters\n");
   14ed4:	896b      	ldrh	r3, [r5, #10]
   14ed6:	b953      	cbnz	r3, 14eee <bt_gatt_subscribe+0x6e>
   14ed8:	4930      	ldr	r1, [pc, #192]	; (14f9c <bt_gatt_subscribe+0x11c>)
   14eda:	4831      	ldr	r0, [pc, #196]	; (14fa0 <bt_gatt_subscribe+0x120>)
   14edc:	f241 0203 	movw	r2, #4099	; 0x1003
   14ee0:	f005 fcc6 	bl	1a870 <printk>
   14ee4:	f241 0103 	movw	r1, #4099	; 0x1003
   14ee8:	482c      	ldr	r0, [pc, #176]	; (14f9c <bt_gatt_subscribe+0x11c>)
   14eea:	f005 ff67 	bl	1adbc <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   14eee:	7ab3      	ldrb	r3, [r6, #10]
   14ef0:	2b07      	cmp	r3, #7
   14ef2:	d14b      	bne.n	14f8c <bt_gatt_subscribe+0x10c>
	sub = gatt_sub_find(conn);
   14ef4:	4630      	mov	r0, r6
   14ef6:	f7fe f9e3 	bl	132c0 <gatt_sub_find>
	if (!sub) {
   14efa:	4604      	mov	r4, r0
   14efc:	b958      	cbnz	r0, 14f16 <bt_gatt_subscribe+0x96>
		sub = gatt_sub_find(NULL);
   14efe:	f7fe f9df 	bl	132c0 <gatt_sub_find>
		if (sub) {
   14f02:	4604      	mov	r4, r0
   14f04:	2800      	cmp	r0, #0
   14f06:	d044      	beq.n	14f92 <bt_gatt_subscribe+0x112>
			bt_addr_le_copy(&sub->peer, &conn->le.dst);
   14f08:	f106 0188 	add.w	r1, r6, #136	; 0x88
   14f0c:	3001      	adds	r0, #1
   14f0e:	f007 feea 	bl	1cce6 <bt_addr_le_copy>
			sub->id = conn->id;
   14f12:	7a33      	ldrb	r3, [r6, #8]
   14f14:	7023      	strb	r3, [r4, #0]
	return list->head;
   14f16:	68a2      	ldr	r2, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   14f18:	b90a      	cbnz	r2, 14f1e <bt_gatt_subscribe+0x9e>
   14f1a:	4613      	mov	r3, r2
   14f1c:	e001      	b.n	14f22 <bt_gatt_subscribe+0xa2>
   14f1e:	f1a2 0314 	sub.w	r3, r2, #20
			has_subscription = true;
   14f22:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   14f24:	b97b      	cbnz	r3, 14f46 <bt_gatt_subscribe+0xc6>
	if (!has_subscription) {
   14f26:	bb41      	cbnz	r1, 14f7a <bt_gatt_subscribe+0xfa>
		err = gatt_write_ccc(conn, params->ccc_handle, params->value,
   14f28:	4630      	mov	r0, r6
   14f2a:	462b      	mov	r3, r5
   14f2c:	89aa      	ldrh	r2, [r5, #12]
   14f2e:	8969      	ldrh	r1, [r5, #10]
   14f30:	f7fe fe24 	bl	13b7c <gatt_write_ccc.constprop.0>
		if (err) {
   14f34:	4606      	mov	r6, r0
   14f36:	b300      	cbz	r0, 14f7a <bt_gatt_subscribe+0xfa>
	if (sys_slist_is_empty(&sub->list)) {
   14f38:	68a3      	ldr	r3, [r4, #8]
   14f3a:	b913      	cbnz	r3, 14f42 <bt_gatt_subscribe+0xc2>
   14f3c:	4620      	mov	r0, r4
   14f3e:	f007 ff0c 	bl	1cd5a <gatt_sub_remove.part.0>
}
   14f42:	4630      	mov	r0, r6
   14f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tmp == params) {
   14f46:	42ab      	cmp	r3, r5
   14f48:	d106      	bne.n	14f58 <bt_gatt_subscribe+0xd8>
	if (sys_slist_is_empty(&sub->list)) {
   14f4a:	b912      	cbnz	r2, 14f52 <bt_gatt_subscribe+0xd2>
   14f4c:	4620      	mov	r0, r4
   14f4e:	f007 ff04 	bl	1cd5a <gatt_sub_remove.part.0>
			return -EALREADY;
   14f52:	f06f 0644 	mvn.w	r6, #68	; 0x44
   14f56:	e7f4      	b.n	14f42 <bt_gatt_subscribe+0xc2>
		if (tmp->value_handle == params->value_handle &&
   14f58:	891f      	ldrh	r7, [r3, #8]
   14f5a:	8928      	ldrh	r0, [r5, #8]
   14f5c:	4287      	cmp	r7, r0
   14f5e:	d104      	bne.n	14f6a <bt_gatt_subscribe+0xea>
   14f60:	899f      	ldrh	r7, [r3, #12]
   14f62:	89a8      	ldrh	r0, [r5, #12]
			has_subscription = true;
   14f64:	4287      	cmp	r7, r0
   14f66:	bf28      	it	cs
   14f68:	2101      	movcs	r1, #1
Z_GENLIST_PEEK_NEXT(slist, snode)
   14f6a:	f113 0f14 	cmn.w	r3, #20
   14f6e:	d0da      	beq.n	14f26 <bt_gatt_subscribe+0xa6>
	return node->next;
   14f70:	695b      	ldr	r3, [r3, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   14f72:	2b00      	cmp	r3, #0
   14f74:	d0d7      	beq.n	14f26 <bt_gatt_subscribe+0xa6>
   14f76:	3b14      	subs	r3, #20
   14f78:	e7d4      	b.n	14f24 <bt_gatt_subscribe+0xa4>
	parent->next = child;
   14f7a:	68a2      	ldr	r2, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   14f7c:	68e6      	ldr	r6, [r4, #12]
	sys_slist_prepend(&sub->list, &params->node);
   14f7e:	f105 0314 	add.w	r3, r5, #20
	parent->next = child;
   14f82:	616a      	str	r2, [r5, #20]
	list->head = node;
   14f84:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   14f86:	b93e      	cbnz	r6, 14f98 <bt_gatt_subscribe+0x118>
	list->tail = node;
   14f88:	60e3      	str	r3, [r4, #12]
}
   14f8a:	e7da      	b.n	14f42 <bt_gatt_subscribe+0xc2>
		return -ENOTCONN;
   14f8c:	f06f 0638 	mvn.w	r6, #56	; 0x38
   14f90:	e7d7      	b.n	14f42 <bt_gatt_subscribe+0xc2>
		return -ENOMEM;
   14f92:	f06f 060b 	mvn.w	r6, #11
   14f96:	e7d4      	b.n	14f42 <bt_gatt_subscribe+0xc2>
	return 0;
   14f98:	2600      	movs	r6, #0
   14f9a:	e7d2      	b.n	14f42 <bt_gatt_subscribe+0xc2>
   14f9c:	000222f5 	.word	0x000222f5
   14fa0:	0001fdfa 	.word	0x0001fdfa

00014fa4 <bt_gatt_unsubscribe>:
{
   14fa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fa8:	460e      	mov	r6, r1
	__ASSERT(conn, "invalid parameters\n");
   14faa:	4607      	mov	r7, r0
   14fac:	b950      	cbnz	r0, 14fc4 <bt_gatt_unsubscribe+0x20>
   14fae:	4947      	ldr	r1, [pc, #284]	; (150cc <bt_gatt_unsubscribe+0x128>)
   14fb0:	4847      	ldr	r0, [pc, #284]	; (150d0 <bt_gatt_unsubscribe+0x12c>)
   14fb2:	f241 025c 	movw	r2, #4188	; 0x105c
   14fb6:	f005 fc5b 	bl	1a870 <printk>
   14fba:	f241 015c 	movw	r1, #4188	; 0x105c
   14fbe:	4843      	ldr	r0, [pc, #268]	; (150cc <bt_gatt_unsubscribe+0x128>)
   14fc0:	f005 fefc 	bl	1adbc <assert_post_action>
	__ASSERT(params, "invalid parameters\n");
   14fc4:	b956      	cbnz	r6, 14fdc <bt_gatt_unsubscribe+0x38>
   14fc6:	4941      	ldr	r1, [pc, #260]	; (150cc <bt_gatt_unsubscribe+0x128>)
   14fc8:	4841      	ldr	r0, [pc, #260]	; (150d0 <bt_gatt_unsubscribe+0x12c>)
   14fca:	f241 025d 	movw	r2, #4189	; 0x105d
   14fce:	f005 fc4f 	bl	1a870 <printk>
   14fd2:	f241 015d 	movw	r1, #4189	; 0x105d
   14fd6:	483d      	ldr	r0, [pc, #244]	; (150cc <bt_gatt_unsubscribe+0x128>)
   14fd8:	f005 fef0 	bl	1adbc <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   14fdc:	7abb      	ldrb	r3, [r7, #10]
   14fde:	2b07      	cmp	r3, #7
   14fe0:	d170      	bne.n	150c4 <bt_gatt_unsubscribe+0x120>
	sub = gatt_sub_find(conn);
   14fe2:	4638      	mov	r0, r7
   14fe4:	f7fe f96c 	bl	132c0 <gatt_sub_find>
	if (!sub) {
   14fe8:	4680      	mov	r8, r0
   14fea:	b920      	cbnz	r0, 14ff6 <bt_gatt_unsubscribe+0x52>
		return -EINVAL;
   14fec:	f06f 0015 	mvn.w	r0, #21
}
   14ff0:	b003      	add	sp, #12
   14ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   14ff6:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   14ff8:	b1cc      	cbz	r4, 1502e <bt_gatt_unsubscribe+0x8a>
   14ffa:	f1b4 0514 	subs.w	r5, r4, #20
   14ffe:	d018      	beq.n	15032 <bt_gatt_unsubscribe+0x8e>
	return node->next;
   15000:	6824      	ldr	r4, [r4, #0]
   15002:	b104      	cbz	r4, 15006 <bt_gatt_unsubscribe+0x62>
   15004:	3c14      	subs	r4, #20
   15006:	f04f 0900 	mov.w	r9, #0
   1500a:	464b      	mov	r3, r9
   1500c:	46ca      	mov	sl, r9
			if (atomic_test_bit(params->flags,
   1500e:	f106 0b10 	add.w	fp, r6, #16
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   15012:	b985      	cbnz	r5, 15036 <bt_gatt_unsubscribe+0x92>
	if (!found) {
   15014:	2b00      	cmp	r3, #0
   15016:	d0e9      	beq.n	14fec <bt_gatt_unsubscribe+0x48>
	if (has_subscription) {
   15018:	f1ba 0f00 	cmp.w	sl, #0
   1501c:	d047      	beq.n	150ae <bt_gatt_unsubscribe+0x10a>
		params->notify(conn, params, NULL, 0);
   1501e:	462b      	mov	r3, r5
   15020:	462a      	mov	r2, r5
   15022:	4631      	mov	r1, r6
   15024:	4638      	mov	r0, r7
   15026:	6834      	ldr	r4, [r6, #0]
   15028:	47a0      	blx	r4
		return 0;
   1502a:	4628      	mov	r0, r5
   1502c:	e7e0      	b.n	14ff0 <bt_gatt_unsubscribe+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1502e:	4625      	mov	r5, r4
   15030:	e7e9      	b.n	15006 <bt_gatt_unsubscribe+0x62>
   15032:	462c      	mov	r4, r5
   15034:	e7e7      	b.n	15006 <bt_gatt_unsubscribe+0x62>
		if (params == tmp) {
   15036:	42b5      	cmp	r5, r6
			sys_slist_remove(&sub->list, prev, &tmp->node);
   15038:	f105 0114 	add.w	r1, r5, #20
		if (params == tmp) {
   1503c:	d12b      	bne.n	15096 <bt_gatt_unsubscribe+0xf2>
Z_GENLIST_REMOVE(slist, snode)
   1503e:	696b      	ldr	r3, [r5, #20]
   15040:	f8d8 000c 	ldr.w	r0, [r8, #12]
   15044:	f1b9 0f00 	cmp.w	r9, #0
   15048:	d11e      	bne.n	15088 <bt_gatt_unsubscribe+0xe4>
   1504a:	4281      	cmp	r1, r0
	list->head = node;
   1504c:	f8c8 3008 	str.w	r3, [r8, #8]
Z_GENLIST_REMOVE(slist, snode)
   15050:	d101      	bne.n	15056 <bt_gatt_unsubscribe+0xb2>
	list->tail = node;
   15052:	f8c8 300c 	str.w	r3, [r8, #12]
	parent->next = child;
   15056:	2300      	movs	r3, #0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15058:	4658      	mov	r0, fp
   1505a:	616b      	str	r3, [r5, #20]
   1505c:	f007 fe5f 	bl	1cd1e <atomic_get>
			if (atomic_test_bit(params->flags,
   15060:	0742      	lsls	r2, r0, #29
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   15062:	f3c0 0380 	ubfx	r3, r0, #2, #1
   15066:	d51e      	bpl.n	150a6 <bt_gatt_unsubscribe+0x102>
	bt_att_req_cancel(conn, params);
   15068:	4631      	mov	r1, r6
   1506a:	4638      	mov	r0, r7
   1506c:	9301      	str	r3, [sp, #4]
   1506e:	f7fe f88b 	bl	13188 <bt_att_req_cancel>
}
   15072:	9b01      	ldr	r3, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   15074:	b1cc      	cbz	r4, 150aa <bt_gatt_unsubscribe+0x106>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15076:	f114 0114 	adds.w	r1, r4, #20
   1507a:	d002      	beq.n	15082 <bt_gatt_unsubscribe+0xde>
	return node->next;
   1507c:	6961      	ldr	r1, [r4, #20]
   1507e:	b101      	cbz	r1, 15082 <bt_gatt_unsubscribe+0xde>
   15080:	3914      	subs	r1, #20
   15082:	4625      	mov	r5, r4
   15084:	460c      	mov	r4, r1
   15086:	e7c4      	b.n	15012 <bt_gatt_unsubscribe+0x6e>
Z_GENLIST_REMOVE(slist, snode)
   15088:	4288      	cmp	r0, r1
	parent->next = child;
   1508a:	f8c9 3000 	str.w	r3, [r9]
	list->tail = node;
   1508e:	bf08      	it	eq
   15090:	f8c8 900c 	streq.w	r9, [r8, #12]
}
   15094:	e7df      	b.n	15056 <bt_gatt_unsubscribe+0xb2>
		if (tmp->value_handle == params->value_handle) {
   15096:	892d      	ldrh	r5, [r5, #8]
   15098:	8930      	ldrh	r0, [r6, #8]
			sys_slist_remove(&sub->list, prev, &tmp->node);
   1509a:	4689      	mov	r9, r1
   1509c:	4285      	cmp	r5, r0
   1509e:	bf08      	it	eq
   150a0:	f04f 0a01 	moveq.w	sl, #1
   150a4:	e7e6      	b.n	15074 <bt_gatt_unsubscribe+0xd0>
			found = true;
   150a6:	2301      	movs	r3, #1
   150a8:	e7e4      	b.n	15074 <bt_gatt_unsubscribe+0xd0>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   150aa:	4621      	mov	r1, r4
   150ac:	e7e9      	b.n	15082 <bt_gatt_unsubscribe+0xde>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   150ae:	4633      	mov	r3, r6
   150b0:	4652      	mov	r2, sl
   150b2:	4638      	mov	r0, r7
   150b4:	8971      	ldrh	r1, [r6, #10]
	params->value = 0x0000;
   150b6:	f8a6 a00c 	strh.w	sl, [r6, #12]
}
   150ba:	b003      	add	sp, #12
   150bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   150c0:	f7fe bd5c 	b.w	13b7c <gatt_write_ccc.constprop.0>
		return -ENOTCONN;
   150c4:	f06f 0038 	mvn.w	r0, #56	; 0x38
   150c8:	e792      	b.n	14ff0 <bt_gatt_unsubscribe+0x4c>
   150ca:	bf00      	nop
   150cc:	000222f5 	.word	0x000222f5
   150d0:	0001fdfa 	.word	0x0001fdfa

000150d4 <bt_gatt_mult_notification>:
{
   150d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150d8:	b085      	sub	sp, #20
   150da:	4680      	mov	r8, r0
   150dc:	460c      	mov	r4, r1
   150de:	4691      	mov	r9, r2
	sub = gatt_sub_find(conn);
   150e0:	f7fe f8ee 	bl	132c0 <gatt_sub_find>
	if (!sub) {
   150e4:	4606      	mov	r6, r0
   150e6:	b1d0      	cbz	r0, 1511e <bt_gatt_mult_notification+0x4a>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   150e8:	464a      	mov	r2, r9
   150ea:	4621      	mov	r1, r4
   150ec:	a801      	add	r0, sp, #4
   150ee:	f008 f918 	bl	1d322 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   150f2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   150f6:	2b04      	cmp	r3, #4
   150f8:	d911      	bls.n	1511e <bt_gatt_mult_notification+0x4a>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   150fa:	2104      	movs	r1, #4
   150fc:	eb0d 0001 	add.w	r0, sp, r1
   15100:	f000 fc38 	bl	15974 <net_buf_simple_pull_mem>
		if (len > buf.len) {
   15104:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		len = sys_cpu_to_le16(nfy->len);
   15108:	f8b0 a002 	ldrh.w	sl, [r0, #2]
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1510c:	4605      	mov	r5, r0
		if (len > buf.len) {
   1510e:	4553      	cmp	r3, sl
   15110:	d208      	bcs.n	15124 <bt_gatt_mult_notification+0x50>
			BT_ERR("Invalid data len %u > %u", len, length);
   15112:	464b      	mov	r3, r9
   15114:	4652      	mov	r2, sl
   15116:	2145      	movs	r1, #69	; 0x45
   15118:	4816      	ldr	r0, [pc, #88]	; (15174 <bt_gatt_mult_notification+0xa0>)
   1511a:	f005 fba9 	bl	1a870 <printk>
}
   1511e:	b005      	add	sp, #20
   15120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   15124:	68b3      	ldr	r3, [r6, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   15126:	b303      	cbz	r3, 1516a <bt_gatt_mult_notification+0x96>
   15128:	f1b3 0714 	subs.w	r7, r3, #20
   1512c:	d01d      	beq.n	1516a <bt_gatt_mult_notification+0x96>
	return node->next;
   1512e:	681c      	ldr	r4, [r3, #0]
   15130:	b104      	cbz	r4, 15134 <bt_gatt_mult_notification+0x60>
   15132:	3c14      	subs	r4, #20
		handle = sys_cpu_to_le16(nfy->handle);
   15134:	f835 bb04 	ldrh.w	fp, [r5], #4
			if (handle != params->value_handle) {
   15138:	893b      	ldrh	r3, [r7, #8]
   1513a:	455b      	cmp	r3, fp
   1513c:	d10b      	bne.n	15156 <bt_gatt_mult_notification+0x82>
			if (params->notify(conn, params, nfy->value, len) ==
   1513e:	4653      	mov	r3, sl
   15140:	462a      	mov	r2, r5
   15142:	4639      	mov	r1, r7
   15144:	4640      	mov	r0, r8
   15146:	f8d7 c000 	ldr.w	ip, [r7]
   1514a:	47e0      	blx	ip
   1514c:	b918      	cbnz	r0, 15156 <bt_gatt_mult_notification+0x82>
				bt_gatt_unsubscribe(conn, params);
   1514e:	4639      	mov	r1, r7
   15150:	4640      	mov	r0, r8
   15152:	f7ff ff27 	bl	14fa4 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   15156:	b144      	cbz	r4, 1516a <bt_gatt_mult_notification+0x96>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15158:	f114 0314 	adds.w	r3, r4, #20
   1515c:	d002      	beq.n	15164 <bt_gatt_mult_notification+0x90>
	return node->next;
   1515e:	6963      	ldr	r3, [r4, #20]
   15160:	b103      	cbz	r3, 15164 <bt_gatt_mult_notification+0x90>
   15162:	3b14      	subs	r3, #20
{
   15164:	4627      	mov	r7, r4
   15166:	461c      	mov	r4, r3
   15168:	e7e6      	b.n	15138 <bt_gatt_mult_notification+0x64>
		net_buf_simple_pull_mem(&buf, len);
   1516a:	4651      	mov	r1, sl
   1516c:	a801      	add	r0, sp, #4
   1516e:	f000 fc01 	bl	15974 <net_buf_simple_pull_mem>
   15172:	e7be      	b.n	150f2 <bt_gatt_mult_notification+0x1e>
   15174:	00022432 	.word	0x00022432

00015178 <bt_gatt_connected>:
	data.sec = BT_SECURITY_L1;
   15178:	2301      	movs	r3, #1
{
   1517a:	b570      	push	{r4, r5, r6, lr}
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1517c:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   15180:	b08e      	sub	sp, #56	; 0x38
   15182:	4605      	mov	r5, r0
	data.conn = conn;
   15184:	9003      	str	r0, [sp, #12]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   15186:	4631      	mov	r1, r6
   15188:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   1518a:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1518e:	f006 ff7a 	bl	1c086 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   15192:	b190      	cbz	r0, 151ba <bt_gatt_connected+0x42>
		if (conn->id) {
   15194:	7a2a      	ldrb	r2, [r5, #8]
   15196:	b30a      	cbz	r2, 151dc <bt_gatt_connected+0x64>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   15198:	ac02      	add	r4, sp, #8
   1519a:	2104      	movs	r1, #4
   1519c:	4620      	mov	r0, r4
   1519e:	f005 facd 	bl	1a73c <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   151a2:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   151a4:	2124      	movs	r1, #36	; 0x24
   151a6:	4a19      	ldr	r2, [pc, #100]	; (1520c <bt_gatt_connected+0x94>)
   151a8:	a805      	add	r0, sp, #20
   151aa:	4633      	mov	r3, r6
   151ac:	f7f9 fa46 	bl	e63c <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   151b0:	aa05      	add	r2, sp, #20
   151b2:	4610      	mov	r0, r2
   151b4:	4916      	ldr	r1, [pc, #88]	; (15210 <bt_gatt_connected+0x98>)
   151b6:	f7f6 fc5d 	bl	ba74 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   151ba:	2001      	movs	r0, #1
   151bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   151c0:	4a14      	ldr	r2, [pc, #80]	; (15214 <bt_gatt_connected+0x9c>)
   151c2:	ab03      	add	r3, sp, #12
   151c4:	f007 ff8d 	bl	1d0e2 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   151c8:	4628      	mov	r0, r5
   151ca:	f7fe f879 	bl	132c0 <gatt_sub_find>
	if (!sub) {
   151ce:	b118      	cbz	r0, 151d8 <bt_gatt_connected+0x60>
	return list->head;
   151d0:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   151d2:	b10c      	cbz	r4, 151d8 <bt_gatt_connected+0x60>
   151d4:	3c14      	subs	r4, #20
   151d6:	b91c      	cbnz	r4, 151e0 <bt_gatt_connected+0x68>
}
   151d8:	b00e      	add	sp, #56	; 0x38
   151da:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   151dc:	9200      	str	r2, [sp, #0]
   151de:	e7e1      	b.n	151a4 <bt_gatt_connected+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   151e0:	4631      	mov	r1, r6
   151e2:	7a28      	ldrb	r0, [r5, #8]
   151e4:	f006 ff4f 	bl	1c086 <bt_addr_le_is_bonded>
   151e8:	b158      	cbz	r0, 15202 <bt_gatt_connected+0x8a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   151ea:	f104 0010 	add.w	r0, r4, #16
   151ee:	f007 fd96 	bl	1cd1e <atomic_get>
   151f2:	0783      	lsls	r3, r0, #30
   151f4:	d405      	bmi.n	15202 <bt_gatt_connected+0x8a>
			gatt_write_ccc(conn, params->ccc_handle, params->value,
   151f6:	4623      	mov	r3, r4
   151f8:	4628      	mov	r0, r5
   151fa:	89a2      	ldrh	r2, [r4, #12]
   151fc:	8961      	ldrh	r1, [r4, #10]
   151fe:	f7fe fcbd 	bl	13b7c <gatt_write_ccc.constprop.0>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15202:	f114 0f14 	cmn.w	r4, #20
   15206:	d0e7      	beq.n	151d8 <bt_gatt_connected+0x60>
	return node->next;
   15208:	6964      	ldr	r4, [r4, #20]
   1520a:	e7e2      	b.n	151d2 <bt_gatt_connected+0x5a>
   1520c:	00022364 	.word	0x00022364
   15210:	00013f75 	.word	0x00013f75
   15214:	00014345 	.word	0x00014345

00015218 <db_hash_read>:
{
   15218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1521a:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
   1521c:	4810      	ldr	r0, [pc, #64]	; (15260 <db_hash_read+0x48>)
{
   1521e:	4615      	mov	r5, r2
   15220:	461f      	mov	r7, r3
   15222:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	err = k_delayed_work_cancel(&db_hash_work);
   15226:	f004 fc1d 	bl	19a64 <k_delayed_work_cancel>
	if (!err) {
   1522a:	b910      	cbnz	r0, 15232 <db_hash_read+0x1a>
		db_hash_gen(true);
   1522c:	2001      	movs	r0, #1
   1522e:	f7fe fe11 	bl	13e54 <db_hash_gen>
	bt_gatt_change_aware(conn, true);
   15232:	2101      	movs	r1, #1
   15234:	4620      	mov	r0, r4
   15236:	f008 f81c 	bl	1d272 <bt_gatt_change_aware>
	if (offset > value_len) {
   1523a:	2e10      	cmp	r6, #16
   1523c:	d80c      	bhi.n	15258 <db_hash_read+0x40>
	len = MIN(buf_len, value_len - offset);
   1523e:	f1c6 0410 	rsb	r4, r6, #16
   15242:	42bc      	cmp	r4, r7
   15244:	bfa8      	it	ge
   15246:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   15248:	4906      	ldr	r1, [pc, #24]	; (15264 <db_hash_read+0x4c>)
   1524a:	4622      	mov	r2, r4
   1524c:	4628      	mov	r0, r5
   1524e:	4431      	add	r1, r6
   15250:	f006 fd52 	bl	1bcf8 <memcpy>
}
   15254:	4620      	mov	r0, r4
   15256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   15258:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
   1525c:	e7fa      	b.n	15254 <db_hash_read+0x3c>
   1525e:	bf00      	nop
   15260:	20009be8 	.word	0x20009be8
   15264:	2000f9b4 	.word	0x2000f9b4

00015268 <bt_gatt_store_ccc>:
	save.count = 0;
   15268:	2300      	movs	r3, #0
{
   1526a:	b570      	push	{r4, r5, r6, lr}
   1526c:	4604      	mov	r4, r0
   1526e:	b0c0      	sub	sp, #256	; 0x100
   15270:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   15272:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   15274:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   15278:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   1527a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1527e:	2001      	movs	r0, #1
   15280:	4a13      	ldr	r2, [pc, #76]	; (152d0 <bt_gatt_store_ccc+0x68>)
   15282:	ab0d      	add	r3, sp, #52	; 0x34
   15284:	f007 ff2d 	bl	1d0e2 <bt_gatt_foreach_attr>
	if (id) {
   15288:	b1ec      	cbz	r4, 152c6 <bt_gatt_store_ccc+0x5e>
		u8_to_dec(id_str, sizeof(id_str), id);
   1528a:	ae03      	add	r6, sp, #12
   1528c:	4622      	mov	r2, r4
   1528e:	2104      	movs	r1, #4
   15290:	4630      	mov	r0, r6
   15292:	f005 fa53 	bl	1a73c <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   15296:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   15298:	4a0e      	ldr	r2, [pc, #56]	; (152d4 <bt_gatt_store_ccc+0x6c>)
   1529a:	462b      	mov	r3, r5
   1529c:	2124      	movs	r1, #36	; 0x24
   1529e:	a804      	add	r0, sp, #16
   152a0:	f7f9 f9cc 	bl	e63c <bt_settings_encode_key>
	if (save.count) {
   152a4:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   152a6:	b182      	cbz	r2, 152ca <bt_gatt_store_ccc+0x62>
		len = save.count * sizeof(*save.store);
   152a8:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   152aa:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   152ac:	a804      	add	r0, sp, #16
   152ae:	f7f6 fb95 	bl	b9dc <settings_save_one>
	if (err) {
   152b2:	4604      	mov	r4, r0
   152b4:	b120      	cbz	r0, 152c0 <bt_gatt_store_ccc+0x58>
		BT_ERR("Failed to store CCCs (err %d)", err);
   152b6:	4602      	mov	r2, r0
   152b8:	2145      	movs	r1, #69	; 0x45
   152ba:	4807      	ldr	r0, [pc, #28]	; (152d8 <bt_gatt_store_ccc+0x70>)
   152bc:	f005 fad8 	bl	1a870 <printk>
}
   152c0:	4620      	mov	r0, r4
   152c2:	b040      	add	sp, #256	; 0x100
   152c4:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   152c6:	9400      	str	r4, [sp, #0]
   152c8:	e7e6      	b.n	15298 <bt_gatt_store_ccc+0x30>
		str = NULL;
   152ca:	4611      	mov	r1, r2
   152cc:	e7ee      	b.n	152ac <bt_gatt_store_ccc+0x44>
   152ce:	bf00      	nop
   152d0:	00013805 	.word	0x00013805
   152d4:	00022364 	.word	0x00022364
   152d8:	00022450 	.word	0x00022450

000152dc <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   152dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152e0:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   152e2:	4603      	mov	r3, r0
   152e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   152e8:	2001      	movs	r0, #1
{
   152ea:	b08d      	sub	sp, #52	; 0x34
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   152ec:	4a52      	ldr	r2, [pc, #328]	; (15438 <bt_gatt_disconnected+0x15c>)
		k_delayed_work_cancel(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   152ee:	f104 0588 	add.w	r5, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   152f2:	f007 fef6 	bl	1d0e2 <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   152f6:	4629      	mov	r1, r5
   152f8:	7a20      	ldrb	r0, [r4, #8]
   152fa:	f006 fec4 	bl	1c086 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   152fe:	b378      	cbz	r0, 15360 <bt_gatt_disconnected+0x84>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   15300:	4629      	mov	r1, r5
   15302:	7a20      	ldrb	r0, [r4, #8]
   15304:	f7ff ffb0 	bl	15268 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   15308:	4620      	mov	r0, r4
   1530a:	f7fd ff9b 	bl	13244 <find_cf_cfg>
	if (!cfg) {
   1530e:	4606      	mov	r6, r0
   15310:	2800      	cmp	r0, #0
   15312:	d05e      	beq.n	153d2 <bt_gatt_disconnected+0xf6>
		if (conn->id) {
   15314:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   15316:	3608      	adds	r6, #8
		if (conn->id) {
   15318:	2a00      	cmp	r2, #0
   1531a:	d05c      	beq.n	153d6 <bt_gatt_disconnected+0xfa>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1531c:	af02      	add	r7, sp, #8
   1531e:	2104      	movs	r1, #4
   15320:	4638      	mov	r0, r7
   15322:	f005 fa0b 	bl	1a73c <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   15326:	462b      	mov	r3, r5
   15328:	9700      	str	r7, [sp, #0]
   1532a:	2124      	movs	r1, #36	; 0x24
   1532c:	4a43      	ldr	r2, [pc, #268]	; (1543c <bt_gatt_disconnected+0x160>)
   1532e:	a803      	add	r0, sp, #12
   15330:	f7f9 f984 	bl	e63c <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   15334:	7a23      	ldrb	r3, [r4, #8]
   15336:	2701      	movs	r7, #1
   15338:	b93b      	cbnz	r3, 1534a <bt_gatt_disconnected+0x6e>
		bt_settings_encode_key(key, sizeof(key), "cf",
   1533a:	2300      	movs	r3, #0
   1533c:	2124      	movs	r1, #36	; 0x24
   1533e:	9300      	str	r3, [sp, #0]
   15340:	4a3e      	ldr	r2, [pc, #248]	; (1543c <bt_gatt_disconnected+0x160>)
   15342:	462b      	mov	r3, r5
   15344:	a803      	add	r0, sp, #12
   15346:	f7f9 f979 	bl	e63c <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   1534a:	463a      	mov	r2, r7
   1534c:	4631      	mov	r1, r6
   1534e:	a803      	add	r0, sp, #12
   15350:	f7f6 fb44 	bl	b9dc <settings_save_one>
	if (err) {
   15354:	4602      	mov	r2, r0
   15356:	b118      	cbz	r0, 15360 <bt_gatt_disconnected+0x84>
		BT_ERR("Failed to store Client Features (err %d)", err);
   15358:	2145      	movs	r1, #69	; 0x45
   1535a:	4839      	ldr	r0, [pc, #228]	; (15440 <bt_gatt_disconnected+0x164>)
   1535c:	f005 fa88 	bl	1a870 <printk>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   15360:	4629      	mov	r1, r5
   15362:	7a20      	ldrb	r0, [r4, #8]
   15364:	f006 fe8f 	bl	1c086 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   15368:	b150      	cbz	r0, 15380 <bt_gatt_disconnected+0xa4>
		struct addr_with_id addr_with_id = {
   1536a:	7a23      	ldrb	r3, [r4, #8]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1536c:	f64f 71ff 	movw	r1, #65535	; 0xffff
		struct addr_with_id addr_with_id = {
   15370:	f88d 3010 	strb.w	r3, [sp, #16]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   15374:	2001      	movs	r0, #1
   15376:	4a33      	ldr	r2, [pc, #204]	; (15444 <bt_gatt_disconnected+0x168>)
   15378:	ab03      	add	r3, sp, #12
		struct addr_with_id addr_with_id = {
   1537a:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1537c:	f007 feb1 	bl	1d0e2 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   15380:	4620      	mov	r0, r4
   15382:	f7fd ff9d 	bl	132c0 <gatt_sub_find>
	if (!sub) {
   15386:	4607      	mov	r7, r0
   15388:	b3b0      	cbz	r0, 153f8 <bt_gatt_disconnected+0x11c>
	return list->head;
   1538a:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1538c:	b3a3      	cbz	r3, 153f8 <bt_gatt_disconnected+0x11c>
   1538e:	f1b3 0b14 	subs.w	fp, r3, #20
   15392:	d031      	beq.n	153f8 <bt_gatt_disconnected+0x11c>
	return node->next;
   15394:	681e      	ldr	r6, [r3, #0]
   15396:	b106      	cbz	r6, 1539a <bt_gatt_disconnected+0xbe>
   15398:	3e14      	subs	r6, #20
   1539a:	f04f 0800 	mov.w	r8, #0
			params->value = 0U;
   1539e:	46c2      	mov	sl, r8
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   153a0:	f107 0901 	add.w	r9, r7, #1
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   153a4:	4629      	mov	r1, r5
   153a6:	7a20      	ldrb	r0, [r4, #8]
   153a8:	f006 fe6d 	bl	1c086 <bt_addr_le_is_bonded>
   153ac:	b9a8      	cbnz	r0, 153da <bt_gatt_disconnected+0xfe>
			gatt_sub_remove(conn, sub, prev, params);
   153ae:	465b      	mov	r3, fp
   153b0:	4642      	mov	r2, r8
   153b2:	4639      	mov	r1, r7
   153b4:	4620      	mov	r0, r4
			params->value = 0U;
   153b6:	f8ab a00c 	strh.w	sl, [fp, #12]
			gatt_sub_remove(conn, sub, prev, params);
   153ba:	f007 fcf3 	bl	1cda4 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   153be:	b1de      	cbz	r6, 153f8 <bt_gatt_disconnected+0x11c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   153c0:	f116 0214 	adds.w	r2, r6, #20
   153c4:	d002      	beq.n	153cc <bt_gatt_disconnected+0xf0>
	return node->next;
   153c6:	6972      	ldr	r2, [r6, #20]
   153c8:	b102      	cbz	r2, 153cc <bt_gatt_disconnected+0xf0>
   153ca:	3a14      	subs	r2, #20
   153cc:	46b3      	mov	fp, r6
   153ce:	4616      	mov	r6, r2
   153d0:	e7e8      	b.n	153a4 <bt_gatt_disconnected+0xc8>
		len = 0;
   153d2:	4607      	mov	r7, r0
   153d4:	e7b1      	b.n	1533a <bt_gatt_disconnected+0x5e>
   153d6:	2701      	movs	r7, #1
   153d8:	e7af      	b.n	1533a <bt_gatt_disconnected+0x5e>
   153da:	f10b 0010 	add.w	r0, fp, #16
   153de:	f007 fc9e 	bl	1cd1e <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   153e2:	07c3      	lsls	r3, r0, #31
   153e4:	d4e3      	bmi.n	153ae <bt_gatt_disconnected+0xd2>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   153e6:	787b      	ldrb	r3, [r7, #1]
   153e8:	b11b      	cbz	r3, 153f2 <bt_gatt_disconnected+0x116>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   153ea:	4629      	mov	r1, r5
   153ec:	4648      	mov	r0, r9
   153ee:	f007 fc7a 	bl	1cce6 <bt_addr_le_copy>
			prev = &params->node;
   153f2:	f10b 0814 	add.w	r8, fp, #20
   153f6:	e7e2      	b.n	153be <bt_gatt_disconnected+0xe2>
	cfg = find_cf_cfg(conn);
   153f8:	4620      	mov	r0, r4
   153fa:	f7fd ff23 	bl	13244 <find_cf_cfg>
	if (!cfg) {
   153fe:	4606      	mov	r6, r0
   15400:	b1b8      	cbz	r0, 15432 <bt_gatt_disconnected+0x156>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   15402:	4629      	mov	r1, r5
   15404:	7a20      	ldrb	r0, [r4, #8]
   15406:	f006 fe3e 	bl	1c086 <bt_addr_le_is_bonded>
   1540a:	b928      	cbnz	r0, 15418 <bt_gatt_disconnected+0x13c>
		clear_cf_cfg(cfg);
   1540c:	4630      	mov	r0, r6
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1540e:	b00d      	add	sp, #52	; 0x34
   15410:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
   15414:	f007 bcad 	b.w	1cd72 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   15418:	1c70      	adds	r0, r6, #1
   1541a:	4629      	mov	r1, r5
   1541c:	f007 fc63 	bl	1cce6 <bt_addr_le_copy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15420:	360c      	adds	r6, #12
   15422:	e8d6 3fef 	ldaex	r3, [r6]
   15426:	f023 0302 	bic.w	r3, r3, #2
   1542a:	e8c6 3fe2 	stlex	r2, r3, [r6]
   1542e:	2a00      	cmp	r2, #0
   15430:	d1f7      	bne.n	15422 <bt_gatt_disconnected+0x146>
}
   15432:	b00d      	add	sp, #52	; 0x34
   15434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15438:	00013a9d 	.word	0x00013a9d
   1543c:	000224a4 	.word	0x000224a4
   15440:	00022473 	.word	0x00022473
   15444:	00013751 	.word	0x00013751

00015448 <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   15448:	b570      	push	{r4, r5, r6, lr}
   1544a:	4602      	mov	r2, r0
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1544c:	2400      	movs	r4, #0
   1544e:	26c0      	movs	r6, #192	; 0xc0
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   15450:	4b09      	ldr	r3, [pc, #36]	; (15478 <bt_smp_accept+0x30>)
   15452:	fb06 f504 	mul.w	r5, r6, r4
   15456:	58e8      	ldr	r0, [r5, r3]
   15458:	b148      	cbz	r0, 1546e <bt_smp_accept+0x26>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1545a:	3401      	adds	r4, #1
   1545c:	2c0a      	cmp	r4, #10
   1545e:	d1f8      	bne.n	15452 <bt_smp_accept+0xa>
		*chan = &smp->chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   15460:	4806      	ldr	r0, [pc, #24]	; (1547c <bt_smp_accept+0x34>)
   15462:	2145      	movs	r1, #69	; 0x45
   15464:	f005 fa04 	bl	1a870 <printk>
   15468:	f06f 000b 	mvn.w	r0, #11
   1546c:	e003      	b.n	15476 <bt_smp_accept+0x2e>
		smp->chan.ops = &ops;
   1546e:	4a04      	ldr	r2, [pc, #16]	; (15480 <bt_smp_accept+0x38>)
   15470:	442b      	add	r3, r5
   15472:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan;
   15474:	600b      	str	r3, [r1, #0]

	return -ENOMEM;
}
   15476:	bd70      	pop	{r4, r5, r6, pc}
   15478:	20009c70 	.word	0x20009c70
   1547c:	000224b5 	.word	0x000224b5
   15480:	0001ef0c 	.word	0x0001ef0c

00015484 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   15484:	222c      	movs	r2, #44	; 0x2c
   15486:	4b02      	ldr	r3, [pc, #8]	; (15490 <net_buf_pool_get+0xc>)
   15488:	fb02 3000 	mla	r0, r2, r0, r3
   1548c:	4770      	bx	lr
   1548e:	bf00      	nop
   15490:	200086a4 	.word	0x200086a4

00015494 <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
   15494:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   15496:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   15498:	4b04      	ldr	r3, [pc, #16]	; (154ac <net_buf_id+0x18>)
   1549a:	fb01 3302 	mla	r3, r1, r2, r3
   1549e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   154a0:	1ac0      	subs	r0, r0, r3
}
   154a2:	4b03      	ldr	r3, [pc, #12]	; (154b0 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   154a4:	10c0      	asrs	r0, r0, #3
}
   154a6:	4358      	muls	r0, r3
   154a8:	4770      	bx	lr
   154aa:	bf00      	nop
   154ac:	200086a4 	.word	0x200086a4
   154b0:	aaaaaaab 	.word	0xaaaaaaab

000154b4 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   154b4:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   154b6:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   154b8:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   154ba:	4b09      	ldr	r3, [pc, #36]	; (154e0 <fixed_data_alloc+0x2c>)
   154bc:	fb04 3302 	mla	r3, r4, r2, r3
   154c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
   154c2:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   154c4:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   154c6:	6823      	ldr	r3, [r4, #0]
   154c8:	429a      	cmp	r2, r3
   154ca:	bf94      	ite	ls
   154cc:	600a      	strls	r2, [r1, #0]
   154ce:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   154d0:	f7ff ffe0 	bl	15494 <net_buf_id>
   154d4:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   154d8:	fb02 3000 	mla	r0, r2, r0, r3
   154dc:	bd10      	pop	{r4, pc}
   154de:	bf00      	nop
   154e0:	200086a4 	.word	0x200086a4

000154e4 <net_buf_reset>:
{
   154e4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   154e6:	7943      	ldrb	r3, [r0, #5]
{
   154e8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   154ea:	b143      	cbz	r3, 154fe <net_buf_reset+0x1a>
   154ec:	490c      	ldr	r1, [pc, #48]	; (15520 <net_buf_reset+0x3c>)
   154ee:	480d      	ldr	r0, [pc, #52]	; (15524 <net_buf_reset+0x40>)
   154f0:	224f      	movs	r2, #79	; 0x4f
   154f2:	f005 f9bd 	bl	1a870 <printk>
   154f6:	214f      	movs	r1, #79	; 0x4f
   154f8:	4809      	ldr	r0, [pc, #36]	; (15520 <net_buf_reset+0x3c>)
   154fa:	f005 fc5f 	bl	1adbc <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   154fe:	6823      	ldr	r3, [r4, #0]
   15500:	b143      	cbz	r3, 15514 <net_buf_reset+0x30>
   15502:	4907      	ldr	r1, [pc, #28]	; (15520 <net_buf_reset+0x3c>)
   15504:	4807      	ldr	r0, [pc, #28]	; (15524 <net_buf_reset+0x40>)
   15506:	2250      	movs	r2, #80	; 0x50
   15508:	f005 f9b2 	bl	1a870 <printk>
   1550c:	2150      	movs	r1, #80	; 0x50
   1550e:	4804      	ldr	r0, [pc, #16]	; (15520 <net_buf_reset+0x3c>)
   15510:	f005 fc54 	bl	1adbc <assert_post_action>
	buf->len  = 0U;
   15514:	2300      	movs	r3, #0
   15516:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   15518:	6923      	ldr	r3, [r4, #16]
   1551a:	60a3      	str	r3, [r4, #8]
}
   1551c:	bd10      	pop	{r4, pc}
   1551e:	bf00      	nop
   15520:	000224e6 	.word	0x000224e6
   15524:	0001fdfa 	.word	0x0001fdfa

00015528 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   15528:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1552c:	4605      	mov	r5, r0
   1552e:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   15530:	4610      	mov	r0, r2
   15532:	4619      	mov	r1, r3
{
   15534:	4691      	mov	r9, r2
   15536:	4698      	mov	r8, r3
   15538:	4617      	mov	r7, r2
   1553a:	461e      	mov	r6, r3
	uint64_t end = z_timeout_end_calc(timeout);
   1553c:	f008 fe2b 	bl	1e196 <z_timeout_end_calc>
   15540:	4682      	mov	sl, r0
   15542:	468b      	mov	fp, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
   15544:	b945      	cbnz	r5, 15558 <net_buf_alloc_len+0x30>
   15546:	494a      	ldr	r1, [pc, #296]	; (15670 <net_buf_alloc_len+0x148>)
   15548:	484a      	ldr	r0, [pc, #296]	; (15674 <net_buf_alloc_len+0x14c>)
   1554a:	22ed      	movs	r2, #237	; 0xed
   1554c:	f005 f990 	bl	1a870 <printk>
   15550:	21ed      	movs	r1, #237	; 0xed
   15552:	4847      	ldr	r0, [pc, #284]	; (15670 <net_buf_alloc_len+0x148>)
   15554:	f005 fc32 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   15558:	f04f 0320 	mov.w	r3, #32
   1555c:	f3ef 8111 	mrs	r1, BASEPRI
   15560:	f383 8811 	msr	BASEPRI, r3
   15564:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   15568:	8beb      	ldrh	r3, [r5, #30]
   1556a:	2b00      	cmp	r3, #0
   1556c:	d055      	beq.n	1561a <net_buf_alloc_len+0xf2>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1556e:	8baa      	ldrh	r2, [r5, #28]
   15570:	429a      	cmp	r2, r3
   15572:	d93e      	bls.n	155f2 <net_buf_alloc_len+0xca>
   15574:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   15576:	2200      	movs	r2, #0
   15578:	2300      	movs	r3, #0
   1557a:	4628      	mov	r0, r5
   1557c:	f002 ff34 	bl	183e8 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   15580:	9900      	ldr	r1, [sp, #0]
   15582:	4604      	mov	r4, r0
   15584:	2800      	cmp	r0, #0
   15586:	d034      	beq.n	155f2 <net_buf_alloc_len+0xca>
	__asm__ volatile(
   15588:	f381 8811 	msr	BASEPRI, r1
   1558c:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   15590:	9d01      	ldr	r5, [sp, #4]
   15592:	2d00      	cmp	r5, #0
   15594:	d069      	beq.n	1566a <net_buf_alloc_len+0x142>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   15596:	ea58 0309 	orrs.w	r3, r8, r9
   1559a:	d00f      	beq.n	155bc <net_buf_alloc_len+0x94>
   1559c:	f1b8 3fff 	cmp.w	r8, #4294967295
   155a0:	bf08      	it	eq
   155a2:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   155a6:	d009      	beq.n	155bc <net_buf_alloc_len+0x94>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   155a8:	f004 fd08 	bl	19fbc <z_tick_get>
   155ac:	ebba 0700 	subs.w	r7, sl, r0
   155b0:	eb6b 0601 	sbc.w	r6, fp, r1
   155b4:	2e00      	cmp	r6, #0
   155b6:	bfbc      	itt	lt
   155b8:	2700      	movlt	r7, #0
   155ba:	463e      	movlt	r6, r7
	return pool->alloc->cb->alloc(buf, size, timeout);
   155bc:	f04f 092c 	mov.w	r9, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   155c0:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   155c2:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 15678 <net_buf_alloc_len+0x150>
   155c6:	463a      	mov	r2, r7
   155c8:	fb09 8303 	mla	r3, r9, r3, r8
   155cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   155ce:	4620      	mov	r0, r4
   155d0:	681b      	ldr	r3, [r3, #0]
   155d2:	a901      	add	r1, sp, #4
   155d4:	f8d3 a000 	ldr.w	sl, [r3]
   155d8:	4633      	mov	r3, r6
   155da:	47d0      	blx	sl
   155dc:	4606      	mov	r6, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   155de:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   155e0:	bb58      	cbnz	r0, 1563a <net_buf_alloc_len+0x112>
	k_lifo_put(&pool->free, buf);
   155e2:	79a0      	ldrb	r0, [r4, #6]
   155e4:	4621      	mov	r1, r4
   155e6:	fb00 8009 	mla	r0, r0, r9, r8
   155ea:	f008 fd09 	bl	1e000 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   155ee:	4634      	mov	r4, r6
}
   155f0:	e01f      	b.n	15632 <net_buf_alloc_len+0x10a>
		uninit_count = pool->uninit_count--;
   155f2:	8beb      	ldrh	r3, [r5, #30]
   155f4:	1e5a      	subs	r2, r3, #1
   155f6:	83ea      	strh	r2, [r5, #30]
   155f8:	f381 8811 	msr	BASEPRI, r1
   155fc:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   15600:	2018      	movs	r0, #24
   15602:	8bac      	ldrh	r4, [r5, #28]
   15604:	1ae3      	subs	r3, r4, r3
   15606:	6aac      	ldr	r4, [r5, #40]	; 0x28
   15608:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   1560c:	481a      	ldr	r0, [pc, #104]	; (15678 <net_buf_alloc_len+0x150>)
   1560e:	4b1b      	ldr	r3, [pc, #108]	; (1567c <net_buf_alloc_len+0x154>)
   15610:	1a2d      	subs	r5, r5, r0
   15612:	10ad      	asrs	r5, r5, #2
   15614:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   15616:	71a5      	strb	r5, [r4, #6]
		goto success;
   15618:	e7ba      	b.n	15590 <net_buf_alloc_len+0x68>
   1561a:	f381 8811 	msr	BASEPRI, r1
   1561e:	f3bf 8f6f 	isb	sy
   15622:	464a      	mov	r2, r9
   15624:	4643      	mov	r3, r8
   15626:	4628      	mov	r0, r5
   15628:	f002 fede 	bl	183e8 <z_impl_k_queue_get>
	if (!buf) {
   1562c:	4604      	mov	r4, r0
   1562e:	2800      	cmp	r0, #0
   15630:	d1ae      	bne.n	15590 <net_buf_alloc_len+0x68>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   15632:	4620      	mov	r0, r4
   15634:	b003      	add	sp, #12
   15636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   1563a:	9b01      	ldr	r3, [sp, #4]
   1563c:	429d      	cmp	r5, r3
   1563e:	d90a      	bls.n	15656 <net_buf_alloc_len+0x12e>
   15640:	490b      	ldr	r1, [pc, #44]	; (15670 <net_buf_alloc_len+0x148>)
   15642:	480c      	ldr	r0, [pc, #48]	; (15674 <net_buf_alloc_len+0x14c>)
   15644:	f240 124d 	movw	r2, #333	; 0x14d
   15648:	f005 f912 	bl	1a870 <printk>
   1564c:	f240 114d 	movw	r1, #333	; 0x14d
   15650:	4807      	ldr	r0, [pc, #28]	; (15670 <net_buf_alloc_len+0x148>)
   15652:	f005 fbb3 	bl	1adbc <assert_post_action>
	buf->frags = NULL;
   15656:	2300      	movs	r3, #0
   15658:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1565a:	2301      	movs	r3, #1
   1565c:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   1565e:	9b01      	ldr	r3, [sp, #4]
	net_buf_reset(buf);
   15660:	4620      	mov	r0, r4
	buf->size  = size;
   15662:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   15664:	f7ff ff3e 	bl	154e4 <net_buf_reset>
	return buf;
   15668:	e7e3      	b.n	15632 <net_buf_alloc_len+0x10a>
		buf->__buf = NULL;
   1566a:	6125      	str	r5, [r4, #16]
   1566c:	e7f3      	b.n	15656 <net_buf_alloc_len+0x12e>
   1566e:	bf00      	nop
   15670:	000224e6 	.word	0x000224e6
   15674:	0001fdfa 	.word	0x0001fdfa
   15678:	200086a4 	.word	0x200086a4
   1567c:	ba2e8ba3 	.word	0xba2e8ba3

00015680 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   15680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15684:	4606      	mov	r6, r0
   15686:	f002 feaf 	bl	183e8 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1568a:	4605      	mov	r5, r0
   1568c:	b140      	cbz	r0, 156a0 <net_buf_get+0x20>
   1568e:	4604      	mov	r4, r0
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   15690:	4f11      	ldr	r7, [pc, #68]	; (156d8 <net_buf_get+0x58>)
   15692:	f8df 8048 	ldr.w	r8, [pc, #72]	; 156dc <net_buf_get+0x5c>
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   15696:	7963      	ldrb	r3, [r4, #5]
   15698:	f013 0301 	ands.w	r3, r3, #1
   1569c:	d103      	bne.n	156a6 <net_buf_get+0x26>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1569e:	6023      	str	r3, [r4, #0]

	return buf;
}
   156a0:	4628      	mov	r0, r5
   156a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   156a6:	2200      	movs	r2, #0
   156a8:	2300      	movs	r3, #0
   156aa:	4630      	mov	r0, r6
   156ac:	f002 fe9c 	bl	183e8 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   156b0:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   156b2:	b950      	cbnz	r0, 156ca <net_buf_get+0x4a>
   156b4:	4639      	mov	r1, r7
   156b6:	4640      	mov	r0, r8
   156b8:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
   156bc:	f005 f8d8 	bl	1a870 <printk>
   156c0:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   156c4:	4638      	mov	r0, r7
   156c6:	f005 fb79 	bl	1adbc <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   156ca:	7963      	ldrb	r3, [r4, #5]
   156cc:	f023 0301 	bic.w	r3, r3, #1
   156d0:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   156d2:	6824      	ldr	r4, [r4, #0]
   156d4:	e7df      	b.n	15696 <net_buf_get+0x16>
   156d6:	bf00      	nop
   156d8:	000224e6 	.word	0x000224e6
   156dc:	0001fdfa 	.word	0x0001fdfa

000156e0 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   156e0:	b538      	push	{r3, r4, r5, lr}
   156e2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   156e4:	4604      	mov	r4, r0
   156e6:	b950      	cbnz	r0, 156fe <net_buf_simple_reserve+0x1e>
   156e8:	490d      	ldr	r1, [pc, #52]	; (15720 <net_buf_simple_reserve+0x40>)
   156ea:	480e      	ldr	r0, [pc, #56]	; (15724 <net_buf_simple_reserve+0x44>)
   156ec:	f240 12bb 	movw	r2, #443	; 0x1bb
   156f0:	f005 f8be 	bl	1a870 <printk>
   156f4:	f240 11bb 	movw	r1, #443	; 0x1bb
   156f8:	4809      	ldr	r0, [pc, #36]	; (15720 <net_buf_simple_reserve+0x40>)
   156fa:	f005 fb5f 	bl	1adbc <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   156fe:	88a3      	ldrh	r3, [r4, #4]
   15700:	b153      	cbz	r3, 15718 <net_buf_simple_reserve+0x38>
   15702:	4907      	ldr	r1, [pc, #28]	; (15720 <net_buf_simple_reserve+0x40>)
   15704:	4807      	ldr	r0, [pc, #28]	; (15724 <net_buf_simple_reserve+0x44>)
   15706:	f44f 72de 	mov.w	r2, #444	; 0x1bc
   1570a:	f005 f8b1 	bl	1a870 <printk>
   1570e:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   15712:	4803      	ldr	r0, [pc, #12]	; (15720 <net_buf_simple_reserve+0x40>)
   15714:	f005 fb52 	bl	1adbc <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   15718:	68a3      	ldr	r3, [r4, #8]
   1571a:	442b      	add	r3, r5
   1571c:	6023      	str	r3, [r4, #0]
}
   1571e:	bd38      	pop	{r3, r4, r5, pc}
   15720:	000224e6 	.word	0x000224e6
   15724:	0001fdfa 	.word	0x0001fdfa

00015728 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   15728:	b538      	push	{r3, r4, r5, lr}
   1572a:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   1572c:	4605      	mov	r5, r0
   1572e:	b950      	cbnz	r0, 15746 <net_buf_put+0x1e>
   15730:	4912      	ldr	r1, [pc, #72]	; (1577c <net_buf_put+0x54>)
   15732:	4813      	ldr	r0, [pc, #76]	; (15780 <net_buf_put+0x58>)
   15734:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   15738:	f005 f89a 	bl	1a870 <printk>
   1573c:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   15740:	480e      	ldr	r0, [pc, #56]	; (1577c <net_buf_put+0x54>)
   15742:	f005 fb3b 	bl	1adbc <assert_post_action>
	__ASSERT_NO_MSG(buf);
   15746:	b954      	cbnz	r4, 1575e <net_buf_put+0x36>
   15748:	490c      	ldr	r1, [pc, #48]	; (1577c <net_buf_put+0x54>)
   1574a:	480d      	ldr	r0, [pc, #52]	; (15780 <net_buf_put+0x58>)
   1574c:	f240 12f9 	movw	r2, #505	; 0x1f9
   15750:	f005 f88e 	bl	1a870 <printk>
   15754:	f240 11f9 	movw	r1, #505	; 0x1f9
   15758:	4808      	ldr	r0, [pc, #32]	; (1577c <net_buf_put+0x54>)
   1575a:	f005 fb2f 	bl	1adbc <assert_post_action>
{
   1575e:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   15760:	6811      	ldr	r1, [r2, #0]
   15762:	b929      	cbnz	r1, 15770 <net_buf_put+0x48>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   15764:	4621      	mov	r1, r4
   15766:	4628      	mov	r0, r5
}
   15768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   1576c:	f002 bde8 	b.w	18340 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   15770:	7953      	ldrb	r3, [r2, #5]
   15772:	f043 0301 	orr.w	r3, r3, #1
   15776:	7153      	strb	r3, [r2, #5]
   15778:	460a      	mov	r2, r1
   1577a:	e7f1      	b.n	15760 <net_buf_put+0x38>
   1577c:	000224e6 	.word	0x000224e6
   15780:	0001fdfa 	.word	0x0001fdfa

00015784 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   15784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   15788:	4605      	mov	r5, r0
   1578a:	b328      	cbz	r0, 157d8 <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1578c:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1578e:	f04f 082c 	mov.w	r8, #44	; 0x2c
   15792:	4e1b      	ldr	r6, [pc, #108]	; (15800 <net_buf_unref+0x7c>)
		struct net_buf *frags = buf->frags;
   15794:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   15796:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   15798:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   1579a:	3b01      	subs	r3, #1
   1579c:	b2db      	uxtb	r3, r3
   1579e:	7123      	strb	r3, [r4, #4]
   157a0:	b9c3      	cbnz	r3, 157d4 <net_buf_unref+0x50>
		if (buf->__buf) {
   157a2:	6921      	ldr	r1, [r4, #16]
   157a4:	b159      	cbz	r1, 157be <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   157a6:	7963      	ldrb	r3, [r4, #5]
   157a8:	079b      	lsls	r3, r3, #30
   157aa:	d407      	bmi.n	157bc <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   157ac:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   157ae:	4620      	mov	r0, r4
   157b0:	fb08 6303 	mla	r3, r8, r3, r6
   157b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   157b6:	681b      	ldr	r3, [r3, #0]
   157b8:	689b      	ldr	r3, [r3, #8]
   157ba:	4798      	blx	r3
			buf->__buf = NULL;
   157bc:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   157be:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   157c0:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   157c2:	fb08 6300 	mla	r3, r8, r0, r6
   157c6:	6a1b      	ldr	r3, [r3, #32]
		buf->frags = NULL;
   157c8:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   157ca:	b193      	cbz	r3, 157f2 <net_buf_unref+0x6e>
			pool->destroy(buf);
   157cc:	4620      	mov	r0, r4
   157ce:	4798      	blx	r3
	while (buf) {
   157d0:	2d00      	cmp	r5, #0
   157d2:	d1df      	bne.n	15794 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   157d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   157d8:	490a      	ldr	r1, [pc, #40]	; (15804 <net_buf_unref+0x80>)
   157da:	480b      	ldr	r0, [pc, #44]	; (15808 <net_buf_unref+0x84>)
   157dc:	f44f 7202 	mov.w	r2, #520	; 0x208
   157e0:	f005 f846 	bl	1a870 <printk>
}
   157e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   157e8:	f44f 7102 	mov.w	r1, #520	; 0x208
   157ec:	4805      	ldr	r0, [pc, #20]	; (15804 <net_buf_unref+0x80>)
   157ee:	f005 bae5 	b.w	1adbc <assert_post_action>
	k_lifo_put(&pool->free, buf);
   157f2:	4621      	mov	r1, r4
   157f4:	fb00 6008 	mla	r0, r0, r8, r6
   157f8:	f008 fc02 	bl	1e000 <k_queue_prepend>
}
   157fc:	e7e8      	b.n	157d0 <net_buf_unref+0x4c>
   157fe:	bf00      	nop
   15800:	200086a4 	.word	0x200086a4
   15804:	000224e6 	.word	0x000224e6
   15808:	0001fdfa 	.word	0x0001fdfa

0001580c <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1580c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1580e:	4604      	mov	r4, r0
   15810:	b950      	cbnz	r0, 15828 <net_buf_ref+0x1c>
   15812:	4908      	ldr	r1, [pc, #32]	; (15834 <net_buf_ref+0x28>)
   15814:	4808      	ldr	r0, [pc, #32]	; (15838 <net_buf_ref+0x2c>)
   15816:	f240 2237 	movw	r2, #567	; 0x237
   1581a:	f005 f829 	bl	1a870 <printk>
   1581e:	f240 2137 	movw	r1, #567	; 0x237
   15822:	4804      	ldr	r0, [pc, #16]	; (15834 <net_buf_ref+0x28>)
   15824:	f005 faca 	bl	1adbc <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   15828:	7923      	ldrb	r3, [r4, #4]
	return buf;
}
   1582a:	4620      	mov	r0, r4
	buf->ref++;
   1582c:	3301      	adds	r3, #1
   1582e:	7123      	strb	r3, [r4, #4]
}
   15830:	bd10      	pop	{r4, pc}
   15832:	bf00      	nop
   15834:	000224e6 	.word	0x000224e6
   15838:	0001fdfa 	.word	0x0001fdfa

0001583c <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1583c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1583e:	4604      	mov	r4, r0
   15840:	b950      	cbnz	r0, 15858 <net_buf_frag_last+0x1c>
   15842:	4908      	ldr	r1, [pc, #32]	; (15864 <net_buf_frag_last+0x28>)
   15844:	4808      	ldr	r0, [pc, #32]	; (15868 <net_buf_frag_last+0x2c>)
   15846:	f44f 721d 	mov.w	r2, #628	; 0x274
   1584a:	f005 f811 	bl	1a870 <printk>
   1584e:	f44f 711d 	mov.w	r1, #628	; 0x274
   15852:	4804      	ldr	r0, [pc, #16]	; (15864 <net_buf_frag_last+0x28>)
   15854:	f005 fab2 	bl	1adbc <assert_post_action>

	while (buf->frags) {
   15858:	4620      	mov	r0, r4
   1585a:	6824      	ldr	r4, [r4, #0]
   1585c:	2c00      	cmp	r4, #0
   1585e:	d1fb      	bne.n	15858 <net_buf_frag_last+0x1c>
		buf = buf->frags;
	}

	return buf;
}
   15860:	bd10      	pop	{r4, pc}
   15862:	bf00      	nop
   15864:	000224e6 	.word	0x000224e6
   15868:	0001fdfa 	.word	0x0001fdfa

0001586c <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1586c:	b538      	push	{r3, r4, r5, lr}
   1586e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   15870:	4604      	mov	r4, r0
   15872:	b950      	cbnz	r0, 1588a <net_buf_frag_insert+0x1e>
   15874:	490f      	ldr	r1, [pc, #60]	; (158b4 <net_buf_frag_insert+0x48>)
   15876:	4810      	ldr	r0, [pc, #64]	; (158b8 <net_buf_frag_insert+0x4c>)
   15878:	f240 227f 	movw	r2, #639	; 0x27f
   1587c:	f004 fff8 	bl	1a870 <printk>
   15880:	f240 217f 	movw	r1, #639	; 0x27f
   15884:	480b      	ldr	r0, [pc, #44]	; (158b4 <net_buf_frag_insert+0x48>)
   15886:	f005 fa99 	bl	1adbc <assert_post_action>
	__ASSERT_NO_MSG(frag);
   1588a:	b955      	cbnz	r5, 158a2 <net_buf_frag_insert+0x36>
   1588c:	4909      	ldr	r1, [pc, #36]	; (158b4 <net_buf_frag_insert+0x48>)
   1588e:	480a      	ldr	r0, [pc, #40]	; (158b8 <net_buf_frag_insert+0x4c>)
   15890:	f44f 7220 	mov.w	r2, #640	; 0x280
   15894:	f004 ffec 	bl	1a870 <printk>
   15898:	f44f 7120 	mov.w	r1, #640	; 0x280
   1589c:	4805      	ldr	r0, [pc, #20]	; (158b4 <net_buf_frag_insert+0x48>)
   1589e:	f005 fa8d 	bl	1adbc <assert_post_action>

	if (parent->frags) {
   158a2:	6823      	ldr	r3, [r4, #0]
   158a4:	b123      	cbz	r3, 158b0 <net_buf_frag_insert+0x44>
		net_buf_frag_last(frag)->frags = parent->frags;
   158a6:	4628      	mov	r0, r5
   158a8:	f7ff ffc8 	bl	1583c <net_buf_frag_last>
   158ac:	6823      	ldr	r3, [r4, #0]
   158ae:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   158b0:	6025      	str	r5, [r4, #0]
}
   158b2:	bd38      	pop	{r3, r4, r5, pc}
   158b4:	000224e6 	.word	0x000224e6
   158b8:	0001fdfa 	.word	0x0001fdfa

000158bc <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   158bc:	b538      	push	{r3, r4, r5, lr}
   158be:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   158c0:	460d      	mov	r5, r1
   158c2:	b951      	cbnz	r1, 158da <net_buf_frag_add+0x1e>
   158c4:	490c      	ldr	r1, [pc, #48]	; (158f8 <net_buf_frag_add+0x3c>)
   158c6:	480d      	ldr	r0, [pc, #52]	; (158fc <net_buf_frag_add+0x40>)
   158c8:	f240 228b 	movw	r2, #651	; 0x28b
   158cc:	f004 ffd0 	bl	1a870 <printk>
   158d0:	f240 218b 	movw	r1, #651	; 0x28b
   158d4:	4808      	ldr	r0, [pc, #32]	; (158f8 <net_buf_frag_add+0x3c>)
   158d6:	f005 fa71 	bl	1adbc <assert_post_action>

	if (!head) {
   158da:	b924      	cbnz	r4, 158e6 <net_buf_frag_add+0x2a>
		return net_buf_ref(frag);
   158dc:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   158de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   158e2:	f7ff bf93 	b.w	1580c <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   158e6:	4620      	mov	r0, r4
   158e8:	f7ff ffa8 	bl	1583c <net_buf_frag_last>
   158ec:	4629      	mov	r1, r5
   158ee:	f7ff ffbd 	bl	1586c <net_buf_frag_insert>
}
   158f2:	4620      	mov	r0, r4
   158f4:	bd38      	pop	{r3, r4, r5, pc}
   158f6:	bf00      	nop
   158f8:	000224e6 	.word	0x000224e6
   158fc:	0001fdfa 	.word	0x0001fdfa

00015900 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   15900:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   15902:	6882      	ldr	r2, [r0, #8]
   15904:	6803      	ldr	r3, [r0, #0]
{
   15906:	4604      	mov	r4, r0
	return buf->data - buf->__buf;
   15908:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1590a:	4299      	cmp	r1, r3
{
   1590c:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1590e:	d90a      	bls.n	15926 <net_buf_simple_push+0x26>
   15910:	4908      	ldr	r1, [pc, #32]	; (15934 <net_buf_simple_push+0x34>)
   15912:	4809      	ldr	r0, [pc, #36]	; (15938 <net_buf_simple_push+0x38>)
   15914:	f240 4204 	movw	r2, #1028	; 0x404
   15918:	f004 ffaa 	bl	1a870 <printk>
   1591c:	f240 4104 	movw	r1, #1028	; 0x404
   15920:	4804      	ldr	r0, [pc, #16]	; (15934 <net_buf_simple_push+0x34>)
   15922:	f005 fa4b 	bl	1adbc <assert_post_action>
	buf->data -= len;
   15926:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   15928:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   1592a:	1b40      	subs	r0, r0, r5
	buf->len += len;
   1592c:	440d      	add	r5, r1
	buf->data -= len;
   1592e:	6020      	str	r0, [r4, #0]
	buf->len += len;
   15930:	80a5      	strh	r5, [r4, #4]
}
   15932:	bd38      	pop	{r3, r4, r5, pc}
   15934:	000224e6 	.word	0x000224e6
   15938:	0001fdfa 	.word	0x0001fdfa

0001593c <net_buf_simple_pull>:
{
   1593c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1593e:	8883      	ldrh	r3, [r0, #4]
{
   15940:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->len >= len);
   15942:	428b      	cmp	r3, r1
{
   15944:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   15946:	d20a      	bcs.n	1595e <net_buf_simple_pull+0x22>
   15948:	4908      	ldr	r1, [pc, #32]	; (1596c <net_buf_simple_pull+0x30>)
   1594a:	4809      	ldr	r0, [pc, #36]	; (15970 <net_buf_simple_pull+0x34>)
   1594c:	f240 4264 	movw	r2, #1124	; 0x464
   15950:	f004 ff8e 	bl	1a870 <printk>
   15954:	f240 4164 	movw	r1, #1124	; 0x464
   15958:	4804      	ldr	r0, [pc, #16]	; (1596c <net_buf_simple_pull+0x30>)
   1595a:	f005 fa2f 	bl	1adbc <assert_post_action>
	buf->len -= len;
   1595e:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   15960:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   15962:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   15964:	4428      	add	r0, r5
	buf->len -= len;
   15966:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   15968:	6020      	str	r0, [r4, #0]
}
   1596a:	bd38      	pop	{r3, r4, r5, pc}
   1596c:	000224e6 	.word	0x000224e6
   15970:	0001fdfa 	.word	0x0001fdfa

00015974 <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   15974:	8883      	ldrh	r3, [r0, #4]
{
   15976:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   15978:	428b      	cmp	r3, r1
{
   1597a:	4604      	mov	r4, r0
   1597c:	460d      	mov	r5, r1
	void *data = buf->data;
   1597e:	6806      	ldr	r6, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   15980:	d20a      	bcs.n	15998 <net_buf_simple_pull_mem+0x24>
   15982:	4909      	ldr	r1, [pc, #36]	; (159a8 <net_buf_simple_pull_mem+0x34>)
   15984:	4809      	ldr	r0, [pc, #36]	; (159ac <net_buf_simple_pull_mem+0x38>)
   15986:	f44f 628e 	mov.w	r2, #1136	; 0x470
   1598a:	f004 ff71 	bl	1a870 <printk>
   1598e:	f44f 618e 	mov.w	r1, #1136	; 0x470
   15992:	4805      	ldr	r0, [pc, #20]	; (159a8 <net_buf_simple_pull_mem+0x34>)
   15994:	f005 fa12 	bl	1adbc <assert_post_action>
	buf->len -= len;
   15998:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   1599a:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   1599c:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   1599e:	4429      	add	r1, r5
}
   159a0:	4630      	mov	r0, r6
	buf->len -= len;
   159a2:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   159a4:	6021      	str	r1, [r4, #0]
}
   159a6:	bd70      	pop	{r4, r5, r6, pc}
   159a8:	000224e6 	.word	0x000224e6
   159ac:	0001fdfa 	.word	0x0001fdfa

000159b0 <net_buf_simple_add>:
{
   159b0:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   159b2:	6803      	ldr	r3, [r0, #0]
   159b4:	8886      	ldrh	r6, [r0, #4]
   159b6:	4604      	mov	r4, r0
   159b8:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   159ba:	f007 fcd3 	bl	1d364 <net_buf_simple_tailroom>
   159be:	4288      	cmp	r0, r1
{
   159c0:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   159c2:	d20a      	bcs.n	159da <net_buf_simple_add+0x2a>
   159c4:	4907      	ldr	r1, [pc, #28]	; (159e4 <net_buf_simple_add+0x34>)
   159c6:	4808      	ldr	r0, [pc, #32]	; (159e8 <net_buf_simple_add+0x38>)
   159c8:	f240 3215 	movw	r2, #789	; 0x315
   159cc:	f004 ff50 	bl	1a870 <printk>
   159d0:	f240 3115 	movw	r1, #789	; 0x315
   159d4:	4803      	ldr	r0, [pc, #12]	; (159e4 <net_buf_simple_add+0x34>)
   159d6:	f005 f9f1 	bl	1adbc <assert_post_action>
	buf->len += len;
   159da:	88a1      	ldrh	r1, [r4, #4]
}
   159dc:	4630      	mov	r0, r6
	buf->len += len;
   159de:	440d      	add	r5, r1
   159e0:	80a5      	strh	r5, [r4, #4]
}
   159e2:	bd70      	pop	{r4, r5, r6, pc}
   159e4:	000224e6 	.word	0x000224e6
   159e8:	0001fdfa 	.word	0x0001fdfa

000159ec <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   159ec:	b570      	push	{r4, r5, r6, lr}
   159ee:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   159f0:	460c      	mov	r4, r1
	return port->data;
   159f2:	68c5      	ldr	r5, [r0, #12]
   159f4:	b941      	cbnz	r1, 15a08 <gpio_nrfx_manage_callback+0x1c>
   159f6:	491e      	ldr	r1, [pc, #120]	; (15a70 <gpio_nrfx_manage_callback+0x84>)
   159f8:	481e      	ldr	r0, [pc, #120]	; (15a74 <gpio_nrfx_manage_callback+0x88>)
   159fa:	2224      	movs	r2, #36	; 0x24
   159fc:	f004 ff38 	bl	1a870 <printk>
   15a00:	2124      	movs	r1, #36	; 0x24
   15a02:	481b      	ldr	r0, [pc, #108]	; (15a70 <gpio_nrfx_manage_callback+0x84>)
   15a04:	f005 f9da 	bl	1adbc <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   15a08:	6863      	ldr	r3, [r4, #4]
   15a0a:	b943      	cbnz	r3, 15a1e <gpio_nrfx_manage_callback+0x32>
   15a0c:	4918      	ldr	r1, [pc, #96]	; (15a70 <gpio_nrfx_manage_callback+0x84>)
   15a0e:	4819      	ldr	r0, [pc, #100]	; (15a74 <gpio_nrfx_manage_callback+0x88>)
   15a10:	2225      	movs	r2, #37	; 0x25
   15a12:	f004 ff2d 	bl	1a870 <printk>
   15a16:	2125      	movs	r1, #37	; 0x25
   15a18:	4815      	ldr	r0, [pc, #84]	; (15a70 <gpio_nrfx_manage_callback+0x84>)
   15a1a:	f005 f9cf 	bl	1adbc <assert_post_action>
	return list->head;
   15a1e:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   15a20:	b15b      	cbz	r3, 15a3a <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15a22:	2200      	movs	r2, #0
   15a24:	429c      	cmp	r4, r3
   15a26:	d112      	bne.n	15a4e <gpio_nrfx_manage_callback+0x62>
	return node->next;
   15a28:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   15a2a:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
   15a2c:	b952      	cbnz	r2, 15a44 <gpio_nrfx_manage_callback+0x58>
   15a2e:	42a1      	cmp	r1, r4
	list->head = node;
   15a30:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   15a32:	d100      	bne.n	15a36 <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
   15a34:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   15a36:	2300      	movs	r3, #0
   15a38:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   15a3a:	b96e      	cbnz	r6, 15a58 <gpio_nrfx_manage_callback+0x6c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   15a3c:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
   15a3e:	bd70      	pop	{r4, r5, r6, pc}
   15a40:	460b      	mov	r3, r1
   15a42:	e7ef      	b.n	15a24 <gpio_nrfx_manage_callback+0x38>
Z_GENLIST_REMOVE(slist, snode)
   15a44:	42a1      	cmp	r1, r4
	parent->next = child;
   15a46:	6013      	str	r3, [r2, #0]
	list->tail = node;
   15a48:	bf08      	it	eq
   15a4a:	60aa      	streq	r2, [r5, #8]
}
   15a4c:	e7f3      	b.n	15a36 <gpio_nrfx_manage_callback+0x4a>
	return node->next;
   15a4e:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15a50:	461a      	mov	r2, r3
   15a52:	2900      	cmp	r1, #0
   15a54:	d1f4      	bne.n	15a40 <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   15a56:	b13e      	cbz	r6, 15a68 <gpio_nrfx_manage_callback+0x7c>
	parent->next = child;
   15a58:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   15a5a:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
   15a5c:	6023      	str	r3, [r4, #0]
	list->head = node;
   15a5e:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   15a60:	2800      	cmp	r0, #0
   15a62:	d1eb      	bne.n	15a3c <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   15a64:	60ac      	str	r4, [r5, #8]
}
   15a66:	e7ea      	b.n	15a3e <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
   15a68:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   15a6c:	e7e7      	b.n	15a3e <gpio_nrfx_manage_callback+0x52>
   15a6e:	bf00      	nop
   15a70:	00022512 	.word	0x00022512
   15a74:	0001fdfa 	.word	0x0001fdfa

00015a78 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15a78:	6802      	ldr	r2, [r0, #0]
{
   15a7a:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   15a7c:	0953      	lsrs	r3, r2, #5
{
   15a7e:	4604      	mov	r4, r0
    switch (port)
   15a80:	d029      	beq.n	15ad6 <nrf_gpio_pin_port_decode+0x5e>
    uint32_t mask = 0;
   15a82:	2b01      	cmp	r3, #1
   15a84:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15a88:	bf18      	it	ne
   15a8a:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   15a8c:	f002 021f 	and.w	r2, r2, #31

    return (mask & (1UL << pin_number)) ? true : false;
   15a90:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15a92:	07db      	lsls	r3, r3, #31
   15a94:	d40a      	bmi.n	15aac <nrf_gpio_pin_port_decode+0x34>
   15a96:	4912      	ldr	r1, [pc, #72]	; (15ae0 <nrf_gpio_pin_port_decode+0x68>)
   15a98:	4812      	ldr	r0, [pc, #72]	; (15ae4 <nrf_gpio_pin_port_decode+0x6c>)
   15a9a:	f240 221a 	movw	r2, #538	; 0x21a
   15a9e:	f004 fee7 	bl	1a870 <printk>
   15aa2:	f240 211a 	movw	r1, #538	; 0x21a
   15aa6:	480e      	ldr	r0, [pc, #56]	; (15ae0 <nrf_gpio_pin_port_decode+0x68>)
   15aa8:	f005 f988 	bl	1adbc <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   15aac:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   15aae:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15ab2:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   15ab4:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15ab6:	d00c      	beq.n	15ad2 <nrf_gpio_pin_port_decode+0x5a>
   15ab8:	2b01      	cmp	r3, #1
   15aba:	d00f      	beq.n	15adc <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
   15abc:	4908      	ldr	r1, [pc, #32]	; (15ae0 <nrf_gpio_pin_port_decode+0x68>)
   15abe:	4809      	ldr	r0, [pc, #36]	; (15ae4 <nrf_gpio_pin_port_decode+0x6c>)
   15ac0:	f240 221f 	movw	r2, #543	; 0x21f
   15ac4:	f004 fed4 	bl	1a870 <printk>
   15ac8:	f240 211f 	movw	r1, #543	; 0x21f
   15acc:	4804      	ldr	r0, [pc, #16]	; (15ae0 <nrf_gpio_pin_port_decode+0x68>)
   15ace:	f005 f975 	bl	1adbc <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15ad2:	4805      	ldr	r0, [pc, #20]	; (15ae8 <nrf_gpio_pin_port_decode+0x70>)
}
   15ad4:	bd10      	pop	{r4, pc}
    switch (port)
   15ad6:	f04f 33ff 	mov.w	r3, #4294967295
   15ada:	e7d7      	b.n	15a8c <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   15adc:	4803      	ldr	r0, [pc, #12]	; (15aec <nrf_gpio_pin_port_decode+0x74>)
   15ade:	e7f9      	b.n	15ad4 <nrf_gpio_pin_port_decode+0x5c>
   15ae0:	0002253f 	.word	0x0002253f
   15ae4:	0001fdfa 	.word	0x0001fdfa
   15ae8:	40842500 	.word	0x40842500
   15aec:	40842800 	.word	0x40842800

00015af0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   15af0:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   15af2:	4b09      	ldr	r3, [pc, #36]	; (15b18 <gpio_nrfx_init+0x28>)
   15af4:	781a      	ldrb	r2, [r3, #0]
   15af6:	b96a      	cbnz	r2, 15b14 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   15af8:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   15afa:	202f      	movs	r0, #47	; 0x2f
		gpio_initialized = true;
   15afc:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   15afe:	2105      	movs	r1, #5
   15b00:	f7f7 ff86 	bl	da10 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   15b04:	202f      	movs	r0, #47	; 0x2f
   15b06:	f7f7 ff65 	bl	d9d4 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   15b0a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   15b0e:	4b03      	ldr	r3, [pc, #12]	; (15b1c <gpio_nrfx_init+0x2c>)
   15b10:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   15b14:	2000      	movs	r0, #0
   15b16:	bd08      	pop	{r3, pc}
   15b18:	2000f9d4 	.word	0x2000f9d4
   15b1c:	4002f000 	.word	0x4002f000

00015b20 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   15b20:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   15b24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   15b28:	4680      	mov	r8, r0
   15b2a:	460e      	mov	r6, r1
   15b2c:	4617      	mov	r7, r2
   15b2e:	4699      	mov	r9, r3
	return port->data;
   15b30:	68c4      	ldr	r4, [r0, #12]
	return port->config;
   15b32:	f001 051f 	and.w	r5, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   15b36:	f040 80ab 	bne.w	15c90 <gpio_nrfx_pin_interrupt_configure+0x170>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   15b3a:	6843      	ldr	r3, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15b3c:	a801      	add	r0, sp, #4
   15b3e:	7a1b      	ldrb	r3, [r3, #8]
   15b40:	ea45 1343 	orr.w	r3, r5, r3, lsl #5
   15b44:	9301      	str	r3, [sp, #4]
   15b46:	f7ff ff97 	bl	15a78 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   15b4a:	9b01      	ldr	r3, [sp, #4]
   15b4c:	3380      	adds	r3, #128	; 0x80
   15b4e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   15b52:	07d8      	lsls	r0, r3, #31
   15b54:	f100 80bb 	bmi.w	15cce <gpio_nrfx_pin_interrupt_configure+0x1ae>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15b58:	2101      	movs	r1, #1
   15b5a:	68e3      	ldr	r3, [r4, #12]
   15b5c:	40b1      	lsls	r1, r6
   15b5e:	4319      	orrs	r1, r3
   15b60:	60e1      	str	r1, [r4, #12]
   15b62:	2101      	movs	r1, #1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15b64:	2000      	movs	r0, #0
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   15b66:	6963      	ldr	r3, [r4, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15b68:	40b1      	lsls	r1, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   15b6a:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
   15b6e:	bf0c      	ite	eq
   15b70:	430b      	orreq	r3, r1
   15b72:	438b      	bicne	r3, r1
   15b74:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   15b76:	69a3      	ldr	r3, [r4, #24]
   15b78:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   15b7c:	bf0c      	ite	eq
   15b7e:	430b      	orreq	r3, r1
   15b80:	438b      	bicne	r3, r1
   15b82:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   15b84:	6923      	ldr	r3, [r4, #16]
   15b86:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   15b8a:	bf0c      	ite	eq
   15b8c:	4319      	orreq	r1, r3
   15b8e:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15b92:	f8d8 3004 	ldr.w	r3, [r8, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   15b96:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15b98:	7a1b      	ldrb	r3, [r3, #8]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   15b9a:	4a4e      	ldr	r2, [pc, #312]	; (15cd4 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
   15b9c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
   15ba0:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	return port->data;
   15ba4:	f8d8 700c 	ldr.w	r7, [r8, #12]
   15ba8:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15baa:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   15bae:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   15bb2:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   15bb6:	428d      	cmp	r5, r1
   15bb8:	d175      	bne.n	15ca6 <gpio_nrfx_pin_interrupt_configure+0x186>
		    && (intenset & BIT(i))) {
   15bba:	fa23 f100 	lsr.w	r1, r3, r0
   15bbe:	07c9      	lsls	r1, r1, #31
   15bc0:	d571      	bpl.n	15ca6 <gpio_nrfx_pin_interrupt_configure+0x186>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   15bc2:	0083      	lsls	r3, r0, #2
   15bc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15bc8:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   15bcc:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   15bd0:	f021 0101 	bic.w	r1, r1, #1
   15bd4:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   15bd8:	2301      	movs	r3, #1
   15bda:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   15bdc:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   15be0:	b2c0      	uxtb	r0, r0
   15be2:	f001 f9bf 	bl	16f64 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   15be6:	4628      	mov	r0, r5
   15be8:	2100      	movs	r1, #0
   15bea:	f007 fbff 	bl	1d3ec <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   15bee:	68f8      	ldr	r0, [r7, #12]
   15bf0:	40f0      	lsrs	r0, r6
   15bf2:	f010 0001 	ands.w	r0, r0, #1
   15bf6:	d048      	beq.n	15c8a <gpio_nrfx_pin_interrupt_configure+0x16a>
		if (data->trig_edge & BIT(pin)) {
   15bf8:	6978      	ldr	r0, [r7, #20]
   15bfa:	40f0      	lsrs	r0, r6
   15bfc:	f010 0401 	ands.w	r4, r0, #1
   15c00:	d059      	beq.n	15cb6 <gpio_nrfx_pin_interrupt_configure+0x196>
			if (data->double_edge & BIT(pin)) {
   15c02:	69bb      	ldr	r3, [r7, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   15c04:	a801      	add	r0, sp, #4
			if (data->double_edge & BIT(pin)) {
   15c06:	40f3      	lsrs	r3, r6
   15c08:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   15c0a:	bf57      	itett	pl
   15c0c:	6939      	ldrpl	r1, [r7, #16]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   15c0e:	2603      	movmi	r6, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   15c10:	fa21 f606 	lsrpl.w	r6, r1, r6
   15c14:	f006 0601 	andpl.w	r6, r6, #1
   15c18:	bf5c      	itt	pl
   15c1a:	f1c6 0602 	rsbpl	r6, r6, #2
   15c1e:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   15c20:	f001 f9c0 	bl	16fa4 <nrfx_gpiote_channel_alloc>
   15c24:	4b2c      	ldr	r3, [pc, #176]	; (15cd8 <gpio_nrfx_pin_interrupt_configure+0x1b8>)
   15c26:	4298      	cmp	r0, r3
   15c28:	d142      	bne.n	15cb0 <gpio_nrfx_pin_interrupt_configure+0x190>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15c2a:	2000      	movs	r0, #0
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   15c2c:	f89d 1004 	ldrb.w	r1, [sp, #4]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15c30:	022d      	lsls	r5, r5, #8
   15c32:	008b      	lsls	r3, r1, #2
   15c34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15c38:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   15c3c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15c40:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   15c44:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
   15c48:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   15c4c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15c50:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   15c54:	4315      	orrs	r5, r2
   15c56:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   15c5a:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   15c5e:	4b1f      	ldr	r3, [pc, #124]	; (15cdc <gpio_nrfx_pin_interrupt_configure+0x1bc>)
   15c60:	008a      	lsls	r2, r1, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15c62:	5098      	str	r0, [r3, r2]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
   15c64:	f89d 1004 	ldrb.w	r1, [sp, #4]
   15c68:	589b      	ldr	r3, [r3, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   15c6a:	008b      	lsls	r3, r1, #2
   15c6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15c70:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   15c74:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   15c78:	f042 0201 	orr.w	r2, r2, #1
   15c7c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   15c80:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   15c82:	4a14      	ldr	r2, [pc, #80]	; (15cd4 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
   15c84:	408b      	lsls	r3, r1
   15c86:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   15c8a:	b003      	add	sp, #12
   15c8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15c90:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   15c94:	f47f af60 	bne.w	15b58 <gpio_nrfx_pin_interrupt_configure+0x38>
   15c98:	2101      	movs	r1, #1
   15c9a:	fa01 f306 	lsl.w	r3, r1, r6
   15c9e:	68e1      	ldr	r1, [r4, #12]
   15ca0:	ea21 0103 	bic.w	r1, r1, r3
   15ca4:	e75c      	b.n	15b60 <gpio_nrfx_pin_interrupt_configure+0x40>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15ca6:	3001      	adds	r0, #1
   15ca8:	2808      	cmp	r0, #8
   15caa:	f47f af7e 	bne.w	15baa <gpio_nrfx_pin_interrupt_configure+0x8a>
   15cae:	e79a      	b.n	15be6 <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
   15cb0:	f06f 0012 	mvn.w	r0, #18
   15cb4:	e7e9      	b.n	15c8a <gpio_nrfx_pin_interrupt_configure+0x16a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15cb6:	6939      	ldr	r1, [r7, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15cb8:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15cba:	40f1      	lsrs	r1, r6
   15cbc:	f001 0101 	and.w	r1, r1, #1
   15cc0:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15cc4:	b2c9      	uxtb	r1, r1
   15cc6:	f007 fb91 	bl	1d3ec <nrf_gpio_cfg_sense_set>
	int res = 0;
   15cca:	4620      	mov	r0, r4
   15ccc:	e7dd      	b.n	15c8a <gpio_nrfx_pin_interrupt_configure+0x16a>
		return -ENOTSUP;
   15cce:	f06f 0022 	mvn.w	r0, #34	; 0x22
   15cd2:	e7da      	b.n	15c8a <gpio_nrfx_pin_interrupt_configure+0x16a>
   15cd4:	4002f000 	.word	0x4002f000
   15cd8:	0bad0000 	.word	0x0bad0000
   15cdc:	4002f100 	.word	0x4002f100

00015ce0 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15ce0:	4b2e      	ldr	r3, [pc, #184]	; (15d9c <gpio_nrfx_config+0xbc>)
{
   15ce2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15ce4:	4c2e      	ldr	r4, [pc, #184]	; (15da0 <gpio_nrfx_config+0xc0>)
   15ce6:	4013      	ands	r3, r2
   15ce8:	42a3      	cmp	r3, r4
	return port->config;
   15cea:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15cec:	d044      	beq.n	15d78 <gpio_nrfx_config+0x98>
   15cee:	d80e      	bhi.n	15d0e <gpio_nrfx_config+0x2e>
   15cf0:	2b06      	cmp	r3, #6
   15cf2:	d043      	beq.n	15d7c <gpio_nrfx_config+0x9c>
   15cf4:	d806      	bhi.n	15d04 <gpio_nrfx_config+0x24>
   15cf6:	2b00      	cmp	r3, #0
   15cf8:	d040      	beq.n	15d7c <gpio_nrfx_config+0x9c>
   15cfa:	2b02      	cmp	r3, #2
   15cfc:	d040      	beq.n	15d80 <gpio_nrfx_config+0xa0>
   15cfe:	f06f 0015 	mvn.w	r0, #21
   15d02:	e037      	b.n	15d74 <gpio_nrfx_config+0x94>
   15d04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   15d08:	d1f9      	bne.n	15cfe <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
   15d0a:	2401      	movs	r4, #1
   15d0c:	e009      	b.n	15d22 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15d0e:	4c25      	ldr	r4, [pc, #148]	; (15da4 <gpio_nrfx_config+0xc4>)
   15d10:	42a3      	cmp	r3, r4
   15d12:	d037      	beq.n	15d84 <gpio_nrfx_config+0xa4>
   15d14:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   15d18:	d036      	beq.n	15d88 <gpio_nrfx_config+0xa8>
   15d1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   15d1e:	d1ee      	bne.n	15cfe <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
   15d20:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   15d22:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   15d24:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_PULLUP;
   15d28:	bf4c      	ite	mi
   15d2a:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
   15d2c:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   15d30:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   15d34:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   15d36:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   15d3a:	d507      	bpl.n	15d4c <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   15d3c:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   15d3e:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   15d42:	d523      	bpl.n	15d8c <gpio_nrfx_config+0xac>
			nrf_gpio_port_out_set(reg, BIT(pin));
   15d44:	2301      	movs	r3, #1
   15d46:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   15d48:	f8cc 3008 	str.w	r3, [ip, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   15d4c:	7a03      	ldrb	r3, [r0, #8]
   15d4e:	f001 011f 	and.w	r1, r1, #31
   15d52:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15d56:	a801      	add	r0, sp, #4
   15d58:	9101      	str	r1, [sp, #4]
   15d5a:	f7ff fe8d 	bl	15a78 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15d5e:	9a01      	ldr	r2, [sp, #4]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   15d60:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
   15d64:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   15d68:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15d6c:	3280      	adds	r2, #128	; 0x80
   15d6e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   15d72:	2000      	movs	r0, #0
}
   15d74:	b003      	add	sp, #12
   15d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   15d78:	2407      	movs	r4, #7
   15d7a:	e7d2      	b.n	15d22 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15d7c:	461c      	mov	r4, r3
   15d7e:	e7d0      	b.n	15d22 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   15d80:	2404      	movs	r4, #4
   15d82:	e7ce      	b.n	15d22 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   15d84:	2405      	movs	r4, #5
   15d86:	e7cc      	b.n	15d22 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
   15d88:	2403      	movs	r4, #3
   15d8a:	e7ca      	b.n	15d22 <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   15d8c:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   15d8e:	bf42      	ittt	mi
   15d90:	2301      	movmi	r3, #1
   15d92:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
   15d94:	f8cc 300c 	strmi.w	r3, [ip, #12]
}
   15d98:	e7d8      	b.n	15d4c <gpio_nrfx_config+0x6c>
   15d9a:	bf00      	nop
   15d9c:	00f00006 	.word	0x00f00006
   15da0:	00100006 	.word	0x00100006
   15da4:	00400002 	.word	0x00400002

00015da8 <gpio_fire_callbacks.isra.0>:
 *
 * @param list A pointer on the gpio callback list
 * @param port A pointer on the gpio driver instance
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
   15da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15dac:	460f      	mov	r7, r1
   15dae:	4616      	mov	r6, r2
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15db0:	4604      	mov	r4, r0
   15db2:	b1e0      	cbz	r0, 15dee <gpio_fire_callbacks.isra.0+0x46>
	return node->next;
   15db4:	6805      	ldr	r5, [r0, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
   15db6:	f8df 803c 	ldr.w	r8, [pc, #60]	; 15df4 <gpio_fire_callbacks.isra.0+0x4c>
   15dba:	f8df 903c 	ldr.w	r9, [pc, #60]	; 15df8 <gpio_fire_callbacks.isra.0+0x50>
		if (cb->pin_mask & pins) {
   15dbe:	68a3      	ldr	r3, [r4, #8]
   15dc0:	421e      	tst	r6, r3
   15dc2:	d010      	beq.n	15de6 <gpio_fire_callbacks.isra.0+0x3e>
			__ASSERT(cb->handler, "No callback handler!");
   15dc4:	6863      	ldr	r3, [r4, #4]
   15dc6:	b943      	cbnz	r3, 15dda <gpio_fire_callbacks.isra.0+0x32>
   15dc8:	4641      	mov	r1, r8
   15dca:	4648      	mov	r0, r9
   15dcc:	2245      	movs	r2, #69	; 0x45
   15dce:	f004 fd4f 	bl	1a870 <printk>
   15dd2:	2145      	movs	r1, #69	; 0x45
   15dd4:	4640      	mov	r0, r8
   15dd6:	f004 fff1 	bl	1adbc <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   15dda:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   15dde:	4621      	mov	r1, r4
   15de0:	4638      	mov	r0, r7
   15de2:	4032      	ands	r2, r6
   15de4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15de6:	b115      	cbz	r5, 15dee <gpio_fire_callbacks.isra.0+0x46>
   15de8:	462c      	mov	r4, r5
   15dea:	682d      	ldr	r5, [r5, #0]
   15dec:	e7e7      	b.n	15dbe <gpio_fire_callbacks.isra.0+0x16>
		}
	}
}
   15dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15df2:	bf00      	nop
   15df4:	00022512 	.word	0x00022512
   15df8:	0001fdfa 	.word	0x0001fdfa

00015dfc <gpiote_event_handler>:
{
   15dfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   15dfe:	2600      	movs	r6, #0
   15e00:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15e04:	4d28      	ldr	r5, [pc, #160]	; (15ea8 <gpiote_event_handler+0xac>)
   15e06:	f8d5 417c 	ldr.w	r4, [r5, #380]	; 0x17c
	if (port_event) {
   15e0a:	b15c      	cbz	r4, 15e24 <gpiote_event_handler+0x28>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)));
   15e0c:	4827      	ldr	r0, [pc, #156]	; (15eac <gpiote_event_handler+0xb0>)
   15e0e:	f007 fb26 	bl	1d45e <check_level_trigger_pins>
		fired_triggers[0] =
   15e12:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)));
   15e14:	4826      	ldr	r0, [pc, #152]	; (15eb0 <gpiote_event_handler+0xb4>)
   15e16:	f007 fb22 	bl	1d45e <check_level_trigger_pins>
		fired_triggers[1] =
   15e1a:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15e1c:	f8c5 617c 	str.w	r6, [r5, #380]	; 0x17c
   15e20:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
{
   15e24:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   15e26:	2601      	movs	r6, #1
   15e28:	4694      	mov	ip, r2
{
   15e2a:	4922      	ldr	r1, [pc, #136]	; (15eb4 <gpiote_event_handler+0xb8>)
    return p_reg->INTENSET & mask;
   15e2c:	4d1e      	ldr	r5, [pc, #120]	; (15ea8 <gpiote_event_handler+0xac>)
   15e2e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   15e32:	fa06 f002 	lsl.w	r0, r6, r2
   15e36:	4218      	tst	r0, r3
   15e38:	d016      	beq.n	15e68 <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15e3a:	680b      	ldr	r3, [r1, #0]
   15e3c:	b1a3      	cbz	r3, 15e68 <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15e3e:	f502 73a2 	add.w	r3, r2, #324	; 0x144
   15e42:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   15e46:	af02      	add	r7, sp, #8
   15e48:	f3c3 3040 	ubfx	r0, r3, #13, #1
   15e4c:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   15e50:	f850 7c08 	ldr.w	r7, [r0, #-8]
   15e54:	f3c3 2304 	ubfx	r3, r3, #8, #5
   15e58:	fa06 f303 	lsl.w	r3, r6, r3
   15e5c:	433b      	orrs	r3, r7
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15e5e:	f8c1 c000 	str.w	ip, [r1]
   15e62:	f840 3c08 	str.w	r3, [r0, #-8]
   15e66:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15e68:	3201      	adds	r2, #1
   15e6a:	2a08      	cmp	r2, #8
   15e6c:	f101 0104 	add.w	r1, r1, #4
   15e70:	d1dd      	bne.n	15e2e <gpiote_event_handler+0x32>
	if (fired_triggers[0]) {
   15e72:	9a00      	ldr	r2, [sp, #0]
   15e74:	b122      	cbz	r2, 15e80 <gpiote_event_handler+0x84>
	gpio_fire_callbacks(list, port, pins);
   15e76:	4b10      	ldr	r3, [pc, #64]	; (15eb8 <gpiote_event_handler+0xbc>)
   15e78:	490c      	ldr	r1, [pc, #48]	; (15eac <gpiote_event_handler+0xb0>)
   15e7a:	6858      	ldr	r0, [r3, #4]
   15e7c:	f7ff ff94 	bl	15da8 <gpio_fire_callbacks.isra.0>
	if (fired_triggers[1]) {
   15e80:	9a01      	ldr	r2, [sp, #4]
   15e82:	b122      	cbz	r2, 15e8e <gpiote_event_handler+0x92>
	gpio_fire_callbacks(list, port, pins);
   15e84:	4b0d      	ldr	r3, [pc, #52]	; (15ebc <gpiote_event_handler+0xc0>)
   15e86:	490a      	ldr	r1, [pc, #40]	; (15eb0 <gpiote_event_handler+0xb4>)
   15e88:	6858      	ldr	r0, [r3, #4]
   15e8a:	f7ff ff8d 	bl	15da8 <gpio_fire_callbacks.isra.0>
	if (port_event) {
   15e8e:	b144      	cbz	r4, 15ea2 <gpiote_event_handler+0xa6>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   15e90:	4806      	ldr	r0, [pc, #24]	; (15eac <gpiote_event_handler+0xb0>)
   15e92:	f007 fabe 	bl	1d412 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   15e96:	4806      	ldr	r0, [pc, #24]	; (15eb0 <gpiote_event_handler+0xb4>)
}
   15e98:	b003      	add	sp, #12
   15e9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   15e9e:	f007 bab8 	b.w	1d412 <cfg_level_pins>
}
   15ea2:	b003      	add	sp, #12
   15ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15ea6:	bf00      	nop
   15ea8:	4002f000 	.word	0x4002f000
   15eac:	200085bc 	.word	0x200085bc
   15eb0:	200085cc 	.word	0x200085cc
   15eb4:	4002f100 	.word	0x4002f100
   15eb8:	2000af4c 	.word	0x2000af4c
   15ebc:	2000af68 	.word	0x2000af68

00015ec0 <vipm_nrf_1_register_callback>:
		    &vipm_nrf_##_idx##_driver_api)

#define VIPM_DEVICE(_idx, _)						\
	IF_ENABLED(CONFIG_IPM_MSG_CH_##_idx##_ENABLE, (VIPM_DEVICE_1(_idx);))

UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   15ec0:	4b02      	ldr	r3, [pc, #8]	; (15ecc <vipm_nrf_1_register_callback+0xc>)
   15ec2:	6059      	str	r1, [r3, #4]
   15ec4:	645a      	str	r2, [r3, #68]	; 0x44
   15ec6:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
   15eca:	4770      	bx	lr
   15ecc:	2000af8c 	.word	0x2000af8c

00015ed0 <vipm_nrf_0_set_enabled>:
   15ed0:	b508      	push	{r3, lr}
   15ed2:	2145      	movs	r1, #69	; 0x45
   15ed4:	4802      	ldr	r0, [pc, #8]	; (15ee0 <vipm_nrf_0_set_enabled+0x10>)
   15ed6:	f004 fccb 	bl	1a870 <printk>
   15eda:	f06f 0015 	mvn.w	r0, #21
   15ede:	bd08      	pop	{r3, pc}
   15ee0:	00022580 	.word	0x00022580

00015ee4 <vipm_nrf_0_register_callback>:
   15ee4:	2157      	movs	r1, #87	; 0x57
   15ee6:	4801      	ldr	r0, [pc, #4]	; (15eec <vipm_nrf_0_register_callback+0x8>)
   15ee8:	f004 bcc2 	b.w	1a870 <printk>
   15eec:	000225a1 	.word	0x000225a1

00015ef0 <vipm_nrf_1_send>:
   15ef0:	b508      	push	{r3, lr}
   15ef2:	2145      	movs	r1, #69	; 0x45
   15ef4:	4802      	ldr	r0, [pc, #8]	; (15f00 <vipm_nrf_1_send+0x10>)
   15ef6:	f004 fcbb 	bl	1a870 <printk>
   15efa:	f06f 0015 	mvn.w	r0, #21
   15efe:	bd08      	pop	{r3, pc}
   15f00:	000225d8 	.word	0x000225d8

00015f04 <vipm_nrf_init>:
{
   15f04:	b538      	push	{r3, r4, r5, lr}
	if (!nrfx_vipm_data.ipm_init) {
   15f06:	4d0b      	ldr	r5, [pc, #44]	; (15f34 <vipm_nrf_init+0x30>)
   15f08:	f895 40c0 	ldrb.w	r4, [r5, #192]	; 0xc0
   15f0c:	b97c      	cbnz	r4, 15f2e <vipm_nrf_init+0x2a>
{
	/* Init IPC */
#if IS_ENABLED(CONFIG_IPM_NRF_SINGLE_INSTANCE)
	nrfx_ipc_init(0, nrfx_ipc_handler, (void *)&nrfx_ipm_data);
#else
	nrfx_ipc_init(0, vipm_dispatcher, (void *)&nrfx_ipm_data);
   15f0e:	4a0a      	ldr	r2, [pc, #40]	; (15f38 <vipm_nrf_init+0x34>)
   15f10:	490a      	ldr	r1, [pc, #40]	; (15f3c <vipm_nrf_init+0x38>)
   15f12:	4620      	mov	r0, r4
   15f14:	f001 f87e 	bl	17014 <nrfx_ipc_init>
#endif
	IRQ_CONNECT(DT_INST_IRQN(0),
   15f18:	4622      	mov	r2, r4
   15f1a:	2101      	movs	r1, #1
   15f1c:	202a      	movs	r0, #42	; 0x2a
   15f1e:	f7f7 fd77 	bl	da10 <z_arm_irq_priority_set>
		    DT_INST_IRQ(0, priority),
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	/* Set up signals and channels */
	nrfx_ipc_config_load(&ipc_cfg);
   15f22:	4807      	ldr	r0, [pc, #28]	; (15f40 <vipm_nrf_init+0x3c>)
   15f24:	f001 f89c 	bl	17060 <nrfx_ipc_config_load>
		nrfx_vipm_data.ipm_init = true;
   15f28:	2301      	movs	r3, #1
   15f2a:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
}
   15f2e:	2000      	movs	r0, #0
   15f30:	bd38      	pop	{r3, r4, r5, pc}
   15f32:	bf00      	nop
   15f34:	2000af8c 	.word	0x2000af8c
   15f38:	2000af84 	.word	0x2000af84
   15f3c:	00015f45 	.word	0x00015f45
   15f40:	0001ef74 	.word	0x0001ef74

00015f44 <vipm_dispatcher>:
{
   15f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15f48:	4605      	mov	r5, r0
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
   15f4a:	4f17      	ldr	r7, [pc, #92]	; (15fa8 <vipm_dispatcher+0x64>)
   15f4c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 15fac <vipm_dispatcher+0x68>
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   15f50:	4e17      	ldr	r6, [pc, #92]	; (15fb0 <vipm_dispatcher+0x6c>)
	while (event_mask) {
   15f52:	b90d      	cbnz	r5, 15f58 <vipm_dispatcher+0x14>
}
   15f54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   15f58:	fa95 f4a5 	rbit	r4, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
   15f5c:	b30c      	cbz	r4, 15fa2 <vipm_dispatcher+0x5e>
  {
    return 32U;
  }
  return __builtin_clz(value);
   15f5e:	fab4 f384 	clz	r3, r4
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
   15f62:	2b0f      	cmp	r3, #15
   15f64:	461c      	mov	r4, r3
   15f66:	dd08      	ble.n	15f7a <vipm_dispatcher+0x36>
   15f68:	4639      	mov	r1, r7
   15f6a:	4640      	mov	r0, r8
   15f6c:	2283      	movs	r2, #131	; 0x83
   15f6e:	f004 fc7f 	bl	1a870 <printk>
   15f72:	2183      	movs	r1, #131	; 0x83
   15f74:	4638      	mov	r0, r7
   15f76:	f004 ff21 	bl	1adbc <assert_post_action>
		event_mask &= ~BIT(event_idx);
   15f7a:	2301      	movs	r3, #1
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   15f7c:	f856 9024 	ldr.w	r9, [r6, r4, lsl #2]
		event_mask &= ~BIT(event_idx);
   15f80:	40a3      	lsls	r3, r4
   15f82:	ea25 0503 	bic.w	r5, r5, r3
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   15f86:	f1b9 0f00 	cmp.w	r9, #0
   15f8a:	d0e2      	beq.n	15f52 <vipm_dispatcher+0xe>
			nrfx_vipm_data.callback[event_idx]
   15f8c:	2300      	movs	r3, #0
   15f8e:	f104 0110 	add.w	r1, r4, #16
   15f92:	3420      	adds	r4, #32
   15f94:	461a      	mov	r2, r3
   15f96:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   15f9a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   15f9e:	47c8      	blx	r9
   15fa0:	e7d7      	b.n	15f52 <vipm_dispatcher+0xe>
    return 32U;
   15fa2:	2420      	movs	r4, #32
   15fa4:	e7e0      	b.n	15f68 <vipm_dispatcher+0x24>
   15fa6:	bf00      	nop
   15fa8:	000225f9 	.word	0x000225f9
   15fac:	0001fdfa 	.word	0x0001fdfa
   15fb0:	2000af8c 	.word	0x2000af8c

00015fb4 <vipm_nrf_0_send>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   15fb4:	2a10      	cmp	r2, #16
   15fb6:	b508      	push	{r3, lr}
   15fb8:	d810      	bhi.n	15fdc <vipm_nrf_0_send+0x28>
   15fba:	b11a      	cbz	r2, 15fc4 <vipm_nrf_0_send+0x10>
   15fbc:	2157      	movs	r1, #87	; 0x57
   15fbe:	4809      	ldr	r0, [pc, #36]	; (15fe4 <vipm_nrf_0_send+0x30>)
   15fc0:	f004 fc56 	bl	1a870 <printk>
   15fc4:	9b02      	ldr	r3, [sp, #8]
   15fc6:	2b00      	cmp	r3, #0
   15fc8:	dd03      	ble.n	15fd2 <vipm_nrf_0_send+0x1e>
   15fca:	2157      	movs	r1, #87	; 0x57
   15fcc:	4806      	ldr	r0, [pc, #24]	; (15fe8 <vipm_nrf_0_send+0x34>)
   15fce:	f004 fc4f 	bl	1a870 <printk>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ipc_task_trigger(NRF_IPC_Type * p_reg, nrf_ipc_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15fd2:	2201      	movs	r2, #1
   15fd4:	2000      	movs	r0, #0
   15fd6:	4b05      	ldr	r3, [pc, #20]	; (15fec <vipm_nrf_0_send+0x38>)
   15fd8:	601a      	str	r2, [r3, #0]
   15fda:	bd08      	pop	{r3, pc}
   15fdc:	f06f 0015 	mvn.w	r0, #21
   15fe0:	e7fb      	b.n	15fda <vipm_nrf_0_send+0x26>
   15fe2:	bf00      	nop
   15fe4:	00022627 	.word	0x00022627
   15fe8:	00022660 	.word	0x00022660
   15fec:	4002a000 	.word	0x4002a000

00015ff0 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15ff0:	6802      	ldr	r2, [r0, #0]
{
   15ff2:	b510      	push	{r4, lr}
    switch (port)
   15ff4:	0953      	lsrs	r3, r2, #5
{
   15ff6:	4604      	mov	r4, r0
    switch (port)
   15ff8:	d029      	beq.n	1604e <nrf_gpio_pin_port_decode+0x5e>
    uint32_t mask = 0;
   15ffa:	2b01      	cmp	r3, #1
   15ffc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16000:	bf18      	it	ne
   16002:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   16004:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
   16008:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1600a:	07db      	lsls	r3, r3, #31
   1600c:	d40a      	bmi.n	16024 <nrf_gpio_pin_port_decode+0x34>
   1600e:	4912      	ldr	r1, [pc, #72]	; (16058 <nrf_gpio_pin_port_decode+0x68>)
   16010:	4812      	ldr	r0, [pc, #72]	; (1605c <nrf_gpio_pin_port_decode+0x6c>)
   16012:	f240 221a 	movw	r2, #538	; 0x21a
   16016:	f004 fc2b 	bl	1a870 <printk>
   1601a:	f240 211a 	movw	r1, #538	; 0x21a
   1601e:	480e      	ldr	r0, [pc, #56]	; (16058 <nrf_gpio_pin_port_decode+0x68>)
   16020:	f004 fecc 	bl	1adbc <assert_post_action>
    uint32_t pin_number = *p_pin;
   16024:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   16026:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1602a:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1602c:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1602e:	d00c      	beq.n	1604a <nrf_gpio_pin_port_decode+0x5a>
   16030:	2b01      	cmp	r3, #1
   16032:	d00f      	beq.n	16054 <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
   16034:	4908      	ldr	r1, [pc, #32]	; (16058 <nrf_gpio_pin_port_decode+0x68>)
   16036:	4809      	ldr	r0, [pc, #36]	; (1605c <nrf_gpio_pin_port_decode+0x6c>)
   16038:	f240 221f 	movw	r2, #543	; 0x21f
   1603c:	f004 fc18 	bl	1a870 <printk>
   16040:	f240 211f 	movw	r1, #543	; 0x21f
   16044:	4804      	ldr	r0, [pc, #16]	; (16058 <nrf_gpio_pin_port_decode+0x68>)
   16046:	f004 feb9 	bl	1adbc <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1604a:	4805      	ldr	r0, [pc, #20]	; (16060 <nrf_gpio_pin_port_decode+0x70>)
}
   1604c:	bd10      	pop	{r4, pc}
    switch (port)
   1604e:	f04f 33ff 	mov.w	r3, #4294967295
   16052:	e7d7      	b.n	16004 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   16054:	4803      	ldr	r0, [pc, #12]	; (16064 <nrf_gpio_pin_port_decode+0x74>)
   16056:	e7f9      	b.n	1604c <nrf_gpio_pin_port_decode+0x5c>
   16058:	0002253f 	.word	0x0002253f
   1605c:	0001fdfa 	.word	0x0001fdfa
   16060:	40842500 	.word	0x40842500
   16064:	40842800 	.word	0x40842800

00016068 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   16068:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1606a:	794b      	ldrb	r3, [r1, #5]
   1606c:	2b01      	cmp	r3, #1
   1606e:	d02b      	beq.n	160c8 <uarte_nrfx_configure+0x60>
   16070:	2b03      	cmp	r3, #3
   16072:	d126      	bne.n	160c2 <uarte_nrfx_configure+0x5a>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   16074:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   16076:	798b      	ldrb	r3, [r1, #6]
   16078:	2b03      	cmp	r3, #3
   1607a:	d122      	bne.n	160c2 <uarte_nrfx_configure+0x5a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1607c:	79cd      	ldrb	r5, [r1, #7]
   1607e:	b125      	cbz	r5, 1608a <uarte_nrfx_configure+0x22>
   16080:	2d01      	cmp	r5, #1
   16082:	d11e      	bne.n	160c2 <uarte_nrfx_configure+0x5a>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   16084:	6843      	ldr	r3, [r0, #4]
   16086:	791b      	ldrb	r3, [r3, #4]
   16088:	b1db      	cbz	r3, 160c2 <uarte_nrfx_configure+0x5a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1608a:	790a      	ldrb	r2, [r1, #4]
   1608c:	2a01      	cmp	r2, #1
   1608e:	d01d      	beq.n	160cc <uarte_nrfx_configure+0x64>
   16090:	2a02      	cmp	r2, #2
   16092:	d01f      	beq.n	160d4 <uarte_nrfx_configure+0x6c>
   16094:	b9aa      	cbnz	r2, 160c2 <uarte_nrfx_configure+0x5a>
   16096:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   16098:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1609a:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
   1609c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   160a0:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
   160a2:	d06e      	beq.n	16182 <uarte_nrfx_configure+0x11a>
   160a4:	d833      	bhi.n	1610e <uarte_nrfx_configure+0xa6>
   160a6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   160aa:	d06d      	beq.n	16188 <uarte_nrfx_configure+0x120>
   160ac:	d81c      	bhi.n	160e8 <uarte_nrfx_configure+0x80>
   160ae:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   160b2:	d06b      	beq.n	1618c <uarte_nrfx_configure+0x124>
   160b4:	d810      	bhi.n	160d8 <uarte_nrfx_configure+0x70>
   160b6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   160ba:	d06a      	beq.n	16192 <uarte_nrfx_configure+0x12a>
   160bc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   160c0:	d06a      	beq.n	16198 <uarte_nrfx_configure+0x130>
   160c2:	f06f 0022 	mvn.w	r0, #34	; 0x22
   160c6:	e05b      	b.n	16180 <uarte_nrfx_configure+0x118>
	switch (cfg->stop_bits) {
   160c8:	2700      	movs	r7, #0
   160ca:	e7d4      	b.n	16076 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   160cc:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   160d0:	220e      	movs	r2, #14
   160d2:	e7e1      	b.n	16098 <uarte_nrfx_configure+0x30>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   160d4:	2400      	movs	r4, #0
   160d6:	e7fb      	b.n	160d0 <uarte_nrfx_configure+0x68>
	switch (baudrate) {
   160d8:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   160dc:	d05f      	beq.n	1619e <uarte_nrfx_configure+0x136>
   160de:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   160e2:	d1ee      	bne.n	160c2 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   160e4:	4b38      	ldr	r3, [pc, #224]	; (161c8 <uarte_nrfx_configure+0x160>)
   160e6:	e03e      	b.n	16166 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   160e8:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   160ec:	d05a      	beq.n	161a4 <uarte_nrfx_configure+0x13c>
   160ee:	d807      	bhi.n	16100 <uarte_nrfx_configure+0x98>
   160f0:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   160f4:	d058      	beq.n	161a8 <uarte_nrfx_configure+0x140>
   160f6:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   160fa:	d1e2      	bne.n	160c2 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   160fc:	4b33      	ldr	r3, [pc, #204]	; (161cc <uarte_nrfx_configure+0x164>)
   160fe:	e032      	b.n	16166 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   16100:	f647 2c12 	movw	ip, #31250	; 0x7a12
   16104:	4563      	cmp	r3, ip
   16106:	d1dc      	bne.n	160c2 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   16108:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1610c:	e02b      	b.n	16166 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   1610e:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   16112:	d04b      	beq.n	161ac <uarte_nrfx_configure+0x144>
   16114:	d813      	bhi.n	1613e <uarte_nrfx_configure+0xd6>
   16116:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1611a:	d04a      	beq.n	161b2 <uarte_nrfx_configure+0x14a>
   1611c:	d809      	bhi.n	16132 <uarte_nrfx_configure+0xca>
   1611e:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
   16122:	4563      	cmp	r3, ip
   16124:	d047      	beq.n	161b6 <uarte_nrfx_configure+0x14e>
   16126:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1612a:	d1ca      	bne.n	160c2 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1612c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   16130:	e019      	b.n	16166 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   16132:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   16136:	d1c4      	bne.n	160c2 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   16138:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1613c:	e013      	b.n	16166 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   1613e:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   16142:	d03b      	beq.n	161bc <uarte_nrfx_configure+0x154>
   16144:	d809      	bhi.n	1615a <uarte_nrfx_configure+0xf2>
   16146:	f8df c088 	ldr.w	ip, [pc, #136]	; 161d0 <uarte_nrfx_configure+0x168>
   1614a:	4563      	cmp	r3, ip
   1614c:	d039      	beq.n	161c2 <uarte_nrfx_configure+0x15a>
   1614e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   16152:	d1b6      	bne.n	160c2 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   16154:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   16158:	e005      	b.n	16166 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   1615a:	f8df c078 	ldr.w	ip, [pc, #120]	; 161d4 <uarte_nrfx_configure+0x16c>
   1615e:	4563      	cmp	r3, ip
   16160:	d1af      	bne.n	160c2 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   16162:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   16166:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1616a:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   1616c:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
   1616e:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
   16170:	4322      	orrs	r2, r4
   16172:	3304      	adds	r3, #4
   16174:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   16176:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
   1617a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1617e:	2000      	movs	r0, #0
}
   16180:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   16182:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   16186:	e7ee      	b.n	16166 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   16188:	4b13      	ldr	r3, [pc, #76]	; (161d8 <uarte_nrfx_configure+0x170>)
   1618a:	e7ec      	b.n	16166 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1618c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   16190:	e7e9      	b.n	16166 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = 0x00014000;
   16192:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   16196:	e7e6      	b.n	16166 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   16198:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1619c:	e7e3      	b.n	16166 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1619e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   161a2:	e7e0      	b.n	16166 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   161a4:	4b0d      	ldr	r3, [pc, #52]	; (161dc <uarte_nrfx_configure+0x174>)
   161a6:	e7de      	b.n	16166 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   161a8:	4b0d      	ldr	r3, [pc, #52]	; (161e0 <uarte_nrfx_configure+0x178>)
   161aa:	e7dc      	b.n	16166 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   161ac:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   161b0:	e7d9      	b.n	16166 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   161b2:	4b0c      	ldr	r3, [pc, #48]	; (161e4 <uarte_nrfx_configure+0x17c>)
   161b4:	e7d7      	b.n	16166 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   161b6:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   161ba:	e7d4      	b.n	16166 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   161bc:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   161c0:	e7d1      	b.n	16166 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   161c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   161c6:	e7ce      	b.n	16166 <uarte_nrfx_configure+0xfe>
   161c8:	0013b000 	.word	0x0013b000
   161cc:	004ea000 	.word	0x004ea000
   161d0:	0003d090 	.word	0x0003d090
   161d4:	000f4240 	.word	0x000f4240
   161d8:	00275000 	.word	0x00275000
   161dc:	0075c000 	.word	0x0075c000
   161e0:	003af000 	.word	0x003af000
   161e4:	013a9000 	.word	0x013a9000

000161e8 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   161e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   161ec:	4606      	mov	r6, r0
   161ee:	4688      	mov	r8, r1
	return dev->data;
   161f0:	68c7      	ldr	r7, [r0, #12]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   161f2:	f007 ff62 	bl	1e0ba <k_is_in_isr>
   161f6:	b9b8      	cbnz	r0, 16228 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
   161f8:	4b28      	ldr	r3, [pc, #160]	; (1629c <uarte_nrfx_poll_out+0xb4>)
   161fa:	781b      	ldrb	r3, [r3, #0]
   161fc:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
   16200:	6872      	ldr	r2, [r6, #4]
   16202:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
   16204:	b193      	cbz	r3, 1622c <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   16206:	f04f 0320 	mov.w	r3, #32
   1620a:	f3ef 8411 	mrs	r4, BASEPRI
   1620e:	f383 8811 	msr	BASEPRI, r3
   16212:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   16216:	6870      	ldr	r0, [r6, #4]
   16218:	f007 fa04 	bl	1d624 <is_tx_ready.isra.0>
   1621c:	bb38      	cbnz	r0, 1626e <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
   1621e:	f384 8811 	msr	BASEPRI, r4
   16222:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   16226:	e7ee      	b.n	16206 <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   16228:	2301      	movs	r3, #1
   1622a:	e7e9      	b.n	16200 <uarte_nrfx_poll_out+0x18>
   1622c:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1622e:	6870      	ldr	r0, [r6, #4]
   16230:	f007 f9f8 	bl	1d624 <is_tx_ready.isra.0>
   16234:	b970      	cbnz	r0, 16254 <uarte_nrfx_poll_out+0x6c>
   16236:	2001      	movs	r0, #1
   16238:	f007 fa94 	bl	1d764 <nrfx_busy_wait>
   1623c:	3c01      	subs	r4, #1
   1623e:	d1f6      	bne.n	1622e <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
   16240:	2100      	movs	r1, #0
   16242:	2021      	movs	r0, #33	; 0x21
   16244:	f003 f906 	bl	19454 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   16248:	e7f0      	b.n	1622c <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   1624a:	f384 8811 	msr	BASEPRI, r4
   1624e:	f3bf 8f6f 	isb	sy
}
   16252:	e7f5      	b.n	16240 <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
   16254:	f04f 0320 	mov.w	r3, #32
   16258:	f3ef 8411 	mrs	r4, BASEPRI
   1625c:	f383 8811 	msr	BASEPRI, r3
   16260:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   16264:	6870      	ldr	r0, [r6, #4]
   16266:	f007 f9dd 	bl	1d624 <is_tx_ready.isra.0>
   1626a:	2800      	cmp	r0, #0
   1626c:	d0ed      	beq.n	1624a <uarte_nrfx_poll_out+0x62>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   1626e:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16270:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   16272:	f807 8f14 	strb.w	r8, [r7, #20]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   16276:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1627a:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1627e:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   16282:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
   16286:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   1628a:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1628e:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   16290:	f384 8811 	msr	BASEPRI, r4
   16294:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   16298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1629c:	2000f9f6 	.word	0x2000f9f6

000162a0 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   162a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162a4:	4605      	mov	r5, r0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   162a6:	f04f 0800 	mov.w	r8, #0
   162aa:	f04f 0914 	mov.w	r9, #20
   162ae:	2200      	movs	r2, #0
   162b0:	2101      	movs	r1, #1
   162b2:	2008      	movs	r0, #8
   162b4:	f7f7 fbac 	bl	da10 <z_arm_irq_priority_set>
   162b8:	2008      	movs	r0, #8
   162ba:	f7f7 fb8b 	bl	d9d4 <arch_irq_enable>
	return config->uarte_regs;
   162be:	686b      	ldr	r3, [r5, #4]
	return dev->data;
   162c0:	68ee      	ldr	r6, [r5, #12]
	return config->uarte_regs;
   162c2:	681c      	ldr	r4, [r3, #0]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   162c4:	2701      	movs	r7, #1
   162c6:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   162ca:	a801      	add	r0, sp, #4
	data->dev = dev;
   162cc:	6035      	str	r5, [r6, #0]
        nrf_gpio_pin_set(pin_number);
   162ce:	f8cd 9004 	str.w	r9, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   162d2:	f7ff fe8d 	bl	15ff0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   162d6:	9b01      	ldr	r3, [sp, #4]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   162d8:	f04f 0a03 	mov.w	sl, #3
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   162dc:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTSET = set_mask;
   162e0:	6083      	str	r3, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   162e2:	a801      	add	r0, sp, #4
   162e4:	f8cd 9004 	str.w	r9, [sp, #4]
   162e8:	f7ff fe82 	bl	15ff0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   162ec:	f04f 0b16 	mov.w	fp, #22
   162f0:	9b01      	ldr	r3, [sp, #4]
   162f2:	3380      	adds	r3, #128	; 0x80
   162f4:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   162f8:	a801      	add	r0, sp, #4
   162fa:	f8cd b004 	str.w	fp, [sp, #4]
   162fe:	f7ff fe77 	bl	15ff0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   16302:	9b01      	ldr	r3, [sp, #4]
   16304:	3380      	adds	r3, #128	; 0x80
   16306:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   1630a:	f8c4 950c 	str.w	r9, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1630e:	f04f 0915 	mov.w	r9, #21
   16312:	f8c4 b514 	str.w	fp, [r4, #1300]	; 0x514
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16316:	a801      	add	r0, sp, #4
   16318:	f8cd 9004 	str.w	r9, [sp, #4]
   1631c:	f7ff fe68 	bl	15ff0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   16320:	9b01      	ldr	r3, [sp, #4]
   16322:	3380      	adds	r3, #128	; 0x80
   16324:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
        nrf_gpio_pin_set(pin_number);
   16328:	f04f 0813 	mov.w	r8, #19
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1632c:	a801      	add	r0, sp, #4
   1632e:	f8cd 8004 	str.w	r8, [sp, #4]
   16332:	f7ff fe5d 	bl	15ff0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   16336:	9b01      	ldr	r3, [sp, #4]
   16338:	409f      	lsls	r7, r3
    p_reg->OUTSET = set_mask;
   1633a:	6087      	str	r7, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1633c:	a801      	add	r0, sp, #4
   1633e:	f8cd 8004 	str.w	r8, [sp, #4]
   16342:	f7ff fe55 	bl	15ff0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   16346:	9b01      	ldr	r3, [sp, #4]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   16348:	68e9      	ldr	r1, [r5, #12]
   1634a:	3380      	adds	r3, #128	; 0x80
   1634c:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
   16350:	3104      	adds	r1, #4
    p_reg->PSEL.RTS = pselrts;
   16352:	f8c4 8508 	str.w	r8, [r4, #1288]	; 0x508
   16356:	4628      	mov	r0, r5
    p_reg->PSEL.CTS = pselcts;
   16358:	f8c4 9510 	str.w	r9, [r4, #1296]	; 0x510
   1635c:	f7ff fe84 	bl	16068 <uarte_nrfx_configure>
	if (err) {
   16360:	4607      	mov	r7, r0
   16362:	b980      	cbnz	r0, 16386 <uarte_0_init+0xe6>
	if (get_dev_config(dev)->ppi_endtx) {
   16364:	686b      	ldr	r3, [r5, #4]
   16366:	799b      	ldrb	r3, [r3, #6]
   16368:	2b00      	cmp	r3, #0
   1636a:	d03a      	beq.n	163e2 <uarte_0_init+0x142>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1636c:	eb06 000b 	add.w	r0, r6, fp
   16370:	f000 fddc 	bl	16f2c <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   16374:	4b2b      	ldr	r3, [pc, #172]	; (16424 <uarte_0_init+0x184>)
   16376:	4298      	cmp	r0, r3
   16378:	d009      	beq.n	1638e <uarte_0_init+0xee>
		LOG_ERR("Failed to allocate PPI Channel");
   1637a:	2145      	movs	r1, #69	; 0x45
   1637c:	482a      	ldr	r0, [pc, #168]	; (16428 <uarte_0_init+0x188>)
   1637e:	f004 fa77 	bl	1a870 <printk>
		return -EIO;
   16382:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
   16386:	4638      	mov	r0, r7
   16388:	b003      	add	sp, #12
   1638a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nrf_dppi_task_trigger(NRF_DPPIC, (nrf_dppi_task_t)task);
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
   1638e:	f514 7990 	adds.w	r9, r4, #288	; 0x120
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   16392:	f896 8016 	ldrb.w	r8, [r6, #22]
   16396:	d10a      	bne.n	163ae <uarte_0_init+0x10e>
   16398:	4924      	ldr	r1, [pc, #144]	; (1642c <uarte_0_init+0x18c>)
   1639a:	4825      	ldr	r0, [pc, #148]	; (16430 <uarte_0_init+0x190>)
   1639c:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   163a0:	f004 fa66 	bl	1a870 <printk>
   163a4:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
   163a8:	4820      	ldr	r0, [pc, #128]	; (1642c <uarte_0_init+0x18c>)
   163aa:	f004 fd07 	bl	1adbc <assert_post_action>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   163ae:	f048 4800 	orr.w	r8, r8, #2147483648	; 0x80000000
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
   163b2:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   163b6:	f8c9 8080 	str.w	r8, [r9, #128]	; 0x80
    NRFX_ASSERT(tep);
   163ba:	d10a      	bne.n	163d2 <uarte_0_init+0x132>
   163bc:	491b      	ldr	r1, [pc, #108]	; (1642c <uarte_0_init+0x18c>)
   163be:	481c      	ldr	r0, [pc, #112]	; (16430 <uarte_0_init+0x190>)
   163c0:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
   163c4:	f004 fa54 	bl	1a870 <printk>
   163c8:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   163cc:	4817      	ldr	r0, [pc, #92]	; (1642c <uarte_0_init+0x18c>)
   163ce:	f004 fcf5 	bl	1adbc <assert_post_action>
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   163d2:	2301      	movs	r3, #1
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   163d4:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
   163d8:	7db2      	ldrb	r2, [r6, #22]
   163da:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   163dc:	4a15      	ldr	r2, [pc, #84]	; (16434 <uarte_0_init+0x194>)
   163de:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   163e2:	2308      	movs	r3, #8
   163e4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   163e8:	2300      	movs	r3, #0
   163ea:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   163ee:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   163f2:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   163f6:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   163fa:	2301      	movs	r3, #1
   163fc:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16400:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
   16402:	686b      	ldr	r3, [r5, #4]
   16404:	799b      	ldrb	r3, [r3, #6]
   16406:	b91b      	cbnz	r3, 16410 <uarte_0_init+0x170>
    p_reg->INTENSET = mask;
   16408:	f44f 7380 	mov.w	r3, #256	; 0x100
   1640c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   16410:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   16412:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   16414:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   16418:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1641c:	2301      	movs	r3, #1
   1641e:	60a3      	str	r3, [r4, #8]
   16420:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   16422:	e7b0      	b.n	16386 <uarte_0_init+0xe6>
   16424:	0bad0000 	.word	0x0bad0000
   16428:	000226a3 	.word	0x000226a3
   1642c:	000226c7 	.word	0x000226c7
   16430:	0001fdfa 	.word	0x0001fdfa
   16434:	40017000 	.word	0x40017000

00016438 <z_impl_gpio_pin_interrupt_configure>:
	enum gpio_int_trig trig;
	enum gpio_int_mode mode;

	__ASSERT_NO_MSG((flags & GPIO_INT_DEBOUNCE) == 0);

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   16438:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
   1643c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
{
   16440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct gpio_driver_config *const cfg =
   16444:	e9d0 a801 	ldrd	sl, r8, [r0, #4]
{
   16448:	4605      	mov	r5, r0
   1644a:	460e      	mov	r6, r1
   1644c:	4614      	mov	r4, r2
	const struct gpio_driver_data *const data =
   1644e:	f8d0 900c 	ldr.w	r9, [r0, #12]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   16452:	d14f      	bne.n	164f4 <z_impl_gpio_pin_interrupt_configure+0xbc>
   16454:	492d      	ldr	r1, [pc, #180]	; (1650c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   16456:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   1645a:	482d      	ldr	r0, [pc, #180]	; (16510 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   1645c:	f004 fa08 	bl	1a870 <printk>
   16460:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
		 != (GPIO_INT_DISABLE | GPIO_INT_ENABLE),
		 "Cannot both enable and disable interrupts");

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   16464:	4829      	ldr	r0, [pc, #164]	; (1650c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   16466:	f004 fca9 	bl	1adbc <assert_post_action>
		 "Must either enable or disable interrupts");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   1646a:	f404 23e8 	and.w	r3, r4, #475136	; 0x74000
   1646e:	f5b3 2fc8 	cmp.w	r3, #409600	; 0x64000
   16472:	d10a      	bne.n	1648a <z_impl_gpio_pin_interrupt_configure+0x52>
   16474:	4925      	ldr	r1, [pc, #148]	; (1650c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   16476:	4826      	ldr	r0, [pc, #152]	; (16510 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   16478:	f240 12f1 	movw	r2, #497	; 0x1f1
   1647c:	f004 f9f8 	bl	1a870 <printk>
   16480:	f240 11f1 	movw	r1, #497	; 0x1f1
   16484:	4821      	ldr	r0, [pc, #132]	; (1650c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   16486:	f004 fc99 	bl	1adbc <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) !=
		  (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)),
		 "Only one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 can be "
		 "enabled for a level interrupt.");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   1648a:	f404 23c8 	and.w	r3, r4, #409600	; 0x64000
   1648e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   16492:	d10a      	bne.n	164aa <z_impl_gpio_pin_interrupt_configure+0x72>
   16494:	491d      	ldr	r1, [pc, #116]	; (1650c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   16496:	481e      	ldr	r0, [pc, #120]	; (16510 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   16498:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   1649c:	f004 f9e8 	bl	1a870 <printk>
   164a0:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   164a4:	4819      	ldr	r0, [pc, #100]	; (1650c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   164a6:	f004 fc89 	bl	1adbc <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) != 0),
		 "At least one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 has to be "
		 "enabled.");

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   164aa:	2701      	movs	r7, #1
   164ac:	f8da 3000 	ldr.w	r3, [sl]
   164b0:	40b7      	lsls	r7, r6
   164b2:	421f      	tst	r7, r3
   164b4:	d10a      	bne.n	164cc <z_impl_gpio_pin_interrupt_configure+0x94>
   164b6:	4915      	ldr	r1, [pc, #84]	; (1650c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   164b8:	4815      	ldr	r0, [pc, #84]	; (16510 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   164ba:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   164be:	f004 f9d7 	bl	1a870 <printk>
   164c2:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   164c6:	4811      	ldr	r0, [pc, #68]	; (1650c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   164c8:	f004 fc78 	bl	1adbc <assert_post_action>
		 "Unsupported pin");

	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   164cc:	0423      	lsls	r3, r4, #16
   164ce:	d505      	bpl.n	164dc <z_impl_gpio_pin_interrupt_configure+0xa4>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   164d0:	f8d9 3000 	ldr.w	r3, [r9]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   164d4:	421f      	tst	r7, r3
		/* Invert signal bits */
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   164d6:	bf18      	it	ne
   164d8:	f484 24c0 	eorne.w	r4, r4, #393216	; 0x60000
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
   164dc:	f8d8 7018 	ldr.w	r7, [r8, #24]
   164e0:	4631      	mov	r1, r6
   164e2:	4628      	mov	r0, r5
   164e4:	46bc      	mov	ip, r7
   164e6:	f404 23c0 	and.w	r3, r4, #393216	; 0x60000
   164ea:	f404 32b0 	and.w	r2, r4, #90112	; 0x16000
}
   164ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   164f2:	4760      	bx	ip
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   164f4:	2b00      	cmp	r3, #0
   164f6:	d1b8      	bne.n	1646a <z_impl_gpio_pin_interrupt_configure+0x32>
   164f8:	4904      	ldr	r1, [pc, #16]	; (1650c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   164fa:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
   164fe:	4804      	ldr	r0, [pc, #16]	; (16510 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   16500:	f004 f9b6 	bl	1a870 <printk>
   16504:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
   16508:	e7ac      	b.n	16464 <z_impl_gpio_pin_interrupt_configure+0x2c>
   1650a:	bf00      	nop
   1650c:	00022716 	.word	0x00022716
   16510:	0001fdfa 	.word	0x0001fdfa

00016514 <gpio_pin_set_raw>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set_raw(const struct device *port, gpio_pin_t pin,
				   int value)
{
   16514:	b570      	push	{r4, r5, r6, lr}
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	int ret;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16516:	2501      	movs	r5, #1
   16518:	6843      	ldr	r3, [r0, #4]
   1651a:	408d      	lsls	r5, r1
   1651c:	681b      	ldr	r3, [r3, #0]
{
   1651e:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16520:	421d      	tst	r5, r3
{
   16522:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16524:	d10a      	bne.n	1653c <gpio_pin_set_raw+0x28>
   16526:	490b      	ldr	r1, [pc, #44]	; (16554 <gpio_pin_set_raw+0x40>)
   16528:	480b      	ldr	r0, [pc, #44]	; (16558 <gpio_pin_set_raw+0x44>)
   1652a:	f44f 7270 	mov.w	r2, #960	; 0x3c0
   1652e:	f004 f99f 	bl	1a870 <printk>
   16532:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   16536:	4807      	ldr	r0, [pc, #28]	; (16554 <gpio_pin_set_raw+0x40>)
   16538:	f004 fc40 	bl	1adbc <assert_post_action>
		 "Unsupported pin");

	if (value != 0)	{
   1653c:	b136      	cbz	r6, 1654c <gpio_pin_set_raw+0x38>
	return api->port_set_bits_raw(port, pins);
   1653e:	68a3      	ldr	r3, [r4, #8]
   16540:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   16542:	4629      	mov	r1, r5
   16544:	4620      	mov	r0, r4
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
   16546:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_clear_bits_raw(port, pins);
   1654a:	4718      	bx	r3
   1654c:	68a3      	ldr	r3, [r4, #8]
   1654e:	691b      	ldr	r3, [r3, #16]
   16550:	e7f7      	b.n	16542 <gpio_pin_set_raw+0x2e>
   16552:	bf00      	nop
   16554:	00022716 	.word	0x00022716
   16558:	0001fdfa 	.word	0x0001fdfa

0001655c <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   1655c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16560:	4606      	mov	r6, r0
   16562:	460f      	mov	r7, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   16564:	2400      	movs	r4, #0

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
   16566:	f8df 8044 	ldr.w	r8, [pc, #68]	; 165ac <dk_set_leds_state.part.0+0x50>
   1656a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 165b0 <dk_set_leds_state.part.0+0x54>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   1656e:	fa26 f204 	lsr.w	r2, r6, r4
   16572:	fa27 f304 	lsr.w	r3, r7, r4
   16576:	4313      	orrs	r3, r2
   16578:	07db      	lsls	r3, r3, #31
   1657a:	d512      	bpl.n	165a2 <dk_set_leds_state.part.0+0x46>
			int err = gpio_pin_set_raw(led_devs[i],
   1657c:	43d2      	mvns	r2, r2
   1657e:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   16582:	7919      	ldrb	r1, [r3, #4]
   16584:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
   16588:	f002 0201 	and.w	r2, r2, #1
   1658c:	f7ff ffc2 	bl	16514 <gpio_pin_set_raw>
						   led_pins[i].number, val);
			if (err) {
   16590:	4605      	mov	r5, r0
   16592:	b130      	cbz	r0, 165a2 <dk_set_leds_state.part.0+0x46>
				LOG_ERR("Cannot write LED gpio");
   16594:	2145      	movs	r1, #69	; 0x45
   16596:	4807      	ldr	r0, [pc, #28]	; (165b4 <dk_set_leds_state.part.0+0x58>)
   16598:	f004 f96a 	bl	1a870 <printk>
			}
		}
	}

	return 0;
}
   1659c:	4628      	mov	r0, r5
   1659e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   165a2:	3401      	adds	r4, #1
   165a4:	2c04      	cmp	r4, #4
   165a6:	d1e2      	bne.n	1656e <dk_set_leds_state.part.0+0x12>
	return 0;
   165a8:	2500      	movs	r5, #0
   165aa:	e7f7      	b.n	1659c <dk_set_leds_state.part.0+0x40>
   165ac:	0001f094 	.word	0x0001f094
   165b0:	2000b094 	.word	0x2000b094
   165b4:	00022740 	.word	0x00022740

000165b8 <buttons_scan_fn>:
{
   165b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ret = 0;
   165bc:	2400      	movs	r4, #0
   165be:	4e6c      	ldr	r6, [pc, #432]	; (16770 <buttons_scan_fn+0x1b8>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   165c0:	4625      	mov	r5, r4
{
   165c2:	46b1      	mov	r9, r6
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   165c4:	4f6b      	ldr	r7, [pc, #428]	; (16774 <buttons_scan_fn+0x1bc>)
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   165c6:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 16778 <buttons_scan_fn+0x1c0>
   165ca:	f04f 0801 	mov.w	r8, #1
   165ce:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
   165d2:	791b      	ldrb	r3, [r3, #4]
   165d4:	f859 bb04 	ldr.w	fp, [r9], #4
   165d8:	fa08 f803 	lsl.w	r8, r8, r3
   165dc:	f8db 3004 	ldr.w	r3, [fp, #4]
   165e0:	681b      	ldr	r3, [r3, #0]
   165e2:	ea18 0f03 	tst.w	r8, r3
   165e6:	d10a      	bne.n	165fe <buttons_scan_fn+0x46>
   165e8:	4651      	mov	r1, sl
   165ea:	4864      	ldr	r0, [pc, #400]	; (1677c <buttons_scan_fn+0x1c4>)
   165ec:	f44f 725e 	mov.w	r2, #888	; 0x378
   165f0:	f004 f93e 	bl	1a870 <printk>
   165f4:	f44f 715e 	mov.w	r1, #888	; 0x378
   165f8:	4650      	mov	r0, sl
   165fa:	f004 fbdf 	bl	1adbc <assert_post_action>
	return api->port_get_raw(port, value);
   165fe:	f8db 3008 	ldr.w	r3, [fp, #8]
   16602:	4658      	mov	r0, fp
   16604:	685b      	ldr	r3, [r3, #4]
   16606:	a901      	add	r1, sp, #4
   16608:	4798      	blx	r3
	if (ret == 0) {
   1660a:	2800      	cmp	r0, #0
   1660c:	d16b      	bne.n	166e6 <buttons_scan_fn+0x12e>
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   1660e:	9b01      	ldr	r3, [sp, #4]
   16610:	ea18 0f03 	tst.w	r8, r3
   16614:	d003      	beq.n	1661e <buttons_scan_fn+0x66>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16616:	3501      	adds	r5, #1
   16618:	2d04      	cmp	r5, #4
   1661a:	d1d6      	bne.n	165ca <buttons_scan_fn+0x12>
   1661c:	e069      	b.n	166f2 <buttons_scan_fn+0x13a>
			ret |= 1U << i;
   1661e:	2301      	movs	r3, #1
   16620:	40ab      	lsls	r3, r5
   16622:	431c      	orrs	r4, r3
   16624:	e7f7      	b.n	16616 <buttons_scan_fn+0x5e>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   16626:	3d04      	subs	r5, #4
   16628:	2d00      	cmp	r5, #0
   1662a:	f000 8087 	beq.w	1673c <buttons_scan_fn+0x184>
			handler->cb(button_state, has_changed);
   1662e:	46aa      	mov	sl, r5
   16630:	f85a 3b04 	ldr.w	r3, [sl], #4
   16634:	4641      	mov	r1, r8
   16636:	4620      	mov	r0, r4
   16638:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1663a:	f1ba 0f00 	cmp.w	sl, #0
   1663e:	d07d      	beq.n	1673c <buttons_scan_fn+0x184>
	return node->next;
   16640:	686d      	ldr	r5, [r5, #4]
   16642:	e078      	b.n	16736 <buttons_scan_fn+0x17e>
		initial_run = false;
   16644:	2200      	movs	r2, #0
   16646:	701a      	strb	r2, [r3, #0]
   16648:	e07b      	b.n	16742 <buttons_scan_fn+0x18a>
	__asm__ volatile(
   1664a:	f04f 0320 	mov.w	r3, #32
   1664e:	f3ef 8811 	mrs	r8, BASEPRI
   16652:	f383 8811 	msr	BASEPRI, r3
   16656:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1665a:	4849      	ldr	r0, [pc, #292]	; (16780 <buttons_scan_fn+0x1c8>)
   1665c:	f003 f91c 	bl	19898 <z_spin_lock_valid>
   16660:	b940      	cbnz	r0, 16674 <buttons_scan_fn+0xbc>
   16662:	4948      	ldr	r1, [pc, #288]	; (16784 <buttons_scan_fn+0x1cc>)
   16664:	4845      	ldr	r0, [pc, #276]	; (1677c <buttons_scan_fn+0x1c4>)
   16666:	227c      	movs	r2, #124	; 0x7c
   16668:	f004 f902 	bl	1a870 <printk>
   1666c:	217c      	movs	r1, #124	; 0x7c
   1666e:	4845      	ldr	r0, [pc, #276]	; (16784 <buttons_scan_fn+0x1cc>)
   16670:	f004 fba4 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   16674:	4842      	ldr	r0, [pc, #264]	; (16780 <buttons_scan_fn+0x1c8>)
   16676:	f003 f92b 	bl	198d0 <z_spin_lock_set_owner>
		switch (state) {
   1667a:	4b43      	ldr	r3, [pc, #268]	; (16788 <buttons_scan_fn+0x1d0>)
   1667c:	781a      	ldrb	r2, [r3, #0]
   1667e:	2a01      	cmp	r2, #1
   16680:	d126      	bne.n	166d0 <buttons_scan_fn+0x118>
			state = STATE_WAITING;
   16682:	2200      	movs	r2, #0
   16684:	701a      	strb	r2, [r3, #0]
			err = gpio_pin_interrupt_configure(button_devs[i],
   16686:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   1668a:	f856 0b04 	ldr.w	r0, [r6], #4
   1668e:	7919      	ldrb	r1, [r3, #4]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   16690:	f44f 3210 	mov.w	r2, #147456	; 0x24000
   16694:	f7ff fed0 	bl	16438 <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   16698:	3401      	adds	r4, #1
   1669a:	2c04      	cmp	r4, #4
   1669c:	4605      	mov	r5, r0
   1669e:	d001      	beq.n	166a4 <buttons_scan_fn+0xec>
   166a0:	2800      	cmp	r0, #0
   166a2:	d0f0      	beq.n	16686 <buttons_scan_fn+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   166a4:	4836      	ldr	r0, [pc, #216]	; (16780 <buttons_scan_fn+0x1c8>)
   166a6:	f003 f905 	bl	198b4 <z_spin_unlock_valid>
   166aa:	b940      	cbnz	r0, 166be <buttons_scan_fn+0x106>
   166ac:	4935      	ldr	r1, [pc, #212]	; (16784 <buttons_scan_fn+0x1cc>)
   166ae:	4833      	ldr	r0, [pc, #204]	; (1677c <buttons_scan_fn+0x1c4>)
   166b0:	22a7      	movs	r2, #167	; 0xa7
   166b2:	f004 f8dd 	bl	1a870 <printk>
   166b6:	21a7      	movs	r1, #167	; 0xa7
   166b8:	4832      	ldr	r0, [pc, #200]	; (16784 <buttons_scan_fn+0x1cc>)
   166ba:	f004 fb7f 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   166be:	f388 8811 	msr	BASEPRI, r8
   166c2:	f3bf 8f6f 	isb	sy
		if (err) {
   166c6:	2d00      	cmp	r5, #0
   166c8:	d04f      	beq.n	1676a <buttons_scan_fn+0x1b2>
			LOG_ERR("Cannot enable callbacks");
   166ca:	2145      	movs	r1, #69	; 0x45
   166cc:	482f      	ldr	r0, [pc, #188]	; (1678c <buttons_scan_fn+0x1d4>)
   166ce:	e047      	b.n	16760 <buttons_scan_fn+0x1a8>
			__ASSERT_NO_MSG(false);
   166d0:	22b4      	movs	r2, #180	; 0xb4
   166d2:	492f      	ldr	r1, [pc, #188]	; (16790 <buttons_scan_fn+0x1d8>)
   166d4:	4829      	ldr	r0, [pc, #164]	; (1677c <buttons_scan_fn+0x1c4>)
   166d6:	f004 f8cb 	bl	1a870 <printk>
   166da:	21b4      	movs	r1, #180	; 0xb4
   166dc:	482c      	ldr	r0, [pc, #176]	; (16790 <buttons_scan_fn+0x1d8>)
   166de:	f004 fb6d 	bl	1adbc <assert_post_action>
		int err = 0;
   166e2:	2500      	movs	r5, #0
			break;
   166e4:	e7de      	b.n	166a4 <buttons_scan_fn+0xec>
		if (val < 0) {
   166e6:	da96      	bge.n	16616 <buttons_scan_fn+0x5e>
			LOG_ERR("Cannot read gpio pin");
   166e8:	2145      	movs	r1, #69	; 0x45
   166ea:	482a      	ldr	r0, [pc, #168]	; (16794 <buttons_scan_fn+0x1dc>)
   166ec:	f004 f8c0 	bl	1a870 <printk>
			return 0;
   166f0:	2400      	movs	r4, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   166f2:	4b29      	ldr	r3, [pc, #164]	; (16798 <buttons_scan_fn+0x1e0>)
   166f4:	e8d3 2fef 	ldaex	r2, [r3]
   166f8:	e8c3 4fe1 	stlex	r1, r4, [r3]
   166fc:	2900      	cmp	r1, #0
   166fe:	d1f9      	bne.n	166f4 <buttons_scan_fn+0x13c>
	if (!initial_run) {
   16700:	4b26      	ldr	r3, [pc, #152]	; (1679c <buttons_scan_fn+0x1e4>)
   16702:	f8df 909c 	ldr.w	r9, [pc, #156]	; 167a0 <buttons_scan_fn+0x1e8>
   16706:	781a      	ldrb	r2, [r3, #0]
   16708:	2a00      	cmp	r2, #0
   1670a:	d19b      	bne.n	16644 <buttons_scan_fn+0x8c>
		if (button_scan != last_button_scan) {
   1670c:	f8d9 3000 	ldr.w	r3, [r9]
   16710:	42a3      	cmp	r3, r4
   16712:	d016      	beq.n	16742 <buttons_scan_fn+0x18a>
			uint32_t has_changed = (button_scan ^ last_button_scan);
   16714:	ea83 0804 	eor.w	r8, r3, r4
	if (button_handler_cb != NULL) {
   16718:	4b22      	ldr	r3, [pc, #136]	; (167a4 <buttons_scan_fn+0x1ec>)
   1671a:	681b      	ldr	r3, [r3, #0]
   1671c:	b113      	cbz	r3, 16724 <buttons_scan_fn+0x16c>
		button_handler_cb(button_state, has_changed);
   1671e:	4641      	mov	r1, r8
   16720:	4620      	mov	r0, r4
   16722:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   16724:	f04f 33ff 	mov.w	r3, #4294967295
   16728:	f04f 32ff 	mov.w	r2, #4294967295
   1672c:	481e      	ldr	r0, [pc, #120]	; (167a8 <buttons_scan_fn+0x1f0>)
   1672e:	f001 fc13 	bl	17f58 <z_impl_k_mutex_lock>
	return list->head;
   16732:	4b1e      	ldr	r3, [pc, #120]	; (167ac <buttons_scan_fn+0x1f4>)
   16734:	681d      	ldr	r5, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   16736:	2d00      	cmp	r5, #0
   16738:	f47f af75 	bne.w	16626 <buttons_scan_fn+0x6e>
	return z_impl_k_mutex_unlock(mutex);
   1673c:	481a      	ldr	r0, [pc, #104]	; (167a8 <buttons_scan_fn+0x1f0>)
   1673e:	f001 fcd7 	bl	180f0 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   16742:	f8c9 4000 	str.w	r4, [r9]
	if (button_scan != 0) {
   16746:	2c00      	cmp	r4, #0
   16748:	f43f af7f 	beq.w	1664a <buttons_scan_fn+0x92>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1674c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   16750:	2300      	movs	r3, #0
   16752:	4917      	ldr	r1, [pc, #92]	; (167b0 <buttons_scan_fn+0x1f8>)
   16754:	4817      	ldr	r0, [pc, #92]	; (167b4 <buttons_scan_fn+0x1fc>)
   16756:	f003 f915 	bl	19984 <k_delayed_work_submit_to_queue>
		if (err) {
   1675a:	b130      	cbz	r0, 1676a <buttons_scan_fn+0x1b2>
			LOG_ERR("Cannot add work to workqueue");
   1675c:	2145      	movs	r1, #69	; 0x45
   1675e:	4816      	ldr	r0, [pc, #88]	; (167b8 <buttons_scan_fn+0x200>)
}
   16760:	b003      	add	sp, #12
   16762:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Cannot enable callbacks");
   16766:	f004 b883 	b.w	1a870 <printk>
}
   1676a:	b003      	add	sp, #12
   1676c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16770:	2000b050 	.word	0x2000b050
   16774:	0001f074 	.word	0x0001f074
   16778:	00022716 	.word	0x00022716
   1677c:	0001fdfa 	.word	0x0001fdfa
   16780:	2000b0a4 	.word	0x2000b0a4
   16784:	0001fe34 	.word	0x0001fe34
   16788:	2000f9f5 	.word	0x2000f9f5
   1678c:	000227d5 	.word	0x000227d5
   16790:	00022797 	.word	0x00022797
   16794:	0002275b 	.word	0x0002275b
   16798:	2000b0a8 	.word	0x2000b0a8
   1679c:	2000856b 	.word	0x2000856b
   167a0:	2000b08c 	.word	0x2000b08c
   167a4:	2000b060 	.word	0x2000b060
   167a8:	2000b064 	.word	0x2000b064
   167ac:	2000b078 	.word	0x2000b078
   167b0:	2000a3f0 	.word	0x2000a3f0
   167b4:	2000a540 	.word	0x2000a540
   167b8:	00022775 	.word	0x00022775

000167bc <button_pressed>:
{
   167bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   167be:	f04f 0320 	mov.w	r3, #32
   167c2:	f3ef 8611 	mrs	r6, BASEPRI
   167c6:	f383 8811 	msr	BASEPRI, r3
   167ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   167ce:	4827      	ldr	r0, [pc, #156]	; (1686c <button_pressed+0xb0>)
   167d0:	f003 f862 	bl	19898 <z_spin_lock_valid>
   167d4:	b940      	cbnz	r0, 167e8 <button_pressed+0x2c>
   167d6:	4926      	ldr	r1, [pc, #152]	; (16870 <button_pressed+0xb4>)
   167d8:	4826      	ldr	r0, [pc, #152]	; (16874 <button_pressed+0xb8>)
   167da:	227c      	movs	r2, #124	; 0x7c
   167dc:	f004 f848 	bl	1a870 <printk>
   167e0:	217c      	movs	r1, #124	; 0x7c
   167e2:	4823      	ldr	r0, [pc, #140]	; (16870 <button_pressed+0xb4>)
   167e4:	f004 faea 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   167e8:	4820      	ldr	r0, [pc, #128]	; (1686c <button_pressed+0xb0>)
   167ea:	f003 f871 	bl	198d0 <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   167ee:	2400      	movs	r4, #0
   167f0:	4d21      	ldr	r5, [pc, #132]	; (16878 <button_pressed+0xbc>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   167f2:	4f22      	ldr	r7, [pc, #136]	; (1687c <button_pressed+0xc0>)
   167f4:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   167f8:	f855 0b04 	ldr.w	r0, [r5], #4
   167fc:	7919      	ldrb	r1, [r3, #4]
   167fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   16802:	3401      	adds	r4, #1
   16804:	f7ff fe18 	bl	16438 <z_impl_gpio_pin_interrupt_configure>
   16808:	2c04      	cmp	r4, #4
   1680a:	d006      	beq.n	1681a <button_pressed+0x5e>
   1680c:	2800      	cmp	r0, #0
   1680e:	d0f1      	beq.n	167f4 <button_pressed+0x38>
		LOG_ERR("Cannot disable callbacks");
   16810:	2145      	movs	r1, #69	; 0x45
   16812:	481b      	ldr	r0, [pc, #108]	; (16880 <button_pressed+0xc4>)
   16814:	f004 f82c 	bl	1a870 <printk>
   16818:	e001      	b.n	1681e <button_pressed+0x62>
	if (err) {
   1681a:	2800      	cmp	r0, #0
   1681c:	d1f8      	bne.n	16810 <button_pressed+0x54>
	switch (state) {
   1681e:	4b19      	ldr	r3, [pc, #100]	; (16884 <button_pressed+0xc8>)
   16820:	781a      	ldrb	r2, [r3, #0]
   16822:	b9ca      	cbnz	r2, 16858 <button_pressed+0x9c>
		state = STATE_SCANNING;
   16824:	2201      	movs	r2, #1
   16826:	4918      	ldr	r1, [pc, #96]	; (16888 <button_pressed+0xcc>)
   16828:	701a      	strb	r2, [r3, #0]
   1682a:	4818      	ldr	r0, [pc, #96]	; (1688c <button_pressed+0xd0>)
   1682c:	2221      	movs	r2, #33	; 0x21
   1682e:	2300      	movs	r3, #0
   16830:	f003 f8a8 	bl	19984 <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16834:	480d      	ldr	r0, [pc, #52]	; (1686c <button_pressed+0xb0>)
   16836:	f003 f83d 	bl	198b4 <z_spin_unlock_valid>
   1683a:	b940      	cbnz	r0, 1684e <button_pressed+0x92>
   1683c:	490c      	ldr	r1, [pc, #48]	; (16870 <button_pressed+0xb4>)
   1683e:	480d      	ldr	r0, [pc, #52]	; (16874 <button_pressed+0xb8>)
   16840:	22a7      	movs	r2, #167	; 0xa7
   16842:	f004 f815 	bl	1a870 <printk>
   16846:	21a7      	movs	r1, #167	; 0xa7
   16848:	4809      	ldr	r0, [pc, #36]	; (16870 <button_pressed+0xb4>)
   1684a:	f004 fab7 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   1684e:	f386 8811 	msr	BASEPRI, r6
   16852:	f3bf 8f6f 	isb	sy
}
   16856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   16858:	22eb      	movs	r2, #235	; 0xeb
   1685a:	490d      	ldr	r1, [pc, #52]	; (16890 <button_pressed+0xd4>)
   1685c:	4805      	ldr	r0, [pc, #20]	; (16874 <button_pressed+0xb8>)
   1685e:	f004 f807 	bl	1a870 <printk>
   16862:	21eb      	movs	r1, #235	; 0xeb
   16864:	480a      	ldr	r0, [pc, #40]	; (16890 <button_pressed+0xd4>)
   16866:	f004 faa9 	bl	1adbc <assert_post_action>
		break;
   1686a:	e7e3      	b.n	16834 <button_pressed+0x78>
   1686c:	2000b0a4 	.word	0x2000b0a4
   16870:	0001fe34 	.word	0x0001fe34
   16874:	0001fdfa 	.word	0x0001fdfa
   16878:	2000b050 	.word	0x2000b050
   1687c:	0001f074 	.word	0x0001f074
   16880:	000227f2 	.word	0x000227f2
   16884:	2000f9f5 	.word	0x2000f9f5
   16888:	2000a3f0 	.word	0x2000a3f0
   1688c:	2000a540 	.word	0x2000a540
   16890:	00022797 	.word	0x00022797

00016894 <dk_leds_init>:
{
   16894:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   16898:	2600      	movs	r6, #0
   1689a:	4d23      	ldr	r5, [pc, #140]	; (16928 <dk_leds_init+0x94>)
   1689c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 1692c <dk_leds_init+0x98>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   168a0:	f8df a08c 	ldr.w	sl, [pc, #140]	; 16930 <dk_leds_init+0x9c>
		led_devs[i] = device_get_binding(led_pins[i].port);
   168a4:	6828      	ldr	r0, [r5, #0]
   168a6:	f001 f835 	bl	17914 <z_impl_device_get_binding>
   168aa:	4604      	mov	r4, r0
   168ac:	f849 0b04 	str.w	r0, [r9], #4
		if (!led_devs[i]) {
   168b0:	b940      	cbnz	r0, 168c4 <dk_leds_init+0x30>
			LOG_ERR("Cannot bind gpio device");
   168b2:	2145      	movs	r1, #69	; 0x45
   168b4:	481f      	ldr	r0, [pc, #124]	; (16934 <dk_leds_init+0xa0>)
   168b6:	f003 ffdb 	bl	1a870 <printk>
			return -ENODEV;
   168ba:	f06f 0412 	mvn.w	r4, #18
}
   168be:	4620      	mov	r0, r4
   168c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168c4:	2301      	movs	r3, #1
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   168c6:	f895 b004 	ldrb.w	fp, [r5, #4]
	struct gpio_driver_data *data =
   168ca:	68c7      	ldr	r7, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   168cc:	fa03 f80b 	lsl.w	r8, r3, fp
   168d0:	6843      	ldr	r3, [r0, #4]
   168d2:	681b      	ldr	r3, [r3, #0]
   168d4:	ea18 0f03 	tst.w	r8, r3
   168d8:	d10a      	bne.n	168f0 <dk_leds_init+0x5c>
   168da:	4651      	mov	r1, sl
   168dc:	4816      	ldr	r0, [pc, #88]	; (16938 <dk_leds_init+0xa4>)
   168de:	f44f 7211 	mov.w	r2, #580	; 0x244
   168e2:	f003 ffc5 	bl	1a870 <printk>
   168e6:	f44f 7111 	mov.w	r1, #580	; 0x244
   168ea:	4650      	mov	r0, sl
   168ec:	f004 fa66 	bl	1adbc <assert_post_action>
	return api->pin_configure(port, pin, flags);
   168f0:	68a3      	ldr	r3, [r4, #8]
   168f2:	4620      	mov	r0, r4
   168f4:	f44f 7200 	mov.w	r2, #512	; 0x200
   168f8:	4659      	mov	r1, fp
   168fa:	681b      	ldr	r3, [r3, #0]
   168fc:	4798      	blx	r3
	if (ret != 0) {
   168fe:	4604      	mov	r4, r0
   16900:	b968      	cbnz	r0, 1691e <dk_leds_init+0x8a>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   16902:	683b      	ldr	r3, [r7, #0]
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   16904:	3601      	adds	r6, #1
   16906:	ea23 0308 	bic.w	r3, r3, r8
   1690a:	2e04      	cmp	r6, #4
   1690c:	603b      	str	r3, [r7, #0]
   1690e:	f105 0508 	add.w	r5, r5, #8
   16912:	d1c7      	bne.n	168a4 <dk_leds_init+0x10>
}
   16914:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16918:	210f      	movs	r1, #15
   1691a:	f7ff be1f 	b.w	1655c <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   1691e:	2145      	movs	r1, #69	; 0x45
   16920:	4806      	ldr	r0, [pc, #24]	; (1693c <dk_leds_init+0xa8>)
   16922:	f003 ffa5 	bl	1a870 <printk>
			return err;
   16926:	e7ca      	b.n	168be <dk_leds_init+0x2a>
   16928:	0001f094 	.word	0x0001f094
   1692c:	2000b094 	.word	0x2000b094
   16930:	00022716 	.word	0x00022716
   16934:	00022810 	.word	0x00022810
   16938:	0001fdfa 	.word	0x0001fdfa
   1693c:	0002282d 	.word	0x0002282d

00016940 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16940:	4b05      	ldr	r3, [pc, #20]	; (16958 <dk_read_buttons+0x18>)
   16942:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   16946:	b100      	cbz	r0, 1694a <dk_read_buttons+0xa>
		*button_state = current_state;
   16948:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   1694a:	4804      	ldr	r0, [pc, #16]	; (1695c <dk_read_buttons+0x1c>)
   1694c:	b111      	cbz	r1, 16954 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   1694e:	6802      	ldr	r2, [r0, #0]
   16950:	405a      	eors	r2, r3
   16952:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   16954:	6003      	str	r3, [r0, #0]
}
   16956:	4770      	bx	lr
   16958:	2000b0a8 	.word	0x2000b0a8
   1695c:	2000b090 	.word	0x2000b090

00016960 <dk_buttons_init>:
	button_handler_cb = button_handler;
   16960:	4b4f      	ldr	r3, [pc, #316]	; (16aa0 <dk_buttons_init+0x140>)
{
   16962:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   16966:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   16968:	4e4e      	ldr	r6, [pc, #312]	; (16aa4 <dk_buttons_init+0x144>)
   1696a:	484f      	ldr	r0, [pc, #316]	; (16aa8 <dk_buttons_init+0x148>)
   1696c:	f007 fb1d 	bl	1dfaa <z_impl_k_mutex_init>
   16970:	46b1      	mov	r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16972:	2700      	movs	r7, #0
   16974:	4d4d      	ldr	r5, [pc, #308]	; (16aac <dk_buttons_init+0x14c>)
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16976:	f8df a138 	ldr.w	sl, [pc, #312]	; 16ab0 <dk_buttons_init+0x150>
		button_devs[i] = device_get_binding(button_pins[i].port);
   1697a:	6828      	ldr	r0, [r5, #0]
   1697c:	f000 ffca 	bl	17914 <z_impl_device_get_binding>
   16980:	4604      	mov	r4, r0
   16982:	f849 0b04 	str.w	r0, [r9], #4
		if (!button_devs[i]) {
   16986:	b948      	cbnz	r0, 1699c <dk_buttons_init+0x3c>
			LOG_ERR("Cannot bind gpio device");
   16988:	2145      	movs	r1, #69	; 0x45
   1698a:	484a      	ldr	r0, [pc, #296]	; (16ab4 <dk_buttons_init+0x154>)
   1698c:	f003 ff70 	bl	1a870 <printk>
			return -ENODEV;
   16990:	f06f 0412 	mvn.w	r4, #18
}
   16994:	4620      	mov	r0, r4
   16996:	b003      	add	sp, #12
   16998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1699c:	2301      	movs	r3, #1
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   1699e:	f895 b004 	ldrb.w	fp, [r5, #4]
	struct gpio_driver_data *data =
   169a2:	f8d0 800c 	ldr.w	r8, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   169a6:	fa03 f30b 	lsl.w	r3, r3, fp
   169aa:	9301      	str	r3, [sp, #4]
   169ac:	6843      	ldr	r3, [r0, #4]
   169ae:	9a01      	ldr	r2, [sp, #4]
   169b0:	681b      	ldr	r3, [r3, #0]
   169b2:	421a      	tst	r2, r3
   169b4:	d10a      	bne.n	169cc <dk_buttons_init+0x6c>
   169b6:	4651      	mov	r1, sl
   169b8:	483f      	ldr	r0, [pc, #252]	; (16ab8 <dk_buttons_init+0x158>)
   169ba:	f44f 7211 	mov.w	r2, #580	; 0x244
   169be:	f003 ff57 	bl	1a870 <printk>
   169c2:	f44f 7111 	mov.w	r1, #580	; 0x244
   169c6:	4650      	mov	r0, sl
   169c8:	f004 f9f8 	bl	1adbc <assert_post_action>
	return api->pin_configure(port, pin, flags);
   169cc:	68a3      	ldr	r3, [r4, #8]
   169ce:	4620      	mov	r0, r4
   169d0:	f44f 7288 	mov.w	r2, #272	; 0x110
   169d4:	4659      	mov	r1, fp
   169d6:	681b      	ldr	r3, [r3, #0]
   169d8:	4798      	blx	r3
	if (ret != 0) {
   169da:	4604      	mov	r4, r0
   169dc:	bb08      	cbnz	r0, 16a22 <dk_buttons_init+0xc2>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   169de:	f8d8 3000 	ldr.w	r3, [r8]
   169e2:	9a01      	ldr	r2, [sp, #4]
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   169e4:	3701      	adds	r7, #1
   169e6:	ea23 0302 	bic.w	r3, r3, r2
   169ea:	2f04      	cmp	r7, #4
   169ec:	f8c8 3000 	str.w	r3, [r8]
   169f0:	f105 0508 	add.w	r5, r5, #8
   169f4:	d1c1      	bne.n	1697a <dk_buttons_init+0x1a>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   169f6:	4605      	mov	r5, r0
	uint32_t pin_mask = 0;
   169f8:	4680      	mov	r8, r0
		pin_mask |= BIT(button_pins[i].number);
   169fa:	f04f 0a01 	mov.w	sl, #1
   169fe:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 16aa4 <dk_buttons_init+0x144>
		err = gpio_pin_interrupt_configure(button_devs[i],
   16a02:	4b2a      	ldr	r3, [pc, #168]	; (16aac <dk_buttons_init+0x14c>)
   16a04:	f859 0b04 	ldr.w	r0, [r9], #4
   16a08:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   16a0c:	791f      	ldrb	r7, [r3, #4]
   16a0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   16a12:	4639      	mov	r1, r7
   16a14:	f7ff fd10 	bl	16438 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   16a18:	4604      	mov	r4, r0
   16a1a:	b138      	cbz	r0, 16a2c <dk_buttons_init+0xcc>
			LOG_ERR("Cannot disable callbacks()");
   16a1c:	2145      	movs	r1, #69	; 0x45
   16a1e:	4827      	ldr	r0, [pc, #156]	; (16abc <dk_buttons_init+0x15c>)
   16a20:	e001      	b.n	16a26 <dk_buttons_init+0xc6>
			LOG_ERR("Cannot configure button gpio");
   16a22:	2145      	movs	r1, #69	; 0x45
   16a24:	4826      	ldr	r0, [pc, #152]	; (16ac0 <dk_buttons_init+0x160>)
		LOG_ERR("Cannot add work to workqueue");
   16a26:	f003 ff23 	bl	1a870 <printk>
		return err;
   16a2a:	e7b3      	b.n	16994 <dk_buttons_init+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16a2c:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   16a2e:	fa0a f707 	lsl.w	r7, sl, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16a32:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   16a34:	ea48 0807 	orr.w	r8, r8, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16a38:	d1e3      	bne.n	16a02 <dk_buttons_init+0xa2>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16a3a:	4605      	mov	r5, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   16a3c:	4f21      	ldr	r7, [pc, #132]	; (16ac4 <dk_buttons_init+0x164>)
   16a3e:	4b22      	ldr	r3, [pc, #136]	; (16ac8 <dk_buttons_init+0x168>)
	callback->pin_mask = pin_mask;
   16a40:	e9c7 3801 	strd	r3, r8, [r7, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   16a44:	f856 0b04 	ldr.w	r0, [r6], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   16a48:	6883      	ldr	r3, [r0, #8]
   16a4a:	69db      	ldr	r3, [r3, #28]
   16a4c:	b13b      	cbz	r3, 16a5e <dk_buttons_init+0xfe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   16a4e:	2201      	movs	r2, #1
   16a50:	4639      	mov	r1, r7
   16a52:	4798      	blx	r3
		if (err) {
   16a54:	4604      	mov	r4, r0
   16a56:	b128      	cbz	r0, 16a64 <dk_buttons_init+0x104>
			LOG_ERR("Cannot add callback");
   16a58:	2145      	movs	r1, #69	; 0x45
   16a5a:	481c      	ldr	r0, [pc, #112]	; (16acc <dk_buttons_init+0x16c>)
   16a5c:	e7e3      	b.n	16a26 <dk_buttons_init+0xc6>
		return -ENOTSUP;
   16a5e:	f06f 0422 	mvn.w	r4, #34	; 0x22
   16a62:	e7f9      	b.n	16a58 <dk_buttons_init+0xf8>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16a64:	3501      	adds	r5, #1
   16a66:	2d04      	cmp	r5, #4
   16a68:	d1ec      	bne.n	16a44 <dk_buttons_init+0xe4>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   16a6a:	4d19      	ldr	r5, [pc, #100]	; (16ad0 <dk_buttons_init+0x170>)
   16a6c:	4601      	mov	r1, r0
   16a6e:	2230      	movs	r2, #48	; 0x30
   16a70:	4628      	mov	r0, r5
   16a72:	f005 f96c 	bl	1bd4e <memset>
	state = STATE_SCANNING;
   16a76:	2201      	movs	r2, #1
   16a78:	4b16      	ldr	r3, [pc, #88]	; (16ad4 <dk_buttons_init+0x174>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   16a7a:	4629      	mov	r1, r5
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   16a7c:	606b      	str	r3, [r5, #4]
   16a7e:	4b16      	ldr	r3, [pc, #88]	; (16ad8 <dk_buttons_init+0x178>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   16a80:	4816      	ldr	r0, [pc, #88]	; (16adc <dk_buttons_init+0x17c>)
   16a82:	701a      	strb	r2, [r3, #0]
   16a84:	2200      	movs	r2, #0
   16a86:	2300      	movs	r3, #0
   16a88:	f002 ff7c 	bl	19984 <k_delayed_work_submit_to_queue>
	if (err) {
   16a8c:	4604      	mov	r4, r0
   16a8e:	b110      	cbz	r0, 16a96 <dk_buttons_init+0x136>
		LOG_ERR("Cannot add work to workqueue");
   16a90:	2145      	movs	r1, #69	; 0x45
   16a92:	4813      	ldr	r0, [pc, #76]	; (16ae0 <dk_buttons_init+0x180>)
   16a94:	e7c7      	b.n	16a26 <dk_buttons_init+0xc6>
	dk_read_buttons(NULL, NULL);
   16a96:	4601      	mov	r1, r0
   16a98:	f7ff ff52 	bl	16940 <dk_read_buttons>
	return 0;
   16a9c:	e77a      	b.n	16994 <dk_buttons_init+0x34>
   16a9e:	bf00      	nop
   16aa0:	2000b060 	.word	0x2000b060
   16aa4:	2000b050 	.word	0x2000b050
   16aa8:	2000b064 	.word	0x2000b064
   16aac:	0001f074 	.word	0x0001f074
   16ab0:	00022716 	.word	0x00022716
   16ab4:	00022810 	.word	0x00022810
   16ab8:	0001fdfa 	.word	0x0001fdfa
   16abc:	0002286e 	.word	0x0002286e
   16ac0:	0002284c 	.word	0x0002284c
   16ac4:	2000b080 	.word	0x2000b080
   16ac8:	000167bd 	.word	0x000167bd
   16acc:	0002288e 	.word	0x0002288e
   16ad0:	2000a3f0 	.word	0x2000a3f0
   16ad4:	000165b9 	.word	0x000165b9
   16ad8:	2000f9f5 	.word	0x2000f9f5
   16adc:	2000a540 	.word	0x2000a540
   16ae0:	00022775 	.word	0x00022775

00016ae4 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
	int err;

	if (led_idx > ARRAY_SIZE(led_pins)) {
   16ae4:	2804      	cmp	r0, #4
{
   16ae6:	b510      	push	{r4, lr}
	if (led_idx > ARRAY_SIZE(led_pins)) {
   16ae8:	d907      	bls.n	16afa <dk_set_led+0x16>
		LOG_ERR("LED index out of the range");
   16aea:	2145      	movs	r1, #69	; 0x45
   16aec:	480d      	ldr	r0, [pc, #52]	; (16b24 <dk_set_led+0x40>)
   16aee:	f003 febf 	bl	1a870 <printk>
   16af2:	f06f 0415 	mvn.w	r4, #21
		IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS) ? !val : val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   16af6:	4620      	mov	r0, r4
   16af8:	bd10      	pop	{r4, pc}
	err = gpio_pin_set_raw(led_devs[led_idx], led_pins[led_idx].number,
   16afa:	fab1 f281 	clz	r2, r1
   16afe:	4b0a      	ldr	r3, [pc, #40]	; (16b28 <dk_set_led+0x44>)
   16b00:	0952      	lsrs	r2, r2, #5
   16b02:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   16b06:	7919      	ldrb	r1, [r3, #4]
   16b08:	4b08      	ldr	r3, [pc, #32]	; (16b2c <dk_set_led+0x48>)
   16b0a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   16b0e:	f7ff fd01 	bl	16514 <gpio_pin_set_raw>
	if (err) {
   16b12:	4604      	mov	r4, r0
   16b14:	2800      	cmp	r0, #0
   16b16:	d0ee      	beq.n	16af6 <dk_set_led+0x12>
		LOG_ERR("Cannot write LED gpio");
   16b18:	2145      	movs	r1, #69	; 0x45
   16b1a:	4805      	ldr	r0, [pc, #20]	; (16b30 <dk_set_led+0x4c>)
   16b1c:	f003 fea8 	bl	1a870 <printk>
   16b20:	e7e9      	b.n	16af6 <dk_set_led+0x12>
   16b22:	bf00      	nop
   16b24:	000228a7 	.word	0x000228a7
   16b28:	0001f094 	.word	0x0001f094
   16b2c:	2000b094 	.word	0x2000b094
   16b30:	00022740 	.word	0x00022740

00016b34 <k_sys_fatal_error_handler>:
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   16b34:	4803      	ldr	r0, [pc, #12]	; (16b44 <k_sys_fatal_error_handler+0x10>)
   16b36:	2145      	movs	r1, #69	; 0x45
{
   16b38:	b508      	push	{r3, lr}
	LOG_ERR("Resetting system");
   16b3a:	f003 fe99 	bl	1a870 <printk>
	sys_arch_reboot(0);
   16b3e:	2000      	movs	r0, #0
   16b40:	f7f7 fa64 	bl	e00c <sys_arch_reboot>

	CODE_UNREACHABLE;
   16b44:	000228db 	.word	0x000228db

00016b48 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   16b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   16b4c:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   16b4e:	4c21      	ldr	r4, [pc, #132]	; (16bd4 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   16b50:	4e21      	ldr	r6, [pc, #132]	; (16bd8 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   16b52:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   16b56:	f8df 9084 	ldr.w	r9, [pc, #132]	; 16bdc <check_ext_api_requests+0x94>
{
   16b5a:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   16b5c:	45a8      	cmp	r8, r5
   16b5e:	d803      	bhi.n	16b68 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   16b60:	2000      	movs	r0, #0
   16b62:	b005      	add	sp, #20
   16b64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   16b68:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16b6a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   16b6e:	681f      	ldr	r7, [r3, #0]
   16b70:	ab01      	add	r3, sp, #4
   16b72:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   16b76:	220c      	movs	r2, #12
   16b78:	4619      	mov	r1, r3
   16b7a:	4638      	mov	r0, r7
   16b7c:	f005 f8ab 	bl	1bcd6 <memcmp>
   16b80:	b990      	cbnz	r0, 16ba8 <check_ext_api_requests+0x60>
   16b82:	b18f      	cbz	r7, 16ba8 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   16b84:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   16b86:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   16b88:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   16b8a:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   16b8c:	4291      	cmp	r1, r2
   16b8e:	d10b      	bne.n	16ba8 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   16b90:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   16b92:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   16b94:	4291      	cmp	r1, r2
   16b96:	d807      	bhi.n	16ba8 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   16b98:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   16b9a:	4291      	cmp	r1, r2
   16b9c:	d904      	bls.n	16ba8 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   16b9e:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   16ba0:	695b      	ldr	r3, [r3, #20]
   16ba2:	ea32 0303 	bics.w	r3, r2, r3
   16ba6:	d00a      	beq.n	16bbe <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   16ba8:	6a27      	ldr	r7, [r4, #32]
   16baa:	b167      	cbz	r7, 16bc6 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   16bac:	480c      	ldr	r0, [pc, #48]	; (16be0 <check_ext_api_requests+0x98>)
   16bae:	f003 fe5f 	bl	1a870 <printk>
			k_panic();
   16bb2:	4040      	eors	r0, r0
   16bb4:	f380 8811 	msr	BASEPRI, r0
   16bb8:	f04f 0004 	mov.w	r0, #4
   16bbc:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   16bbe:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   16bc0:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   16bc2:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   16bc4:	e7ca      	b.n	16b5c <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   16bc6:	4648      	mov	r0, r9
   16bc8:	f003 fe52 	bl	1a870 <printk>
			*ext_api_req->ext_api = NULL;
   16bcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16bce:	601f      	str	r7, [r3, #0]
   16bd0:	e7f5      	b.n	16bbe <check_ext_api_requests+0x76>
   16bd2:	bf00      	nop
   16bd4:	0000823c 	.word	0x0000823c
   16bd8:	0001e7c0 	.word	0x0001e7c0
   16bdc:	00022926 	.word	0x00022926
   16be0:	000228fd 	.word	0x000228fd

00016be4 <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   16be4:	4b04      	ldr	r3, [pc, #16]	; (16bf8 <SystemCoreClockUpdate+0x14>)
   16be6:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   16bea:	4b04      	ldr	r3, [pc, #16]	; (16bfc <SystemCoreClockUpdate+0x18>)
   16bec:	f002 0203 	and.w	r2, r2, #3
   16bf0:	40d3      	lsrs	r3, r2
   16bf2:	4a03      	ldr	r2, [pc, #12]	; (16c00 <SystemCoreClockUpdate+0x1c>)
   16bf4:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   16bf6:	4770      	bx	lr
   16bf8:	40005000 	.word	0x40005000
   16bfc:	07a12000 	.word	0x07a12000
   16c00:	2000851c 	.word	0x2000851c

00016c04 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   16c04:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   16c06:	4604      	mov	r4, r0
   16c08:	b940      	cbnz	r0, 16c1c <nrfx_clock_init+0x18>
   16c0a:	4909      	ldr	r1, [pc, #36]	; (16c30 <nrfx_clock_init+0x2c>)
   16c0c:	4809      	ldr	r0, [pc, #36]	; (16c34 <nrfx_clock_init+0x30>)
   16c0e:	22b3      	movs	r2, #179	; 0xb3
   16c10:	f003 fe2e 	bl	1a870 <printk>
   16c14:	21b3      	movs	r1, #179	; 0xb3
   16c16:	4806      	ldr	r0, [pc, #24]	; (16c30 <nrfx_clock_init+0x2c>)
   16c18:	f004 f8d0 	bl	1adbc <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   16c1c:	4b06      	ldr	r3, [pc, #24]	; (16c38 <nrfx_clock_init+0x34>)
   16c1e:	791a      	ldrb	r2, [r3, #4]
   16c20:	b922      	cbnz	r2, 16c2c <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   16c22:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   16c24:	4805      	ldr	r0, [pc, #20]	; (16c3c <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
   16c26:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   16c28:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   16c2a:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   16c2c:	4804      	ldr	r0, [pc, #16]	; (16c40 <nrfx_clock_init+0x3c>)
    return err_code;
   16c2e:	e7fc      	b.n	16c2a <nrfx_clock_init+0x26>
   16c30:	00022959 	.word	0x00022959
   16c34:	0001fdfa 	.word	0x0001fdfa
   16c38:	2000b0ac 	.word	0x2000b0ac
   16c3c:	0bad0000 	.word	0x0bad0000
   16c40:	0bad000c 	.word	0x0bad000c

00016c44 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   16c44:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16c46:	4b0d      	ldr	r3, [pc, #52]	; (16c7c <nrfx_clock_enable+0x38>)
   16c48:	791b      	ldrb	r3, [r3, #4]
   16c4a:	b943      	cbnz	r3, 16c5e <nrfx_clock_enable+0x1a>
   16c4c:	490c      	ldr	r1, [pc, #48]	; (16c80 <nrfx_clock_enable+0x3c>)
   16c4e:	480d      	ldr	r0, [pc, #52]	; (16c84 <nrfx_clock_enable+0x40>)
   16c50:	22cc      	movs	r2, #204	; 0xcc
   16c52:	f003 fe0d 	bl	1a870 <printk>
   16c56:	21cc      	movs	r1, #204	; 0xcc
   16c58:	4809      	ldr	r0, [pc, #36]	; (16c80 <nrfx_clock_enable+0x3c>)
   16c5a:	f004 f8af 	bl	1adbc <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   16c5e:	2005      	movs	r0, #5
   16c60:	f7f6 fec8 	bl	d9f4 <arch_irq_is_enabled>
   16c64:	b910      	cbnz	r0, 16c6c <nrfx_clock_enable+0x28>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   16c66:	2005      	movs	r0, #5
   16c68:	f7f6 feb4 	bl	d9d4 <arch_irq_enable>
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
   16c6c:	2201      	movs	r2, #1
   16c6e:	4b06      	ldr	r3, [pc, #24]	; (16c88 <nrfx_clock_enable+0x44>)
   16c70:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   16c74:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   16c78:	bd08      	pop	{r3, pc}
   16c7a:	bf00      	nop
   16c7c:	2000b0ac 	.word	0x2000b0ac
   16c80:	00022959 	.word	0x00022959
   16c84:	0001fdfa 	.word	0x0001fdfa
   16c88:	40005000 	.word	0x40005000

00016c8c <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16c8c:	4b30      	ldr	r3, [pc, #192]	; (16d50 <nrfx_clock_start+0xc4>)
{
   16c8e:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16c90:	791b      	ldrb	r3, [r3, #4]
{
   16c92:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16c94:	b953      	cbnz	r3, 16cac <nrfx_clock_start+0x20>
   16c96:	492f      	ldr	r1, [pc, #188]	; (16d54 <nrfx_clock_start+0xc8>)
   16c98:	482f      	ldr	r0, [pc, #188]	; (16d58 <nrfx_clock_start+0xcc>)
   16c9a:	f44f 7284 	mov.w	r2, #264	; 0x108
   16c9e:	f003 fde7 	bl	1a870 <printk>
   16ca2:	f44f 7184 	mov.w	r1, #264	; 0x108
   16ca6:	482b      	ldr	r0, [pc, #172]	; (16d54 <nrfx_clock_start+0xc8>)
   16ca8:	f004 f888 	bl	1adbc <assert_post_action>
    switch (domain)
   16cac:	2c03      	cmp	r4, #3
   16cae:	d842      	bhi.n	16d36 <nrfx_clock_start+0xaa>
   16cb0:	e8df f004 	tbb	[pc, r4]
   16cb4:	34271c02 	.word	0x34271c02
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   16cb8:	4b28      	ldr	r3, [pc, #160]	; (16d5c <nrfx_clock_start+0xd0>)
   16cba:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   16cbe:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   16cc2:	03c9      	lsls	r1, r1, #15
   16cc4:	d510      	bpl.n	16ce8 <nrfx_clock_start+0x5c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   16cc6:	f002 0203 	and.w	r2, r2, #3
   16cca:	2a02      	cmp	r2, #2
   16ccc:	d10c      	bne.n	16ce8 <nrfx_clock_start+0x5c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   16cce:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16cd2:	2200      	movs	r2, #0
   16cd4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   16cd8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   16cdc:	2202      	movs	r2, #2
   16cde:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16ce2:	2201      	movs	r2, #1
   16ce4:	609a      	str	r2, [r3, #8]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   16ce6:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   16ce8:	2201      	movs	r2, #1
   16cea:	e7f0      	b.n	16cce <nrfx_clock_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16cec:	2200      	movs	r2, #0
   16cee:	4b1b      	ldr	r3, [pc, #108]	; (16d5c <nrfx_clock_start+0xd0>)
   16cf0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   16cf4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   16cf8:	2201      	movs	r2, #1
   16cfa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16cfe:	601a      	str	r2, [r3, #0]
}
   16d00:	e7f1      	b.n	16ce6 <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16d02:	2200      	movs	r2, #0
   16d04:	4b15      	ldr	r3, [pc, #84]	; (16d5c <nrfx_clock_start+0xd0>)
   16d06:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   16d0a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   16d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
   16d12:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16d16:	2201      	movs	r2, #1
   16d18:	621a      	str	r2, [r3, #32]
}
   16d1a:	e7e4      	b.n	16ce6 <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16d1c:	2200      	movs	r2, #0
   16d1e:	4b0f      	ldr	r3, [pc, #60]	; (16d5c <nrfx_clock_start+0xd0>)
   16d20:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   16d24:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   16d28:	f44f 7280 	mov.w	r2, #256	; 0x100
   16d2c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16d30:	2201      	movs	r2, #1
   16d32:	619a      	str	r2, [r3, #24]
}
   16d34:	e7d7      	b.n	16ce6 <nrfx_clock_start+0x5a>
            NRFX_ASSERT(0);
   16d36:	4907      	ldr	r1, [pc, #28]	; (16d54 <nrfx_clock_start+0xc8>)
   16d38:	4807      	ldr	r0, [pc, #28]	; (16d58 <nrfx_clock_start+0xcc>)
   16d3a:	f44f 729d 	mov.w	r2, #314	; 0x13a
   16d3e:	f003 fd97 	bl	1a870 <printk>
}
   16d42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
   16d46:	f44f 719d 	mov.w	r1, #314	; 0x13a
   16d4a:	4802      	ldr	r0, [pc, #8]	; (16d54 <nrfx_clock_start+0xc8>)
   16d4c:	f004 b836 	b.w	1adbc <assert_post_action>
   16d50:	2000b0ac 	.word	0x2000b0ac
   16d54:	00022959 	.word	0x00022959
   16d58:	0001fdfa 	.word	0x0001fdfa
   16d5c:	40005000 	.word	0x40005000

00016d60 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16d60:	4b42      	ldr	r3, [pc, #264]	; (16e6c <nrfx_clock_stop+0x10c>)
{
   16d62:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16d64:	791b      	ldrb	r3, [r3, #4]
{
   16d66:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16d68:	b953      	cbnz	r3, 16d80 <nrfx_clock_stop+0x20>
   16d6a:	4941      	ldr	r1, [pc, #260]	; (16e70 <nrfx_clock_stop+0x110>)
   16d6c:	4841      	ldr	r0, [pc, #260]	; (16e74 <nrfx_clock_stop+0x114>)
   16d6e:	f240 1241 	movw	r2, #321	; 0x141
   16d72:	f003 fd7d 	bl	1a870 <printk>
   16d76:	f240 1141 	movw	r1, #321	; 0x141
   16d7a:	483d      	ldr	r0, [pc, #244]	; (16e70 <nrfx_clock_stop+0x110>)
   16d7c:	f004 f81e 	bl	1adbc <assert_post_action>
    switch (domain)
   16d80:	2c03      	cmp	r4, #3
   16d82:	d856      	bhi.n	16e32 <nrfx_clock_stop+0xd2>
   16d84:	e8df f004 	tbb	[pc, r4]
   16d88:	483b2002 	.word	0x483b2002
    p_reg->INTENCLR = mask;
   16d8c:	2202      	movs	r2, #2
   16d8e:	4b3a      	ldr	r3, [pc, #232]	; (16e78 <nrfx_clock_stop+0x118>)
   16d90:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16d94:	2200      	movs	r2, #0
   16d96:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   16d9a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16d9e:	2201      	movs	r2, #1
   16da0:	60da      	str	r2, [r3, #12]
   16da2:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   16da6:	4e34      	ldr	r6, [pc, #208]	; (16e78 <nrfx_clock_stop+0x118>)
    switch (domain)
   16da8:	2c02      	cmp	r4, #2
   16daa:	d04f      	beq.n	16e4c <nrfx_clock_stop+0xec>
   16dac:	2c03      	cmp	r4, #3
   16dae:	d050      	beq.n	16e52 <nrfx_clock_stop+0xf2>
   16db0:	2c00      	cmp	r4, #0
   16db2:	d151      	bne.n	16e58 <nrfx_clock_stop+0xf8>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   16db4:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   16db8:	03db      	lsls	r3, r3, #15
   16dba:	d51f      	bpl.n	16dfc <nrfx_clock_stop+0x9c>
   16dbc:	2001      	movs	r0, #1
   16dbe:	f006 fcd1 	bl	1d764 <nrfx_busy_wait>
   16dc2:	3d01      	subs	r5, #1
   16dc4:	d1f0      	bne.n	16da8 <nrfx_clock_stop+0x48>
   16dc6:	e019      	b.n	16dfc <nrfx_clock_stop+0x9c>
    p_reg->INTENCLR = mask;
   16dc8:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16dca:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16dcc:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
   16dd0:	4c29      	ldr	r4, [pc, #164]	; (16e78 <nrfx_clock_stop+0x118>)
   16dd2:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16dd6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   16dda:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16dde:	6063      	str	r3, [r4, #4]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   16de0:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   16de4:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   16de8:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   16dec:	03d2      	lsls	r2, r2, #15
   16dee:	d505      	bpl.n	16dfc <nrfx_clock_stop+0x9c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   16df0:	b123      	cbz	r3, 16dfc <nrfx_clock_stop+0x9c>
   16df2:	2001      	movs	r0, #1
   16df4:	f006 fcb6 	bl	1d764 <nrfx_busy_wait>
   16df8:	3d01      	subs	r5, #1
   16dfa:	d1f1      	bne.n	16de0 <nrfx_clock_stop+0x80>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   16dfc:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
   16dfe:	f44f 7200 	mov.w	r2, #512	; 0x200
   16e02:	4b1d      	ldr	r3, [pc, #116]	; (16e78 <nrfx_clock_stop+0x118>)
   16e04:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16e08:	2200      	movs	r2, #0
   16e0a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   16e0e:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16e12:	2201      	movs	r2, #1
   16e14:	625a      	str	r2, [r3, #36]	; 0x24
}
   16e16:	e7c4      	b.n	16da2 <nrfx_clock_stop+0x42>
    p_reg->INTENCLR = mask;
   16e18:	f44f 7280 	mov.w	r2, #256	; 0x100
   16e1c:	4b16      	ldr	r3, [pc, #88]	; (16e78 <nrfx_clock_stop+0x118>)
   16e1e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16e22:	2200      	movs	r2, #0
   16e24:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   16e28:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16e2c:	2201      	movs	r2, #1
   16e2e:	61da      	str	r2, [r3, #28]
}
   16e30:	e7b7      	b.n	16da2 <nrfx_clock_stop+0x42>
            NRFX_ASSERT(0);
   16e32:	490f      	ldr	r1, [pc, #60]	; (16e70 <nrfx_clock_stop+0x110>)
   16e34:	480f      	ldr	r0, [pc, #60]	; (16e74 <nrfx_clock_stop+0x114>)
   16e36:	f240 125d 	movw	r2, #349	; 0x15d
   16e3a:	f003 fd19 	bl	1a870 <printk>
   16e3e:	f240 115d 	movw	r1, #349	; 0x15d
   16e42:	480b      	ldr	r0, [pc, #44]	; (16e70 <nrfx_clock_stop+0x110>)
}
   16e44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            NRFX_ASSERT(0);
   16e48:	f003 bfb8 	b.w	1adbc <assert_post_action>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   16e4c:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   16e50:	e7b2      	b.n	16db8 <nrfx_clock_stop+0x58>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   16e52:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   16e56:	e7af      	b.n	16db8 <nrfx_clock_stop+0x58>
            NRFX_ASSERT(0);
   16e58:	4908      	ldr	r1, [pc, #32]	; (16e7c <nrfx_clock_stop+0x11c>)
   16e5a:	4806      	ldr	r0, [pc, #24]	; (16e74 <nrfx_clock_stop+0x114>)
   16e5c:	f240 3242 	movw	r2, #834	; 0x342
   16e60:	f003 fd06 	bl	1a870 <printk>
   16e64:	f240 3142 	movw	r1, #834	; 0x342
   16e68:	4804      	ldr	r0, [pc, #16]	; (16e7c <nrfx_clock_stop+0x11c>)
   16e6a:	e7eb      	b.n	16e44 <nrfx_clock_stop+0xe4>
   16e6c:	2000b0ac 	.word	0x2000b0ac
   16e70:	00022959 	.word	0x00022959
   16e74:	0001fdfa 	.word	0x0001fdfa
   16e78:	40005000 	.word	0x40005000
   16e7c:	00022996 	.word	0x00022996

00016e80 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16e80:	4b28      	ldr	r3, [pc, #160]	; (16f24 <nrfx_power_clock_irq_handler+0xa4>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   16e82:	b510      	push	{r4, lr}
   16e84:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   16e88:	b152      	cbz	r2, 16ea0 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16e8a:	2000      	movs	r0, #0
   16e8c:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   16e90:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   16e94:	2201      	movs	r2, #1
   16e96:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   16e9a:	4b23      	ldr	r3, [pc, #140]	; (16f28 <nrfx_power_clock_irq_handler+0xa8>)
   16e9c:	681b      	ldr	r3, [r3, #0]
   16e9e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16ea0:	4b20      	ldr	r3, [pc, #128]	; (16f24 <nrfx_power_clock_irq_handler+0xa4>)
   16ea2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   16ea6:	b18a      	cbz	r2, 16ecc <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16ea8:	2200      	movs	r2, #0
   16eaa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   16eae:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   16eb2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   16eb6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   16eba:	f002 0203 	and.w	r2, r2, #3
   16ebe:	2a01      	cmp	r2, #1
   16ec0:	f04f 0102 	mov.w	r1, #2
   16ec4:	d126      	bne.n	16f14 <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   16ec6:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16eca:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16ecc:	4b15      	ldr	r3, [pc, #84]	; (16f24 <nrfx_power_clock_irq_handler+0xa4>)
   16ece:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   16ed2:	b162      	cbz	r2, 16eee <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16ed4:	2200      	movs	r2, #0
   16ed6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   16eda:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   16ede:	f44f 7280 	mov.w	r2, #256	; 0x100
   16ee2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   16ee6:	4b10      	ldr	r3, [pc, #64]	; (16f28 <nrfx_power_clock_irq_handler+0xa8>)
   16ee8:	2004      	movs	r0, #4
   16eea:	681b      	ldr	r3, [r3, #0]
   16eec:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16eee:	4b0d      	ldr	r3, [pc, #52]	; (16f24 <nrfx_power_clock_irq_handler+0xa4>)
   16ef0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   16ef4:	b1aa      	cbz	r2, 16f22 <nrfx_power_clock_irq_handler+0xa2>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   16ef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16efa:	2200      	movs	r2, #0
   16efc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   16f00:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   16f04:	f44f 7200 	mov.w	r2, #512	; 0x200
   16f08:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   16f0c:	4b06      	ldr	r3, [pc, #24]	; (16f28 <nrfx_power_clock_irq_handler+0xa8>)
   16f0e:	2005      	movs	r0, #5
   16f10:	681b      	ldr	r3, [r3, #0]
   16f12:	4718      	bx	r3
   16f14:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   16f18:	4b03      	ldr	r3, [pc, #12]	; (16f28 <nrfx_power_clock_irq_handler+0xa8>)
   16f1a:	2001      	movs	r0, #1
   16f1c:	681b      	ldr	r3, [r3, #0]
   16f1e:	4798      	blx	r3
   16f20:	e7d4      	b.n	16ecc <nrfx_power_clock_irq_handler+0x4c>
}
   16f22:	bd10      	pop	{r4, pc}
   16f24:	40005000 	.word	0x40005000
   16f28:	2000b0ac 	.word	0x2000b0ac

00016f2c <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   16f2c:	b570      	push	{r4, r5, r6, lr}
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   16f2e:	4c0a      	ldr	r4, [pc, #40]	; (16f58 <nrfx_dppi_channel_alloc+0x2c>)
   16f30:	6821      	ldr	r1, [r4, #0]
    uint8_t channel = 0;

    if (!remaining_channels)
   16f32:	43ce      	mvns	r6, r1
   16f34:	d00e      	beq.n	16f54 <nrfx_dppi_channel_alloc+0x28>
   16f36:	2300      	movs	r3, #0
   16f38:	b2da      	uxtb	r2, r3
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
   16f3a:	fa26 f502 	lsr.w	r5, r6, r2
   16f3e:	07ed      	lsls	r5, r5, #31
   16f40:	f103 0301 	add.w	r3, r3, #1
   16f44:	d5f8      	bpl.n	16f38 <nrfx_dppi_channel_alloc+0xc>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
   16f46:	2301      	movs	r3, #1
   16f48:	4093      	lsls	r3, r2
   16f4a:	430b      	orrs	r3, r1
    *p_channel = channel;
   16f4c:	7002      	strb	r2, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
   16f4e:	4803      	ldr	r0, [pc, #12]	; (16f5c <nrfx_dppi_channel_alloc+0x30>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
   16f50:	6023      	str	r3, [r4, #0]
}
   16f52:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
   16f54:	4802      	ldr	r0, [pc, #8]	; (16f60 <nrfx_dppi_channel_alloc+0x34>)
   16f56:	e7fc      	b.n	16f52 <nrfx_dppi_channel_alloc+0x26>
   16f58:	2000b0b4 	.word	0x2000b0b4
   16f5c:	0bad0000 	.word	0x0bad0000
   16f60:	0bad0002 	.word	0x0bad0002

00016f64 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   16f64:	2301      	movs	r3, #1
   16f66:	fa03 f000 	lsl.w	r0, r3, r0
   16f6a:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   16f6c:	b193      	cbz	r3, 16f94 <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
   16f6e:	f04f 0320 	mov.w	r3, #32
   16f72:	f3ef 8111 	mrs	r1, BASEPRI
   16f76:	f383 8811 	msr	BASEPRI, r3
   16f7a:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   16f7e:	4a06      	ldr	r2, [pc, #24]	; (16f98 <nrfx_gpiote_channel_free+0x34>)
   16f80:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   16f82:	ea23 0000 	bic.w	r0, r3, r0
   16f86:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   16f88:	f381 8811 	msr	BASEPRI, r1
   16f8c:	f3bf 8f6f 	isb	sy
   16f90:	4802      	ldr	r0, [pc, #8]	; (16f9c <nrfx_gpiote_channel_free+0x38>)
   16f92:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   16f94:	4802      	ldr	r0, [pc, #8]	; (16fa0 <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   16f96:	4770      	bx	lr
   16f98:	2000b0b8 	.word	0x2000b0b8
   16f9c:	0bad0000 	.word	0x0bad0000
   16fa0:	0bad0004 	.word	0x0bad0004

00016fa4 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   16fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   16fa8:	22ff      	movs	r2, #255	; 0xff
{
   16faa:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
   16fac:	2601      	movs	r6, #1
{
   16fae:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   16fb0:	f8df e054 	ldr.w	lr, [pc, #84]	; 17008 <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   16fb4:	4815      	ldr	r0, [pc, #84]	; (1700c <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   16fb6:	f8df 8058 	ldr.w	r8, [pc, #88]	; 17010 <nrfx_gpiote_channel_alloc+0x6c>
   16fba:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   16fbc:	f04f 0120 	mov.w	r1, #32
   16fc0:	f3ef 8c11 	mrs	ip, BASEPRI
   16fc4:	f381 8811 	msr	BASEPRI, r1
   16fc8:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   16fcc:	fa22 f103 	lsr.w	r1, r2, r3
   16fd0:	07c9      	lsls	r1, r1, #31
   16fd2:	d50a      	bpl.n	16fea <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   16fd4:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   16fd8:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   16fdc:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
   16fde:	bf01      	itttt	eq
   16fe0:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
   16fe2:	4339      	orreq	r1, r7
   16fe4:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            *p_channel = ch_idx;
   16fe8:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   16fea:	f38c 8811 	msr	BASEPRI, ip
   16fee:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   16ff2:	4540      	cmp	r0, r8
   16ff4:	d005      	beq.n	17002 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   16ff6:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   16ffa:	439a      	bics	r2, r3
   16ffc:	f104 0401 	add.w	r4, r4, #1
   17000:	d1db      	bne.n	16fba <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   17002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17006:	bf00      	nop
   17008:	2000b0b8 	.word	0x2000b0b8
   1700c:	0bad0002 	.word	0x0bad0002
   17010:	0bad0000 	.word	0x0bad0000

00017014 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   17014:	b570      	push	{r4, r5, r6, lr}
   17016:	4616      	mov	r6, r2
    NRFX_ASSERT(handler);
   17018:	460d      	mov	r5, r1
   1701a:	b941      	cbnz	r1, 1702e <nrfx_ipc_init+0x1a>
   1701c:	490b      	ldr	r1, [pc, #44]	; (1704c <nrfx_ipc_init+0x38>)
   1701e:	480c      	ldr	r0, [pc, #48]	; (17050 <nrfx_ipc_init+0x3c>)
   17020:	2232      	movs	r2, #50	; 0x32
   17022:	f003 fc25 	bl	1a870 <printk>
   17026:	2132      	movs	r1, #50	; 0x32
   17028:	4808      	ldr	r0, [pc, #32]	; (1704c <nrfx_ipc_init+0x38>)
   1702a:	f003 fec7 	bl	1adbc <assert_post_action>
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1702e:	4c09      	ldr	r4, [pc, #36]	; (17054 <nrfx_ipc_init+0x40>)
   17030:	7923      	ldrb	r3, [r4, #4]
   17032:	b943      	cbnz	r3, 17046 <nrfx_ipc_init+0x32>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   17034:	202a      	movs	r0, #42	; 0x2a
   17036:	f7f6 fccd 	bl	d9d4 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1703a:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   1703c:	4806      	ldr	r0, [pc, #24]	; (17058 <nrfx_ipc_init+0x44>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1703e:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   17040:	6025      	str	r5, [r4, #0]
    m_ipc_cb.p_context = p_context;
   17042:	60a6      	str	r6, [r4, #8]
}
   17044:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   17046:	4805      	ldr	r0, [pc, #20]	; (1705c <nrfx_ipc_init+0x48>)
   17048:	e7fc      	b.n	17044 <nrfx_ipc_init+0x30>
   1704a:	bf00      	nop
   1704c:	000229ca 	.word	0x000229ca
   17050:	0001fdfa 	.word	0x0001fdfa
   17054:	2000b118 	.word	0x2000b118
   17058:	0bad0000 	.word	0x0bad0000
   1705c:	0bad000c 	.word	0x0bad000c

00017060 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   17060:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   17062:	4604      	mov	r4, r0
   17064:	b940      	cbnz	r0, 17078 <nrfx_ipc_config_load+0x18>
   17066:	4919      	ldr	r1, [pc, #100]	; (170cc <nrfx_ipc_config_load+0x6c>)
   17068:	4819      	ldr	r0, [pc, #100]	; (170d0 <nrfx_ipc_config_load+0x70>)
   1706a:	2244      	movs	r2, #68	; 0x44
   1706c:	f003 fc00 	bl	1a870 <printk>
   17070:	2144      	movs	r1, #68	; 0x44
   17072:	4816      	ldr	r0, [pc, #88]	; (170cc <nrfx_ipc_config_load+0x6c>)
   17074:	f003 fea2 	bl	1adbc <assert_post_action>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   17078:	4b16      	ldr	r3, [pc, #88]	; (170d4 <nrfx_ipc_config_load+0x74>)
   1707a:	791b      	ldrb	r3, [r3, #4]
   1707c:	2b01      	cmp	r3, #1
   1707e:	d008      	beq.n	17092 <nrfx_ipc_config_load+0x32>
   17080:	4912      	ldr	r1, [pc, #72]	; (170cc <nrfx_ipc_config_load+0x6c>)
   17082:	4813      	ldr	r0, [pc, #76]	; (170d0 <nrfx_ipc_config_load+0x70>)
   17084:	2245      	movs	r2, #69	; 0x45
   17086:	f003 fbf3 	bl	1a870 <printk>
   1708a:	2145      	movs	r1, #69	; 0x45
   1708c:	480f      	ldr	r0, [pc, #60]	; (170cc <nrfx_ipc_config_load+0x6c>)
   1708e:	f003 fe95 	bl	1adbc <assert_post_action>
{
   17092:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   17094:	4a10      	ldr	r2, [pc, #64]	; (170d8 <nrfx_ipc_config_load+0x78>)

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   17096:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   1709a:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1709e:	3301      	adds	r3, #1
   170a0:	2b10      	cmp	r3, #16
   170a2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   170a6:	d1f6      	bne.n	17096 <nrfx_ipc_config_load+0x36>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   170a8:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   170aa:	4a0b      	ldr	r2, [pc, #44]	; (170d8 <nrfx_ipc_config_load+0x78>)
   170ac:	f104 0140 	add.w	r1, r4, #64	; 0x40
   170b0:	f503 70b2 	add.w	r0, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   170b4:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
   170b8:	3301      	adds	r3, #1
   170ba:	2b10      	cmp	r3, #16
   170bc:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   170c0:	d1f6      	bne.n	170b0 <nrfx_ipc_config_load+0x50>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   170c2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    p_reg->INTENSET = mask;
   170c6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   170ca:	bd38      	pop	{r3, r4, r5, pc}
   170cc:	000229ca 	.word	0x000229ca
   170d0:	0001fdfa 	.word	0x0001fdfa
   170d4:	2000b118 	.word	0x2000b118
   170d8:	4002a000 	.word	0x4002a000

000170dc <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   170dc:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   170de:	4b0a      	ldr	r3, [pc, #40]	; (17108 <nrfx_ipc_receive_event_enable+0x2c>)
{
   170e0:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   170e2:	791b      	ldrb	r3, [r3, #4]
   170e4:	2b01      	cmp	r3, #1
   170e6:	d008      	beq.n	170fa <nrfx_ipc_receive_event_enable+0x1e>
   170e8:	4908      	ldr	r1, [pc, #32]	; (1710c <nrfx_ipc_receive_event_enable+0x30>)
   170ea:	4809      	ldr	r0, [pc, #36]	; (17110 <nrfx_ipc_receive_event_enable+0x34>)
   170ec:	226a      	movs	r2, #106	; 0x6a
   170ee:	f003 fbbf 	bl	1a870 <printk>
   170f2:	216a      	movs	r1, #106	; 0x6a
   170f4:	4805      	ldr	r0, [pc, #20]	; (1710c <nrfx_ipc_receive_event_enable+0x30>)
   170f6:	f003 fe61 	bl	1adbc <assert_post_action>
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   170fa:	2301      	movs	r3, #1
   170fc:	fa03 f404 	lsl.w	r4, r3, r4
   17100:	4b04      	ldr	r3, [pc, #16]	; (17114 <nrfx_ipc_receive_event_enable+0x38>)
   17102:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
   17106:	bd10      	pop	{r4, pc}
   17108:	2000b118 	.word	0x2000b118
   1710c:	000229ca 	.word	0x000229ca
   17110:	0001fdfa 	.word	0x0001fdfa
   17114:	4002a000 	.word	0x4002a000

00017118 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   17118:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1711a:	4b0a      	ldr	r3, [pc, #40]	; (17144 <nrfx_ipc_receive_event_disable+0x2c>)
{
   1711c:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1711e:	791b      	ldrb	r3, [r3, #4]
   17120:	2b01      	cmp	r3, #1
   17122:	d008      	beq.n	17136 <nrfx_ipc_receive_event_disable+0x1e>
   17124:	4908      	ldr	r1, [pc, #32]	; (17148 <nrfx_ipc_receive_event_disable+0x30>)
   17126:	4809      	ldr	r0, [pc, #36]	; (1714c <nrfx_ipc_receive_event_disable+0x34>)
   17128:	2270      	movs	r2, #112	; 0x70
   1712a:	f003 fba1 	bl	1a870 <printk>
   1712e:	2170      	movs	r1, #112	; 0x70
   17130:	4805      	ldr	r0, [pc, #20]	; (17148 <nrfx_ipc_receive_event_disable+0x30>)
   17132:	f003 fe43 	bl	1adbc <assert_post_action>
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   17136:	2301      	movs	r3, #1
   17138:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENCLR = mask;
   1713c:	4b04      	ldr	r3, [pc, #16]	; (17150 <nrfx_ipc_receive_event_disable+0x38>)
   1713e:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
}
   17142:	bd10      	pop	{r4, pc}
   17144:	2000b118 	.word	0x2000b118
   17148:	000229ca 	.word	0x000229ca
   1714c:	0001fdfa 	.word	0x0001fdfa
   17150:	4002a000 	.word	0x4002a000

00017154 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
   17154:	4b15      	ldr	r3, [pc, #84]	; (171ac <nrfx_ipc_irq_handler+0x58>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   17156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1715a:	f8d3 630c 	ldr.w	r6, [r3, #780]	; 0x30c
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   1715e:	4f14      	ldr	r7, [pc, #80]	; (171b0 <nrfx_ipc_irq_handler+0x5c>)
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);

    // Clear these events
    uint32_t bitmask = events_map;
   17160:	4635      	mov	r5, r6
   17162:	f8df 8050 	ldr.w	r8, [pc, #80]	; 171b4 <nrfx_ipc_irq_handler+0x60>
    while (bitmask)
   17166:	b935      	cbnz	r5, 17176 <nrfx_ipc_irq_handler+0x22>
        bitmask &= ~(1UL << event_idx);
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   17168:	4b13      	ldr	r3, [pc, #76]	; (171b8 <nrfx_ipc_irq_handler+0x64>)
   1716a:	4630      	mov	r0, r6
}
   1716c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   17170:	681a      	ldr	r2, [r3, #0]
   17172:	6899      	ldr	r1, [r3, #8]
   17174:	4710      	bx	r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   17176:	fa95 f4a5 	rbit	r4, r5
        bitmask &= ~(1UL << event_idx);
   1717a:	2301      	movs	r3, #1
  return __builtin_clz(value);
   1717c:	fab4 f484 	clz	r4, r4
   17180:	40a3      	lsls	r3, r4
   17182:	2c0f      	cmp	r4, #15
   17184:	ea25 0503 	bic.w	r5, r5, r3
   17188:	d90a      	bls.n	171a0 <nrfx_ipc_irq_handler+0x4c>
   1718a:	4639      	mov	r1, r7
   1718c:	4640      	mov	r0, r8
   1718e:	f240 12e5 	movw	r2, #485	; 0x1e5
   17192:	f003 fb6d 	bl	1a870 <printk>
   17196:	f240 11e5 	movw	r1, #485	; 0x1e5
   1719a:	4638      	mov	r0, r7
   1719c:	f003 fe0e 	bl	1adbc <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   171a0:	2200      	movs	r2, #0
   171a2:	4b06      	ldr	r3, [pc, #24]	; (171bc <nrfx_ipc_irq_handler+0x68>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   171a4:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   171a6:	511a      	str	r2, [r3, r4]
}
   171a8:	e7dd      	b.n	17166 <nrfx_ipc_irq_handler+0x12>
   171aa:	bf00      	nop
   171ac:	4002a000 	.word	0x4002a000
   171b0:	00022a05 	.word	0x00022a05
   171b4:	0001fdfa 	.word	0x0001fdfa
   171b8:	2000b118 	.word	0x2000b118
   171bc:	4002a100 	.word	0x4002a100

000171c0 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   171c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   171c4:	460e      	mov	r6, r1
   171c6:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   171c8:	4d0c      	ldr	r5, [pc, #48]	; (171fc <metal_generic_dev_open+0x3c>)
   171ca:	f855 4f18 	ldr.w	r4, [r5, #24]!
   171ce:	42ac      	cmp	r4, r5
   171d0:	d103      	bne.n	171da <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   171d2:	f06f 0012 	mvn.w	r0, #18
   171d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   171da:	4631      	mov	r1, r6
   171dc:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   171e0:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   171e4:	f004 fd5a 	bl	1bc9c <strcmp>
   171e8:	b930      	cbnz	r0, 171f8 <metal_generic_dev_open+0x38>
			return metal_generic_dev_sys_open(dev);
   171ea:	4640      	mov	r0, r8
			*device = dev;
   171ec:	f8c7 8000 	str.w	r8, [r7]
}
   171f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   171f4:	f006 bb8f 	b.w	1d916 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   171f8:	6824      	ldr	r4, [r4, #0]
   171fa:	e7e8      	b.n	171ce <metal_generic_dev_open+0xe>
   171fc:	2000b124 	.word	0x2000b124

00017200 <metal_bus_find>:
{
   17200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17204:	4607      	mov	r7, r0
   17206:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   17208:	4e0b      	ldr	r6, [pc, #44]	; (17238 <metal_bus_find+0x38>)
   1720a:	f856 4f08 	ldr.w	r4, [r6, #8]!
   1720e:	42b4      	cmp	r4, r6
   17210:	d102      	bne.n	17218 <metal_bus_find+0x18>
	return -ENOENT;
   17212:	f06f 0001 	mvn.w	r0, #1
   17216:	e00a      	b.n	1722e <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   17218:	4639      	mov	r1, r7
   1721a:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   1721e:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   17222:	f004 fd3b 	bl	1bc9c <strcmp>
   17226:	b920      	cbnz	r0, 17232 <metal_bus_find+0x32>
   17228:	b11d      	cbz	r5, 17232 <metal_bus_find+0x32>
			*result = bus;
   1722a:	f8c5 8000 	str.w	r8, [r5]
}
   1722e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   17232:	6824      	ldr	r4, [r4, #0]
   17234:	e7eb      	b.n	1720e <metal_bus_find+0xe>
   17236:	bf00      	nop
   17238:	2000b124 	.word	0x2000b124

0001723c <metal_bus_register>:
{
   1723c:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   1723e:	4604      	mov	r4, r0
   17240:	b910      	cbnz	r0, 17248 <metal_bus_register+0xc>
		return -EINVAL;
   17242:	f06f 0015 	mvn.w	r0, #21
}
   17246:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   17248:	6800      	ldr	r0, [r0, #0]
   1724a:	2800      	cmp	r0, #0
   1724c:	d0f9      	beq.n	17242 <metal_bus_register+0x6>
   1724e:	f004 fd15 	bl	1bc7c <strlen>
   17252:	2800      	cmp	r0, #0
   17254:	d0f5      	beq.n	17242 <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   17256:	2100      	movs	r1, #0
   17258:	6820      	ldr	r0, [r4, #0]
   1725a:	f7ff ffd1 	bl	17200 <metal_bus_find>
   1725e:	b1c0      	cbz	r0, 17292 <metal_bus_register+0x56>
	metal_list_init(&bus->devices);
   17260:	f104 031c 	add.w	r3, r4, #28
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
	list->prev = list;
	list->next = list;
   17264:	e9c4 3307 	strd	r3, r3, [r4, #28]
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
	new_node->prev = node->prev;
   17268:	4b0c      	ldr	r3, [pc, #48]	; (1729c <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   1726a:	f104 0224 	add.w	r2, r4, #36	; 0x24
   1726e:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   17270:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   17274:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   17276:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   17278:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   1727a:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   1727c:	781a      	ldrb	r2, [r3, #0]
   1727e:	2a06      	cmp	r2, #6
   17280:	d905      	bls.n	1728e <metal_bus_register+0x52>
   17282:	685b      	ldr	r3, [r3, #4]
   17284:	b143      	cbz	r3, 17298 <metal_bus_register+0x5c>
   17286:	2007      	movs	r0, #7
   17288:	6822      	ldr	r2, [r4, #0]
   1728a:	4905      	ldr	r1, [pc, #20]	; (172a0 <metal_bus_register+0x64>)
   1728c:	4798      	blx	r3
	return 0;
   1728e:	2000      	movs	r0, #0
   17290:	e7d9      	b.n	17246 <metal_bus_register+0xa>
		return -EEXIST;
   17292:	f06f 0010 	mvn.w	r0, #16
   17296:	e7d6      	b.n	17246 <metal_bus_register+0xa>
	return 0;
   17298:	4618      	mov	r0, r3
   1729a:	e7d4      	b.n	17246 <metal_bus_register+0xa>
   1729c:	2000b124 	.word	0x2000b124
   172a0:	00022a37 	.word	0x00022a37

000172a4 <metal_register_generic_device>:
{
   172a4:	b510      	push	{r4, lr}
   172a6:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   172a8:	6800      	ldr	r0, [r0, #0]
   172aa:	b910      	cbnz	r0, 172b2 <metal_register_generic_device+0xe>
		return -EINVAL;
   172ac:	f06f 0015 	mvn.w	r0, #21
}
   172b0:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   172b2:	f004 fce3 	bl	1bc7c <strlen>
   172b6:	2800      	cmp	r0, #0
   172b8:	d0f8      	beq.n	172ac <metal_register_generic_device+0x8>
   172ba:	68a3      	ldr	r3, [r4, #8]
   172bc:	2b01      	cmp	r3, #1
   172be:	d8f5      	bhi.n	172ac <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   172c0:	4b06      	ldr	r3, [pc, #24]	; (172dc <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   172c2:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   172c6:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   172c8:	4b05      	ldr	r3, [pc, #20]	; (172e0 <metal_register_generic_device+0x3c>)
   172ca:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   172cc:	f103 0018 	add.w	r0, r3, #24
   172d0:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   172d2:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   172d4:	61d9      	str	r1, [r3, #28]
	return 0;
   172d6:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   172d8:	6011      	str	r1, [r2, #0]
}
   172da:	e7e9      	b.n	172b0 <metal_register_generic_device+0xc>
   172dc:	20008520 	.word	0x20008520
   172e0:	2000b124 	.word	0x2000b124

000172e4 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
   172e4:	b538      	push	{r3, r4, r5, lr}
   172e6:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   172e8:	4c0d      	ldr	r4, [pc, #52]	; (17320 <metal_init+0x3c>)
   172ea:	2220      	movs	r2, #32
   172ec:	4620      	mov	r0, r4
   172ee:	2100      	movs	r1, #0
   172f0:	f004 fd2d 	bl	1bd4e <memset>

	_metal.common.log_handler   = params->log_handler;
   172f4:	682b      	ldr	r3, [r5, #0]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   172f6:	4628      	mov	r0, r5
	_metal.common.log_handler   = params->log_handler;
   172f8:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
   172fa:	4623      	mov	r3, r4
   172fc:	792a      	ldrb	r2, [r5, #4]
   172fe:	f803 2b08 	strb.w	r2, [r3], #8
	list->next = list;
   17302:	e9c4 3302 	strd	r3, r3, [r4, #8]
	list->prev = list;
   17306:	f104 0310 	add.w	r3, r4, #16
	list->next = list;
   1730a:	e9c4 3304 	strd	r3, r3, [r4, #16]
	list->prev = list;
   1730e:	f104 0318 	add.w	r3, r4, #24
	list->next = list;
   17312:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (error)
		return error;

	return error;
}
   17316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	error = metal_sys_init(params);
   1731a:	f000 b803 	b.w	17324 <metal_sys_init>
   1731e:	bf00      	nop
   17320:	2000b124 	.word	0x2000b124

00017324 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   17324:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   17326:	4802      	ldr	r0, [pc, #8]	; (17330 <metal_sys_init+0xc>)
   17328:	f7ff ff88 	bl	1723c <metal_bus_register>
	return 0;
}
   1732c:	2000      	movs	r0, #0
   1732e:	bd08      	pop	{r3, pc}
   17330:	20008520 	.word	0x20008520

00017334 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   17334:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   17336:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   17338:	2b06      	cmp	r3, #6
{
   1733a:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   1733c:	bf88      	it	hi
   1733e:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   17340:	4b09      	ldr	r3, [pc, #36]	; (17368 <metal_zephyr_log_handler+0x34>)
{
   17342:	ac05      	add	r4, sp, #20
   17344:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   17348:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   1734c:	4807      	ldr	r0, [pc, #28]	; (1736c <metal_zephyr_log_handler+0x38>)
   1734e:	f003 fa8f 	bl	1a870 <printk>

	va_start(args, format);
	vprintk(format, args);
   17352:	4621      	mov	r1, r4
   17354:	4628      	mov	r0, r5
	va_start(args, format);
   17356:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   17358:	f7f3 f9b8 	bl	a6cc <vprintk>
	va_end(args);
}
   1735c:	b002      	add	sp, #8
   1735e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   17362:	b003      	add	sp, #12
   17364:	4770      	bx	lr
   17366:	bf00      	nop
   17368:	0001f0b4 	.word	0x0001f0b4
   1736c:	00021173 	.word	0x00021173

00017370 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   17370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17374:	b087      	sub	sp, #28
   17376:	9305      	str	r3, [sp, #20]
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   17378:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   1737a:	4605      	mov	r5, r0
	if (nvqs > num_vrings)
   1737c:	4293      	cmp	r3, r2
{
   1737e:	4616      	mov	r6, r2
	if (nvqs > num_vrings)
   17380:	d349      	bcc.n	17416 <virtio_create_virtqueues+0xa6>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   17382:	2400      	movs	r4, #0
		vring_info = &vdev->vrings_info[i];
   17384:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   17388:	42b4      	cmp	r4, r6
   1738a:	d103      	bne.n	17394 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   1738c:	2000      	movs	r0, #0
}
   1738e:	b007      	add	sp, #28
   17390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   17394:	fb0b f704 	mul.w	r7, fp, r4
   17398:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_MASTER) {
   1739c:	69aa      	ldr	r2, [r5, #24]
		vring_info = &vdev->vrings_info[i];
   1739e:	eb08 0c07 	add.w	ip, r8, r7
		vring_alloc = &vring_info->info;
   173a2:	f10c 0904 	add.w	r9, ip, #4
		if (vdev->role == VIRTIO_DEV_MASTER) {
   173a6:	bb02      	cbnz	r2, 173ea <virtio_create_virtqueues+0x7a>
			struct metal_io_region *io = vring_info->io;
   173a8:	f8dc 0014 	ldr.w	r0, [ip, #20]
			metal_io_block_set(io, offset, 0,
   173ac:	f8bc e00c 	ldrh.w	lr, [ip, #12]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   173b0:	f8dc 3004 	ldr.w	r3, [ip, #4]
   173b4:	6801      	ldr	r1, [r0, #0]
						      vring_alloc->align));
   173b6:	f8dc c008 	ldr.w	ip, [ip, #8]
   173ba:	1a59      	subs	r1, r3, r1
	int size;

	size = num * sizeof(struct vring_desc);
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
   173bc:	f10c 33ff 	add.w	r3, ip, #4294967295
   173c0:	eb03 130e 	add.w	r3, r3, lr, lsl #4
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   173c4:	f10e 0a03 	add.w	sl, lr, #3
	size = (size + align - 1) & ~(align - 1);
   173c8:	f1cc 0c00 	rsb	ip, ip, #0
   173cc:	eb03 034a 	add.w	r3, r3, sl, lsl #1
   173d0:	ea03 030c 	and.w	r3, r3, ip
			metal_io_block_set(io, offset, 0,
   173d4:	f8d0 c008 	ldr.w	ip, [r0, #8]
	size += sizeof(struct vring_used) +
   173d8:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
   173dc:	4561      	cmp	r1, ip
   173de:	bf28      	it	cs
   173e0:	f04f 31ff 	movcs.w	r1, #4294967295
   173e4:	3306      	adds	r3, #6
   173e6:	f006 fa5d 	bl	1d8a4 <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   173ea:	f858 3007 	ldr.w	r3, [r8, r7]
   173ee:	9a05      	ldr	r2, [sp, #20]
   173f0:	9302      	str	r3, [sp, #8]
   173f2:	6a2b      	ldr	r3, [r5, #32]
   173f4:	4628      	mov	r0, r5
   173f6:	6a1b      	ldr	r3, [r3, #32]
   173f8:	b2a1      	uxth	r1, r4
   173fa:	9301      	str	r3, [sp, #4]
   173fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   173fe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   17402:	9300      	str	r3, [sp, #0]
   17404:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
   17408:	464b      	mov	r3, r9
   1740a:	f006 faa1 	bl	1d950 <virtqueue_create>
		if (ret)
   1740e:	2800      	cmp	r0, #0
   17410:	d1bd      	bne.n	1738e <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   17412:	3401      	adds	r4, #1
   17414:	e7b8      	b.n	17388 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   17416:	4801      	ldr	r0, [pc, #4]	; (1741c <virtio_create_virtqueues+0xac>)
   17418:	e7b9      	b.n	1738e <virtio_create_virtqueues+0x1e>
   1741a:	bf00      	nop
   1741c:	fffff440 	.word	0xfffff440

00017420 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   17420:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
   17422:	8944      	ldrh	r4, [r0, #10]
   17424:	428c      	cmp	r4, r1
   17426:	d312      	bcc.n	1744e <virtqueue_add_consumed_buffer+0x2e>
		return ERROR_VRING_NO_BUFF;
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   17428:	6a03      	ldr	r3, [r0, #32]
   1742a:	3c01      	subs	r4, #1
   1742c:	885d      	ldrh	r5, [r3, #2]
   1742e:	402c      	ands	r4, r5
   17430:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
	used_desc->len = len;
   17434:	609a      	str	r2, [r3, #8]
	used_desc->id = head_idx;
   17436:	6059      	str	r1, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   17438:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   1743c:	6a02      	ldr	r2, [r0, #32]
   1743e:	8853      	ldrh	r3, [r2, #2]
   17440:	3301      	adds	r3, #1
   17442:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   17444:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   17446:	3301      	adds	r3, #1
   17448:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   1744a:	2000      	movs	r0, #0
}
   1744c:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   1744e:	4801      	ldr	r0, [pc, #4]	; (17454 <virtqueue_add_consumed_buffer+0x34>)
   17450:	e7fc      	b.n	1744c <virtqueue_add_consumed_buffer+0x2c>
   17452:	bf00      	nop
   17454:	fffff441 	.word	0xfffff441

00017458 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
   17458:	b4f0      	push	{r4, r5, r6, r7}
   1745a:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   1745c:	b148      	cbz	r0, 17472 <rpmsg_send_offchannel_raw+0x1a>
   1745e:	6a00      	ldr	r0, [r0, #32]
   17460:	b138      	cbz	r0, 17472 <rpmsg_send_offchannel_raw+0x1a>
   17462:	b133      	cbz	r3, 17472 <rpmsg_send_offchannel_raw+0x1a>
   17464:	3401      	adds	r4, #1
   17466:	d004      	beq.n	17472 <rpmsg_send_offchannel_raw+0x1a>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   17468:	6f44      	ldr	r4, [r0, #116]	; 0x74
   1746a:	b114      	cbz	r4, 17472 <rpmsg_send_offchannel_raw+0x1a>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   1746c:	46a4      	mov	ip, r4
						      size, wait);

	return RPMSG_ERR_PARAM;
}
   1746e:	bcf0      	pop	{r4, r5, r6, r7}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   17470:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   17472:	4801      	ldr	r0, [pc, #4]	; (17478 <rpmsg_send_offchannel_raw+0x20>)
}
   17474:	bcf0      	pop	{r4, r5, r6, r7}
   17476:	4770      	bx	lr
   17478:	fffff82d 	.word	0xfffff82d

0001747c <rpmsg_create_ept>:
}

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   1747c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17480:	460e      	mov	r6, r1
   17482:	4690      	mov	r8, r2
   17484:	461c      	mov	r4, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept)
   17486:	4605      	mov	r5, r0
   17488:	2800      	cmp	r0, #0
   1748a:	d06a      	beq.n	17562 <rpmsg_create_ept+0xe6>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   1748c:	f101 0758 	add.w	r7, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   17490:	4638      	mov	r0, r7
   17492:	f006 fbef 	bl	1dc74 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   17496:	1c63      	adds	r3, r4, #1
   17498:	d11a      	bne.n	174d0 <rpmsg_create_ept+0x54>
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
   1749a:	2300      	movs	r3, #0
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   1749c:	f106 0048 	add.w	r0, r6, #72	; 0x48
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   174a0:	095a      	lsrs	r2, r3, #5
   174a2:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
   174a6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   174aa:	f003 011f 	and.w	r1, r3, #31
   174ae:	fa22 f401 	lsr.w	r4, r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   174b2:	07e4      	lsls	r4, r4, #31
   174b4:	d407      	bmi.n	174c6 <rpmsg_create_ept+0x4a>
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   174b6:	f503 6480 	add.w	r4, r3, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   174ba:	2301      	movs	r3, #1
   174bc:	408b      	lsls	r3, r1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   174be:	4313      	orrs	r3, r2
   174c0:	f8cc 3000 	str.w	r3, [ip]
		if (addr == RPMSG_ADDR_ANY) {
   174c4:	e01d      	b.n	17502 <rpmsg_create_ept+0x86>
	     bit++)
   174c6:	3301      	adds	r3, #1
	for (bit = start;
   174c8:	2b80      	cmp	r3, #128	; 0x80
   174ca:	d1e9      	bne.n	174a0 <rpmsg_create_ept+0x24>
			status = RPMSG_ERR_ADDR;
   174cc:	4c27      	ldr	r4, [pc, #156]	; (1756c <rpmsg_create_ept+0xf0>)
   174ce:	e044      	b.n	1755a <rpmsg_create_ept+0xde>
			goto ret_status;
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   174d0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   174d4:	d315      	bcc.n	17502 <rpmsg_create_ept+0x86>
	addr -= RPMSG_RESERVED_ADDRESSES;
   174d6:	f5a4 6380 	sub.w	r3, r4, #1024	; 0x400
	if (addr >= 0 && addr < size)
   174da:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   174dc:	f106 0148 	add.w	r1, r6, #72	; 0x48
	if (addr >= 0 && addr < size)
   174e0:	d83a      	bhi.n	17558 <rpmsg_create_ept+0xdc>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   174e2:	0958      	lsrs	r0, r3, #5
   174e4:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   174e8:	f003 031f 	and.w	r3, r3, #31
   174ec:	fa2c f203 	lsr.w	r2, ip, r3
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
   174f0:	07d2      	lsls	r2, r2, #31
   174f2:	d4eb      	bmi.n	174cc <rpmsg_create_ept+0x50>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   174f4:	2201      	movs	r2, #1
   174f6:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   174fa:	ea43 030c 	orr.w	r3, r3, ip
   174fe:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   17502:	491b      	ldr	r1, [pc, #108]	; (17570 <rpmsg_create_ept+0xf4>)
   17504:	2220      	movs	r2, #32
   17506:	f1b8 0f00 	cmp.w	r8, #0
   1750a:	bf18      	it	ne
   1750c:	4641      	movne	r1, r8
   1750e:	4628      	mov	r0, r5
   17510:	f004 fba2 	bl	1bc58 <strncpy>
	ept->addr = src;
	ept->dest_addr = dest;
   17514:	9b06      	ldr	r3, [sp, #24]
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_initialize_ept(ept, name, addr, dest, cb, unbind_cb);
	rpmsg_register_endpoint(rdev, ept);
   17516:	4629      	mov	r1, r5
   17518:	62ab      	str	r3, [r5, #40]	; 0x28
	ept->cb = cb;
   1751a:	9b07      	ldr	r3, [sp, #28]
   1751c:	4630      	mov	r0, r6
   1751e:	62eb      	str	r3, [r5, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   17520:	9b08      	ldr	r3, [sp, #32]
	ept->addr = src;
   17522:	626c      	str	r4, [r5, #36]	; 0x24
	ept->ns_unbind_cb = ns_unbind_cb;
   17524:	632b      	str	r3, [r5, #48]	; 0x30
   17526:	f006 fc1f 	bl	1dd68 <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   1752a:	4638      	mov	r0, r7
   1752c:	f001 ffc8 	bl	194c0 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   17530:	782c      	ldrb	r4, [r5, #0]
   17532:	b174      	cbz	r4, 17552 <rpmsg_create_ept+0xd6>
   17534:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
   17538:	b15c      	cbz	r4, 17552 <rpmsg_create_ept+0xd6>
   1753a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1753c:	3301      	adds	r3, #1
   1753e:	d112      	bne.n	17566 <rpmsg_create_ept+0xea>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   17540:	2100      	movs	r1, #0
   17542:	4628      	mov	r0, r5
   17544:	f006 fbc7 	bl	1dcd6 <rpmsg_send_ns_message>

	if (status)
   17548:	4604      	mov	r4, r0
   1754a:	b110      	cbz	r0, 17552 <rpmsg_create_ept+0xd6>
		rpmsg_unregister_endpoint(ept);
   1754c:	4628      	mov	r0, r5
   1754e:	f006 fb97 	bl	1dc80 <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   17552:	4620      	mov	r0, r4
   17554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17558:	4c06      	ldr	r4, [pc, #24]	; (17574 <rpmsg_create_ept+0xf8>)
   1755a:	4638      	mov	r0, r7
   1755c:	f001 ffb0 	bl	194c0 <z_impl_k_sem_give>
}
   17560:	e7f7      	b.n	17552 <rpmsg_create_ept+0xd6>
		return RPMSG_ERR_PARAM;
   17562:	4c04      	ldr	r4, [pc, #16]	; (17574 <rpmsg_create_ept+0xf8>)
   17564:	e7f5      	b.n	17552 <rpmsg_create_ept+0xd6>
   17566:	2400      	movs	r4, #0
   17568:	e7f3      	b.n	17552 <rpmsg_create_ept+0xd6>
   1756a:	bf00      	nop
   1756c:	fffff829 	.word	0xfffff829
   17570:	00022b59 	.word	0x00022b59
   17574:	fffff82d 	.word	0xfffff82d

00017578 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
   17578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1757c:	4605      	mov	r5, r0
   1757e:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   17580:	469b      	mov	fp, r3
	rvdev->vdev->func->set_status(rvdev->vdev, status);
}

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_status(rvdev->vdev);
   17582:	6a03      	ldr	r3, [r0, #32]
   17584:	b08d      	sub	sp, #52	; 0x34
   17586:	681b      	ldr	r3, [r3, #0]
   17588:	4692      	mov	sl, r2
   1758a:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
   1758e:	9103      	str	r1, [sp, #12]
   17590:	4798      	blx	r3
	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	status = rpmsg_virtio_get_status(rvdev);
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
   17592:	0743      	lsls	r3, r0, #29
   17594:	d57b      	bpl.n	1768e <rpmsg_virtio_send_offchannel_raw+0x116>
		return RPMSG_ERR_DEV_STATE;
	}

	if (wait)
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   17596:	f643 2398 	movw	r3, #15000	; 0x3a98
   1759a:	2f00      	cmp	r7, #0
   1759c:	bf18      	it	ne
   1759e:	461f      	movne	r7, r3

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
   175a0:	f105 0858 	add.w	r8, r5, #88	; 0x58
   175a4:	4640      	mov	r0, r8
   175a6:	f006 fc03 	bl	1ddb0 <__metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
   175aa:	4628      	mov	r0, r5
   175ac:	f006 fcc5 	bl	1df3a <_rpmsg_virtio_get_buffer_size>
		if (avail_size && size > avail_size) {
   175b0:	4681      	mov	r9, r0
   175b2:	b130      	cbz	r0, 175c2 <rpmsg_virtio_send_offchannel_raw+0x4a>
   175b4:	42b0      	cmp	r0, r6
   175b6:	da04      	bge.n	175c2 <rpmsg_virtio_send_offchannel_raw+0x4a>
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   175b8:	4640      	mov	r0, r8
   175ba:	f006 fbf7 	bl	1ddac <k_sem_give>
		buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len, &idx);
		metal_mutex_release(&rdev->lock);
		if (buffer || !tick_count)
			break;
		if (avail_size != 0)
			return RPMSG_ERR_BUFF_SIZE;
   175be:	4e42      	ldr	r6, [pc, #264]	; (176c8 <rpmsg_virtio_send_offchannel_raw+0x150>)
   175c0:	e061      	b.n	17686 <rpmsg_virtio_send_offchannel_raw+0x10e>
	return rvdev->vdev->role;
   175c2:	6feb      	ldr	r3, [r5, #124]	; 0x7c
   175c4:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   175c6:	b9f3      	cbnz	r3, 17606 <rpmsg_virtio_send_offchannel_raw+0x8e>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   175c8:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   175cc:	f10d 0212 	add.w	r2, sp, #18
   175d0:	a905      	add	r1, sp, #20
   175d2:	f006 fa4d 	bl	1da70 <virtqueue_get_buffer>
		if (!data) {
   175d6:	4604      	mov	r4, r0
   175d8:	b948      	cbnz	r0, 175ee <rpmsg_virtio_send_offchannel_raw+0x76>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   175da:	f44f 7100 	mov.w	r1, #512	; 0x200
   175de:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
   175e2:	f006 fcbd 	bl	1df60 <rpmsg_virtio_shm_pool_get_buffer>
			*len = RPMSG_BUFFER_SIZE;
   175e6:	f44f 7300 	mov.w	r3, #512	; 0x200
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   175ea:	4604      	mov	r4, r0
			*len = RPMSG_BUFFER_SIZE;
   175ec:	9305      	str	r3, [sp, #20]
   175ee:	4640      	mov	r0, r8
   175f0:	f006 fbdc 	bl	1ddac <k_sem_give>
		if (buffer || !tick_count)
   175f4:	2c00      	cmp	r4, #0
   175f6:	d14e      	bne.n	17696 <rpmsg_virtio_send_offchannel_raw+0x11e>
   175f8:	2f00      	cmp	r7, #0
   175fa:	d04a      	beq.n	17692 <rpmsg_virtio_send_offchannel_raw+0x11a>
		if (avail_size != 0)
   175fc:	f1b9 0f00 	cmp.w	r9, #0
   17600:	d1dd      	bne.n	175be <rpmsg_virtio_send_offchannel_raw+0x46>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
		tick_count--;
   17602:	3f01      	subs	r7, #1
	while (1) {
   17604:	e7ce      	b.n	175a4 <rpmsg_virtio_send_offchannel_raw+0x2c>
	if (role == RPMSG_REMOTE) {
   17606:	2b01      	cmp	r3, #1
   17608:	d108      	bne.n	1761c <rpmsg_virtio_send_offchannel_raw+0xa4>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   1760a:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   1760e:	aa05      	add	r2, sp, #20
   17610:	f10d 0112 	add.w	r1, sp, #18
   17614:	f006 fa66 	bl	1dae4 <virtqueue_get_available_buffer>
   17618:	4604      	mov	r4, r0
   1761a:	e7e8      	b.n	175ee <rpmsg_virtio_send_offchannel_raw+0x76>
	void *data = NULL;
   1761c:	2400      	movs	r4, #0
   1761e:	e7e6      	b.n	175ee <rpmsg_virtio_send_offchannel_raw+0x76>
   17620:	683b      	ldr	r3, [r7, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   17622:	68b8      	ldr	r0, [r7, #8]
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");

	status = metal_io_block_write(io,
   17624:	f104 0110 	add.w	r1, r4, #16
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   17628:	1ac9      	subs	r1, r1, r3
   1762a:	4281      	cmp	r1, r0
   1762c:	bf28      	it	cs
   1762e:	f04f 31ff 	movcs.w	r1, #4294967295
   17632:	4633      	mov	r3, r6
   17634:	465a      	mov	r2, fp
   17636:	4638      	mov	r0, r7
   17638:	f006 f8f9 	bl	1d82e <metal_io_block_write>
				      metal_io_virt_to_offset(io,
						RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\r\n");
   1763c:	4286      	cmp	r6, r0
   1763e:	d000      	beq.n	17642 <rpmsg_virtio_send_offchannel_raw+0xca>
   17640:	e7fe      	b.n	17640 <rpmsg_virtio_send_offchannel_raw+0xc8>
   17642:	4640      	mov	r0, r8
   17644:	f006 fbb4 	bl	1ddb0 <__metal_mutex_acquire>
   17648:	6feb      	ldr	r3, [r5, #124]	; 0x7c
	metal_mutex_acquire(&rdev->lock);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
   1764a:	9a05      	ldr	r2, [sp, #20]
   1764c:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   1764e:	b953      	cbnz	r3, 17666 <rpmsg_virtio_send_offchannel_raw+0xee>
		vqbuf.len = len;
   17650:	e9cd 4206 	strd	r4, r2, [sp, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   17654:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   17658:	2201      	movs	r2, #1
   1765a:	9400      	str	r4, [sp, #0]
   1765c:	a906      	add	r1, sp, #24
   1765e:	f006 f9a7 	bl	1d9b0 <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   17662:	b148      	cbz	r0, 17678 <rpmsg_virtio_send_offchannel_raw+0x100>
   17664:	e7fe      	b.n	17664 <rpmsg_virtio_send_offchannel_raw+0xec>
	if (role == RPMSG_REMOTE) {
   17666:	2b01      	cmp	r3, #1
   17668:	d106      	bne.n	17678 <rpmsg_virtio_send_offchannel_raw+0x100>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   1766a:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   1766e:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   17672:	f7ff fed5 	bl	17420 <virtqueue_add_consumed_buffer>
   17676:	e7f4      	b.n	17662 <rpmsg_virtio_send_offchannel_raw+0xea>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
   17678:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   1767c:	f006 faac 	bl	1dbd8 <virtqueue_kick>
   17680:	4640      	mov	r0, r8
   17682:	f006 fb93 	bl	1ddac <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return size;
}
   17686:	4630      	mov	r0, r6
   17688:	b00d      	add	sp, #52	; 0x34
   1768a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return RPMSG_ERR_DEV_STATE;
   1768e:	4e0f      	ldr	r6, [pc, #60]	; (176cc <rpmsg_virtio_send_offchannel_raw+0x154>)
   17690:	e7f9      	b.n	17686 <rpmsg_virtio_send_offchannel_raw+0x10e>
		return RPMSG_ERR_NO_BUFF;
   17692:	4e0f      	ldr	r6, [pc, #60]	; (176d0 <rpmsg_virtio_send_offchannel_raw+0x158>)
   17694:	e7f7      	b.n	17686 <rpmsg_virtio_send_offchannel_raw+0x10e>
	rp_hdr.src = src;
   17696:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
   17698:	f8d5 7088 	ldr.w	r7, [r5, #136]	; 0x88
	rp_hdr.src = src;
   1769c:	9308      	str	r3, [sp, #32]
	rp_hdr.reserved = 0;
   1769e:	2300      	movs	r3, #0
   176a0:	6839      	ldr	r1, [r7, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   176a2:	68b8      	ldr	r0, [r7, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   176a4:	1a61      	subs	r1, r4, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   176a6:	4281      	cmp	r1, r0
   176a8:	bf28      	it	cs
   176aa:	f04f 31ff 	movcs.w	r1, #4294967295
	rp_hdr.reserved = 0;
   176ae:	930a      	str	r3, [sp, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   176b0:	4638      	mov	r0, r7
   176b2:	2310      	movs	r3, #16
   176b4:	aa08      	add	r2, sp, #32
	rp_hdr.dst = dst;
   176b6:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
	rp_hdr.len = size;
   176ba:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   176be:	f006 f8b6 	bl	1d82e <metal_io_block_write>
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   176c2:	2810      	cmp	r0, #16
   176c4:	d0ac      	beq.n	17620 <rpmsg_virtio_send_offchannel_raw+0xa8>
   176c6:	e7fe      	b.n	176c6 <rpmsg_virtio_send_offchannel_raw+0x14e>
   176c8:	fffff82b 	.word	0xfffff82b
   176cc:	fffff82c 	.word	0xfffff82c
   176d0:	fffff82e 	.word	0xfffff82e

000176d4 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
   176d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   176d8:	460d      	mov	r5, r1
   176da:	b088      	sub	sp, #32
   176dc:	4617      	mov	r7, r2
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
	memset(rdev, 0, sizeof(*rdev));
   176de:	2100      	movs	r1, #0
   176e0:	227c      	movs	r2, #124	; 0x7c
{
   176e2:	4604      	mov	r4, r0
   176e4:	461e      	mov	r6, r3
   176e6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	memset(rdev, 0, sizeof(*rdev));
   176ea:	f004 fb30 	bl	1bd4e <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   176ee:	2201      	movs	r2, #1
   176f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   176f4:	4611      	mov	r1, r2
   176f6:	f006 fcd0 	bl	1e09a <z_impl_k_sem_init>
   176fa:	f8d5 8018 	ldr.w	r8, [r5, #24]
	metal_mutex_init(&rdev->lock);
	rvdev->vdev = vdev;
	rdev->ns_bind_cb = ns_bind_cb;
	vdev->priv = rvdev;
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   176fe:	4b5d      	ldr	r3, [pc, #372]	; (17874 <rpmsg_init_vdev+0x1a0>)
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
   17700:	f1b8 0f01 	cmp.w	r8, #1
	rvdev->vdev = vdev;
   17704:	67e5      	str	r5, [r4, #124]	; 0x7c
	rdev->ns_bind_cb = ns_bind_cb;
   17706:	6727      	str	r7, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   17708:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   1770a:	6763      	str	r3, [r4, #116]	; 0x74
	if (role == RPMSG_REMOTE) {
   1770c:	d020      	beq.n	17750 <rpmsg_init_vdev+0x7c>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
   1770e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   17710:	6a03      	ldr	r3, [r0, #32]
   17712:	689b      	ldr	r3, [r3, #8]
   17714:	4798      	blx	r3
   17716:	2300      	movs	r3, #0
   17718:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   1771a:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   1771e:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   17720:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
   17724:	f1b8 0f00 	cmp.w	r8, #0
   17728:	d01e      	beq.n	17768 <rpmsg_init_vdev+0x94>
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
   1772a:	f1b8 0f01 	cmp.w	r8, #1
   1772e:	d133      	bne.n	17798 <rpmsg_init_vdev+0xc4>
		vq_names[0] = "tx_vq";
   17730:	4b51      	ldr	r3, [pc, #324]	; (17878 <rpmsg_init_vdev+0x1a4>)
   17732:	9302      	str	r3, [sp, #8]
		vq_names[1] = "rx_vq";
   17734:	4b51      	ldr	r3, [pc, #324]	; (1787c <rpmsg_init_vdev+0x1a8>)
   17736:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_tx_callback;
   17738:	4b51      	ldr	r3, [pc, #324]	; (17880 <rpmsg_init_vdev+0x1ac>)
   1773a:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_rx_callback;
   1773c:	4b51      	ldr	r3, [pc, #324]	; (17884 <rpmsg_init_vdev+0x1b0>)
   1773e:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   17740:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   17742:	699a      	ldr	r2, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   17744:	681b      	ldr	r3, [r3, #0]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   17746:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
   1774a:	e023      	b.n	17794 <rpmsg_init_vdev+0xc0>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   1774c:	0743      	lsls	r3, r0, #29
   1774e:	d4de      	bmi.n	1770e <rpmsg_init_vdev+0x3a>
		status = rpmsg_virtio_get_status(rvdev);
   17750:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	return rvdev->vdev->func->get_status(rvdev->vdev);
   17752:	6a03      	ldr	r3, [r0, #32]
   17754:	681b      	ldr	r3, [r3, #0]
   17756:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   17758:	0642      	lsls	r2, r0, #25
   1775a:	d5f7      	bpl.n	1774c <rpmsg_init_vdev+0x78>
			rpmsg_virtio_set_status(rvdev, 0);
   1775c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   1775e:	2100      	movs	r1, #0
   17760:	6a03      	ldr	r3, [r0, #32]
   17762:	685b      	ldr	r3, [r3, #4]
   17764:	4798      	blx	r3
}
   17766:	e7f3      	b.n	17750 <rpmsg_init_vdev+0x7c>
		if (!shpool)
   17768:	f1b9 0f00 	cmp.w	r9, #0
   1776c:	d07d      	beq.n	1786a <rpmsg_init_vdev+0x196>
		if (!shpool->size)
   1776e:	f8d9 3008 	ldr.w	r3, [r9, #8]
   17772:	2b00      	cmp	r3, #0
   17774:	d07b      	beq.n	1786e <rpmsg_init_vdev+0x19a>
		vq_names[0] = "rx_vq";
   17776:	4b41      	ldr	r3, [pc, #260]	; (1787c <rpmsg_init_vdev+0x1a8>)
		rvdev->shpool = shpool;
   17778:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
		vq_names[0] = "rx_vq";
   1777c:	9302      	str	r3, [sp, #8]
		vq_names[1] = "tx_vq";
   1777e:	4b3e      	ldr	r3, [pc, #248]	; (17878 <rpmsg_init_vdev+0x1a4>)
   17780:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_rx_callback;
   17782:	4b40      	ldr	r3, [pc, #256]	; (17884 <rpmsg_init_vdev+0x1b0>)
   17784:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_tx_callback;
   17786:	4b3e      	ldr	r3, [pc, #248]	; (17880 <rpmsg_init_vdev+0x1ac>)
   17788:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   1778a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1778c:	681a      	ldr	r2, [r3, #0]
		rvdev->svq  = vdev->vrings_info[1].vq;
   1778e:	699b      	ldr	r3, [r3, #24]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   17790:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
   17794:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   17798:	ab04      	add	r3, sp, #16
   1779a:	9300      	str	r3, [sp, #0]
   1779c:	2202      	movs	r2, #2
   1779e:	2100      	movs	r1, #0
   177a0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
   177a2:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
   177a6:	ab02      	add	r3, sp, #8
   177a8:	f7ff fde2 	bl	17370 <virtio_create_virtqueues>

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
   177ac:	4607      	mov	r7, r0
   177ae:	2800      	cmp	r0, #0
   177b0:	d157      	bne.n	17862 <rpmsg_init_vdev+0x18e>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
   177b2:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   177b6:	f006 f9e9 	bl	1db8c <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
   177ba:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		vq->shm_io = shm_io;
   177bc:	681a      	ldr	r2, [r3, #0]
   177be:	699b      	ldr	r3, [r3, #24]
   177c0:	6296      	str	r6, [r2, #40]	; 0x28
   177c2:	629e      	str	r6, [r3, #40]	; 0x28
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
   177c4:	f1b8 0f00 	cmp.w	r8, #0
   177c8:	d108      	bne.n	177dc <rpmsg_init_vdev+0x108>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
   177ca:	f44f 7300 	mov.w	r3, #512	; 0x200
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   177ce:	46c2      	mov	sl, r8
		vqbuf.len = RPMSG_BUFFER_SIZE;
   177d0:	9307      	str	r3, [sp, #28]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   177d2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   177d6:	895b      	ldrh	r3, [r3, #10]
   177d8:	4553      	cmp	r3, sl
   177da:	d81f      	bhi.n	1781c <rpmsg_init_vdev+0x148>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
   177dc:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   177e0:	e9c4 4400 	strd	r4, r4, [r4]
   177e4:	b18b      	cbz	r3, 1780a <rpmsg_init_vdev+0x136>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
   177e6:	f104 0508 	add.w	r5, r4, #8
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   177ea:	4927      	ldr	r1, [pc, #156]	; (17888 <rpmsg_init_vdev+0x1b4>)
   177ec:	2220      	movs	r2, #32
   177ee:	4628      	mov	r0, r5
   177f0:	f004 fa32 	bl	1bc58 <strncpy>
	ept->addr = src;
   177f4:	2335      	movs	r3, #53	; 0x35
	ept->dest_addr = dest;
   177f6:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
	ept->cb = cb;
   177fa:	4b24      	ldr	r3, [pc, #144]	; (1788c <rpmsg_init_vdev+0x1b8>)
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
   177fc:	4629      	mov	r1, r5
   177fe:	6363      	str	r3, [r4, #52]	; 0x34
	ept->ns_unbind_cb = ns_unbind_cb;
   17800:	2300      	movs	r3, #0
   17802:	4620      	mov	r0, r4
   17804:	63a3      	str	r3, [r4, #56]	; 0x38
   17806:	f006 faaf 	bl	1dd68 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
   1780a:	f1b8 0f00 	cmp.w	r8, #0
   1780e:	d128      	bne.n	17862 <rpmsg_init_vdev+0x18e>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   17810:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   17812:	2104      	movs	r1, #4
   17814:	6a03      	ldr	r3, [r0, #32]
   17816:	685b      	ldr	r3, [r3, #4]
   17818:	4798      	blx	r3
}
   1781a:	e022      	b.n	17862 <rpmsg_init_vdev+0x18e>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   1781c:	f44f 7100 	mov.w	r1, #512	; 0x200
   17820:	4648      	mov	r0, r9
   17822:	f006 fb9d 	bl	1df60 <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   17826:	4605      	mov	r5, r0
   17828:	b1c8      	cbz	r0, 1785e <rpmsg_init_vdev+0x18a>
   1782a:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   1782c:	9006      	str	r0, [sp, #24]
   1782e:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   17830:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   17832:	f44f 7300 	mov.w	r3, #512	; 0x200
   17836:	4281      	cmp	r1, r0
   17838:	bf28      	it	cs
   1783a:	f04f 31ff 	movcs.w	r1, #4294967295
   1783e:	2200      	movs	r2, #0
   17840:	4630      	mov	r0, r6
   17842:	f006 f82f 	bl	1d8a4 <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   17846:	2301      	movs	r3, #1
   17848:	2200      	movs	r2, #0
   1784a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   1784e:	9500      	str	r5, [sp, #0]
   17850:	a906      	add	r1, sp, #24
   17852:	f006 f8ad 	bl	1d9b0 <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   17856:	b918      	cbnz	r0, 17860 <rpmsg_init_vdev+0x18c>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   17858:	f10a 0a01 	add.w	sl, sl, #1
   1785c:	e7b9      	b.n	177d2 <rpmsg_init_vdev+0xfe>
				return RPMSG_ERR_NO_BUFF;
   1785e:	480c      	ldr	r0, [pc, #48]	; (17890 <rpmsg_init_vdev+0x1bc>)
   17860:	4607      	mov	r7, r0
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
}
   17862:	4638      	mov	r0, r7
   17864:	b008      	add	sp, #32
   17866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return RPMSG_ERR_PARAM;
   1786a:	4f0a      	ldr	r7, [pc, #40]	; (17894 <rpmsg_init_vdev+0x1c0>)
   1786c:	e7f9      	b.n	17862 <rpmsg_init_vdev+0x18e>
			return RPMSG_ERR_NO_BUFF;
   1786e:	4f08      	ldr	r7, [pc, #32]	; (17890 <rpmsg_init_vdev+0x1bc>)
   17870:	e7f7      	b.n	17862 <rpmsg_init_vdev+0x18e>
   17872:	bf00      	nop
   17874:	00017579 	.word	0x00017579
   17878:	00022ae8 	.word	0x00022ae8
   1787c:	00022ae2 	.word	0x00022ae2
   17880:	0001ddab 	.word	0x0001ddab
   17884:	0001de7b 	.word	0x0001de7b
   17888:	00022aee 	.word	0x00022aee
   1788c:	0001ddbd 	.word	0x0001ddbd
   17890:	fffff82e 	.word	0xfffff82e
   17894:	fffff82d 	.word	0xfffff82d

00017898 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   17898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1789a:	4b10      	ldr	r3, [pc, #64]	; (178dc <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   1789c:	4f10      	ldr	r7, [pc, #64]	; (178e0 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1789e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   178a2:	3001      	adds	r0, #1
   178a4:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   178a8:	42ae      	cmp	r6, r5
   178aa:	d800      	bhi.n	178ae <z_sys_init_run_level+0x16>
		}
	}
}
   178ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   178ae:	e9d5 3400 	ldrd	r3, r4, [r5]
   178b2:	4620      	mov	r0, r4
   178b4:	4798      	blx	r3
   178b6:	b170      	cbz	r0, 178d6 <z_sys_init_run_level+0x3e>
   178b8:	b16c      	cbz	r4, 178d6 <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   178ba:	2301      	movs	r3, #1
				(dev - __device_start));
   178bc:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   178be:	4a09      	ldr	r2, [pc, #36]	; (178e4 <z_sys_init_run_level+0x4c>)
   178c0:	1124      	asrs	r4, r4, #4
   178c2:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   178c4:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   178c8:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   178cc:	fa03 f404 	lsl.w	r4, r3, r4
   178d0:	4304      	orrs	r4, r0
   178d2:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   178d6:	3508      	adds	r5, #8
   178d8:	e7e6      	b.n	178a8 <z_sys_init_run_level+0x10>
   178da:	bf00      	nop
   178dc:	0001f0d4 	.word	0x0001f0d4
   178e0:	2000856c 	.word	0x2000856c
   178e4:	200085dc 	.word	0x200085dc

000178e8 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   178e8:	4b08      	ldr	r3, [pc, #32]	; (1790c <z_device_ready+0x24>)
   178ea:	1ac0      	subs	r0, r0, r3
   178ec:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   178ee:	4b08      	ldr	r3, [pc, #32]	; (17910 <z_device_ready+0x28>)
   178f0:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   178f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   178f6:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   178f8:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   178fc:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   17900:	4210      	tst	r0, r2
}
   17902:	bf0c      	ite	eq
   17904:	4618      	moveq	r0, r3
   17906:	2000      	movne	r0, #0
   17908:	4770      	bx	lr
   1790a:	bf00      	nop
   1790c:	2000856c 	.word	0x2000856c
   17910:	200085dc 	.word	0x200085dc

00017914 <z_impl_device_get_binding>:
{
   17914:	b570      	push	{r4, r5, r6, lr}
   17916:	4605      	mov	r5, r0
	for (dev = __device_start; dev != __device_end; dev++) {
   17918:	4c0f      	ldr	r4, [pc, #60]	; (17958 <z_impl_device_get_binding+0x44>)
   1791a:	4e10      	ldr	r6, [pc, #64]	; (1795c <z_impl_device_get_binding+0x48>)
   1791c:	42b4      	cmp	r4, r6
   1791e:	d104      	bne.n	1792a <z_impl_device_get_binding+0x16>
	for (dev = __device_start; dev != __device_end; dev++) {
   17920:	4c0d      	ldr	r4, [pc, #52]	; (17958 <z_impl_device_get_binding+0x44>)
   17922:	42b4      	cmp	r4, r6
   17924:	d10a      	bne.n	1793c <z_impl_device_get_binding+0x28>
	return NULL;
   17926:	2400      	movs	r4, #0
   17928:	e014      	b.n	17954 <z_impl_device_get_binding+0x40>
		if (z_device_ready(dev) && (dev->name == name)) {
   1792a:	4620      	mov	r0, r4
   1792c:	f7ff ffdc 	bl	178e8 <z_device_ready>
   17930:	b110      	cbz	r0, 17938 <z_impl_device_get_binding+0x24>
   17932:	6823      	ldr	r3, [r4, #0]
   17934:	42ab      	cmp	r3, r5
   17936:	d00d      	beq.n	17954 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   17938:	3410      	adds	r4, #16
   1793a:	e7ef      	b.n	1791c <z_impl_device_get_binding+0x8>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1793c:	4620      	mov	r0, r4
   1793e:	f7ff ffd3 	bl	178e8 <z_device_ready>
   17942:	b908      	cbnz	r0, 17948 <z_impl_device_get_binding+0x34>
	for (dev = __device_start; dev != __device_end; dev++) {
   17944:	3410      	adds	r4, #16
   17946:	e7ec      	b.n	17922 <z_impl_device_get_binding+0xe>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   17948:	4628      	mov	r0, r5
   1794a:	6821      	ldr	r1, [r4, #0]
   1794c:	f004 f9a6 	bl	1bc9c <strcmp>
   17950:	2800      	cmp	r0, #0
   17952:	d1f7      	bne.n	17944 <z_impl_device_get_binding+0x30>
}
   17954:	4620      	mov	r0, r4
   17956:	bd70      	pop	{r4, r5, r6, pc}
   17958:	2000856c 	.word	0x2000856c
   1795c:	200085dc 	.word	0x200085dc

00017960 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   17960:	4b01      	ldr	r3, [pc, #4]	; (17968 <z_impl_z_errno+0x8>)
   17962:	6898      	ldr	r0, [r3, #8]
}
   17964:	3070      	adds	r0, #112	; 0x70
   17966:	4770      	bx	lr
   17968:	2000b14c 	.word	0x2000b14c

0001796c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1796c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1796e:	4604      	mov	r4, r0
   17970:	460e      	mov	r6, r1
	__asm__ volatile(
   17972:	f04f 0320 	mov.w	r3, #32
   17976:	f3ef 8711 	mrs	r7, BASEPRI
   1797a:	f383 8811 	msr	BASEPRI, r3
   1797e:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   17982:	f001 fd97 	bl	194b4 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   17986:	2200      	movs	r2, #0
   17988:	2c04      	cmp	r4, #4
   1798a:	bf98      	it	ls
   1798c:	4b1d      	ldrls	r3, [pc, #116]	; (17a04 <z_fatal_error+0x98>)
   1798e:	4605      	mov	r5, r0
	switch (reason) {
   17990:	bf94      	ite	ls
   17992:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   17996:	4b1c      	ldrhi	r3, [pc, #112]	; (17a08 <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   17998:	9200      	str	r2, [sp, #0]
   1799a:	2145      	movs	r1, #69	; 0x45
   1799c:	4622      	mov	r2, r4
   1799e:	481b      	ldr	r0, [pc, #108]	; (17a0c <z_fatal_error+0xa0>)
   179a0:	f002 ff66 	bl	1a870 <printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   179a4:	b13e      	cbz	r6, 179b6 <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   179a6:	69f3      	ldr	r3, [r6, #28]
   179a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   179ac:	b11b      	cbz	r3, 179b6 <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
   179ae:	2145      	movs	r1, #69	; 0x45
   179b0:	4817      	ldr	r0, [pc, #92]	; (17a10 <z_fatal_error+0xa4>)
   179b2:	f002 ff5d 	bl	1a870 <printk>
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   179b6:	b135      	cbz	r5, 179c6 <z_fatal_error+0x5a>
   179b8:	4628      	mov	r0, r5
   179ba:	f006 fb8b 	bl	1e0d4 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   179be:	4603      	mov	r3, r0
   179c0:	b108      	cbz	r0, 179c6 <z_fatal_error+0x5a>
   179c2:	7802      	ldrb	r2, [r0, #0]
   179c4:	b902      	cbnz	r2, 179c8 <z_fatal_error+0x5c>
		thread_name = "unknown";
   179c6:	4b13      	ldr	r3, [pc, #76]	; (17a14 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   179c8:	462a      	mov	r2, r5
   179ca:	2145      	movs	r1, #69	; 0x45
   179cc:	4812      	ldr	r0, [pc, #72]	; (17a18 <z_fatal_error+0xac>)
   179ce:	f002 ff4f 	bl	1a870 <printk>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   179d2:	4631      	mov	r1, r6
   179d4:	4620      	mov	r0, r4
   179d6:	f7ff f8ad 	bl	16b34 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   179da:	2c04      	cmp	r4, #4
   179dc:	d108      	bne.n	179f0 <z_fatal_error+0x84>
   179de:	490f      	ldr	r1, [pc, #60]	; (17a1c <z_fatal_error+0xb0>)
   179e0:	480f      	ldr	r0, [pc, #60]	; (17a20 <z_fatal_error+0xb4>)
   179e2:	228e      	movs	r2, #142	; 0x8e
   179e4:	f002 ff44 	bl	1a870 <printk>
   179e8:	218e      	movs	r1, #142	; 0x8e
   179ea:	480c      	ldr	r0, [pc, #48]	; (17a1c <z_fatal_error+0xb0>)
   179ec:	f003 f9e6 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   179f0:	f387 8811 	msr	BASEPRI, r7
   179f4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   179f8:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   179fa:	b003      	add	sp, #12
   179fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   17a00:	f7f6 bb22 	b.w	e048 <z_impl_k_thread_abort>
   17a04:	0001f0ec 	.word	0x0001f0ec
   17a08:	00022af1 	.word	0x00022af1
   17a0c:	00022b07 	.word	0x00022b07
   17a10:	00022b34 	.word	0x00022b34
   17a14:	00022aff 	.word	0x00022aff
   17a18:	00022b5a 	.word	0x00022b5a
   17a1c:	00022b77 	.word	0x00022b77
   17a20:	0001fdfa 	.word	0x0001fdfa

00017a24 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   17a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17a26:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   17a28:	2700      	movs	r7, #0
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
   17a2a:	4e15      	ldr	r6, [pc, #84]	; (17a80 <idle+0x5c>)
	__asm__ volatile(
   17a2c:	f04f 0220 	mov.w	r2, #32
   17a30:	f3ef 8311 	mrs	r3, BASEPRI
   17a34:	f382 8811 	msr	BASEPRI, r2
   17a38:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   17a3c:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   17a3e:	b188      	cbz	r0, 17a64 <idle+0x40>
			cpu->pending_abort = NULL;
   17a40:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   17a42:	f383 8811 	msr	BASEPRI, r3
   17a46:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
   17a4a:	f001 f93b 	bl	18cc4 <z_thread_single_abort>
	__asm__ volatile(
   17a4e:	f04f 0320 	mov.w	r3, #32
   17a52:	f3ef 8011 	mrs	r0, BASEPRI
   17a56:	f383 8811 	msr	BASEPRI, r3
   17a5a:	f3bf 8f6f 	isb	sy
   17a5e:	f006 fae2 	bl	1e026 <z_reschedule_irqlock>
			continue;
   17a62:	e7e3      	b.n	17a2c <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
   17a64:	f002 f998 	bl	19d98 <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   17a68:	2101      	movs	r1, #1
		int32_t ticks = z_get_next_timeout_expiry();
   17a6a:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   17a6c:	2802      	cmp	r0, #2
   17a6e:	bfd8      	it	le
   17a70:	4608      	movle	r0, r1
   17a72:	f002 f9c7 	bl	19e04 <z_set_timeout_expiry>
		_kernel.idle = ticks;
   17a76:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   17a78:	f7f6 f82c 	bl	dad4 <arch_cpu_idle>
}
   17a7c:	e7d6      	b.n	17a2c <idle+0x8>
   17a7e:	bf00      	nop
   17a80:	2000b14c 	.word	0x2000b14c

00017a84 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   17a84:	4802      	ldr	r0, [pc, #8]	; (17a90 <z_bss_zero+0xc>)
   17a86:	4a03      	ldr	r2, [pc, #12]	; (17a94 <z_bss_zero+0x10>)
   17a88:	2100      	movs	r1, #0
   17a8a:	1a12      	subs	r2, r2, r0
   17a8c:	f004 b95f 	b.w	1bd4e <memset>
   17a90:	200087d8 	.word	0x200087d8
   17a94:	2000f9f8 	.word	0x2000f9f8

00017a98 <bg_thread_main>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
   17a98:	2201      	movs	r2, #1
{
   17a9a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   17a9c:	4b09      	ldr	r3, [pc, #36]	; (17ac4 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   17a9e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   17aa0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   17aa2:	f7ff fef9 	bl	17898 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   17aa6:	f002 f819 	bl	19adc <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   17aaa:	2003      	movs	r0, #3
   17aac:	f7ff fef4 	bl	17898 <z_sys_init_run_level>

	z_init_static_threads();
   17ab0:	f001 fe76 	bl	197a0 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   17ab4:	f7f1 fadc 	bl	9070 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   17ab8:	4a03      	ldr	r2, [pc, #12]	; (17ac8 <bg_thread_main+0x30>)
   17aba:	7b13      	ldrb	r3, [r2, #12]
   17abc:	f023 0301 	bic.w	r3, r3, #1
   17ac0:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   17ac2:	bd08      	pop	{r3, pc}
   17ac4:	2000f9f6 	.word	0x2000f9f6
   17ac8:	2000a4b0 	.word	0x2000a4b0

00017acc <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   17acc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   17ad0:	4b34      	ldr	r3, [pc, #208]	; (17ba4 <z_cstart+0xd8>)
   17ad2:	b0ab      	sub	sp, #172	; 0xac
	uint32_t msp =
   17ad4:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   17ad8:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   17adc:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17ae0:	2400      	movs	r4, #0
   17ae2:	23e0      	movs	r3, #224	; 0xe0
   17ae4:	4d30      	ldr	r5, [pc, #192]	; (17ba8 <z_cstart+0xdc>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17ae6:	f04f 0b01 	mov.w	fp, #1
   17aea:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   17aee:	77ec      	strb	r4, [r5, #31]
   17af0:	762c      	strb	r4, [r5, #24]
   17af2:	766c      	strb	r4, [r5, #25]
   17af4:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   17af6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   17af8:	4e2c      	ldr	r6, [pc, #176]	; (17bac <z_cstart+0xe0>)
   17afa:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   17afe:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   17b00:	f7f6 fa6a 	bl	dfd8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   17b04:	f7f5 ffe0 	bl	dac8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   17b08:	f04f 33ff 	mov.w	r3, #4294967295
   17b0c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   17b0e:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   17b10:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   17b14:	4d26      	ldr	r5, [pc, #152]	; (17bb0 <z_cstart+0xe4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   17b16:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   17b1a:	ab06      	add	r3, sp, #24
   17b1c:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   17b1e:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   17b20:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
   17b24:	f7ff feb8 	bl	17898 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   17b28:	2001      	movs	r0, #1
   17b2a:	f7ff feb5 	bl	17898 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17b2e:	f8df a084 	ldr.w	sl, [pc, #132]	; 17bb4 <z_cstart+0xe8>
	z_sched_init();
   17b32:	f001 fb77 	bl	19224 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17b36:	4b20      	ldr	r3, [pc, #128]	; (17bb8 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   17b38:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17b3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   17b3e:	491f      	ldr	r1, [pc, #124]	; (17bbc <z_cstart+0xf0>)
   17b40:	9305      	str	r3, [sp, #20]
   17b42:	4630      	mov	r0, r6
   17b44:	4653      	mov	r3, sl
   17b46:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   17b4a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   17b4e:	9400      	str	r4, [sp, #0]
   17b50:	f001 fd74 	bl	1963c <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   17b54:	7b73      	ldrb	r3, [r6, #13]
   17b56:	4680      	mov	r8, r0
   17b58:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   17b5c:	4630      	mov	r0, r6
   17b5e:	7373      	strb	r3, [r6, #13]
   17b60:	f000 feec 	bl	1893c <z_ready_thread>
	z_setup_new_thread(thread, stack,
   17b64:	230f      	movs	r3, #15
   17b66:	4f16      	ldr	r7, [pc, #88]	; (17bc0 <z_cstart+0xf4>)
   17b68:	f44f 72a0 	mov.w	r2, #320	; 0x140
   17b6c:	e9cd 4302 	strd	r4, r3, [sp, #8]
   17b70:	4914      	ldr	r1, [pc, #80]	; (17bc4 <z_cstart+0xf8>)
   17b72:	4b15      	ldr	r3, [pc, #84]	; (17bc8 <z_cstart+0xfc>)
   17b74:	4638      	mov	r0, r7
   17b76:	e9cd b404 	strd	fp, r4, [sp, #16]
   17b7a:	e9cd 5400 	strd	r5, r4, [sp]
   17b7e:	f001 fd5d 	bl	1963c <z_setup_new_thread>
   17b82:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   17b84:	4652      	mov	r2, sl
   17b86:	f023 0304 	bic.w	r3, r3, #4
   17b8a:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   17b8c:	f105 031c 	add.w	r3, r5, #28
   17b90:	4641      	mov	r1, r8
   17b92:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   17b94:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   17b98:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   17b9a:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   17b9c:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   17ba0:	f7f5 ff78 	bl	da94 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   17ba4:	20013c50 	.word	0x20013c50
   17ba8:	e000ed00 	.word	0xe000ed00
   17bac:	2000a4b0 	.word	0x2000a4b0
   17bb0:	2000b14c 	.word	0x2000b14c
   17bb4:	00017a99 	.word	0x00017a99
   17bb8:	00022be3 	.word	0x00022be3
   17bbc:	20011b10 	.word	0x20011b10
   17bc0:	2000a420 	.word	0x2000a420
   17bc4:	20013b10 	.word	0x20013b10
   17bc8:	00017a25 	.word	0x00017a25

00017bcc <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   17bcc:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   17bce:	4c0c      	ldr	r4, [pc, #48]	; (17c00 <statics_init+0x34>)
   17bd0:	4d0c      	ldr	r5, [pc, #48]	; (17c04 <statics_init+0x38>)
   17bd2:	4e0d      	ldr	r6, [pc, #52]	; (17c08 <statics_init+0x3c>)
   17bd4:	42ac      	cmp	r4, r5
   17bd6:	d908      	bls.n	17bea <statics_init+0x1e>
   17bd8:	4631      	mov	r1, r6
   17bda:	480c      	ldr	r0, [pc, #48]	; (17c0c <statics_init+0x40>)
   17bdc:	2215      	movs	r2, #21
   17bde:	f002 fe47 	bl	1a870 <printk>
   17be2:	2115      	movs	r1, #21
   17be4:	4630      	mov	r0, r6
   17be6:	f003 f8e9 	bl	1adbc <assert_post_action>
   17bea:	42ac      	cmp	r4, r5
   17bec:	d301      	bcc.n	17bf2 <statics_init+0x26>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   17bee:	2000      	movs	r0, #0
   17bf0:	bd70      	pop	{r4, r5, r6, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   17bf2:	4620      	mov	r0, r4
   17bf4:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   17bf8:	f006 f9c7 	bl	1df8a <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   17bfc:	3418      	adds	r4, #24
   17bfe:	e7e9      	b.n	17bd4 <statics_init+0x8>
   17c00:	20008634 	.word	0x20008634
   17c04:	2000864c 	.word	0x2000864c
   17c08:	00022beb 	.word	0x00022beb
   17c0c:	0001fdfa 	.word	0x0001fdfa

00017c10 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   17c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c14:	b085      	sub	sp, #20
   17c16:	e9dd 970e 	ldrd	r9, r7, [sp, #56]	; 0x38
   17c1a:	4606      	mov	r6, r0
   17c1c:	468b      	mov	fp, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   17c1e:	4648      	mov	r0, r9
   17c20:	4639      	mov	r1, r7
{
   17c22:	4690      	mov	r8, r2
	int64_t now, end = z_timeout_end_calc(timeout);
   17c24:	f006 fab7 	bl	1e196 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   17c28:	f106 0514 	add.w	r5, r6, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   17c2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   17c30:	f04f 0320 	mov.w	r3, #32
   17c34:	f3ef 8411 	mrs	r4, BASEPRI
   17c38:	f383 8811 	msr	BASEPRI, r3
   17c3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17c40:	4628      	mov	r0, r5
   17c42:	f001 fe29 	bl	19898 <z_spin_lock_valid>
   17c46:	b940      	cbnz	r0, 17c5a <k_heap_aligned_alloc+0x4a>
   17c48:	4932      	ldr	r1, [pc, #200]	; (17d14 <k_heap_aligned_alloc+0x104>)
   17c4a:	4833      	ldr	r0, [pc, #204]	; (17d18 <k_heap_aligned_alloc+0x108>)
   17c4c:	227c      	movs	r2, #124	; 0x7c
   17c4e:	f002 fe0f 	bl	1a870 <printk>
   17c52:	217c      	movs	r1, #124	; 0x7c
   17c54:	482f      	ldr	r0, [pc, #188]	; (17d14 <k_heap_aligned_alloc+0x104>)
   17c56:	f003 f8b1 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   17c5a:	4628      	mov	r0, r5
   17c5c:	f001 fe38 	bl	198d0 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   17c60:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   17c64:	b15b      	cbz	r3, 17c7e <k_heap_aligned_alloc+0x6e>
   17c66:	ea59 0307 	orrs.w	r3, r9, r7
   17c6a:	d008      	beq.n	17c7e <k_heap_aligned_alloc+0x6e>
   17c6c:	492b      	ldr	r1, [pc, #172]	; (17d1c <k_heap_aligned_alloc+0x10c>)
   17c6e:	482a      	ldr	r0, [pc, #168]	; (17d18 <k_heap_aligned_alloc+0x108>)
   17c70:	2224      	movs	r2, #36	; 0x24
   17c72:	f002 fdfd 	bl	1a870 <printk>
   17c76:	2124      	movs	r1, #36	; 0x24
   17c78:	4828      	ldr	r0, [pc, #160]	; (17d1c <k_heap_aligned_alloc+0x10c>)
   17c7a:	f003 f89f 	bl	1adbc <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17c7e:	f8df 9094 	ldr.w	r9, [pc, #148]	; 17d14 <k_heap_aligned_alloc+0x104>
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   17c82:	f106 0a0c 	add.w	sl, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   17c86:	4642      	mov	r2, r8
   17c88:	4659      	mov	r1, fp
   17c8a:	4630      	mov	r0, r6
   17c8c:	f7f3 f816 	bl	acbc <sys_heap_aligned_alloc>
   17c90:	4607      	mov	r7, r0
		now = z_tick_get();
   17c92:	f002 f993 	bl	19fbc <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   17c96:	b1a7      	cbz	r7, 17cc2 <k_heap_aligned_alloc+0xb2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17c98:	4628      	mov	r0, r5
   17c9a:	f001 fe0b 	bl	198b4 <z_spin_unlock_valid>
   17c9e:	b940      	cbnz	r0, 17cb2 <k_heap_aligned_alloc+0xa2>
   17ca0:	491c      	ldr	r1, [pc, #112]	; (17d14 <k_heap_aligned_alloc+0x104>)
   17ca2:	481d      	ldr	r0, [pc, #116]	; (17d18 <k_heap_aligned_alloc+0x108>)
   17ca4:	22a7      	movs	r2, #167	; 0xa7
   17ca6:	f002 fde3 	bl	1a870 <printk>
   17caa:	21a7      	movs	r1, #167	; 0xa7
   17cac:	4819      	ldr	r0, [pc, #100]	; (17d14 <k_heap_aligned_alloc+0x104>)
   17cae:	f003 f885 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   17cb2:	f384 8811 	msr	BASEPRI, r4
   17cb6:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   17cba:	4638      	mov	r0, r7
   17cbc:	b005      	add	sp, #20
   17cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   17cc2:	9b02      	ldr	r3, [sp, #8]
   17cc4:	1a18      	subs	r0, r3, r0
   17cc6:	9b03      	ldr	r3, [sp, #12]
   17cc8:	eb63 0101 	sbc.w	r1, r3, r1
   17ccc:	2801      	cmp	r0, #1
   17cce:	f171 0300 	sbcs.w	r3, r1, #0
   17cd2:	dbe1      	blt.n	17c98 <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   17cd4:	e9cd 0100 	strd	r0, r1, [sp]
   17cd8:	4652      	mov	r2, sl
   17cda:	4621      	mov	r1, r4
   17cdc:	4628      	mov	r0, r5
   17cde:	f001 f997 	bl	19010 <z_pend_curr>
	__asm__ volatile(
   17ce2:	f04f 0320 	mov.w	r3, #32
   17ce6:	f3ef 8411 	mrs	r4, BASEPRI
   17cea:	f383 8811 	msr	BASEPRI, r3
   17cee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17cf2:	4628      	mov	r0, r5
   17cf4:	f001 fdd0 	bl	19898 <z_spin_lock_valid>
   17cf8:	b940      	cbnz	r0, 17d0c <k_heap_aligned_alloc+0xfc>
   17cfa:	4649      	mov	r1, r9
   17cfc:	4806      	ldr	r0, [pc, #24]	; (17d18 <k_heap_aligned_alloc+0x108>)
   17cfe:	227c      	movs	r2, #124	; 0x7c
   17d00:	f002 fdb6 	bl	1a870 <printk>
   17d04:	217c      	movs	r1, #124	; 0x7c
   17d06:	4648      	mov	r0, r9
   17d08:	f003 f858 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   17d0c:	4628      	mov	r0, r5
   17d0e:	f001 fddf 	bl	198d0 <z_spin_lock_set_owner>
	return k;
   17d12:	e7b8      	b.n	17c86 <k_heap_aligned_alloc+0x76>
   17d14:	0001fe34 	.word	0x0001fe34
   17d18:	0001fdfa 	.word	0x0001fdfa
   17d1c:	00022beb 	.word	0x00022beb

00017d20 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   17d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17d22:	4604      	mov	r4, r0
   17d24:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   17d26:	f100 0514 	add.w	r5, r0, #20
   17d2a:	f04f 0320 	mov.w	r3, #32
   17d2e:	f3ef 8711 	mrs	r7, BASEPRI
   17d32:	f383 8811 	msr	BASEPRI, r3
   17d36:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17d3a:	4628      	mov	r0, r5
   17d3c:	f001 fdac 	bl	19898 <z_spin_lock_valid>
   17d40:	b940      	cbnz	r0, 17d54 <k_heap_free+0x34>
   17d42:	4916      	ldr	r1, [pc, #88]	; (17d9c <k_heap_free+0x7c>)
   17d44:	4816      	ldr	r0, [pc, #88]	; (17da0 <k_heap_free+0x80>)
   17d46:	227c      	movs	r2, #124	; 0x7c
   17d48:	f002 fd92 	bl	1a870 <printk>
   17d4c:	217c      	movs	r1, #124	; 0x7c
   17d4e:	4813      	ldr	r0, [pc, #76]	; (17d9c <k_heap_free+0x7c>)
   17d50:	f003 f834 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   17d54:	4628      	mov	r0, r5
   17d56:	f001 fdbb 	bl	198d0 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   17d5a:	4620      	mov	r0, r4
   17d5c:	4631      	mov	r1, r6
   17d5e:	f7f2 ff6b 	bl	ac38 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   17d62:	f104 000c 	add.w	r0, r4, #12
   17d66:	f006 f988 	bl	1e07a <z_unpend_all>
   17d6a:	b128      	cbz	r0, 17d78 <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   17d6c:	4639      	mov	r1, r7
   17d6e:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   17d70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   17d74:	f000 bc0e 	b.w	18594 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17d78:	4628      	mov	r0, r5
   17d7a:	f001 fd9b 	bl	198b4 <z_spin_unlock_valid>
   17d7e:	b940      	cbnz	r0, 17d92 <k_heap_free+0x72>
   17d80:	4906      	ldr	r1, [pc, #24]	; (17d9c <k_heap_free+0x7c>)
   17d82:	4807      	ldr	r0, [pc, #28]	; (17da0 <k_heap_free+0x80>)
   17d84:	22a7      	movs	r2, #167	; 0xa7
   17d86:	f002 fd73 	bl	1a870 <printk>
   17d8a:	21a7      	movs	r1, #167	; 0xa7
   17d8c:	4803      	ldr	r0, [pc, #12]	; (17d9c <k_heap_free+0x7c>)
   17d8e:	f003 f815 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   17d92:	f387 8811 	msr	BASEPRI, r7
   17d96:	f3bf 8f6f 	isb	sy
}
   17d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17d9c:	0001fe34 	.word	0x0001fe34
   17da0:	0001fdfa 	.word	0x0001fdfa

00017da4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   17da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   17da6:	4c14      	ldr	r4, [pc, #80]	; (17df8 <init_mem_slab_module+0x54>)
   17da8:	4d14      	ldr	r5, [pc, #80]	; (17dfc <init_mem_slab_module+0x58>)
   17daa:	4e15      	ldr	r6, [pc, #84]	; (17e00 <init_mem_slab_module+0x5c>)
   17dac:	42ac      	cmp	r4, r5
   17dae:	d908      	bls.n	17dc2 <init_mem_slab_module+0x1e>
   17db0:	4631      	mov	r1, r6
   17db2:	4814      	ldr	r0, [pc, #80]	; (17e04 <init_mem_slab_module+0x60>)
   17db4:	2242      	movs	r2, #66	; 0x42
   17db6:	f002 fd5b 	bl	1a870 <printk>
   17dba:	2142      	movs	r1, #66	; 0x42
   17dbc:	4630      	mov	r0, r6
   17dbe:	f002 fffd 	bl	1adbc <assert_post_action>
   17dc2:	42ac      	cmp	r4, r5
   17dc4:	d301      	bcc.n	17dca <init_mem_slab_module+0x26>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   17dc6:	2000      	movs	r0, #0
	return rc;
}
   17dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   17dca:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   17dce:	ea42 0301 	orr.w	r3, r2, r1
   17dd2:	f013 0303 	ands.w	r3, r3, #3
   17dd6:	d10b      	bne.n	17df0 <init_mem_slab_module+0x4c>
	for (j = 0U; j < slab->num_blocks; j++) {
   17dd8:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   17dda:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   17ddc:	4283      	cmp	r3, r0
   17dde:	d101      	bne.n	17de4 <init_mem_slab_module+0x40>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   17de0:	341c      	adds	r4, #28
   17de2:	e7e3      	b.n	17dac <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   17de4:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   17de6:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   17de8:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   17dea:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   17dec:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   17dee:	e7f5      	b.n	17ddc <init_mem_slab_module+0x38>
	return rc;
   17df0:	f06f 0015 	mvn.w	r0, #21
   17df4:	e7e8      	b.n	17dc8 <init_mem_slab_module+0x24>
   17df6:	bf00      	nop
   17df8:	200085e0 	.word	0x200085e0
   17dfc:	20008634 	.word	0x20008634
   17e00:	00022c0d 	.word	0x00022c0d
   17e04:	0001fdfa 	.word	0x0001fdfa

00017e08 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   17e08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   17e0c:	4604      	mov	r4, r0
   17e0e:	460d      	mov	r5, r1
   17e10:	4617      	mov	r7, r2
   17e12:	461e      	mov	r6, r3
	__asm__ volatile(
   17e14:	f04f 0320 	mov.w	r3, #32
   17e18:	f3ef 8811 	mrs	r8, BASEPRI
   17e1c:	f383 8811 	msr	BASEPRI, r3
   17e20:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17e24:	4821      	ldr	r0, [pc, #132]	; (17eac <k_mem_slab_alloc+0xa4>)
   17e26:	f001 fd37 	bl	19898 <z_spin_lock_valid>
   17e2a:	b940      	cbnz	r0, 17e3e <k_mem_slab_alloc+0x36>
   17e2c:	4920      	ldr	r1, [pc, #128]	; (17eb0 <k_mem_slab_alloc+0xa8>)
   17e2e:	4821      	ldr	r0, [pc, #132]	; (17eb4 <k_mem_slab_alloc+0xac>)
   17e30:	227c      	movs	r2, #124	; 0x7c
   17e32:	f002 fd1d 	bl	1a870 <printk>
   17e36:	217c      	movs	r1, #124	; 0x7c
   17e38:	481d      	ldr	r0, [pc, #116]	; (17eb0 <k_mem_slab_alloc+0xa8>)
   17e3a:	f002 ffbf 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   17e3e:	481b      	ldr	r0, [pc, #108]	; (17eac <k_mem_slab_alloc+0xa4>)
   17e40:	f001 fd46 	bl	198d0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   17e44:	6963      	ldr	r3, [r4, #20]
   17e46:	b1c3      	cbz	r3, 17e7a <k_mem_slab_alloc+0x72>
		/* take a free block */
		*mem = slab->free_list;
   17e48:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   17e4a:	681b      	ldr	r3, [r3, #0]
   17e4c:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   17e4e:	69a3      	ldr	r3, [r4, #24]
   17e50:	3301      	adds	r3, #1
   17e52:	61a3      	str	r3, [r4, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   17e54:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17e56:	4815      	ldr	r0, [pc, #84]	; (17eac <k_mem_slab_alloc+0xa4>)
   17e58:	f001 fd2c 	bl	198b4 <z_spin_unlock_valid>
   17e5c:	b940      	cbnz	r0, 17e70 <k_mem_slab_alloc+0x68>
   17e5e:	4914      	ldr	r1, [pc, #80]	; (17eb0 <k_mem_slab_alloc+0xa8>)
   17e60:	4814      	ldr	r0, [pc, #80]	; (17eb4 <k_mem_slab_alloc+0xac>)
   17e62:	22a7      	movs	r2, #167	; 0xa7
   17e64:	f002 fd04 	bl	1a870 <printk>
   17e68:	21a7      	movs	r1, #167	; 0xa7
   17e6a:	4811      	ldr	r0, [pc, #68]	; (17eb0 <k_mem_slab_alloc+0xa8>)
   17e6c:	f002 ffa6 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   17e70:	f388 8811 	msr	BASEPRI, r8
   17e74:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   17e78:	e013      	b.n	17ea2 <k_mem_slab_alloc+0x9a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   17e7a:	ea57 0206 	orrs.w	r2, r7, r6
   17e7e:	d103      	bne.n	17e88 <k_mem_slab_alloc+0x80>
		result = -ENOMEM;
   17e80:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   17e84:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   17e86:	e7e6      	b.n	17e56 <k_mem_slab_alloc+0x4e>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   17e88:	4622      	mov	r2, r4
   17e8a:	4641      	mov	r1, r8
   17e8c:	e9cd 7600 	strd	r7, r6, [sp]
   17e90:	4806      	ldr	r0, [pc, #24]	; (17eac <k_mem_slab_alloc+0xa4>)
   17e92:	f001 f8bd 	bl	19010 <z_pend_curr>
		if (result == 0) {
   17e96:	4604      	mov	r4, r0
   17e98:	b918      	cbnz	r0, 17ea2 <k_mem_slab_alloc+0x9a>
			*mem = _current->base.swap_data;
   17e9a:	4b07      	ldr	r3, [pc, #28]	; (17eb8 <k_mem_slab_alloc+0xb0>)
   17e9c:	689b      	ldr	r3, [r3, #8]
   17e9e:	695b      	ldr	r3, [r3, #20]
   17ea0:	602b      	str	r3, [r5, #0]
}
   17ea2:	4620      	mov	r0, r4
   17ea4:	b002      	add	sp, #8
   17ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17eaa:	bf00      	nop
   17eac:	2000b144 	.word	0x2000b144
   17eb0:	0001fe34 	.word	0x0001fe34
   17eb4:	0001fdfa 	.word	0x0001fdfa
   17eb8:	2000b14c 	.word	0x2000b14c

00017ebc <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   17ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17ebe:	4604      	mov	r4, r0
   17ec0:	460d      	mov	r5, r1
	__asm__ volatile(
   17ec2:	f04f 0320 	mov.w	r3, #32
   17ec6:	f3ef 8611 	mrs	r6, BASEPRI
   17eca:	f383 8811 	msr	BASEPRI, r3
   17ece:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17ed2:	481e      	ldr	r0, [pc, #120]	; (17f4c <k_mem_slab_free+0x90>)
   17ed4:	f001 fce0 	bl	19898 <z_spin_lock_valid>
   17ed8:	b940      	cbnz	r0, 17eec <k_mem_slab_free+0x30>
   17eda:	491d      	ldr	r1, [pc, #116]	; (17f50 <k_mem_slab_free+0x94>)
   17edc:	481d      	ldr	r0, [pc, #116]	; (17f54 <k_mem_slab_free+0x98>)
   17ede:	227c      	movs	r2, #124	; 0x7c
   17ee0:	f002 fcc6 	bl	1a870 <printk>
   17ee4:	217c      	movs	r1, #124	; 0x7c
   17ee6:	481a      	ldr	r0, [pc, #104]	; (17f50 <k_mem_slab_free+0x94>)
   17ee8:	f002 ff68 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   17eec:	4817      	ldr	r0, [pc, #92]	; (17f4c <k_mem_slab_free+0x90>)
   17eee:	f001 fcef 	bl	198d0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   17ef2:	6967      	ldr	r7, [r4, #20]
   17ef4:	b97f      	cbnz	r7, 17f16 <k_mem_slab_free+0x5a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   17ef6:	4620      	mov	r0, r4
   17ef8:	f001 f92c 	bl	19154 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   17efc:	b158      	cbz	r0, 17f16 <k_mem_slab_free+0x5a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   17efe:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   17f00:	f8c0 7088 	str.w	r7, [r0, #136]	; 0x88
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   17f04:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   17f06:	f000 fd19 	bl	1893c <z_ready_thread>
			z_reschedule(&lock, key);
   17f0a:	4631      	mov	r1, r6
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   17f0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   17f10:	480e      	ldr	r0, [pc, #56]	; (17f4c <k_mem_slab_free+0x90>)
   17f12:	f000 bb3f 	b.w	18594 <z_reschedule>
	**(char ***) mem = slab->free_list;
   17f16:	682b      	ldr	r3, [r5, #0]
   17f18:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17f1a:	480c      	ldr	r0, [pc, #48]	; (17f4c <k_mem_slab_free+0x90>)
   17f1c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   17f1e:	682b      	ldr	r3, [r5, #0]
   17f20:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   17f22:	69a3      	ldr	r3, [r4, #24]
   17f24:	3b01      	subs	r3, #1
   17f26:	61a3      	str	r3, [r4, #24]
   17f28:	f001 fcc4 	bl	198b4 <z_spin_unlock_valid>
   17f2c:	b940      	cbnz	r0, 17f40 <k_mem_slab_free+0x84>
   17f2e:	4908      	ldr	r1, [pc, #32]	; (17f50 <k_mem_slab_free+0x94>)
   17f30:	4808      	ldr	r0, [pc, #32]	; (17f54 <k_mem_slab_free+0x98>)
   17f32:	22a7      	movs	r2, #167	; 0xa7
   17f34:	f002 fc9c 	bl	1a870 <printk>
   17f38:	21a7      	movs	r1, #167	; 0xa7
   17f3a:	4805      	ldr	r0, [pc, #20]	; (17f50 <k_mem_slab_free+0x94>)
   17f3c:	f002 ff3e 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   17f40:	f386 8811 	msr	BASEPRI, r6
   17f44:	f3bf 8f6f 	isb	sy
}
   17f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17f4a:	bf00      	nop
   17f4c:	2000b144 	.word	0x2000b144
   17f50:	0001fe34 	.word	0x0001fe34
   17f54:	0001fdfa 	.word	0x0001fdfa

00017f58 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   17f58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   17f5c:	4604      	mov	r4, r0
   17f5e:	4617      	mov	r7, r2
   17f60:	461e      	mov	r6, r3
   17f62:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   17f66:	b143      	cbz	r3, 17f7a <z_impl_k_mutex_lock+0x22>
   17f68:	495c      	ldr	r1, [pc, #368]	; (180dc <z_impl_k_mutex_lock+0x184>)
   17f6a:	485d      	ldr	r0, [pc, #372]	; (180e0 <z_impl_k_mutex_lock+0x188>)
   17f6c:	227d      	movs	r2, #125	; 0x7d
   17f6e:	f002 fc7f 	bl	1a870 <printk>
   17f72:	217d      	movs	r1, #125	; 0x7d
   17f74:	4859      	ldr	r0, [pc, #356]	; (180dc <z_impl_k_mutex_lock+0x184>)
   17f76:	f002 ff21 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   17f7a:	f04f 0320 	mov.w	r3, #32
   17f7e:	f3ef 8811 	mrs	r8, BASEPRI
   17f82:	f383 8811 	msr	BASEPRI, r3
   17f86:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17f8a:	4856      	ldr	r0, [pc, #344]	; (180e4 <z_impl_k_mutex_lock+0x18c>)
   17f8c:	f001 fc84 	bl	19898 <z_spin_lock_valid>
   17f90:	b940      	cbnz	r0, 17fa4 <z_impl_k_mutex_lock+0x4c>
   17f92:	4955      	ldr	r1, [pc, #340]	; (180e8 <z_impl_k_mutex_lock+0x190>)
   17f94:	4852      	ldr	r0, [pc, #328]	; (180e0 <z_impl_k_mutex_lock+0x188>)
   17f96:	227c      	movs	r2, #124	; 0x7c
   17f98:	f002 fc6a 	bl	1a870 <printk>
   17f9c:	217c      	movs	r1, #124	; 0x7c
   17f9e:	4852      	ldr	r0, [pc, #328]	; (180e8 <z_impl_k_mutex_lock+0x190>)
   17fa0:	f002 ff0c 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   17fa4:	484f      	ldr	r0, [pc, #316]	; (180e4 <z_impl_k_mutex_lock+0x18c>)
   17fa6:	f001 fc93 	bl	198d0 <z_spin_lock_set_owner>

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   17faa:	68e3      	ldr	r3, [r4, #12]
   17fac:	4a4f      	ldr	r2, [pc, #316]	; (180ec <z_impl_k_mutex_lock+0x194>)
   17fae:	b1d3      	cbz	r3, 17fe6 <z_impl_k_mutex_lock+0x8e>
   17fb0:	68a0      	ldr	r0, [r4, #8]
   17fb2:	6891      	ldr	r1, [r2, #8]
   17fb4:	4288      	cmp	r0, r1
   17fb6:	d033      	beq.n	18020 <z_impl_k_mutex_lock+0xc8>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   17fb8:	ea57 0306 	orrs.w	r3, r7, r6
   17fbc:	d132      	bne.n	18024 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17fbe:	4849      	ldr	r0, [pc, #292]	; (180e4 <z_impl_k_mutex_lock+0x18c>)
   17fc0:	f001 fc78 	bl	198b4 <z_spin_unlock_valid>
   17fc4:	b940      	cbnz	r0, 17fd8 <z_impl_k_mutex_lock+0x80>
   17fc6:	4948      	ldr	r1, [pc, #288]	; (180e8 <z_impl_k_mutex_lock+0x190>)
   17fc8:	4845      	ldr	r0, [pc, #276]	; (180e0 <z_impl_k_mutex_lock+0x188>)
   17fca:	22a7      	movs	r2, #167	; 0xa7
   17fcc:	f002 fc50 	bl	1a870 <printk>
   17fd0:	21a7      	movs	r1, #167	; 0xa7
   17fd2:	4845      	ldr	r0, [pc, #276]	; (180e8 <z_impl_k_mutex_lock+0x190>)
   17fd4:	f002 fef2 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   17fd8:	f388 8811 	msr	BASEPRI, r8
   17fdc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   17fe0:	f06f 000f 	mvn.w	r0, #15
   17fe4:	e019      	b.n	1801a <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   17fe6:	6891      	ldr	r1, [r2, #8]
   17fe8:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   17fec:	3301      	adds	r3, #1
   17fee:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   17ff0:	6893      	ldr	r3, [r2, #8]
   17ff2:	483c      	ldr	r0, [pc, #240]	; (180e4 <z_impl_k_mutex_lock+0x18c>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   17ff4:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   17ff6:	60a3      	str	r3, [r4, #8]
   17ff8:	f001 fc5c 	bl	198b4 <z_spin_unlock_valid>
   17ffc:	b940      	cbnz	r0, 18010 <z_impl_k_mutex_lock+0xb8>
   17ffe:	493a      	ldr	r1, [pc, #232]	; (180e8 <z_impl_k_mutex_lock+0x190>)
   18000:	4837      	ldr	r0, [pc, #220]	; (180e0 <z_impl_k_mutex_lock+0x188>)
   18002:	22a7      	movs	r2, #167	; 0xa7
   18004:	f002 fc34 	bl	1a870 <printk>
   18008:	21a7      	movs	r1, #167	; 0xa7
   1800a:	4837      	ldr	r0, [pc, #220]	; (180e8 <z_impl_k_mutex_lock+0x190>)
   1800c:	f002 fed6 	bl	1adbc <assert_post_action>
   18010:	f388 8811 	msr	BASEPRI, r8
   18014:	f3bf 8f6f 	isb	sy
		return 0;
   18018:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1801a:	b002      	add	sp, #8
   1801c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   18020:	6921      	ldr	r1, [r4, #16]
   18022:	e7e3      	b.n	17fec <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   18024:	f990 300e 	ldrsb.w	r3, [r0, #14]
   18028:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1802c:	4299      	cmp	r1, r3
   1802e:	bfa8      	it	ge
   18030:	4619      	movge	r1, r3
   18032:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   18036:	4299      	cmp	r1, r3
   18038:	da3b      	bge.n	180b2 <z_impl_k_mutex_lock+0x15a>
		resched = adjust_owner_prio(mutex, new_prio);
   1803a:	f005 ffae 	bl	1df9a <adjust_owner_prio.isra.0>
   1803e:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   18040:	4622      	mov	r2, r4
   18042:	4641      	mov	r1, r8
   18044:	e9cd 7600 	strd	r7, r6, [sp]
   18048:	4826      	ldr	r0, [pc, #152]	; (180e4 <z_impl_k_mutex_lock+0x18c>)
   1804a:	f000 ffe1 	bl	19010 <z_pend_curr>
	if (got_mutex == 0) {
   1804e:	2800      	cmp	r0, #0
   18050:	d0e3      	beq.n	1801a <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   18052:	f04f 0320 	mov.w	r3, #32
   18056:	f3ef 8611 	mrs	r6, BASEPRI
   1805a:	f383 8811 	msr	BASEPRI, r3
   1805e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18062:	4820      	ldr	r0, [pc, #128]	; (180e4 <z_impl_k_mutex_lock+0x18c>)
   18064:	f001 fc18 	bl	19898 <z_spin_lock_valid>
   18068:	b940      	cbnz	r0, 1807c <z_impl_k_mutex_lock+0x124>
   1806a:	491f      	ldr	r1, [pc, #124]	; (180e8 <z_impl_k_mutex_lock+0x190>)
   1806c:	481c      	ldr	r0, [pc, #112]	; (180e0 <z_impl_k_mutex_lock+0x188>)
   1806e:	227c      	movs	r2, #124	; 0x7c
   18070:	f002 fbfe 	bl	1a870 <printk>
   18074:	217c      	movs	r1, #124	; 0x7c
   18076:	481c      	ldr	r0, [pc, #112]	; (180e8 <z_impl_k_mutex_lock+0x190>)
   18078:	f002 fea0 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   1807c:	4819      	ldr	r0, [pc, #100]	; (180e4 <z_impl_k_mutex_lock+0x18c>)
   1807e:	f001 fc27 	bl	198d0 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   18082:	6823      	ldr	r3, [r4, #0]
   18084:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18086:	42a3      	cmp	r3, r4
   18088:	d007      	beq.n	1809a <z_impl_k_mutex_lock+0x142>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1808a:	b133      	cbz	r3, 1809a <z_impl_k_mutex_lock+0x142>
   1808c:	f993 300e 	ldrsb.w	r3, [r3, #14]
   18090:	4299      	cmp	r1, r3
   18092:	bfa8      	it	ge
   18094:	4619      	movge	r1, r3
   18096:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1809a:	68a0      	ldr	r0, [r4, #8]
   1809c:	f005 ff7d 	bl	1df9a <adjust_owner_prio.isra.0>
   180a0:	b900      	cbnz	r0, 180a4 <z_impl_k_mutex_lock+0x14c>
	if (resched) {
   180a2:	b145      	cbz	r5, 180b6 <z_impl_k_mutex_lock+0x15e>
		z_reschedule(&lock, key);
   180a4:	4631      	mov	r1, r6
   180a6:	480f      	ldr	r0, [pc, #60]	; (180e4 <z_impl_k_mutex_lock+0x18c>)
   180a8:	f000 fa74 	bl	18594 <z_reschedule>
	return -EAGAIN;
   180ac:	f06f 000a 	mvn.w	r0, #10
   180b0:	e7b3      	b.n	1801a <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   180b2:	2500      	movs	r5, #0
   180b4:	e7c4      	b.n	18040 <z_impl_k_mutex_lock+0xe8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   180b6:	480b      	ldr	r0, [pc, #44]	; (180e4 <z_impl_k_mutex_lock+0x18c>)
   180b8:	f001 fbfc 	bl	198b4 <z_spin_unlock_valid>
   180bc:	b940      	cbnz	r0, 180d0 <z_impl_k_mutex_lock+0x178>
   180be:	490a      	ldr	r1, [pc, #40]	; (180e8 <z_impl_k_mutex_lock+0x190>)
   180c0:	4807      	ldr	r0, [pc, #28]	; (180e0 <z_impl_k_mutex_lock+0x188>)
   180c2:	22a7      	movs	r2, #167	; 0xa7
   180c4:	f002 fbd4 	bl	1a870 <printk>
   180c8:	21a7      	movs	r1, #167	; 0xa7
   180ca:	4807      	ldr	r0, [pc, #28]	; (180e8 <z_impl_k_mutex_lock+0x190>)
   180cc:	f002 fe76 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   180d0:	f386 8811 	msr	BASEPRI, r6
   180d4:	f3bf 8f6f 	isb	sy
   180d8:	e7e8      	b.n	180ac <z_impl_k_mutex_lock+0x154>
   180da:	bf00      	nop
   180dc:	00022c32 	.word	0x00022c32
   180e0:	0001fdfa 	.word	0x0001fdfa
   180e4:	2000b148 	.word	0x2000b148
   180e8:	0001fe34 	.word	0x0001fe34
   180ec:	2000b14c 	.word	0x2000b14c

000180f0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   180f0:	b538      	push	{r3, r4, r5, lr}
   180f2:	4604      	mov	r4, r0
   180f4:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   180f8:	b143      	cbz	r3, 1810c <z_impl_k_mutex_unlock+0x1c>
   180fa:	4946      	ldr	r1, [pc, #280]	; (18214 <z_impl_k_mutex_unlock+0x124>)
   180fc:	4846      	ldr	r0, [pc, #280]	; (18218 <z_impl_k_mutex_unlock+0x128>)
   180fe:	22d8      	movs	r2, #216	; 0xd8
   18100:	f002 fbb6 	bl	1a870 <printk>
   18104:	21d8      	movs	r1, #216	; 0xd8
   18106:	4843      	ldr	r0, [pc, #268]	; (18214 <z_impl_k_mutex_unlock+0x124>)
   18108:	f002 fe58 	bl	1adbc <assert_post_action>

	CHECKIF(mutex->owner == NULL) {
   1810c:	68a3      	ldr	r3, [r4, #8]
   1810e:	2b00      	cmp	r3, #0
   18110:	d079      	beq.n	18206 <z_impl_k_mutex_unlock+0x116>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   18112:	4d42      	ldr	r5, [pc, #264]	; (1821c <z_impl_k_mutex_unlock+0x12c>)
   18114:	68aa      	ldr	r2, [r5, #8]
   18116:	4293      	cmp	r3, r2
   18118:	d178      	bne.n	1820c <z_impl_k_mutex_unlock+0x11c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   1811a:	68e3      	ldr	r3, [r4, #12]
   1811c:	b943      	cbnz	r3, 18130 <z_impl_k_mutex_unlock+0x40>
   1811e:	493d      	ldr	r1, [pc, #244]	; (18214 <z_impl_k_mutex_unlock+0x124>)
   18120:	483d      	ldr	r0, [pc, #244]	; (18218 <z_impl_k_mutex_unlock+0x128>)
   18122:	22ea      	movs	r2, #234	; 0xea
   18124:	f002 fba4 	bl	1a870 <printk>
   18128:	21ea      	movs	r1, #234	; 0xea
   1812a:	483a      	ldr	r0, [pc, #232]	; (18214 <z_impl_k_mutex_unlock+0x124>)
   1812c:	f002 fe46 	bl	1adbc <assert_post_action>
   18130:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   18134:	b153      	cbz	r3, 1814c <z_impl_k_mutex_unlock+0x5c>
   18136:	493a      	ldr	r1, [pc, #232]	; (18220 <z_impl_k_mutex_unlock+0x130>)
   18138:	4837      	ldr	r0, [pc, #220]	; (18218 <z_impl_k_mutex_unlock+0x128>)
   1813a:	f44f 7289 	mov.w	r2, #274	; 0x112
   1813e:	f002 fb97 	bl	1a870 <printk>
   18142:	f44f 7189 	mov.w	r1, #274	; 0x112
   18146:	4836      	ldr	r0, [pc, #216]	; (18220 <z_impl_k_mutex_unlock+0x130>)
   18148:	f002 fe38 	bl	1adbc <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   1814c:	68ab      	ldr	r3, [r5, #8]
   1814e:	7bdb      	ldrb	r3, [r3, #15]
   18150:	2b01      	cmp	r3, #1
   18152:	d10a      	bne.n	1816a <z_impl_k_mutex_unlock+0x7a>
   18154:	4932      	ldr	r1, [pc, #200]	; (18220 <z_impl_k_mutex_unlock+0x130>)
   18156:	4830      	ldr	r0, [pc, #192]	; (18218 <z_impl_k_mutex_unlock+0x128>)
   18158:	f240 1213 	movw	r2, #275	; 0x113
   1815c:	f002 fb88 	bl	1a870 <printk>
   18160:	f240 1113 	movw	r1, #275	; 0x113
   18164:	482e      	ldr	r0, [pc, #184]	; (18220 <z_impl_k_mutex_unlock+0x130>)
   18166:	f002 fe29 	bl	1adbc <assert_post_action>

	--_current->base.sched_locked;
   1816a:	68aa      	ldr	r2, [r5, #8]
   1816c:	7bd3      	ldrb	r3, [r2, #15]
   1816e:	3b01      	subs	r3, #1
   18170:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   18172:	68e3      	ldr	r3, [r4, #12]
   18174:	2b01      	cmp	r3, #1
   18176:	d005      	beq.n	18184 <z_impl_k_mutex_unlock+0x94>
		mutex->lock_count--;
   18178:	3b01      	subs	r3, #1
   1817a:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1817c:	f000 fb38 	bl	187f0 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   18180:	2000      	movs	r0, #0
}
   18182:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   18184:	f04f 0320 	mov.w	r3, #32
   18188:	f3ef 8511 	mrs	r5, BASEPRI
   1818c:	f383 8811 	msr	BASEPRI, r3
   18190:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18194:	4823      	ldr	r0, [pc, #140]	; (18224 <z_impl_k_mutex_unlock+0x134>)
   18196:	f001 fb7f 	bl	19898 <z_spin_lock_valid>
   1819a:	b940      	cbnz	r0, 181ae <z_impl_k_mutex_unlock+0xbe>
   1819c:	4922      	ldr	r1, [pc, #136]	; (18228 <z_impl_k_mutex_unlock+0x138>)
   1819e:	481e      	ldr	r0, [pc, #120]	; (18218 <z_impl_k_mutex_unlock+0x128>)
   181a0:	227c      	movs	r2, #124	; 0x7c
   181a2:	f002 fb65 	bl	1a870 <printk>
   181a6:	217c      	movs	r1, #124	; 0x7c
   181a8:	481f      	ldr	r0, [pc, #124]	; (18228 <z_impl_k_mutex_unlock+0x138>)
   181aa:	f002 fe07 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   181ae:	481d      	ldr	r0, [pc, #116]	; (18224 <z_impl_k_mutex_unlock+0x134>)
   181b0:	f001 fb8e 	bl	198d0 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   181b4:	6921      	ldr	r1, [r4, #16]
   181b6:	68a0      	ldr	r0, [r4, #8]
   181b8:	f005 feef 	bl	1df9a <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   181bc:	4620      	mov	r0, r4
   181be:	f000 ffc9 	bl	19154 <z_unpend_first_thread>
	mutex->owner = new_owner;
   181c2:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   181c4:	b160      	cbz	r0, 181e0 <z_impl_k_mutex_unlock+0xf0>
		mutex->owner_orig_prio = new_owner->base.prio;
   181c6:	f990 200e 	ldrsb.w	r2, [r0, #14]
   181ca:	6122      	str	r2, [r4, #16]
   181cc:	2200      	movs	r2, #0
   181ce:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		z_ready_thread(new_owner);
   181d2:	f000 fbb3 	bl	1893c <z_ready_thread>
		z_reschedule(&lock, key);
   181d6:	4629      	mov	r1, r5
   181d8:	4812      	ldr	r0, [pc, #72]	; (18224 <z_impl_k_mutex_unlock+0x134>)
   181da:	f000 f9db 	bl	18594 <z_reschedule>
   181de:	e7cd      	b.n	1817c <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count = 0U;
   181e0:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   181e2:	4810      	ldr	r0, [pc, #64]	; (18224 <z_impl_k_mutex_unlock+0x134>)
   181e4:	f001 fb66 	bl	198b4 <z_spin_unlock_valid>
   181e8:	b940      	cbnz	r0, 181fc <z_impl_k_mutex_unlock+0x10c>
   181ea:	490f      	ldr	r1, [pc, #60]	; (18228 <z_impl_k_mutex_unlock+0x138>)
   181ec:	480a      	ldr	r0, [pc, #40]	; (18218 <z_impl_k_mutex_unlock+0x128>)
   181ee:	22a7      	movs	r2, #167	; 0xa7
   181f0:	f002 fb3e 	bl	1a870 <printk>
   181f4:	21a7      	movs	r1, #167	; 0xa7
   181f6:	480c      	ldr	r0, [pc, #48]	; (18228 <z_impl_k_mutex_unlock+0x138>)
   181f8:	f002 fde0 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   181fc:	f385 8811 	msr	BASEPRI, r5
   18200:	f3bf 8f6f 	isb	sy
   18204:	e7ba      	b.n	1817c <z_impl_k_mutex_unlock+0x8c>
		return -EINVAL;
   18206:	f06f 0015 	mvn.w	r0, #21
   1820a:	e7ba      	b.n	18182 <z_impl_k_mutex_unlock+0x92>
		return -EPERM;
   1820c:	f04f 30ff 	mov.w	r0, #4294967295
   18210:	e7b7      	b.n	18182 <z_impl_k_mutex_unlock+0x92>
   18212:	bf00      	nop
   18214:	00022c32 	.word	0x00022c32
   18218:	0001fdfa 	.word	0x0001fdfa
   1821c:	2000b14c 	.word	0x2000b14c
   18220:	00022c54 	.word	0x00022c54
   18224:	2000b148 	.word	0x2000b148
   18228:	0001fe34 	.word	0x0001fe34

0001822c <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   1822c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18230:	4604      	mov	r4, r0
   18232:	460d      	mov	r5, r1
   18234:	4690      	mov	r8, r2
   18236:	4699      	mov	r9, r3
   18238:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1823c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   18240:	f04f 0320 	mov.w	r3, #32
   18244:	f3ef 8711 	mrs	r7, BASEPRI
   18248:	f383 8811 	msr	BASEPRI, r3
   1824c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18250:	4630      	mov	r0, r6
   18252:	f001 fb21 	bl	19898 <z_spin_lock_valid>
   18256:	b940      	cbnz	r0, 1826a <queue_insert+0x3e>
   18258:	4937      	ldr	r1, [pc, #220]	; (18338 <queue_insert+0x10c>)
   1825a:	4838      	ldr	r0, [pc, #224]	; (1833c <queue_insert+0x110>)
   1825c:	227c      	movs	r2, #124	; 0x7c
   1825e:	f002 fb07 	bl	1a870 <printk>
   18262:	217c      	movs	r1, #124	; 0x7c
   18264:	4834      	ldr	r0, [pc, #208]	; (18338 <queue_insert+0x10c>)
   18266:	f002 fda9 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   1826a:	4630      	mov	r0, r6
   1826c:	f001 fb30 	bl	198d0 <z_spin_lock_set_owner>

	if (is_append) {
   18270:	f1ba 0f00 	cmp.w	sl, #0
   18274:	d000      	beq.n	18278 <queue_insert+0x4c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   18276:	6865      	ldr	r5, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   18278:	f104 000c 	add.w	r0, r4, #12
   1827c:	f000 ff6a 	bl	19154 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   18280:	b160      	cbz	r0, 1829c <queue_insert+0x70>
   18282:	2400      	movs	r4, #0
   18284:	f8c0 8014 	str.w	r8, [r0, #20]
   18288:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
	z_ready_thread(thread);
   1828c:	f000 fb56 	bl	1893c <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   18290:	4630      	mov	r0, r6
   18292:	4639      	mov	r1, r7
   18294:	f000 f97e 	bl	18594 <z_reschedule>
	return 0;
   18298:	2000      	movs	r0, #0
   1829a:	e019      	b.n	182d0 <queue_insert+0xa4>
	if (alloc) {
   1829c:	f1b9 0f00 	cmp.w	r9, #0
   182a0:	d028      	beq.n	182f4 <queue_insert+0xc8>
	return z_thread_aligned_alloc(0, size);
   182a2:	2108      	movs	r1, #8
   182a4:	f002 fa12 	bl	1a6cc <z_thread_aligned_alloc>
		if (anode == NULL) {
   182a8:	b9a0      	cbnz	r0, 182d4 <queue_insert+0xa8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   182aa:	4630      	mov	r0, r6
   182ac:	f001 fb02 	bl	198b4 <z_spin_unlock_valid>
   182b0:	b940      	cbnz	r0, 182c4 <queue_insert+0x98>
   182b2:	4921      	ldr	r1, [pc, #132]	; (18338 <queue_insert+0x10c>)
   182b4:	4821      	ldr	r0, [pc, #132]	; (1833c <queue_insert+0x110>)
   182b6:	22a7      	movs	r2, #167	; 0xa7
   182b8:	f002 fada 	bl	1a870 <printk>
   182bc:	21a7      	movs	r1, #167	; 0xa7
   182be:	481e      	ldr	r0, [pc, #120]	; (18338 <queue_insert+0x10c>)
   182c0:	f002 fd7c 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   182c4:	f387 8811 	msr	BASEPRI, r7
   182c8:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   182cc:	f06f 000b 	mvn.w	r0, #11
}
   182d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   182d4:	2301      	movs	r3, #1
		anode->data = data;
   182d6:	f8c0 8004 	str.w	r8, [r0, #4]
   182da:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   182dc:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   182de:	f003 0203 	and.w	r2, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   182e2:	b95d      	cbnz	r5, 182fc <queue_insert+0xd0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   182e4:	6823      	ldr	r3, [r4, #0]
   182e6:	4313      	orrs	r3, r2
   182e8:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   182ea:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   182ec:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   182ee:	b973      	cbnz	r3, 1830e <queue_insert+0xe2>
	list->tail = node;
   182f0:	6060      	str	r0, [r4, #4]
}
   182f2:	e00c      	b.n	1830e <queue_insert+0xe2>
}
   182f4:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   182f6:	f8c8 9000 	str.w	r9, [r8]
}
   182fa:	e7ef      	b.n	182dc <queue_insert+0xb0>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   182fc:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   182fe:	f033 0303 	bics.w	r3, r3, #3
   18302:	d110      	bne.n	18326 <queue_insert+0xfa>
	parent->next_and_flags = cur_flags | (unative_t)child;
   18304:	6002      	str	r2, [r0, #0]
	return list->tail;
   18306:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   18308:	b93a      	cbnz	r2, 1831a <queue_insert+0xee>
	list->head = node;
   1830a:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1830e:	2104      	movs	r1, #4
   18310:	f104 0014 	add.w	r0, r4, #20
   18314:	f005 ffb0 	bl	1e278 <z_handle_obj_poll_events>
   18318:	e7ba      	b.n	18290 <queue_insert+0x64>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1831a:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1831c:	f003 0303 	and.w	r3, r3, #3
   18320:	4303      	orrs	r3, r0
   18322:	6013      	str	r3, [r2, #0]
   18324:	e7e4      	b.n	182f0 <queue_insert+0xc4>
   18326:	4313      	orrs	r3, r2
   18328:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1832a:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1832c:	f003 0303 	and.w	r3, r3, #3
   18330:	4303      	orrs	r3, r0
   18332:	602b      	str	r3, [r5, #0]
}
   18334:	e7eb      	b.n	1830e <queue_insert+0xe2>
   18336:	bf00      	nop
   18338:	0001fe34 	.word	0x0001fe34
   1833c:	0001fdfa 	.word	0x0001fdfa

00018340 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   18340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18344:	4605      	mov	r5, r0
   18346:	4616      	mov	r6, r2
	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   18348:	460c      	mov	r4, r1
   1834a:	2900      	cmp	r1, #0
   1834c:	d045      	beq.n	183da <k_queue_append_list+0x9a>
   1834e:	2a00      	cmp	r2, #0
   18350:	d043      	beq.n	183da <k_queue_append_list+0x9a>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   18352:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   18356:	f04f 0320 	mov.w	r3, #32
   1835a:	f3ef 8911 	mrs	r9, BASEPRI
   1835e:	f383 8811 	msr	BASEPRI, r3
   18362:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18366:	4638      	mov	r0, r7
   18368:	f001 fa96 	bl	19898 <z_spin_lock_valid>
   1836c:	b940      	cbnz	r0, 18380 <k_queue_append_list+0x40>
   1836e:	491c      	ldr	r1, [pc, #112]	; (183e0 <k_queue_append_list+0xa0>)
   18370:	481c      	ldr	r0, [pc, #112]	; (183e4 <k_queue_append_list+0xa4>)
   18372:	227c      	movs	r2, #124	; 0x7c
   18374:	f002 fa7c 	bl	1a870 <printk>
   18378:	217c      	movs	r1, #124	; 0x7c
   1837a:	4819      	ldr	r0, [pc, #100]	; (183e0 <k_queue_append_list+0xa0>)
   1837c:	f002 fd1e 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   18380:	4638      	mov	r0, r7
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   18382:	f105 080c 	add.w	r8, r5, #12
   18386:	f001 faa3 	bl	198d0 <z_spin_lock_set_owner>
   1838a:	4640      	mov	r0, r8
   1838c:	f000 fee2 	bl	19154 <z_unpend_first_thread>
   18390:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   18394:	b920      	cbnz	r0, 183a0 <k_queue_append_list+0x60>
	return list->tail;
   18396:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   18398:	b9ca      	cbnz	r2, 183ce <k_queue_append_list+0x8e>
	list->head = node;
   1839a:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1839c:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1839e:	e00a      	b.n	183b6 <k_queue_append_list+0x76>
	thread->base.swap_data = data;
   183a0:	6144      	str	r4, [r0, #20]
   183a2:	f8c0 a088 	str.w	sl, [r0, #136]	; 0x88
	z_ready_thread(thread);
   183a6:	f000 fac9 	bl	1893c <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   183aa:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   183ac:	4640      	mov	r0, r8
   183ae:	f000 fed1 	bl	19154 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   183b2:	2c00      	cmp	r4, #0
   183b4:	d1ee      	bne.n	18394 <k_queue_append_list+0x54>
	z_handle_obj_poll_events(&queue->poll_events, state);
   183b6:	2104      	movs	r1, #4
   183b8:	f105 0014 	add.w	r0, r5, #20
   183bc:	f005 ff5c 	bl	1e278 <z_handle_obj_poll_events>
	if (head != NULL) {
		sys_sflist_append_list(&queue->data_q, head, tail);
	}

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   183c0:	4638      	mov	r0, r7
   183c2:	4649      	mov	r1, r9
   183c4:	f000 f8e6 	bl	18594 <z_reschedule>
	return 0;
   183c8:	2000      	movs	r0, #0
}
   183ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   183ce:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   183d0:	f003 0303 	and.w	r3, r3, #3
   183d4:	431c      	orrs	r4, r3
   183d6:	6014      	str	r4, [r2, #0]
}
   183d8:	e7e0      	b.n	1839c <k_queue_append_list+0x5c>
		return -EINVAL;
   183da:	f06f 0015 	mvn.w	r0, #21
   183de:	e7f4      	b.n	183ca <k_queue_append_list+0x8a>
   183e0:	0001fe34 	.word	0x0001fe34
   183e4:	0001fdfa 	.word	0x0001fdfa

000183e8 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   183e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   183ec:	4605      	mov	r5, r0
   183ee:	4690      	mov	r8, r2
   183f0:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   183f2:	f100 0608 	add.w	r6, r0, #8
   183f6:	f04f 0320 	mov.w	r3, #32
   183fa:	f3ef 8911 	mrs	r9, BASEPRI
   183fe:	f383 8811 	msr	BASEPRI, r3
   18402:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18406:	4630      	mov	r0, r6
   18408:	f001 fa46 	bl	19898 <z_spin_lock_valid>
   1840c:	b940      	cbnz	r0, 18420 <z_impl_k_queue_get+0x38>
   1840e:	4921      	ldr	r1, [pc, #132]	; (18494 <z_impl_k_queue_get+0xac>)
   18410:	4821      	ldr	r0, [pc, #132]	; (18498 <z_impl_k_queue_get+0xb0>)
   18412:	227c      	movs	r2, #124	; 0x7c
   18414:	f002 fa2c 	bl	1a870 <printk>
   18418:	217c      	movs	r1, #124	; 0x7c
   1841a:	481e      	ldr	r0, [pc, #120]	; (18494 <z_impl_k_queue_get+0xac>)
   1841c:	f002 fcce 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   18420:	4630      	mov	r0, r6
   18422:	f001 fa55 	bl	198d0 <z_spin_lock_set_owner>
	return list->head;
   18426:	682c      	ldr	r4, [r5, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   18428:	b314      	cbz	r4, 18470 <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1842a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1842c:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1842e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   18432:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   18434:	4620      	mov	r0, r4
   18436:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   1843a:	602b      	str	r3, [r5, #0]
	list->tail = node;
   1843c:	bf08      	it	eq
   1843e:	606b      	streq	r3, [r5, #4]
   18440:	f005 fdba 	bl	1dfb8 <z_queue_node_peek>
   18444:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18446:	4630      	mov	r0, r6
   18448:	f001 fa34 	bl	198b4 <z_spin_unlock_valid>
   1844c:	b940      	cbnz	r0, 18460 <z_impl_k_queue_get+0x78>
   1844e:	4911      	ldr	r1, [pc, #68]	; (18494 <z_impl_k_queue_get+0xac>)
   18450:	4811      	ldr	r0, [pc, #68]	; (18498 <z_impl_k_queue_get+0xb0>)
   18452:	22a7      	movs	r2, #167	; 0xa7
   18454:	f002 fa0c 	bl	1a870 <printk>
   18458:	21a7      	movs	r1, #167	; 0xa7
   1845a:	480e      	ldr	r0, [pc, #56]	; (18494 <z_impl_k_queue_get+0xac>)
   1845c:	f002 fcae 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   18460:	f389 8811 	msr	BASEPRI, r9
   18464:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   18468:	4620      	mov	r0, r4
   1846a:	b003      	add	sp, #12
   1846c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   18470:	ea58 0307 	orrs.w	r3, r8, r7
   18474:	d0e7      	beq.n	18446 <z_impl_k_queue_get+0x5e>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   18476:	4649      	mov	r1, r9
   18478:	4630      	mov	r0, r6
   1847a:	e9cd 8700 	strd	r8, r7, [sp]
   1847e:	f105 020c 	add.w	r2, r5, #12
   18482:	f000 fdc5 	bl	19010 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   18486:	2800      	cmp	r0, #0
   18488:	d1ee      	bne.n	18468 <z_impl_k_queue_get+0x80>
   1848a:	4b04      	ldr	r3, [pc, #16]	; (1849c <z_impl_k_queue_get+0xb4>)
   1848c:	689b      	ldr	r3, [r3, #8]
   1848e:	695c      	ldr	r4, [r3, #20]
   18490:	e7ea      	b.n	18468 <z_impl_k_queue_get+0x80>
   18492:	bf00      	nop
   18494:	0001fe34 	.word	0x0001fe34
   18498:	0001fdfa 	.word	0x0001fdfa
   1849c:	2000b14c 	.word	0x2000b14c

000184a0 <pended_on>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   184a0:	6883      	ldr	r3, [r0, #8]
{
   184a2:	b510      	push	{r4, lr}
   184a4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   184a6:	b953      	cbnz	r3, 184be <pended_on+0x1e>
   184a8:	4906      	ldr	r1, [pc, #24]	; (184c4 <pended_on+0x24>)
   184aa:	4807      	ldr	r0, [pc, #28]	; (184c8 <pended_on+0x28>)
   184ac:	f44f 7201 	mov.w	r2, #516	; 0x204
   184b0:	f002 f9de 	bl	1a870 <printk>
   184b4:	f44f 7101 	mov.w	r1, #516	; 0x204
   184b8:	4802      	ldr	r0, [pc, #8]	; (184c4 <pended_on+0x24>)
   184ba:	f002 fc7f 	bl	1adbc <assert_post_action>

	return thread->base.pended_on;
}
   184be:	68a0      	ldr	r0, [r4, #8]
   184c0:	bd10      	pop	{r4, pc}
   184c2:	bf00      	nop
   184c4:	00022c7f 	.word	0x00022c7f
   184c8:	0001fdfa 	.word	0x0001fdfa

000184cc <z_reset_time_slice>:
{
   184cc:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   184ce:	4c08      	ldr	r4, [pc, #32]	; (184f0 <z_reset_time_slice+0x24>)
   184d0:	6823      	ldr	r3, [r4, #0]
   184d2:	b15b      	cbz	r3, 184ec <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   184d4:	f7f3 ffca 	bl	c46c <z_clock_elapsed>
   184d8:	4603      	mov	r3, r0
   184da:	6820      	ldr	r0, [r4, #0]
   184dc:	4a05      	ldr	r2, [pc, #20]	; (184f4 <z_reset_time_slice+0x28>)
   184de:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   184e0:	2100      	movs	r1, #0
}
   184e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   184e6:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   184e8:	f001 bc8c 	b.w	19e04 <z_set_timeout_expiry>
}
   184ec:	bd10      	pop	{r4, pc}
   184ee:	bf00      	nop
   184f0:	2000b18c 	.word	0x2000b18c
   184f4:	2000b14c 	.word	0x2000b14c

000184f8 <k_sched_time_slice_set>:
{
   184f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   184fa:	4604      	mov	r4, r0
   184fc:	460d      	mov	r5, r1
	__asm__ volatile(
   184fe:	f04f 0320 	mov.w	r3, #32
   18502:	f3ef 8711 	mrs	r7, BASEPRI
   18506:	f383 8811 	msr	BASEPRI, r3
   1850a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1850e:	481b      	ldr	r0, [pc, #108]	; (1857c <k_sched_time_slice_set+0x84>)
   18510:	f001 f9c2 	bl	19898 <z_spin_lock_valid>
   18514:	b940      	cbnz	r0, 18528 <k_sched_time_slice_set+0x30>
   18516:	491a      	ldr	r1, [pc, #104]	; (18580 <k_sched_time_slice_set+0x88>)
   18518:	481a      	ldr	r0, [pc, #104]	; (18584 <k_sched_time_slice_set+0x8c>)
   1851a:	227c      	movs	r2, #124	; 0x7c
   1851c:	f002 f9a8 	bl	1a870 <printk>
   18520:	217c      	movs	r1, #124	; 0x7c
   18522:	4817      	ldr	r0, [pc, #92]	; (18580 <k_sched_time_slice_set+0x88>)
   18524:	f002 fc4a 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   18528:	4814      	ldr	r0, [pc, #80]	; (1857c <k_sched_time_slice_set+0x84>)
   1852a:	f001 f9d1 	bl	198d0 <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
   1852e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   18532:	2100      	movs	r1, #0
   18534:	f240 30e7 	movw	r0, #999	; 0x3e7
   18538:	4b13      	ldr	r3, [pc, #76]	; (18588 <k_sched_time_slice_set+0x90>)
   1853a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1853e:	6159      	str	r1, [r3, #20]
   18540:	2300      	movs	r3, #0
   18542:	fbe4 0106 	umlal	r0, r1, r4, r6
   18546:	f7f0 faf1 	bl	8b2c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1854a:	4b10      	ldr	r3, [pc, #64]	; (1858c <k_sched_time_slice_set+0x94>)
   1854c:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1854e:	4b10      	ldr	r3, [pc, #64]	; (18590 <k_sched_time_slice_set+0x98>)
   18550:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   18552:	f7ff ffbb 	bl	184cc <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18556:	4809      	ldr	r0, [pc, #36]	; (1857c <k_sched_time_slice_set+0x84>)
   18558:	f001 f9ac 	bl	198b4 <z_spin_unlock_valid>
   1855c:	b940      	cbnz	r0, 18570 <k_sched_time_slice_set+0x78>
   1855e:	4908      	ldr	r1, [pc, #32]	; (18580 <k_sched_time_slice_set+0x88>)
   18560:	4808      	ldr	r0, [pc, #32]	; (18584 <k_sched_time_slice_set+0x8c>)
   18562:	22a7      	movs	r2, #167	; 0xa7
   18564:	f002 f984 	bl	1a870 <printk>
   18568:	21a7      	movs	r1, #167	; 0xa7
   1856a:	4805      	ldr	r0, [pc, #20]	; (18580 <k_sched_time_slice_set+0x88>)
   1856c:	f002 fc26 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   18570:	f387 8811 	msr	BASEPRI, r7
   18574:	f3bf 8f6f 	isb	sy
}
   18578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1857a:	bf00      	nop
   1857c:	2000b184 	.word	0x2000b184
   18580:	0001fe34 	.word	0x0001fe34
   18584:	0001fdfa 	.word	0x0001fdfa
   18588:	2000b14c 	.word	0x2000b14c
   1858c:	2000b18c 	.word	0x2000b18c
   18590:	2000b188 	.word	0x2000b188

00018594 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   18594:	b510      	push	{r4, lr}
   18596:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   18598:	460c      	mov	r4, r1
   1859a:	b9c1      	cbnz	r1, 185ce <z_reschedule+0x3a>
   1859c:	f3ef 8205 	mrs	r2, IPSR
   185a0:	b9aa      	cbnz	r2, 185ce <z_reschedule+0x3a>
	return _kernel.ready_q.cache;
   185a2:	4a14      	ldr	r2, [pc, #80]	; (185f4 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   185a4:	6a91      	ldr	r1, [r2, #40]	; 0x28
   185a6:	6892      	ldr	r2, [r2, #8]
   185a8:	4291      	cmp	r1, r2
   185aa:	d010      	beq.n	185ce <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   185ac:	f001 f982 	bl	198b4 <z_spin_unlock_valid>
   185b0:	b940      	cbnz	r0, 185c4 <z_reschedule+0x30>
   185b2:	4911      	ldr	r1, [pc, #68]	; (185f8 <z_reschedule+0x64>)
   185b4:	4811      	ldr	r0, [pc, #68]	; (185fc <z_reschedule+0x68>)
   185b6:	22be      	movs	r2, #190	; 0xbe
   185b8:	f002 f95a 	bl	1a870 <printk>
   185bc:	21be      	movs	r1, #190	; 0xbe
   185be:	480e      	ldr	r0, [pc, #56]	; (185f8 <z_reschedule+0x64>)
   185c0:	f002 fbfc 	bl	1adbc <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   185c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   185c8:	2000      	movs	r0, #0
   185ca:	f7f5 b9a9 	b.w	d920 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   185ce:	4618      	mov	r0, r3
   185d0:	f001 f970 	bl	198b4 <z_spin_unlock_valid>
   185d4:	b940      	cbnz	r0, 185e8 <z_reschedule+0x54>
   185d6:	4908      	ldr	r1, [pc, #32]	; (185f8 <z_reschedule+0x64>)
   185d8:	4808      	ldr	r0, [pc, #32]	; (185fc <z_reschedule+0x68>)
   185da:	22a7      	movs	r2, #167	; 0xa7
   185dc:	f002 f948 	bl	1a870 <printk>
   185e0:	21a7      	movs	r1, #167	; 0xa7
   185e2:	4805      	ldr	r0, [pc, #20]	; (185f8 <z_reschedule+0x64>)
   185e4:	f002 fbea 	bl	1adbc <assert_post_action>
   185e8:	f384 8811 	msr	BASEPRI, r4
   185ec:	f3bf 8f6f 	isb	sy
   185f0:	bd10      	pop	{r4, pc}
   185f2:	bf00      	nop
   185f4:	2000b14c 	.word	0x2000b14c
   185f8:	0001fe34 	.word	0x0001fe34
   185fc:	0001fdfa 	.word	0x0001fdfa

00018600 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   18600:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   18602:	f04f 0320 	mov.w	r3, #32
   18606:	f3ef 8511 	mrs	r5, BASEPRI
   1860a:	f383 8811 	msr	BASEPRI, r3
   1860e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18612:	4822      	ldr	r0, [pc, #136]	; (1869c <k_sched_lock+0x9c>)
   18614:	f001 f940 	bl	19898 <z_spin_lock_valid>
   18618:	b940      	cbnz	r0, 1862c <k_sched_lock+0x2c>
   1861a:	4921      	ldr	r1, [pc, #132]	; (186a0 <k_sched_lock+0xa0>)
   1861c:	4821      	ldr	r0, [pc, #132]	; (186a4 <k_sched_lock+0xa4>)
   1861e:	227c      	movs	r2, #124	; 0x7c
   18620:	f002 f926 	bl	1a870 <printk>
   18624:	217c      	movs	r1, #124	; 0x7c
   18626:	481e      	ldr	r0, [pc, #120]	; (186a0 <k_sched_lock+0xa0>)
   18628:	f002 fbc8 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   1862c:	481b      	ldr	r0, [pc, #108]	; (1869c <k_sched_lock+0x9c>)
   1862e:	f001 f94f 	bl	198d0 <z_spin_lock_set_owner>
   18632:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   18636:	b153      	cbz	r3, 1864e <k_sched_lock+0x4e>
   18638:	491b      	ldr	r1, [pc, #108]	; (186a8 <k_sched_lock+0xa8>)
   1863a:	481a      	ldr	r0, [pc, #104]	; (186a4 <k_sched_lock+0xa4>)
   1863c:	f44f 7289 	mov.w	r2, #274	; 0x112
   18640:	f002 f916 	bl	1a870 <printk>
   18644:	f44f 7189 	mov.w	r1, #274	; 0x112
   18648:	4817      	ldr	r0, [pc, #92]	; (186a8 <k_sched_lock+0xa8>)
   1864a:	f002 fbb7 	bl	1adbc <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   1864e:	4c17      	ldr	r4, [pc, #92]	; (186ac <k_sched_lock+0xac>)
   18650:	68a3      	ldr	r3, [r4, #8]
   18652:	7bdb      	ldrb	r3, [r3, #15]
   18654:	2b01      	cmp	r3, #1
   18656:	d10a      	bne.n	1866e <k_sched_lock+0x6e>
   18658:	4913      	ldr	r1, [pc, #76]	; (186a8 <k_sched_lock+0xa8>)
   1865a:	4812      	ldr	r0, [pc, #72]	; (186a4 <k_sched_lock+0xa4>)
   1865c:	f240 1213 	movw	r2, #275	; 0x113
   18660:	f002 f906 	bl	1a870 <printk>
   18664:	f240 1113 	movw	r1, #275	; 0x113
   18668:	480f      	ldr	r0, [pc, #60]	; (186a8 <k_sched_lock+0xa8>)
   1866a:	f002 fba7 	bl	1adbc <assert_post_action>
	--_current->base.sched_locked;
   1866e:	68a2      	ldr	r2, [r4, #8]
   18670:	7bd3      	ldrb	r3, [r2, #15]
   18672:	3b01      	subs	r3, #1
   18674:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18676:	4809      	ldr	r0, [pc, #36]	; (1869c <k_sched_lock+0x9c>)
   18678:	f001 f91c 	bl	198b4 <z_spin_unlock_valid>
   1867c:	b940      	cbnz	r0, 18690 <k_sched_lock+0x90>
   1867e:	4908      	ldr	r1, [pc, #32]	; (186a0 <k_sched_lock+0xa0>)
   18680:	4808      	ldr	r0, [pc, #32]	; (186a4 <k_sched_lock+0xa4>)
   18682:	22a7      	movs	r2, #167	; 0xa7
   18684:	f002 f8f4 	bl	1a870 <printk>
   18688:	21a7      	movs	r1, #167	; 0xa7
   1868a:	4805      	ldr	r0, [pc, #20]	; (186a0 <k_sched_lock+0xa0>)
   1868c:	f002 fb96 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   18690:	f385 8811 	msr	BASEPRI, r5
   18694:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   18698:	bd38      	pop	{r3, r4, r5, pc}
   1869a:	bf00      	nop
   1869c:	2000b184 	.word	0x2000b184
   186a0:	0001fe34 	.word	0x0001fe34
   186a4:	0001fdfa 	.word	0x0001fdfa
   186a8:	00022c54 	.word	0x00022c54
   186ac:	2000b14c 	.word	0x2000b14c

000186b0 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   186b0:	4b11      	ldr	r3, [pc, #68]	; (186f8 <z_priq_dumb_remove+0x48>)
{
   186b2:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   186b4:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   186b8:	4282      	cmp	r2, r0
{
   186ba:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   186bc:	d105      	bne.n	186ca <z_priq_dumb_remove+0x1a>
   186be:	689b      	ldr	r3, [r3, #8]
   186c0:	428b      	cmp	r3, r1
   186c2:	d102      	bne.n	186ca <z_priq_dumb_remove+0x1a>
   186c4:	7b4b      	ldrb	r3, [r1, #13]
   186c6:	06db      	lsls	r3, r3, #27
   186c8:	d114      	bne.n	186f4 <z_priq_dumb_remove+0x44>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   186ca:	4b0c      	ldr	r3, [pc, #48]	; (186fc <z_priq_dumb_remove+0x4c>)
   186cc:	429c      	cmp	r4, r3
   186ce:	d10a      	bne.n	186e6 <z_priq_dumb_remove+0x36>
   186d0:	490b      	ldr	r1, [pc, #44]	; (18700 <z_priq_dumb_remove+0x50>)
   186d2:	480c      	ldr	r0, [pc, #48]	; (18704 <z_priq_dumb_remove+0x54>)
   186d4:	f240 32da 	movw	r2, #986	; 0x3da
   186d8:	f002 f8ca 	bl	1a870 <printk>
   186dc:	f240 31da 	movw	r1, #986	; 0x3da
   186e0:	4807      	ldr	r0, [pc, #28]	; (18700 <z_priq_dumb_remove+0x50>)
   186e2:	f002 fb6b 	bl	1adbc <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   186e6:	e9d4 3200 	ldrd	r3, r2, [r4]
   186ea:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   186ec:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   186ee:	2300      	movs	r3, #0
	node->prev = NULL;
   186f0:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   186f4:	bd10      	pop	{r4, pc}
   186f6:	bf00      	nop
   186f8:	2000b14c 	.word	0x2000b14c
   186fc:	2000a420 	.word	0x2000a420
   18700:	00022c7f 	.word	0x00022c7f
   18704:	0001fdfa 	.word	0x0001fdfa

00018708 <z_unpend_thread>:
{
   18708:	b538      	push	{r3, r4, r5, lr}
   1870a:	4604      	mov	r4, r0
	__asm__ volatile(
   1870c:	f04f 0320 	mov.w	r3, #32
   18710:	f3ef 8511 	mrs	r5, BASEPRI
   18714:	f383 8811 	msr	BASEPRI, r3
   18718:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1871c:	4814      	ldr	r0, [pc, #80]	; (18770 <z_unpend_thread+0x68>)
   1871e:	f001 f8bb 	bl	19898 <z_spin_lock_valid>
   18722:	b940      	cbnz	r0, 18736 <z_unpend_thread+0x2e>
   18724:	4913      	ldr	r1, [pc, #76]	; (18774 <z_unpend_thread+0x6c>)
   18726:	4814      	ldr	r0, [pc, #80]	; (18778 <z_unpend_thread+0x70>)
   18728:	227c      	movs	r2, #124	; 0x7c
   1872a:	f002 f8a1 	bl	1a870 <printk>
   1872e:	217c      	movs	r1, #124	; 0x7c
   18730:	4810      	ldr	r0, [pc, #64]	; (18774 <z_unpend_thread+0x6c>)
   18732:	f002 fb43 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   18736:	480e      	ldr	r0, [pc, #56]	; (18770 <z_unpend_thread+0x68>)
   18738:	f001 f8ca 	bl	198d0 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   1873c:	4620      	mov	r0, r4
   1873e:	f005 fc88 	bl	1e052 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18742:	480b      	ldr	r0, [pc, #44]	; (18770 <z_unpend_thread+0x68>)
   18744:	f001 f8b6 	bl	198b4 <z_spin_unlock_valid>
   18748:	b940      	cbnz	r0, 1875c <z_unpend_thread+0x54>
   1874a:	490a      	ldr	r1, [pc, #40]	; (18774 <z_unpend_thread+0x6c>)
   1874c:	480a      	ldr	r0, [pc, #40]	; (18778 <z_unpend_thread+0x70>)
   1874e:	22a7      	movs	r2, #167	; 0xa7
   18750:	f002 f88e 	bl	1a870 <printk>
   18754:	21a7      	movs	r1, #167	; 0xa7
   18756:	4807      	ldr	r0, [pc, #28]	; (18774 <z_unpend_thread+0x6c>)
   18758:	f002 fb30 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   1875c:	f385 8811 	msr	BASEPRI, r5
   18760:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   18764:	f104 0018 	add.w	r0, r4, #24
}
   18768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1876c:	f001 bad8 	b.w	19d20 <z_abort_timeout>
   18770:	2000b184 	.word	0x2000b184
   18774:	0001fe34 	.word	0x0001fe34
   18778:	0001fdfa 	.word	0x0001fdfa

0001877c <update_cache>:
{
   1877c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(_current != NULL, "");
   1877e:	4c19      	ldr	r4, [pc, #100]	; (187e4 <update_cache+0x68>)
{
   18780:	4602      	mov	r2, r0
	if (_current_cpu->pending_abort != NULL) {
   18782:	6923      	ldr	r3, [r4, #16]
	__ASSERT(_current != NULL, "");
   18784:	68a1      	ldr	r1, [r4, #8]
	if (_current_cpu->pending_abort != NULL) {
   18786:	b143      	cbz	r3, 1879a <update_cache+0x1e>
		return _current_cpu->idle_thread;
   18788:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1878a:	b1a8      	cbz	r0, 187b8 <update_cache+0x3c>
		if (thread != _current) {
   1878c:	68a3      	ldr	r3, [r4, #8]
   1878e:	42ab      	cmp	r3, r5
   18790:	d001      	beq.n	18796 <update_cache+0x1a>
			z_reset_time_slice();
   18792:	f7ff fe9b 	bl	184cc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   18796:	62a5      	str	r5, [r4, #40]	; 0x28
}
   18798:	e023      	b.n	187e2 <update_cache+0x66>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1879a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1879e:	f005 fc66 	bl	1e06e <z_priq_dumb_best>
   187a2:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   187a4:	7b4b      	ldrb	r3, [r1, #13]
   187a6:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   187a8:	bf44      	itt	mi
   187aa:	f043 0308 	orrmi.w	r3, r3, #8
   187ae:	734b      	strbmi	r3, [r1, #13]
	return thread ? thread : _current_cpu->idle_thread;
   187b0:	b905      	cbnz	r5, 187b4 <update_cache+0x38>
   187b2:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   187b4:	b152      	cbz	r2, 187cc <update_cache+0x50>
   187b6:	e7e9      	b.n	1878c <update_cache+0x10>
	__ASSERT(_current != NULL, "");
   187b8:	b941      	cbnz	r1, 187cc <update_cache+0x50>
   187ba:	490b      	ldr	r1, [pc, #44]	; (187e8 <update_cache+0x6c>)
   187bc:	480b      	ldr	r0, [pc, #44]	; (187ec <update_cache+0x70>)
   187be:	2283      	movs	r2, #131	; 0x83
   187c0:	f002 f856 	bl	1a870 <printk>
   187c4:	2183      	movs	r1, #131	; 0x83
   187c6:	4808      	ldr	r0, [pc, #32]	; (187e8 <update_cache+0x6c>)
   187c8:	f002 faf8 	bl	1adbc <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   187cc:	68a3      	ldr	r3, [r4, #8]
   187ce:	7b5a      	ldrb	r2, [r3, #13]
   187d0:	06d2      	lsls	r2, r2, #27
   187d2:	d1db      	bne.n	1878c <update_cache+0x10>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   187d4:	69aa      	ldr	r2, [r5, #24]
   187d6:	2a00      	cmp	r2, #0
   187d8:	d1d8      	bne.n	1878c <update_cache+0x10>
	if (is_preempt(_current) || is_metairq(thread)) {
   187da:	89da      	ldrh	r2, [r3, #14]
   187dc:	2a7f      	cmp	r2, #127	; 0x7f
   187de:	d9d5      	bls.n	1878c <update_cache+0x10>
		_kernel.ready_q.cache = _current;
   187e0:	62a3      	str	r3, [r4, #40]	; 0x28
}
   187e2:	bd38      	pop	{r3, r4, r5, pc}
   187e4:	2000b14c 	.word	0x2000b14c
   187e8:	00022c7f 	.word	0x00022c7f
   187ec:	0001fdfa 	.word	0x0001fdfa

000187f0 <k_sched_unlock>:
{
   187f0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   187f2:	f04f 0320 	mov.w	r3, #32
   187f6:	f3ef 8511 	mrs	r5, BASEPRI
   187fa:	f383 8811 	msr	BASEPRI, r3
   187fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18802:	4824      	ldr	r0, [pc, #144]	; (18894 <k_sched_unlock+0xa4>)
   18804:	f001 f848 	bl	19898 <z_spin_lock_valid>
   18808:	b940      	cbnz	r0, 1881c <k_sched_unlock+0x2c>
   1880a:	4923      	ldr	r1, [pc, #140]	; (18898 <k_sched_unlock+0xa8>)
   1880c:	4823      	ldr	r0, [pc, #140]	; (1889c <k_sched_unlock+0xac>)
   1880e:	227c      	movs	r2, #124	; 0x7c
   18810:	f002 f82e 	bl	1a870 <printk>
   18814:	217c      	movs	r1, #124	; 0x7c
   18816:	4820      	ldr	r0, [pc, #128]	; (18898 <k_sched_unlock+0xa8>)
   18818:	f002 fad0 	bl	1adbc <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
   1881c:	4c20      	ldr	r4, [pc, #128]	; (188a0 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   1881e:	481d      	ldr	r0, [pc, #116]	; (18894 <k_sched_unlock+0xa4>)
   18820:	f001 f856 	bl	198d0 <z_spin_lock_set_owner>
   18824:	68a3      	ldr	r3, [r4, #8]
   18826:	7bdb      	ldrb	r3, [r3, #15]
   18828:	b953      	cbnz	r3, 18840 <k_sched_unlock+0x50>
   1882a:	491e      	ldr	r1, [pc, #120]	; (188a4 <k_sched_unlock+0xb4>)
   1882c:	481b      	ldr	r0, [pc, #108]	; (1889c <k_sched_unlock+0xac>)
   1882e:	f44f 725d 	mov.w	r2, #884	; 0x374
   18832:	f002 f81d 	bl	1a870 <printk>
   18836:	f44f 715d 	mov.w	r1, #884	; 0x374
   1883a:	481a      	ldr	r0, [pc, #104]	; (188a4 <k_sched_unlock+0xb4>)
   1883c:	f002 fabe 	bl	1adbc <assert_post_action>
   18840:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   18844:	b153      	cbz	r3, 1885c <k_sched_unlock+0x6c>
   18846:	4917      	ldr	r1, [pc, #92]	; (188a4 <k_sched_unlock+0xb4>)
   18848:	4814      	ldr	r0, [pc, #80]	; (1889c <k_sched_unlock+0xac>)
   1884a:	f240 3275 	movw	r2, #885	; 0x375
   1884e:	f002 f80f 	bl	1a870 <printk>
   18852:	f240 3175 	movw	r1, #885	; 0x375
   18856:	4813      	ldr	r0, [pc, #76]	; (188a4 <k_sched_unlock+0xb4>)
   18858:	f002 fab0 	bl	1adbc <assert_post_action>
		++_current->base.sched_locked;
   1885c:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   1885e:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   18860:	7bd3      	ldrb	r3, [r2, #15]
   18862:	3301      	adds	r3, #1
   18864:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   18866:	f7ff ff89 	bl	1877c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1886a:	480a      	ldr	r0, [pc, #40]	; (18894 <k_sched_unlock+0xa4>)
   1886c:	f001 f822 	bl	198b4 <z_spin_unlock_valid>
   18870:	b940      	cbnz	r0, 18884 <k_sched_unlock+0x94>
   18872:	4909      	ldr	r1, [pc, #36]	; (18898 <k_sched_unlock+0xa8>)
   18874:	4809      	ldr	r0, [pc, #36]	; (1889c <k_sched_unlock+0xac>)
   18876:	22a7      	movs	r2, #167	; 0xa7
   18878:	f001 fffa 	bl	1a870 <printk>
   1887c:	21a7      	movs	r1, #167	; 0xa7
   1887e:	4806      	ldr	r0, [pc, #24]	; (18898 <k_sched_unlock+0xa8>)
   18880:	f002 fa9c 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   18884:	f385 8811 	msr	BASEPRI, r5
   18888:	f3bf 8f6f 	isb	sy
}
   1888c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   18890:	f005 bbd5 	b.w	1e03e <z_reschedule_unlocked>
   18894:	2000b184 	.word	0x2000b184
   18898:	0001fe34 	.word	0x0001fe34
   1889c:	0001fdfa 	.word	0x0001fdfa
   188a0:	2000b14c 	.word	0x2000b14c
   188a4:	00022c7f 	.word	0x00022c7f

000188a8 <ready_thread>:
{
   188a8:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   188aa:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   188ae:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   188b0:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   188b2:	7b43      	ldrb	r3, [r0, #13]
   188b4:	db39      	blt.n	1892a <ready_thread+0x82>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   188b6:	06db      	lsls	r3, r3, #27
   188b8:	d137      	bne.n	1892a <ready_thread+0x82>
   188ba:	6983      	ldr	r3, [r0, #24]
   188bc:	2b00      	cmp	r3, #0
   188be:	d134      	bne.n	1892a <ready_thread+0x82>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   188c0:	4b1a      	ldr	r3, [pc, #104]	; (1892c <ready_thread+0x84>)
   188c2:	4298      	cmp	r0, r3
   188c4:	d10a      	bne.n	188dc <ready_thread+0x34>
   188c6:	491a      	ldr	r1, [pc, #104]	; (18930 <ready_thread+0x88>)
   188c8:	481a      	ldr	r0, [pc, #104]	; (18934 <ready_thread+0x8c>)
   188ca:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   188ce:	f001 ffcf 	bl	1a870 <printk>
   188d2:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   188d6:	4816      	ldr	r0, [pc, #88]	; (18930 <ready_thread+0x88>)
   188d8:	f002 fa70 	bl	1adbc <assert_post_action>
	return list->head == list;
   188dc:	4a16      	ldr	r2, [pc, #88]	; (18938 <ready_thread+0x90>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   188de:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   188e2:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   188e6:	4283      	cmp	r3, r0
   188e8:	d019      	beq.n	1891e <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   188ea:	b1c3      	cbz	r3, 1891e <ready_thread+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
   188ec:	f994 500e 	ldrsb.w	r5, [r4, #14]
   188f0:	f993 600e 	ldrsb.w	r6, [r3, #14]
   188f4:	42ae      	cmp	r6, r5
   188f6:	dd0d      	ble.n	18914 <ready_thread+0x6c>
	node->prev = successor->prev;
   188f8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   188fa:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   188fe:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   18900:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   18902:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   18904:	2000      	movs	r0, #0
   18906:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1890a:	7363      	strb	r3, [r4, #13]
}
   1890c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   18910:	f7ff bf34 	b.w	1877c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   18914:	428b      	cmp	r3, r1
   18916:	d002      	beq.n	1891e <ready_thread+0x76>
   18918:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1891a:	2b00      	cmp	r3, #0
   1891c:	d1e8      	bne.n	188f0 <ready_thread+0x48>
	node->prev = list->tail;
   1891e:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   18922:	6b13      	ldr	r3, [r2, #48]	; 0x30
   18924:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18926:	6314      	str	r4, [r2, #48]	; 0x30
}
   18928:	e7eb      	b.n	18902 <ready_thread+0x5a>
}
   1892a:	bd70      	pop	{r4, r5, r6, pc}
   1892c:	2000a420 	.word	0x2000a420
   18930:	00022c7f 	.word	0x00022c7f
   18934:	0001fdfa 	.word	0x0001fdfa
   18938:	2000b14c 	.word	0x2000b14c

0001893c <z_ready_thread>:
{
   1893c:	b538      	push	{r3, r4, r5, lr}
   1893e:	4604      	mov	r4, r0
	__asm__ volatile(
   18940:	f04f 0320 	mov.w	r3, #32
   18944:	f3ef 8511 	mrs	r5, BASEPRI
   18948:	f383 8811 	msr	BASEPRI, r3
   1894c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18950:	4812      	ldr	r0, [pc, #72]	; (1899c <z_ready_thread+0x60>)
   18952:	f000 ffa1 	bl	19898 <z_spin_lock_valid>
   18956:	b940      	cbnz	r0, 1896a <z_ready_thread+0x2e>
   18958:	4911      	ldr	r1, [pc, #68]	; (189a0 <z_ready_thread+0x64>)
   1895a:	4812      	ldr	r0, [pc, #72]	; (189a4 <z_ready_thread+0x68>)
   1895c:	227c      	movs	r2, #124	; 0x7c
   1895e:	f001 ff87 	bl	1a870 <printk>
   18962:	217c      	movs	r1, #124	; 0x7c
   18964:	480e      	ldr	r0, [pc, #56]	; (189a0 <z_ready_thread+0x64>)
   18966:	f002 fa29 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   1896a:	480c      	ldr	r0, [pc, #48]	; (1899c <z_ready_thread+0x60>)
   1896c:	f000 ffb0 	bl	198d0 <z_spin_lock_set_owner>
		ready_thread(thread);
   18970:	4620      	mov	r0, r4
   18972:	f7ff ff99 	bl	188a8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18976:	4809      	ldr	r0, [pc, #36]	; (1899c <z_ready_thread+0x60>)
   18978:	f000 ff9c 	bl	198b4 <z_spin_unlock_valid>
   1897c:	b940      	cbnz	r0, 18990 <z_ready_thread+0x54>
   1897e:	4908      	ldr	r1, [pc, #32]	; (189a0 <z_ready_thread+0x64>)
   18980:	4808      	ldr	r0, [pc, #32]	; (189a4 <z_ready_thread+0x68>)
   18982:	22a7      	movs	r2, #167	; 0xa7
   18984:	f001 ff74 	bl	1a870 <printk>
   18988:	21a7      	movs	r1, #167	; 0xa7
   1898a:	4805      	ldr	r0, [pc, #20]	; (189a0 <z_ready_thread+0x64>)
   1898c:	f002 fa16 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   18990:	f385 8811 	msr	BASEPRI, r5
   18994:	f3bf 8f6f 	isb	sy
}
   18998:	bd38      	pop	{r3, r4, r5, pc}
   1899a:	bf00      	nop
   1899c:	2000b184 	.word	0x2000b184
   189a0:	0001fe34 	.word	0x0001fe34
   189a4:	0001fdfa 	.word	0x0001fdfa

000189a8 <z_sched_start>:
{
   189a8:	b538      	push	{r3, r4, r5, lr}
   189aa:	4604      	mov	r4, r0
	__asm__ volatile(
   189ac:	f04f 0320 	mov.w	r3, #32
   189b0:	f3ef 8511 	mrs	r5, BASEPRI
   189b4:	f383 8811 	msr	BASEPRI, r3
   189b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   189bc:	4818      	ldr	r0, [pc, #96]	; (18a20 <z_sched_start+0x78>)
   189be:	f000 ff6b 	bl	19898 <z_spin_lock_valid>
   189c2:	b940      	cbnz	r0, 189d6 <z_sched_start+0x2e>
   189c4:	4917      	ldr	r1, [pc, #92]	; (18a24 <z_sched_start+0x7c>)
   189c6:	4818      	ldr	r0, [pc, #96]	; (18a28 <z_sched_start+0x80>)
   189c8:	227c      	movs	r2, #124	; 0x7c
   189ca:	f001 ff51 	bl	1a870 <printk>
   189ce:	217c      	movs	r1, #124	; 0x7c
   189d0:	4814      	ldr	r0, [pc, #80]	; (18a24 <z_sched_start+0x7c>)
   189d2:	f002 f9f3 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   189d6:	4812      	ldr	r0, [pc, #72]	; (18a20 <z_sched_start+0x78>)
   189d8:	f000 ff7a 	bl	198d0 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   189dc:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   189de:	075a      	lsls	r2, r3, #29
   189e0:	d411      	bmi.n	18a06 <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   189e2:	480f      	ldr	r0, [pc, #60]	; (18a20 <z_sched_start+0x78>)
   189e4:	f000 ff66 	bl	198b4 <z_spin_unlock_valid>
   189e8:	b940      	cbnz	r0, 189fc <z_sched_start+0x54>
   189ea:	490e      	ldr	r1, [pc, #56]	; (18a24 <z_sched_start+0x7c>)
   189ec:	480e      	ldr	r0, [pc, #56]	; (18a28 <z_sched_start+0x80>)
   189ee:	22a7      	movs	r2, #167	; 0xa7
   189f0:	f001 ff3e 	bl	1a870 <printk>
   189f4:	21a7      	movs	r1, #167	; 0xa7
   189f6:	480b      	ldr	r0, [pc, #44]	; (18a24 <z_sched_start+0x7c>)
   189f8:	f002 f9e0 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   189fc:	f385 8811 	msr	BASEPRI, r5
   18a00:	f3bf 8f6f 	isb	sy
}
   18a04:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   18a06:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   18a0a:	4620      	mov	r0, r4
   18a0c:	7363      	strb	r3, [r4, #13]
   18a0e:	f7ff ff4b 	bl	188a8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   18a12:	4629      	mov	r1, r5
}
   18a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   18a18:	4801      	ldr	r0, [pc, #4]	; (18a20 <z_sched_start+0x78>)
   18a1a:	f7ff bdbb 	b.w	18594 <z_reschedule>
   18a1e:	bf00      	nop
   18a20:	2000b184 	.word	0x2000b184
   18a24:	0001fe34 	.word	0x0001fe34
   18a28:	0001fdfa 	.word	0x0001fdfa

00018a2c <z_thread_timeout>:
{
   18a2c:	b570      	push	{r4, r5, r6, lr}
   18a2e:	4604      	mov	r4, r0
	__asm__ volatile(
   18a30:	f04f 0320 	mov.w	r3, #32
   18a34:	f3ef 8611 	mrs	r6, BASEPRI
   18a38:	f383 8811 	msr	BASEPRI, r3
   18a3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18a40:	4819      	ldr	r0, [pc, #100]	; (18aa8 <z_thread_timeout+0x7c>)
   18a42:	f000 ff29 	bl	19898 <z_spin_lock_valid>
   18a46:	b940      	cbnz	r0, 18a5a <z_thread_timeout+0x2e>
   18a48:	4918      	ldr	r1, [pc, #96]	; (18aac <z_thread_timeout+0x80>)
   18a4a:	4819      	ldr	r0, [pc, #100]	; (18ab0 <z_thread_timeout+0x84>)
   18a4c:	227c      	movs	r2, #124	; 0x7c
   18a4e:	f001 ff0f 	bl	1a870 <printk>
   18a52:	217c      	movs	r1, #124	; 0x7c
   18a54:	4815      	ldr	r0, [pc, #84]	; (18aac <z_thread_timeout+0x80>)
   18a56:	f002 f9b1 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   18a5a:	4813      	ldr	r0, [pc, #76]	; (18aa8 <z_thread_timeout+0x7c>)
   18a5c:	f000 ff38 	bl	198d0 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   18a60:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   18a64:	f1a4 0518 	sub.w	r5, r4, #24
		if (thread->base.pended_on != NULL) {
   18a68:	b113      	cbz	r3, 18a70 <z_thread_timeout+0x44>
			unpend_thread_no_timeout(thread);
   18a6a:	4628      	mov	r0, r5
   18a6c:	f005 faf1 	bl	1e052 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   18a70:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		ready_thread(thread);
   18a74:	4628      	mov	r0, r5
   18a76:	f023 0314 	bic.w	r3, r3, #20
   18a7a:	f804 3c0b 	strb.w	r3, [r4, #-11]
   18a7e:	f7ff ff13 	bl	188a8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18a82:	4809      	ldr	r0, [pc, #36]	; (18aa8 <z_thread_timeout+0x7c>)
   18a84:	f000 ff16 	bl	198b4 <z_spin_unlock_valid>
   18a88:	b940      	cbnz	r0, 18a9c <z_thread_timeout+0x70>
   18a8a:	4908      	ldr	r1, [pc, #32]	; (18aac <z_thread_timeout+0x80>)
   18a8c:	4808      	ldr	r0, [pc, #32]	; (18ab0 <z_thread_timeout+0x84>)
   18a8e:	22a7      	movs	r2, #167	; 0xa7
   18a90:	f001 feee 	bl	1a870 <printk>
   18a94:	21a7      	movs	r1, #167	; 0xa7
   18a96:	4805      	ldr	r0, [pc, #20]	; (18aac <z_thread_timeout+0x80>)
   18a98:	f002 f990 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   18a9c:	f386 8811 	msr	BASEPRI, r6
   18aa0:	f3bf 8f6f 	isb	sy
}
   18aa4:	bd70      	pop	{r4, r5, r6, pc}
   18aa6:	bf00      	nop
   18aa8:	2000b184 	.word	0x2000b184
   18aac:	0001fe34 	.word	0x0001fe34
   18ab0:	0001fdfa 	.word	0x0001fdfa

00018ab4 <move_thread_to_end_of_prio_q>:
{
   18ab4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   18ab6:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   18aba:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   18abc:	2b00      	cmp	r3, #0
   18abe:	da03      	bge.n	18ac8 <move_thread_to_end_of_prio_q+0x14>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   18ac0:	4601      	mov	r1, r0
   18ac2:	481d      	ldr	r0, [pc, #116]	; (18b38 <move_thread_to_end_of_prio_q+0x84>)
   18ac4:	f7ff fdf4 	bl	186b0 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   18ac8:	4b1c      	ldr	r3, [pc, #112]	; (18b3c <move_thread_to_end_of_prio_q+0x88>)
   18aca:	429c      	cmp	r4, r3
   18acc:	d10a      	bne.n	18ae4 <move_thread_to_end_of_prio_q+0x30>
   18ace:	491c      	ldr	r1, [pc, #112]	; (18b40 <move_thread_to_end_of_prio_q+0x8c>)
   18ad0:	481c      	ldr	r0, [pc, #112]	; (18b44 <move_thread_to_end_of_prio_q+0x90>)
   18ad2:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   18ad6:	f001 fecb 	bl	1a870 <printk>
   18ada:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   18ade:	4818      	ldr	r0, [pc, #96]	; (18b40 <move_thread_to_end_of_prio_q+0x8c>)
   18ae0:	f002 f96c 	bl	1adbc <assert_post_action>
	return list->head == list;
   18ae4:	4a18      	ldr	r2, [pc, #96]	; (18b48 <move_thread_to_end_of_prio_q+0x94>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18ae6:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   18aea:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18aee:	4283      	cmp	r3, r0
   18af0:	d01c      	beq.n	18b2c <move_thread_to_end_of_prio_q+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18af2:	b1db      	cbz	r3, 18b2c <move_thread_to_end_of_prio_q+0x78>
	if (thread_1->base.prio < thread_2->base.prio) {
   18af4:	f994 500e 	ldrsb.w	r5, [r4, #14]
   18af8:	f993 600e 	ldrsb.w	r6, [r3, #14]
   18afc:	42ae      	cmp	r6, r5
   18afe:	dd10      	ble.n	18b22 <move_thread_to_end_of_prio_q+0x6e>
	node->prev = successor->prev;
   18b00:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   18b02:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   18b06:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   18b08:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   18b0a:	7b63      	ldrb	r3, [r4, #13]
	update_cache(thread == _current);
   18b0c:	6890      	ldr	r0, [r2, #8]
   18b0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   18b12:	7363      	strb	r3, [r4, #13]
   18b14:	1b03      	subs	r3, r0, r4
   18b16:	4258      	negs	r0, r3
   18b18:	4158      	adcs	r0, r3
}
   18b1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   18b1e:	f7ff be2d 	b.w	1877c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   18b22:	428b      	cmp	r3, r1
   18b24:	d002      	beq.n	18b2c <move_thread_to_end_of_prio_q+0x78>
   18b26:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18b28:	2b00      	cmp	r3, #0
   18b2a:	d1e5      	bne.n	18af8 <move_thread_to_end_of_prio_q+0x44>
	node->prev = list->tail;
   18b2c:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   18b30:	6b13      	ldr	r3, [r2, #48]	; 0x30
   18b32:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18b34:	6314      	str	r4, [r2, #48]	; 0x30
}
   18b36:	e7e8      	b.n	18b0a <move_thread_to_end_of_prio_q+0x56>
   18b38:	2000b178 	.word	0x2000b178
   18b3c:	2000a420 	.word	0x2000a420
   18b40:	00022c7f 	.word	0x00022c7f
   18b44:	0001fdfa 	.word	0x0001fdfa
   18b48:	2000b14c 	.word	0x2000b14c

00018b4c <z_time_slice>:
{
   18b4c:	b538      	push	{r3, r4, r5, lr}
   18b4e:	4604      	mov	r4, r0
	__asm__ volatile(
   18b50:	f04f 0320 	mov.w	r3, #32
   18b54:	f3ef 8511 	mrs	r5, BASEPRI
   18b58:	f383 8811 	msr	BASEPRI, r3
   18b5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18b60:	4824      	ldr	r0, [pc, #144]	; (18bf4 <z_time_slice+0xa8>)
   18b62:	f000 fe99 	bl	19898 <z_spin_lock_valid>
   18b66:	b940      	cbnz	r0, 18b7a <z_time_slice+0x2e>
   18b68:	4923      	ldr	r1, [pc, #140]	; (18bf8 <z_time_slice+0xac>)
   18b6a:	4824      	ldr	r0, [pc, #144]	; (18bfc <z_time_slice+0xb0>)
   18b6c:	227c      	movs	r2, #124	; 0x7c
   18b6e:	f001 fe7f 	bl	1a870 <printk>
   18b72:	217c      	movs	r1, #124	; 0x7c
   18b74:	4820      	ldr	r0, [pc, #128]	; (18bf8 <z_time_slice+0xac>)
   18b76:	f002 f921 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   18b7a:	481e      	ldr	r0, [pc, #120]	; (18bf4 <z_time_slice+0xa8>)
   18b7c:	f000 fea8 	bl	198d0 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   18b80:	4b1f      	ldr	r3, [pc, #124]	; (18c00 <z_time_slice+0xb4>)
   18b82:	4a20      	ldr	r2, [pc, #128]	; (18c04 <z_time_slice+0xb8>)
   18b84:	6898      	ldr	r0, [r3, #8]
   18b86:	6811      	ldr	r1, [r2, #0]
   18b88:	4288      	cmp	r0, r1
   18b8a:	d113      	bne.n	18bb4 <z_time_slice+0x68>
			z_reset_time_slice();
   18b8c:	f7ff fc9e 	bl	184cc <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18b90:	4818      	ldr	r0, [pc, #96]	; (18bf4 <z_time_slice+0xa8>)
   18b92:	f000 fe8f 	bl	198b4 <z_spin_unlock_valid>
   18b96:	b940      	cbnz	r0, 18baa <z_time_slice+0x5e>
   18b98:	4917      	ldr	r1, [pc, #92]	; (18bf8 <z_time_slice+0xac>)
   18b9a:	4818      	ldr	r0, [pc, #96]	; (18bfc <z_time_slice+0xb0>)
   18b9c:	22a7      	movs	r2, #167	; 0xa7
   18b9e:	f001 fe67 	bl	1a870 <printk>
   18ba2:	21a7      	movs	r1, #167	; 0xa7
   18ba4:	4814      	ldr	r0, [pc, #80]	; (18bf8 <z_time_slice+0xac>)
   18ba6:	f002 f909 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   18baa:	f385 8811 	msr	BASEPRI, r5
   18bae:	f3bf 8f6f 	isb	sy
}
   18bb2:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   18bb4:	2100      	movs	r1, #0
   18bb6:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   18bb8:	4a13      	ldr	r2, [pc, #76]	; (18c08 <z_time_slice+0xbc>)
   18bba:	6812      	ldr	r2, [r2, #0]
   18bbc:	b1ba      	cbz	r2, 18bee <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   18bbe:	89c2      	ldrh	r2, [r0, #14]
   18bc0:	2a7f      	cmp	r2, #127	; 0x7f
   18bc2:	d814      	bhi.n	18bee <z_time_slice+0xa2>
		&& !z_is_thread_prevented_from_running(thread)
   18bc4:	7b42      	ldrb	r2, [r0, #13]
   18bc6:	06d2      	lsls	r2, r2, #27
   18bc8:	d111      	bne.n	18bee <z_time_slice+0xa2>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   18bca:	4a10      	ldr	r2, [pc, #64]	; (18c0c <z_time_slice+0xc0>)
   18bcc:	f990 100e 	ldrsb.w	r1, [r0, #14]
   18bd0:	6812      	ldr	r2, [r2, #0]
   18bd2:	4291      	cmp	r1, r2
   18bd4:	db0b      	blt.n	18bee <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   18bd6:	4a0e      	ldr	r2, [pc, #56]	; (18c10 <z_time_slice+0xc4>)
   18bd8:	4290      	cmp	r0, r2
   18bda:	d008      	beq.n	18bee <z_time_slice+0xa2>
		if (ticks >= _current_cpu->slice_ticks) {
   18bdc:	695a      	ldr	r2, [r3, #20]
   18bde:	42a2      	cmp	r2, r4
   18be0:	dc02      	bgt.n	18be8 <z_time_slice+0x9c>
			move_thread_to_end_of_prio_q(_current);
   18be2:	f7ff ff67 	bl	18ab4 <move_thread_to_end_of_prio_q>
   18be6:	e7d1      	b.n	18b8c <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   18be8:	1b12      	subs	r2, r2, r4
		_current_cpu->slice_ticks = 0;
   18bea:	615a      	str	r2, [r3, #20]
   18bec:	e7d0      	b.n	18b90 <z_time_slice+0x44>
   18bee:	2200      	movs	r2, #0
   18bf0:	e7fb      	b.n	18bea <z_time_slice+0x9e>
   18bf2:	bf00      	nop
   18bf4:	2000b184 	.word	0x2000b184
   18bf8:	0001fe34 	.word	0x0001fe34
   18bfc:	0001fdfa 	.word	0x0001fdfa
   18c00:	2000b14c 	.word	0x2000b14c
   18c04:	2000b180 	.word	0x2000b180
   18c08:	2000b18c 	.word	0x2000b18c
   18c0c:	2000b188 	.word	0x2000b188
   18c10:	2000a420 	.word	0x2000a420

00018c14 <z_impl_k_thread_suspend>:
{
   18c14:	b570      	push	{r4, r5, r6, lr}
   18c16:	4604      	mov	r4, r0
   18c18:	3018      	adds	r0, #24
   18c1a:	f001 f881 	bl	19d20 <z_abort_timeout>
	__asm__ volatile(
   18c1e:	f04f 0320 	mov.w	r3, #32
   18c22:	f3ef 8611 	mrs	r6, BASEPRI
   18c26:	f383 8811 	msr	BASEPRI, r3
   18c2a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18c2e:	4820      	ldr	r0, [pc, #128]	; (18cb0 <z_impl_k_thread_suspend+0x9c>)
   18c30:	f000 fe32 	bl	19898 <z_spin_lock_valid>
   18c34:	b940      	cbnz	r0, 18c48 <z_impl_k_thread_suspend+0x34>
   18c36:	491f      	ldr	r1, [pc, #124]	; (18cb4 <z_impl_k_thread_suspend+0xa0>)
   18c38:	481f      	ldr	r0, [pc, #124]	; (18cb8 <z_impl_k_thread_suspend+0xa4>)
   18c3a:	227c      	movs	r2, #124	; 0x7c
   18c3c:	f001 fe18 	bl	1a870 <printk>
   18c40:	217c      	movs	r1, #124	; 0x7c
   18c42:	481c      	ldr	r0, [pc, #112]	; (18cb4 <z_impl_k_thread_suspend+0xa0>)
   18c44:	f002 f8ba 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   18c48:	4819      	ldr	r0, [pc, #100]	; (18cb0 <z_impl_k_thread_suspend+0x9c>)
   18c4a:	f000 fe41 	bl	198d0 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   18c4e:	f994 300d 	ldrsb.w	r3, [r4, #13]
   18c52:	2b00      	cmp	r3, #0
   18c54:	da07      	bge.n	18c66 <z_impl_k_thread_suspend+0x52>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   18c56:	4621      	mov	r1, r4
   18c58:	4818      	ldr	r0, [pc, #96]	; (18cbc <z_impl_k_thread_suspend+0xa8>)
   18c5a:	f7ff fd29 	bl	186b0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   18c5e:	7b63      	ldrb	r3, [r4, #13]
   18c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18c64:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   18c66:	4d16      	ldr	r5, [pc, #88]	; (18cc0 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   18c68:	7b63      	ldrb	r3, [r4, #13]
   18c6a:	68a8      	ldr	r0, [r5, #8]
   18c6c:	f043 0310 	orr.w	r3, r3, #16
   18c70:	7363      	strb	r3, [r4, #13]
   18c72:	1b03      	subs	r3, r0, r4
   18c74:	4258      	negs	r0, r3
   18c76:	4158      	adcs	r0, r3
   18c78:	f7ff fd80 	bl	1877c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18c7c:	480c      	ldr	r0, [pc, #48]	; (18cb0 <z_impl_k_thread_suspend+0x9c>)
   18c7e:	f000 fe19 	bl	198b4 <z_spin_unlock_valid>
   18c82:	b940      	cbnz	r0, 18c96 <z_impl_k_thread_suspend+0x82>
   18c84:	490b      	ldr	r1, [pc, #44]	; (18cb4 <z_impl_k_thread_suspend+0xa0>)
   18c86:	480c      	ldr	r0, [pc, #48]	; (18cb8 <z_impl_k_thread_suspend+0xa4>)
   18c88:	22a7      	movs	r2, #167	; 0xa7
   18c8a:	f001 fdf1 	bl	1a870 <printk>
   18c8e:	21a7      	movs	r1, #167	; 0xa7
   18c90:	4808      	ldr	r0, [pc, #32]	; (18cb4 <z_impl_k_thread_suspend+0xa0>)
   18c92:	f002 f893 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   18c96:	f386 8811 	msr	BASEPRI, r6
   18c9a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   18c9e:	68ab      	ldr	r3, [r5, #8]
   18ca0:	42a3      	cmp	r3, r4
   18ca2:	d103      	bne.n	18cac <z_impl_k_thread_suspend+0x98>
}
   18ca4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   18ca8:	f005 b9c9 	b.w	1e03e <z_reschedule_unlocked>
}
   18cac:	bd70      	pop	{r4, r5, r6, pc}
   18cae:	bf00      	nop
   18cb0:	2000b184 	.word	0x2000b184
   18cb4:	0001fe34 	.word	0x0001fe34
   18cb8:	0001fdfa 	.word	0x0001fdfa
   18cbc:	2000b178 	.word	0x2000b178
   18cc0:	2000b14c 	.word	0x2000b14c

00018cc4 <z_thread_single_abort>:
{
   18cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   18cc8:	7b03      	ldrb	r3, [r0, #12]
{
   18cca:	4604      	mov	r4, r0
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   18ccc:	07dd      	lsls	r5, r3, #31
   18cce:	d50a      	bpl.n	18ce6 <z_thread_single_abort+0x22>
   18cd0:	4976      	ldr	r1, [pc, #472]	; (18eac <z_thread_single_abort+0x1e8>)
   18cd2:	4877      	ldr	r0, [pc, #476]	; (18eb0 <z_thread_single_abort+0x1ec>)
   18cd4:	f240 220d 	movw	r2, #525	; 0x20d
   18cd8:	f001 fdca 	bl	1a870 <printk>
   18cdc:	f240 210d 	movw	r1, #525	; 0x20d
   18ce0:	4872      	ldr	r0, [pc, #456]	; (18eac <z_thread_single_abort+0x1e8>)
   18ce2:	f002 f86b 	bl	1adbc <assert_post_action>
	__ASSERT(thread != _current || arch_is_in_isr(),
   18ce6:	4e73      	ldr	r6, [pc, #460]	; (18eb4 <z_thread_single_abort+0x1f0>)
   18ce8:	68b3      	ldr	r3, [r6, #8]
   18cea:	42a3      	cmp	r3, r4
   18cec:	d10d      	bne.n	18d0a <z_thread_single_abort+0x46>
   18cee:	f3ef 8305 	mrs	r3, IPSR
   18cf2:	b953      	cbnz	r3, 18d0a <z_thread_single_abort+0x46>
   18cf4:	496d      	ldr	r1, [pc, #436]	; (18eac <z_thread_single_abort+0x1e8>)
   18cf6:	486e      	ldr	r0, [pc, #440]	; (18eb0 <z_thread_single_abort+0x1ec>)
   18cf8:	f240 220f 	movw	r2, #527	; 0x20f
   18cfc:	f001 fdb8 	bl	1a870 <printk>
   18d00:	f240 210f 	movw	r1, #527	; 0x20f
   18d04:	4869      	ldr	r0, [pc, #420]	; (18eac <z_thread_single_abort+0x1e8>)
   18d06:	f002 f859 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   18d0a:	f04f 0320 	mov.w	r3, #32
   18d0e:	f3ef 8511 	mrs	r5, BASEPRI
   18d12:	f383 8811 	msr	BASEPRI, r3
   18d16:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18d1a:	4867      	ldr	r0, [pc, #412]	; (18eb8 <z_thread_single_abort+0x1f4>)
   18d1c:	f000 fdbc 	bl	19898 <z_spin_lock_valid>
   18d20:	b940      	cbnz	r0, 18d34 <z_thread_single_abort+0x70>
   18d22:	4966      	ldr	r1, [pc, #408]	; (18ebc <z_thread_single_abort+0x1f8>)
   18d24:	4862      	ldr	r0, [pc, #392]	; (18eb0 <z_thread_single_abort+0x1ec>)
   18d26:	227c      	movs	r2, #124	; 0x7c
   18d28:	f001 fda2 	bl	1a870 <printk>
   18d2c:	217c      	movs	r1, #124	; 0x7c
   18d2e:	4863      	ldr	r0, [pc, #396]	; (18ebc <z_thread_single_abort+0x1f8>)
   18d30:	f002 f844 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   18d34:	4860      	ldr	r0, [pc, #384]	; (18eb8 <z_thread_single_abort+0x1f4>)
   18d36:	f000 fdcb 	bl	198d0 <z_spin_lock_set_owner>
	if ((thread->base.thread_state &
   18d3a:	7b63      	ldrb	r3, [r4, #13]
   18d3c:	f013 0f28 	tst.w	r3, #40	; 0x28
   18d40:	d012      	beq.n	18d68 <z_thread_single_abort+0xa4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18d42:	485d      	ldr	r0, [pc, #372]	; (18eb8 <z_thread_single_abort+0x1f4>)
   18d44:	f000 fdb6 	bl	198b4 <z_spin_unlock_valid>
   18d48:	b940      	cbnz	r0, 18d5c <z_thread_single_abort+0x98>
   18d4a:	495c      	ldr	r1, [pc, #368]	; (18ebc <z_thread_single_abort+0x1f8>)
   18d4c:	4858      	ldr	r0, [pc, #352]	; (18eb0 <z_thread_single_abort+0x1ec>)
   18d4e:	22a7      	movs	r2, #167	; 0xa7
   18d50:	f001 fd8e 	bl	1a870 <printk>
   18d54:	21a7      	movs	r1, #167	; 0xa7
   18d56:	4859      	ldr	r0, [pc, #356]	; (18ebc <z_thread_single_abort+0x1f8>)
   18d58:	f002 f830 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   18d5c:	f385 8811 	msr	BASEPRI, r5
   18d60:	f3bf 8f6f 	isb	sy
}
   18d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   18d68:	f043 0320 	orr.w	r3, r3, #32
   18d6c:	4852      	ldr	r0, [pc, #328]	; (18eb8 <z_thread_single_abort+0x1f4>)
   18d6e:	7363      	strb	r3, [r4, #13]
   18d70:	f000 fda0 	bl	198b4 <z_spin_unlock_valid>
   18d74:	b940      	cbnz	r0, 18d88 <z_thread_single_abort+0xc4>
   18d76:	4951      	ldr	r1, [pc, #324]	; (18ebc <z_thread_single_abort+0x1f8>)
   18d78:	484d      	ldr	r0, [pc, #308]	; (18eb0 <z_thread_single_abort+0x1ec>)
   18d7a:	22a7      	movs	r2, #167	; 0xa7
   18d7c:	f001 fd78 	bl	1a870 <printk>
   18d80:	21a7      	movs	r1, #167	; 0xa7
   18d82:	484e      	ldr	r0, [pc, #312]	; (18ebc <z_thread_single_abort+0x1f8>)
   18d84:	f002 f81a 	bl	1adbc <assert_post_action>
   18d88:	f385 8811 	msr	BASEPRI, r5
   18d8c:	f3bf 8f6f 	isb	sy
   18d90:	f104 0018 	add.w	r0, r4, #24
   18d94:	f000 ffc4 	bl	19d20 <z_abort_timeout>
	__asm__ volatile(
   18d98:	f04f 0320 	mov.w	r3, #32
   18d9c:	f3ef 8711 	mrs	r7, BASEPRI
   18da0:	f383 8811 	msr	BASEPRI, r3
   18da4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18da8:	4843      	ldr	r0, [pc, #268]	; (18eb8 <z_thread_single_abort+0x1f4>)
   18daa:	f000 fd75 	bl	19898 <z_spin_lock_valid>
   18dae:	b940      	cbnz	r0, 18dc2 <z_thread_single_abort+0xfe>
   18db0:	4942      	ldr	r1, [pc, #264]	; (18ebc <z_thread_single_abort+0x1f8>)
   18db2:	483f      	ldr	r0, [pc, #252]	; (18eb0 <z_thread_single_abort+0x1ec>)
   18db4:	227c      	movs	r2, #124	; 0x7c
   18db6:	f001 fd5b 	bl	1a870 <printk>
   18dba:	217c      	movs	r1, #124	; 0x7c
   18dbc:	483f      	ldr	r0, [pc, #252]	; (18ebc <z_thread_single_abort+0x1f8>)
   18dbe:	f001 fffd 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   18dc2:	483d      	ldr	r0, [pc, #244]	; (18eb8 <z_thread_single_abort+0x1f4>)
   18dc4:	f000 fd84 	bl	198d0 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   18dc8:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   18dca:	06d8      	lsls	r0, r3, #27
   18dcc:	d116      	bne.n	18dfc <z_thread_single_abort+0x138>
		if (z_is_thread_ready(thread)) {
   18dce:	69a2      	ldr	r2, [r4, #24]
   18dd0:	b9a2      	cbnz	r2, 18dfc <z_thread_single_abort+0x138>
			if (z_is_thread_queued(thread)) {
   18dd2:	0619      	lsls	r1, r3, #24
   18dd4:	d507      	bpl.n	18de6 <z_thread_single_abort+0x122>
				_priq_run_remove(&_kernel.ready_q.runq,
   18dd6:	4621      	mov	r1, r4
   18dd8:	4839      	ldr	r0, [pc, #228]	; (18ec0 <z_thread_single_abort+0x1fc>)
   18dda:	f7ff fc69 	bl	186b0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   18dde:	7b63      	ldrb	r3, [r4, #13]
   18de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18de4:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   18de6:	68b0      	ldr	r0, [r6, #8]
   18de8:	1b02      	subs	r2, r0, r4
   18dea:	4250      	negs	r0, r2
   18dec:	4150      	adcs	r0, r2
   18dee:	f7ff fcc5 	bl	1877c <update_cache>
			waiter->base.pended_on = NULL;
   18df2:	f04f 0800 	mov.w	r8, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   18df6:	f104 0930 	add.w	r9, r4, #48	; 0x30
   18dfa:	e023      	b.n	18e44 <z_thread_single_abort+0x180>
			if (z_is_thread_pending(thread)) {
   18dfc:	079b      	lsls	r3, r3, #30
   18dfe:	d5f8      	bpl.n	18df2 <z_thread_single_abort+0x12e>
				_priq_wait_remove(&pended_on(thread)->waitq,
   18e00:	4620      	mov	r0, r4
   18e02:	f7ff fb4d 	bl	184a0 <pended_on>
   18e06:	4621      	mov	r1, r4
   18e08:	f7ff fc52 	bl	186b0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   18e0c:	7b63      	ldrb	r3, [r4, #13]
   18e0e:	f023 0302 	bic.w	r3, r3, #2
   18e12:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   18e14:	2300      	movs	r3, #0
   18e16:	60a3      	str	r3, [r4, #8]
   18e18:	e7eb      	b.n	18df2 <z_thread_single_abort+0x12e>
   18e1a:	f105 0018 	add.w	r0, r5, #24
   18e1e:	f000 ff7f 	bl	19d20 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   18e22:	4628      	mov	r0, r5
   18e24:	f7ff fb3c 	bl	184a0 <pended_on>
   18e28:	4629      	mov	r1, r5
   18e2a:	f7ff fc41 	bl	186b0 <z_priq_dumb_remove>
   18e2e:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   18e30:	4628      	mov	r0, r5
   18e32:	f023 0302 	bic.w	r3, r3, #2
   18e36:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   18e38:	f8c5 8008 	str.w	r8, [r5, #8]
   18e3c:	f8c5 8088 	str.w	r8, [r5, #136]	; 0x88
			ready_thread(waiter);
   18e40:	f7ff fd32 	bl	188a8 <ready_thread>
	return list->head == list;
   18e44:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18e46:	454d      	cmp	r5, r9
   18e48:	d001      	beq.n	18e4e <z_thread_single_abort+0x18a>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   18e4a:	2d00      	cmp	r5, #0
   18e4c:	d1e5      	bne.n	18e1a <z_thread_single_abort+0x156>
		if (z_is_idle_thread_object(_current)) {
   18e4e:	68b2      	ldr	r2, [r6, #8]
   18e50:	4b1c      	ldr	r3, [pc, #112]	; (18ec4 <z_thread_single_abort+0x200>)
   18e52:	429a      	cmp	r2, r3
   18e54:	d102      	bne.n	18e5c <z_thread_single_abort+0x198>
			update_cache(1);
   18e56:	2001      	movs	r0, #1
   18e58:	f7ff fc90 	bl	1877c <update_cache>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18e5c:	2200      	movs	r2, #0
		thread->base.thread_state |= _THREAD_DEAD;
   18e5e:	7b63      	ldrb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   18e60:	6ea5      	ldr	r5, [r4, #104]	; 0x68
		thread->base.thread_state |= _THREAD_DEAD;
   18e62:	f043 0308 	orr.w	r3, r3, #8
   18e66:	7363      	strb	r3, [r4, #13]
   18e68:	f104 0338 	add.w	r3, r4, #56	; 0x38
   18e6c:	e8d3 1fef 	ldaex	r1, [r3]
   18e70:	e8c3 2fe0 	stlex	r0, r2, [r3]
   18e74:	2800      	cmp	r0, #0
   18e76:	d1f9      	bne.n	18e6c <z_thread_single_abort+0x1a8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18e78:	480f      	ldr	r0, [pc, #60]	; (18eb8 <z_thread_single_abort+0x1f4>)
   18e7a:	f000 fd1b 	bl	198b4 <z_spin_unlock_valid>
   18e7e:	b940      	cbnz	r0, 18e92 <z_thread_single_abort+0x1ce>
   18e80:	490e      	ldr	r1, [pc, #56]	; (18ebc <z_thread_single_abort+0x1f8>)
   18e82:	480b      	ldr	r0, [pc, #44]	; (18eb0 <z_thread_single_abort+0x1ec>)
   18e84:	22a7      	movs	r2, #167	; 0xa7
   18e86:	f001 fcf3 	bl	1a870 <printk>
   18e8a:	21a7      	movs	r1, #167	; 0xa7
   18e8c:	480b      	ldr	r0, [pc, #44]	; (18ebc <z_thread_single_abort+0x1f8>)
   18e8e:	f001 ff95 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   18e92:	f387 8811 	msr	BASEPRI, r7
   18e96:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   18e9a:	2d00      	cmp	r5, #0
   18e9c:	f43f af62 	beq.w	18d64 <z_thread_single_abort+0xa0>
		fn_abort(thread);
   18ea0:	4620      	mov	r0, r4
   18ea2:	462b      	mov	r3, r5
}
   18ea4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		fn_abort(thread);
   18ea8:	4718      	bx	r3
   18eaa:	bf00      	nop
   18eac:	00022c7f 	.word	0x00022c7f
   18eb0:	0001fdfa 	.word	0x0001fdfa
   18eb4:	2000b14c 	.word	0x2000b14c
   18eb8:	2000b184 	.word	0x2000b184
   18ebc:	0001fe34 	.word	0x0001fe34
   18ec0:	2000b178 	.word	0x2000b178
   18ec4:	2000a420 	.word	0x2000a420

00018ec8 <unready_thread>:
{
   18ec8:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   18eca:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   18ece:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   18ed0:	2b00      	cmp	r3, #0
   18ed2:	da07      	bge.n	18ee4 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   18ed4:	4601      	mov	r1, r0
   18ed6:	4808      	ldr	r0, [pc, #32]	; (18ef8 <unready_thread+0x30>)
   18ed8:	f7ff fbea 	bl	186b0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   18edc:	7b63      	ldrb	r3, [r4, #13]
   18ede:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18ee2:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   18ee4:	4b05      	ldr	r3, [pc, #20]	; (18efc <unready_thread+0x34>)
   18ee6:	6898      	ldr	r0, [r3, #8]
   18ee8:	1b03      	subs	r3, r0, r4
   18eea:	4258      	negs	r0, r3
   18eec:	4158      	adcs	r0, r3
}
   18eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   18ef2:	f7ff bc43 	b.w	1877c <update_cache>
   18ef6:	bf00      	nop
   18ef8:	2000b178 	.word	0x2000b178
   18efc:	2000b14c 	.word	0x2000b14c

00018f00 <add_to_waitq_locked>:
{
   18f00:	b538      	push	{r3, r4, r5, lr}
   18f02:	4604      	mov	r4, r0
   18f04:	460d      	mov	r5, r1
	unready_thread(thread);
   18f06:	f7ff ffdf 	bl	18ec8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   18f0a:	7b63      	ldrb	r3, [r4, #13]
   18f0c:	f043 0302 	orr.w	r3, r3, #2
   18f10:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   18f12:	b1ed      	cbz	r5, 18f50 <add_to_waitq_locked+0x50>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   18f14:	4b15      	ldr	r3, [pc, #84]	; (18f6c <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   18f16:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   18f18:	429c      	cmp	r4, r3
   18f1a:	d10a      	bne.n	18f32 <add_to_waitq_locked+0x32>
   18f1c:	4914      	ldr	r1, [pc, #80]	; (18f70 <add_to_waitq_locked+0x70>)
   18f1e:	4815      	ldr	r0, [pc, #84]	; (18f74 <add_to_waitq_locked+0x74>)
   18f20:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   18f24:	f001 fca4 	bl	1a870 <printk>
   18f28:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   18f2c:	4810      	ldr	r0, [pc, #64]	; (18f70 <add_to_waitq_locked+0x70>)
   18f2e:	f001 ff45 	bl	1adbc <assert_post_action>
	return list->head == list;
   18f32:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18f34:	429d      	cmp	r5, r3
   18f36:	d012      	beq.n	18f5e <add_to_waitq_locked+0x5e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18f38:	b18b      	cbz	r3, 18f5e <add_to_waitq_locked+0x5e>
	if (thread_1->base.prio < thread_2->base.prio) {
   18f3a:	f994 200e 	ldrsb.w	r2, [r4, #14]
   18f3e:	f993 100e 	ldrsb.w	r1, [r3, #14]
   18f42:	4291      	cmp	r1, r2
   18f44:	dd05      	ble.n	18f52 <add_to_waitq_locked+0x52>
	node->prev = successor->prev;
   18f46:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   18f48:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   18f4c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   18f4e:	605c      	str	r4, [r3, #4]
}
   18f50:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   18f52:	6869      	ldr	r1, [r5, #4]
   18f54:	428b      	cmp	r3, r1
   18f56:	d002      	beq.n	18f5e <add_to_waitq_locked+0x5e>
   18f58:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18f5a:	2b00      	cmp	r3, #0
   18f5c:	d1ef      	bne.n	18f3e <add_to_waitq_locked+0x3e>
	node->prev = list->tail;
   18f5e:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   18f60:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   18f62:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   18f64:	686b      	ldr	r3, [r5, #4]
   18f66:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18f68:	606c      	str	r4, [r5, #4]
}
   18f6a:	e7f1      	b.n	18f50 <add_to_waitq_locked+0x50>
   18f6c:	2000a420 	.word	0x2000a420
   18f70:	00022c7f 	.word	0x00022c7f
   18f74:	0001fdfa 	.word	0x0001fdfa

00018f78 <pend>:
{
   18f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18f7c:	4604      	mov	r4, r0
   18f7e:	4688      	mov	r8, r1
   18f80:	4616      	mov	r6, r2
   18f82:	461d      	mov	r5, r3
	__asm__ volatile(
   18f84:	f04f 0320 	mov.w	r3, #32
   18f88:	f3ef 8711 	mrs	r7, BASEPRI
   18f8c:	f383 8811 	msr	BASEPRI, r3
   18f90:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18f94:	481a      	ldr	r0, [pc, #104]	; (19000 <pend+0x88>)
   18f96:	f000 fc7f 	bl	19898 <z_spin_lock_valid>
   18f9a:	b940      	cbnz	r0, 18fae <pend+0x36>
   18f9c:	4919      	ldr	r1, [pc, #100]	; (19004 <pend+0x8c>)
   18f9e:	481a      	ldr	r0, [pc, #104]	; (19008 <pend+0x90>)
   18fa0:	227c      	movs	r2, #124	; 0x7c
   18fa2:	f001 fc65 	bl	1a870 <printk>
   18fa6:	217c      	movs	r1, #124	; 0x7c
   18fa8:	4816      	ldr	r0, [pc, #88]	; (19004 <pend+0x8c>)
   18faa:	f001 ff07 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   18fae:	4814      	ldr	r0, [pc, #80]	; (19000 <pend+0x88>)
   18fb0:	f000 fc8e 	bl	198d0 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   18fb4:	4620      	mov	r0, r4
   18fb6:	4641      	mov	r1, r8
   18fb8:	f7ff ffa2 	bl	18f00 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18fbc:	4810      	ldr	r0, [pc, #64]	; (19000 <pend+0x88>)
   18fbe:	f000 fc79 	bl	198b4 <z_spin_unlock_valid>
   18fc2:	b940      	cbnz	r0, 18fd6 <pend+0x5e>
   18fc4:	490f      	ldr	r1, [pc, #60]	; (19004 <pend+0x8c>)
   18fc6:	4810      	ldr	r0, [pc, #64]	; (19008 <pend+0x90>)
   18fc8:	22a7      	movs	r2, #167	; 0xa7
   18fca:	f001 fc51 	bl	1a870 <printk>
   18fce:	21a7      	movs	r1, #167	; 0xa7
   18fd0:	480c      	ldr	r0, [pc, #48]	; (19004 <pend+0x8c>)
   18fd2:	f001 fef3 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   18fd6:	f387 8811 	msr	BASEPRI, r7
   18fda:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18fde:	f1b5 3fff 	cmp.w	r5, #4294967295
   18fe2:	bf08      	it	eq
   18fe4:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   18fe8:	d008      	beq.n	18ffc <pend+0x84>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   18fea:	4632      	mov	r2, r6
   18fec:	462b      	mov	r3, r5
   18fee:	f104 0018 	add.w	r0, r4, #24
   18ff2:	4906      	ldr	r1, [pc, #24]	; (1900c <pend+0x94>)
}
   18ff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   18ff8:	f000 bde2 	b.w	19bc0 <z_add_timeout>
   18ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19000:	2000b184 	.word	0x2000b184
   19004:	0001fe34 	.word	0x0001fe34
   19008:	0001fdfa 	.word	0x0001fdfa
   1900c:	00018a2d 	.word	0x00018a2d

00019010 <z_pend_curr>:
{
   19010:	b538      	push	{r3, r4, r5, lr}
   19012:	4605      	mov	r5, r0
	pending_current = _current;
   19014:	4b0d      	ldr	r3, [pc, #52]	; (1904c <z_pend_curr+0x3c>)
{
   19016:	460c      	mov	r4, r1
	pending_current = _current;
   19018:	6898      	ldr	r0, [r3, #8]
   1901a:	4b0d      	ldr	r3, [pc, #52]	; (19050 <z_pend_curr+0x40>)
{
   1901c:	4611      	mov	r1, r2
	pending_current = _current;
   1901e:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   19020:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   19024:	f7ff ffa8 	bl	18f78 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19028:	4628      	mov	r0, r5
   1902a:	f000 fc43 	bl	198b4 <z_spin_unlock_valid>
   1902e:	b940      	cbnz	r0, 19042 <z_pend_curr+0x32>
   19030:	4908      	ldr	r1, [pc, #32]	; (19054 <z_pend_curr+0x44>)
   19032:	4809      	ldr	r0, [pc, #36]	; (19058 <z_pend_curr+0x48>)
   19034:	22be      	movs	r2, #190	; 0xbe
   19036:	f001 fc1b 	bl	1a870 <printk>
   1903a:	21be      	movs	r1, #190	; 0xbe
   1903c:	4805      	ldr	r0, [pc, #20]	; (19054 <z_pend_curr+0x44>)
   1903e:	f001 febd 	bl	1adbc <assert_post_action>
   19042:	4620      	mov	r0, r4
}
   19044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   19048:	f7f4 bc6a 	b.w	d920 <arch_swap>
   1904c:	2000b14c 	.word	0x2000b14c
   19050:	2000b180 	.word	0x2000b180
   19054:	0001fe34 	.word	0x0001fe34
   19058:	0001fdfa 	.word	0x0001fdfa

0001905c <z_set_prio>:
{
   1905c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1905e:	4604      	mov	r4, r0
   19060:	460d      	mov	r5, r1
	__asm__ volatile(
   19062:	f04f 0320 	mov.w	r3, #32
   19066:	f3ef 8611 	mrs	r6, BASEPRI
   1906a:	f383 8811 	msr	BASEPRI, r3
   1906e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19072:	4831      	ldr	r0, [pc, #196]	; (19138 <z_set_prio+0xdc>)
   19074:	f000 fc10 	bl	19898 <z_spin_lock_valid>
   19078:	b940      	cbnz	r0, 1908c <z_set_prio+0x30>
   1907a:	4930      	ldr	r1, [pc, #192]	; (1913c <z_set_prio+0xe0>)
   1907c:	4830      	ldr	r0, [pc, #192]	; (19140 <z_set_prio+0xe4>)
   1907e:	227c      	movs	r2, #124	; 0x7c
   19080:	f001 fbf6 	bl	1a870 <printk>
   19084:	217c      	movs	r1, #124	; 0x7c
   19086:	482d      	ldr	r0, [pc, #180]	; (1913c <z_set_prio+0xe0>)
   19088:	f001 fe98 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   1908c:	482a      	ldr	r0, [pc, #168]	; (19138 <z_set_prio+0xdc>)
   1908e:	f000 fc1f 	bl	198d0 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   19092:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   19094:	b26d      	sxtb	r5, r5
   19096:	06db      	lsls	r3, r3, #27
   19098:	d14a      	bne.n	19130 <z_set_prio+0xd4>
		if (need_sched) {
   1909a:	69a3      	ldr	r3, [r4, #24]
   1909c:	2b00      	cmp	r3, #0
   1909e:	d147      	bne.n	19130 <z_set_prio+0xd4>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   190a0:	4621      	mov	r1, r4
   190a2:	4828      	ldr	r0, [pc, #160]	; (19144 <z_set_prio+0xe8>)
   190a4:	f7ff fb04 	bl	186b0 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   190a8:	4b27      	ldr	r3, [pc, #156]	; (19148 <z_set_prio+0xec>)
				thread->base.prio = prio;
   190aa:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   190ac:	429c      	cmp	r4, r3
   190ae:	d10a      	bne.n	190c6 <z_set_prio+0x6a>
   190b0:	4926      	ldr	r1, [pc, #152]	; (1914c <z_set_prio+0xf0>)
   190b2:	4823      	ldr	r0, [pc, #140]	; (19140 <z_set_prio+0xe4>)
   190b4:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   190b8:	f001 fbda 	bl	1a870 <printk>
   190bc:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   190c0:	4822      	ldr	r0, [pc, #136]	; (1914c <z_set_prio+0xf0>)
   190c2:	f001 fe7b 	bl	1adbc <assert_post_action>
	return list->head == list;
   190c6:	4a22      	ldr	r2, [pc, #136]	; (19150 <z_set_prio+0xf4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   190c8:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   190cc:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   190d0:	4283      	cmp	r3, r0
   190d2:	d027      	beq.n	19124 <z_set_prio+0xc8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   190d4:	b333      	cbz	r3, 19124 <z_set_prio+0xc8>
	if (thread_1->base.prio < thread_2->base.prio) {
   190d6:	f994 500e 	ldrsb.w	r5, [r4, #14]
   190da:	f993 700e 	ldrsb.w	r7, [r3, #14]
   190de:	42af      	cmp	r7, r5
   190e0:	dd1b      	ble.n	1911a <z_set_prio+0xbe>
	node->prev = successor->prev;
   190e2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   190e4:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   190e8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   190ea:	605c      	str	r4, [r3, #4]
			update_cache(1);
   190ec:	2001      	movs	r0, #1
   190ee:	f7ff fb45 	bl	1877c <update_cache>
   190f2:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   190f4:	4810      	ldr	r0, [pc, #64]	; (19138 <z_set_prio+0xdc>)
   190f6:	f000 fbdd 	bl	198b4 <z_spin_unlock_valid>
   190fa:	b940      	cbnz	r0, 1910e <z_set_prio+0xb2>
   190fc:	490f      	ldr	r1, [pc, #60]	; (1913c <z_set_prio+0xe0>)
   190fe:	4810      	ldr	r0, [pc, #64]	; (19140 <z_set_prio+0xe4>)
   19100:	22a7      	movs	r2, #167	; 0xa7
   19102:	f001 fbb5 	bl	1a870 <printk>
   19106:	21a7      	movs	r1, #167	; 0xa7
   19108:	480c      	ldr	r0, [pc, #48]	; (1913c <z_set_prio+0xe0>)
   1910a:	f001 fe57 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   1910e:	f386 8811 	msr	BASEPRI, r6
   19112:	f3bf 8f6f 	isb	sy
}
   19116:	4620      	mov	r0, r4
   19118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1911a:	4299      	cmp	r1, r3
   1911c:	d002      	beq.n	19124 <z_set_prio+0xc8>
   1911e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19120:	2b00      	cmp	r3, #0
   19122:	d1da      	bne.n	190da <z_set_prio+0x7e>
	node->prev = list->tail;
   19124:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   19128:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1912a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1912c:	6314      	str	r4, [r2, #48]	; 0x30
}
   1912e:	e7dd      	b.n	190ec <z_set_prio+0x90>
			thread->base.prio = prio;
   19130:	73a5      	strb	r5, [r4, #14]
   19132:	2400      	movs	r4, #0
   19134:	e7de      	b.n	190f4 <z_set_prio+0x98>
   19136:	bf00      	nop
   19138:	2000b184 	.word	0x2000b184
   1913c:	0001fe34 	.word	0x0001fe34
   19140:	0001fdfa 	.word	0x0001fdfa
   19144:	2000b178 	.word	0x2000b178
   19148:	2000a420 	.word	0x2000a420
   1914c:	00022c7f 	.word	0x00022c7f
   19150:	2000b14c 	.word	0x2000b14c

00019154 <z_unpend_first_thread>:
{
   19154:	b538      	push	{r3, r4, r5, lr}
   19156:	4604      	mov	r4, r0
	__asm__ volatile(
   19158:	f04f 0320 	mov.w	r3, #32
   1915c:	f3ef 8511 	mrs	r5, BASEPRI
   19160:	f383 8811 	msr	BASEPRI, r3
   19164:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19168:	482b      	ldr	r0, [pc, #172]	; (19218 <z_unpend_first_thread+0xc4>)
   1916a:	f000 fb95 	bl	19898 <z_spin_lock_valid>
   1916e:	b940      	cbnz	r0, 19182 <z_unpend_first_thread+0x2e>
   19170:	492a      	ldr	r1, [pc, #168]	; (1921c <z_unpend_first_thread+0xc8>)
   19172:	482b      	ldr	r0, [pc, #172]	; (19220 <z_unpend_first_thread+0xcc>)
   19174:	227c      	movs	r2, #124	; 0x7c
   19176:	f001 fb7b 	bl	1a870 <printk>
   1917a:	217c      	movs	r1, #124	; 0x7c
   1917c:	4827      	ldr	r0, [pc, #156]	; (1921c <z_unpend_first_thread+0xc8>)
   1917e:	f001 fe1d 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   19182:	4825      	ldr	r0, [pc, #148]	; (19218 <z_unpend_first_thread+0xc4>)
   19184:	f000 fba4 	bl	198d0 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   19188:	4620      	mov	r0, r4
   1918a:	f004 ff70 	bl	1e06e <z_priq_dumb_best>
   1918e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19190:	4821      	ldr	r0, [pc, #132]	; (19218 <z_unpend_first_thread+0xc4>)
   19192:	f000 fb8f 	bl	198b4 <z_spin_unlock_valid>
   19196:	b940      	cbnz	r0, 191aa <z_unpend_first_thread+0x56>
   19198:	4920      	ldr	r1, [pc, #128]	; (1921c <z_unpend_first_thread+0xc8>)
   1919a:	4821      	ldr	r0, [pc, #132]	; (19220 <z_unpend_first_thread+0xcc>)
   1919c:	22a7      	movs	r2, #167	; 0xa7
   1919e:	f001 fb67 	bl	1a870 <printk>
   191a2:	21a7      	movs	r1, #167	; 0xa7
   191a4:	481d      	ldr	r0, [pc, #116]	; (1921c <z_unpend_first_thread+0xc8>)
   191a6:	f001 fe09 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   191aa:	f385 8811 	msr	BASEPRI, r5
   191ae:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   191b2:	b37c      	cbz	r4, 19214 <z_unpend_first_thread+0xc0>
	__asm__ volatile(
   191b4:	f04f 0320 	mov.w	r3, #32
   191b8:	f3ef 8511 	mrs	r5, BASEPRI
   191bc:	f383 8811 	msr	BASEPRI, r3
   191c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   191c4:	4814      	ldr	r0, [pc, #80]	; (19218 <z_unpend_first_thread+0xc4>)
   191c6:	f000 fb67 	bl	19898 <z_spin_lock_valid>
   191ca:	b940      	cbnz	r0, 191de <z_unpend_first_thread+0x8a>
   191cc:	4913      	ldr	r1, [pc, #76]	; (1921c <z_unpend_first_thread+0xc8>)
   191ce:	4814      	ldr	r0, [pc, #80]	; (19220 <z_unpend_first_thread+0xcc>)
   191d0:	227c      	movs	r2, #124	; 0x7c
   191d2:	f001 fb4d 	bl	1a870 <printk>
   191d6:	217c      	movs	r1, #124	; 0x7c
   191d8:	4810      	ldr	r0, [pc, #64]	; (1921c <z_unpend_first_thread+0xc8>)
   191da:	f001 fdef 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   191de:	480e      	ldr	r0, [pc, #56]	; (19218 <z_unpend_first_thread+0xc4>)
   191e0:	f000 fb76 	bl	198d0 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   191e4:	4620      	mov	r0, r4
   191e6:	f004 ff34 	bl	1e052 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   191ea:	480b      	ldr	r0, [pc, #44]	; (19218 <z_unpend_first_thread+0xc4>)
   191ec:	f000 fb62 	bl	198b4 <z_spin_unlock_valid>
   191f0:	b940      	cbnz	r0, 19204 <z_unpend_first_thread+0xb0>
   191f2:	490a      	ldr	r1, [pc, #40]	; (1921c <z_unpend_first_thread+0xc8>)
   191f4:	480a      	ldr	r0, [pc, #40]	; (19220 <z_unpend_first_thread+0xcc>)
   191f6:	22a7      	movs	r2, #167	; 0xa7
   191f8:	f001 fb3a 	bl	1a870 <printk>
   191fc:	21a7      	movs	r1, #167	; 0xa7
   191fe:	4807      	ldr	r0, [pc, #28]	; (1921c <z_unpend_first_thread+0xc8>)
   19200:	f001 fddc 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   19204:	f385 8811 	msr	BASEPRI, r5
   19208:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   1920c:	f104 0018 	add.w	r0, r4, #24
   19210:	f000 fd86 	bl	19d20 <z_abort_timeout>
}
   19214:	4620      	mov	r0, r4
   19216:	bd38      	pop	{r3, r4, r5, pc}
   19218:	2000b184 	.word	0x2000b184
   1921c:	0001fe34 	.word	0x0001fe34
   19220:	0001fdfa 	.word	0x0001fdfa

00019224 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   19224:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   19226:	4b04      	ldr	r3, [pc, #16]	; (19238 <z_sched_init+0x14>)
   19228:	4608      	mov	r0, r1
   1922a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   1922e:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   19232:	f7ff b961 	b.w	184f8 <k_sched_time_slice_set>
   19236:	bf00      	nop
   19238:	2000b14c 	.word	0x2000b14c

0001923c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   1923c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1923e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   19242:	b153      	cbz	r3, 1925a <z_impl_k_yield+0x1e>
   19244:	493d      	ldr	r1, [pc, #244]	; (1933c <z_impl_k_yield+0x100>)
   19246:	483e      	ldr	r0, [pc, #248]	; (19340 <z_impl_k_yield+0x104>)
   19248:	f240 42cf 	movw	r2, #1231	; 0x4cf
   1924c:	f001 fb10 	bl	1a870 <printk>
   19250:	f240 41cf 	movw	r1, #1231	; 0x4cf
   19254:	4839      	ldr	r0, [pc, #228]	; (1933c <z_impl_k_yield+0x100>)
   19256:	f001 fdb1 	bl	1adbc <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   1925a:	4d3a      	ldr	r5, [pc, #232]	; (19344 <z_impl_k_yield+0x108>)
   1925c:	4f3a      	ldr	r7, [pc, #232]	; (19348 <z_impl_k_yield+0x10c>)
   1925e:	68ab      	ldr	r3, [r5, #8]
   19260:	42bb      	cmp	r3, r7
   19262:	d054      	beq.n	1930e <z_impl_k_yield+0xd2>
	__asm__ volatile(
   19264:	f04f 0320 	mov.w	r3, #32
   19268:	f3ef 8611 	mrs	r6, BASEPRI
   1926c:	f383 8811 	msr	BASEPRI, r3
   19270:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19274:	4835      	ldr	r0, [pc, #212]	; (1934c <z_impl_k_yield+0x110>)
   19276:	f000 fb0f 	bl	19898 <z_spin_lock_valid>
   1927a:	b940      	cbnz	r0, 1928e <z_impl_k_yield+0x52>
   1927c:	4934      	ldr	r1, [pc, #208]	; (19350 <z_impl_k_yield+0x114>)
   1927e:	4830      	ldr	r0, [pc, #192]	; (19340 <z_impl_k_yield+0x104>)
   19280:	227c      	movs	r2, #124	; 0x7c
   19282:	f001 faf5 	bl	1a870 <printk>
   19286:	217c      	movs	r1, #124	; 0x7c
   19288:	4831      	ldr	r0, [pc, #196]	; (19350 <z_impl_k_yield+0x114>)
   1928a:	f001 fd97 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   1928e:	482f      	ldr	r0, [pc, #188]	; (1934c <z_impl_k_yield+0x110>)
   19290:	f000 fb1e 	bl	198d0 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   19294:	68a9      	ldr	r1, [r5, #8]
   19296:	482f      	ldr	r0, [pc, #188]	; (19354 <z_impl_k_yield+0x118>)
   19298:	f7ff fa0a 	bl	186b0 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1929c:	68ac      	ldr	r4, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1929e:	42bc      	cmp	r4, r7
   192a0:	d10a      	bne.n	192b8 <z_impl_k_yield+0x7c>
   192a2:	4926      	ldr	r1, [pc, #152]	; (1933c <z_impl_k_yield+0x100>)
   192a4:	4826      	ldr	r0, [pc, #152]	; (19340 <z_impl_k_yield+0x104>)
   192a6:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   192aa:	f001 fae1 	bl	1a870 <printk>
   192ae:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   192b2:	4822      	ldr	r0, [pc, #136]	; (1933c <z_impl_k_yield+0x100>)
   192b4:	f001 fd82 	bl	1adbc <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
   192b8:	e9d5 320b 	ldrd	r3, r2, [r5, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   192bc:	4925      	ldr	r1, [pc, #148]	; (19354 <z_impl_k_yield+0x118>)
   192be:	428b      	cmp	r3, r1
   192c0:	d036      	beq.n	19330 <z_impl_k_yield+0xf4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   192c2:	2b00      	cmp	r3, #0
   192c4:	d034      	beq.n	19330 <z_impl_k_yield+0xf4>
	if (thread_1->base.prio < thread_2->base.prio) {
   192c6:	f994 000e 	ldrsb.w	r0, [r4, #14]
   192ca:	f993 700e 	ldrsb.w	r7, [r3, #14]
   192ce:	4287      	cmp	r7, r0
   192d0:	dd29      	ble.n	19326 <z_impl_k_yield+0xea>
	node->prev = successor->prev;
   192d2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   192d4:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   192d8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   192da:	605c      	str	r4, [r3, #4]
			z_mark_thread_as_queued(_current);
   192dc:	68aa      	ldr	r2, [r5, #8]
			update_cache(1);
   192de:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   192e0:	7b53      	ldrb	r3, [r2, #13]
   192e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   192e6:	7353      	strb	r3, [r2, #13]
   192e8:	f7ff fa48 	bl	1877c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   192ec:	4817      	ldr	r0, [pc, #92]	; (1934c <z_impl_k_yield+0x110>)
   192ee:	f000 fae1 	bl	198b4 <z_spin_unlock_valid>
   192f2:	b940      	cbnz	r0, 19306 <z_impl_k_yield+0xca>
   192f4:	4916      	ldr	r1, [pc, #88]	; (19350 <z_impl_k_yield+0x114>)
   192f6:	4812      	ldr	r0, [pc, #72]	; (19340 <z_impl_k_yield+0x104>)
   192f8:	22a7      	movs	r2, #167	; 0xa7
   192fa:	f001 fab9 	bl	1a870 <printk>
   192fe:	21a7      	movs	r1, #167	; 0xa7
   19300:	4813      	ldr	r0, [pc, #76]	; (19350 <z_impl_k_yield+0x114>)
   19302:	f001 fd5b 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   19306:	f386 8811 	msr	BASEPRI, r6
   1930a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1930e:	f04f 0320 	mov.w	r3, #32
   19312:	f3ef 8011 	mrs	r0, BASEPRI
   19316:	f383 8811 	msr	BASEPRI, r3
   1931a:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   1931e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   19322:	f7f4 bafd 	b.w	d920 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   19326:	4293      	cmp	r3, r2
   19328:	d002      	beq.n	19330 <z_impl_k_yield+0xf4>
   1932a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1932c:	2b00      	cmp	r3, #0
   1932e:	d1cc      	bne.n	192ca <z_impl_k_yield+0x8e>
	node->prev = list->tail;
   19330:	e9c4 1200 	strd	r1, r2, [r4]
	list->tail->next = node;
   19334:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   19336:	601c      	str	r4, [r3, #0]
	list->tail = node;
   19338:	632c      	str	r4, [r5, #48]	; 0x30
}
   1933a:	e7cf      	b.n	192dc <z_impl_k_yield+0xa0>
   1933c:	00022c7f 	.word	0x00022c7f
   19340:	0001fdfa 	.word	0x0001fdfa
   19344:	2000b14c 	.word	0x2000b14c
   19348:	2000a420 	.word	0x2000a420
   1934c:	2000b184 	.word	0x2000b184
   19350:	0001fe34 	.word	0x0001fe34
   19354:	2000b178 	.word	0x2000b178

00019358 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   19358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1935c:	4605      	mov	r5, r0
   1935e:	460f      	mov	r7, r1
   19360:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   19364:	b153      	cbz	r3, 1937c <z_tick_sleep+0x24>
   19366:	4934      	ldr	r1, [pc, #208]	; (19438 <z_tick_sleep+0xe0>)
   19368:	4834      	ldr	r0, [pc, #208]	; (1943c <z_tick_sleep+0xe4>)
   1936a:	f240 42ed 	movw	r2, #1261	; 0x4ed
   1936e:	f001 fa7f 	bl	1a870 <printk>
   19372:	f240 41ed 	movw	r1, #1261	; 0x4ed
   19376:	4830      	ldr	r0, [pc, #192]	; (19438 <z_tick_sleep+0xe0>)
   19378:	f001 fd20 	bl	1adbc <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1937c:	ea55 0307 	orrs.w	r3, r5, r7
   19380:	d104      	bne.n	1938c <z_tick_sleep+0x34>
	z_impl_k_yield();
   19382:	f7ff ff5b 	bl	1923c <z_impl_k_yield>
		k_yield();
		return 0;
   19386:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   19388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + z_tick_get_32();
   1938c:	f004 fefd 	bl	1e18a <z_tick_get_32>
   19390:	1944      	adds	r4, r0, r5
   19392:	f04f 0320 	mov.w	r3, #32
   19396:	f3ef 8811 	mrs	r8, BASEPRI
   1939a:	f383 8811 	msr	BASEPRI, r3
   1939e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   193a2:	4827      	ldr	r0, [pc, #156]	; (19440 <z_tick_sleep+0xe8>)
   193a4:	f000 fa78 	bl	19898 <z_spin_lock_valid>
   193a8:	b940      	cbnz	r0, 193bc <z_tick_sleep+0x64>
   193aa:	4926      	ldr	r1, [pc, #152]	; (19444 <z_tick_sleep+0xec>)
   193ac:	4823      	ldr	r0, [pc, #140]	; (1943c <z_tick_sleep+0xe4>)
   193ae:	227c      	movs	r2, #124	; 0x7c
   193b0:	f001 fa5e 	bl	1a870 <printk>
   193b4:	217c      	movs	r1, #124	; 0x7c
   193b6:	4823      	ldr	r0, [pc, #140]	; (19444 <z_tick_sleep+0xec>)
   193b8:	f001 fd00 	bl	1adbc <assert_post_action>
	pending_current = _current;
   193bc:	4e22      	ldr	r6, [pc, #136]	; (19448 <z_tick_sleep+0xf0>)
	z_spin_lock_set_owner(l);
   193be:	4820      	ldr	r0, [pc, #128]	; (19440 <z_tick_sleep+0xe8>)
   193c0:	f000 fa86 	bl	198d0 <z_spin_lock_set_owner>
   193c4:	68b0      	ldr	r0, [r6, #8]
   193c6:	4b21      	ldr	r3, [pc, #132]	; (1944c <z_tick_sleep+0xf4>)
   193c8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   193ca:	f7ff fd7d 	bl	18ec8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   193ce:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   193d0:	462a      	mov	r2, r5
   193d2:	463b      	mov	r3, r7
   193d4:	3018      	adds	r0, #24
   193d6:	491e      	ldr	r1, [pc, #120]	; (19450 <z_tick_sleep+0xf8>)
   193d8:	f000 fbf2 	bl	19bc0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   193dc:	68b2      	ldr	r2, [r6, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   193de:	4818      	ldr	r0, [pc, #96]	; (19440 <z_tick_sleep+0xe8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   193e0:	7b53      	ldrb	r3, [r2, #13]
   193e2:	f043 0310 	orr.w	r3, r3, #16
   193e6:	7353      	strb	r3, [r2, #13]
   193e8:	f000 fa64 	bl	198b4 <z_spin_unlock_valid>
   193ec:	b940      	cbnz	r0, 19400 <z_tick_sleep+0xa8>
   193ee:	4915      	ldr	r1, [pc, #84]	; (19444 <z_tick_sleep+0xec>)
   193f0:	4812      	ldr	r0, [pc, #72]	; (1943c <z_tick_sleep+0xe4>)
   193f2:	22be      	movs	r2, #190	; 0xbe
   193f4:	f001 fa3c 	bl	1a870 <printk>
   193f8:	21be      	movs	r1, #190	; 0xbe
   193fa:	4812      	ldr	r0, [pc, #72]	; (19444 <z_tick_sleep+0xec>)
   193fc:	f001 fcde 	bl	1adbc <assert_post_action>
   19400:	4640      	mov	r0, r8
   19402:	f7f4 fa8d 	bl	d920 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   19406:	68b3      	ldr	r3, [r6, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   19408:	7b5b      	ldrb	r3, [r3, #13]
   1940a:	06db      	lsls	r3, r3, #27
   1940c:	d50a      	bpl.n	19424 <z_tick_sleep+0xcc>
   1940e:	490a      	ldr	r1, [pc, #40]	; (19438 <z_tick_sleep+0xe0>)
   19410:	480a      	ldr	r0, [pc, #40]	; (1943c <z_tick_sleep+0xe4>)
   19412:	f240 520b 	movw	r2, #1291	; 0x50b
   19416:	f001 fa2b 	bl	1a870 <printk>
   1941a:	f240 510b 	movw	r1, #1291	; 0x50b
   1941e:	4806      	ldr	r0, [pc, #24]	; (19438 <z_tick_sleep+0xe0>)
   19420:	f001 fccc 	bl	1adbc <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   19424:	f004 feb1 	bl	1e18a <z_tick_get_32>
   19428:	1a20      	subs	r0, r4, r0
   1942a:	eb63 0303 	sbc.w	r3, r3, r3
   1942e:	2b00      	cmp	r3, #0
   19430:	bfb8      	it	lt
   19432:	2000      	movlt	r0, #0
   19434:	e7a8      	b.n	19388 <z_tick_sleep+0x30>
   19436:	bf00      	nop
   19438:	00022c7f 	.word	0x00022c7f
   1943c:	0001fdfa 	.word	0x0001fdfa
   19440:	2000b184 	.word	0x2000b184
   19444:	0001fe34 	.word	0x0001fe34
   19448:	2000b14c 	.word	0x2000b14c
   1944c:	2000b180 	.word	0x2000b180
   19450:	00018a2d 	.word	0x00018a2d

00019454 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   19454:	b538      	push	{r3, r4, r5, lr}
   19456:	4605      	mov	r5, r0
   19458:	460c      	mov	r4, r1
   1945a:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1945e:	b153      	cbz	r3, 19476 <z_impl_k_sleep+0x22>
   19460:	4911      	ldr	r1, [pc, #68]	; (194a8 <z_impl_k_sleep+0x54>)
   19462:	4812      	ldr	r0, [pc, #72]	; (194ac <z_impl_k_sleep+0x58>)
   19464:	f240 521a 	movw	r2, #1306	; 0x51a
   19468:	f001 fa02 	bl	1a870 <printk>
   1946c:	f240 511a 	movw	r1, #1306	; 0x51a
   19470:	480d      	ldr	r0, [pc, #52]	; (194a8 <z_impl_k_sleep+0x54>)
   19472:	f001 fca3 	bl	1adbc <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19476:	f1b4 3fff 	cmp.w	r4, #4294967295
   1947a:	bf08      	it	eq
   1947c:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   19480:	d106      	bne.n	19490 <z_impl_k_sleep+0x3c>
		k_thread_suspend(_current);
   19482:	4b0b      	ldr	r3, [pc, #44]	; (194b0 <z_impl_k_sleep+0x5c>)
   19484:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   19486:	f7ff fbc5 	bl	18c14 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1948a:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   1948e:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   19490:	4628      	mov	r0, r5
   19492:	4621      	mov	r1, r4
   19494:	f7ff ff60 	bl	19358 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   19498:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1949c:	fb80 0303 	smull	r0, r3, r0, r3
   194a0:	0bc0      	lsrs	r0, r0, #15
   194a2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   194a6:	e7f2      	b.n	1948e <z_impl_k_sleep+0x3a>
   194a8:	00022c7f 	.word	0x00022c7f
   194ac:	0001fdfa 	.word	0x0001fdfa
   194b0:	2000b14c 	.word	0x2000b14c

000194b4 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   194b4:	4b01      	ldr	r3, [pc, #4]	; (194bc <z_impl_k_current_get+0x8>)
   194b6:	6898      	ldr	r0, [r3, #8]
   194b8:	4770      	bx	lr
   194ba:	bf00      	nop
   194bc:	2000b14c 	.word	0x2000b14c

000194c0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   194c0:	b538      	push	{r3, r4, r5, lr}
   194c2:	4604      	mov	r4, r0
   194c4:	f04f 0320 	mov.w	r3, #32
   194c8:	f3ef 8511 	mrs	r5, BASEPRI
   194cc:	f383 8811 	msr	BASEPRI, r3
   194d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   194d4:	4815      	ldr	r0, [pc, #84]	; (1952c <z_impl_k_sem_give+0x6c>)
   194d6:	f000 f9df 	bl	19898 <z_spin_lock_valid>
   194da:	b940      	cbnz	r0, 194ee <z_impl_k_sem_give+0x2e>
   194dc:	4914      	ldr	r1, [pc, #80]	; (19530 <z_impl_k_sem_give+0x70>)
   194de:	4815      	ldr	r0, [pc, #84]	; (19534 <z_impl_k_sem_give+0x74>)
   194e0:	227c      	movs	r2, #124	; 0x7c
   194e2:	f001 f9c5 	bl	1a870 <printk>
   194e6:	217c      	movs	r1, #124	; 0x7c
   194e8:	4811      	ldr	r0, [pc, #68]	; (19530 <z_impl_k_sem_give+0x70>)
   194ea:	f001 fc67 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   194ee:	480f      	ldr	r0, [pc, #60]	; (1952c <z_impl_k_sem_give+0x6c>)
   194f0:	f000 f9ee 	bl	198d0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   194f4:	4620      	mov	r0, r4
   194f6:	f7ff fe2d 	bl	19154 <z_unpend_first_thread>

	if (thread != NULL) {
   194fa:	b150      	cbz	r0, 19512 <z_impl_k_sem_give+0x52>
   194fc:	2200      	movs	r2, #0
   194fe:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   19502:	f7ff fa1b 	bl	1893c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   19506:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   19508:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1950c:	4807      	ldr	r0, [pc, #28]	; (1952c <z_impl_k_sem_give+0x6c>)
   1950e:	f7ff b841 	b.w	18594 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   19512:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   19516:	429a      	cmp	r2, r3
   19518:	bf18      	it	ne
   1951a:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1951c:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1951e:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   19520:	f104 0010 	add.w	r0, r4, #16
   19524:	f004 fea8 	bl	1e278 <z_handle_obj_poll_events>
}
   19528:	e7ed      	b.n	19506 <z_impl_k_sem_give+0x46>
   1952a:	bf00      	nop
   1952c:	2000b190 	.word	0x2000b190
   19530:	0001fe34 	.word	0x0001fe34
   19534:	0001fdfa 	.word	0x0001fdfa

00019538 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   19538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1953a:	4604      	mov	r4, r0
   1953c:	4616      	mov	r6, r2
   1953e:	461d      	mov	r5, r3
   19540:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   19544:	b15b      	cbz	r3, 1955e <z_impl_k_sem_take+0x26>
   19546:	ea52 0305 	orrs.w	r3, r2, r5
   1954a:	d008      	beq.n	1955e <z_impl_k_sem_take+0x26>
   1954c:	492b      	ldr	r1, [pc, #172]	; (195fc <z_impl_k_sem_take+0xc4>)
   1954e:	482c      	ldr	r0, [pc, #176]	; (19600 <z_impl_k_sem_take+0xc8>)
   19550:	228c      	movs	r2, #140	; 0x8c
   19552:	f001 f98d 	bl	1a870 <printk>
   19556:	218c      	movs	r1, #140	; 0x8c
   19558:	4828      	ldr	r0, [pc, #160]	; (195fc <z_impl_k_sem_take+0xc4>)
   1955a:	f001 fc2f 	bl	1adbc <assert_post_action>
   1955e:	f04f 0320 	mov.w	r3, #32
   19562:	f3ef 8711 	mrs	r7, BASEPRI
   19566:	f383 8811 	msr	BASEPRI, r3
   1956a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1956e:	4825      	ldr	r0, [pc, #148]	; (19604 <z_impl_k_sem_take+0xcc>)
   19570:	f000 f992 	bl	19898 <z_spin_lock_valid>
   19574:	b940      	cbnz	r0, 19588 <z_impl_k_sem_take+0x50>
   19576:	4924      	ldr	r1, [pc, #144]	; (19608 <z_impl_k_sem_take+0xd0>)
   19578:	4821      	ldr	r0, [pc, #132]	; (19600 <z_impl_k_sem_take+0xc8>)
   1957a:	227c      	movs	r2, #124	; 0x7c
   1957c:	f001 f978 	bl	1a870 <printk>
   19580:	217c      	movs	r1, #124	; 0x7c
   19582:	4821      	ldr	r0, [pc, #132]	; (19608 <z_impl_k_sem_take+0xd0>)
   19584:	f001 fc1a 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   19588:	481e      	ldr	r0, [pc, #120]	; (19604 <z_impl_k_sem_take+0xcc>)
   1958a:	f000 f9a1 	bl	198d0 <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   1958e:	68a3      	ldr	r3, [r4, #8]
   19590:	b1ab      	cbz	r3, 195be <z_impl_k_sem_take+0x86>
		sem->count--;
   19592:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19594:	481b      	ldr	r0, [pc, #108]	; (19604 <z_impl_k_sem_take+0xcc>)
   19596:	60a3      	str	r3, [r4, #8]
   19598:	f000 f98c 	bl	198b4 <z_spin_unlock_valid>
   1959c:	b940      	cbnz	r0, 195b0 <z_impl_k_sem_take+0x78>
   1959e:	491a      	ldr	r1, [pc, #104]	; (19608 <z_impl_k_sem_take+0xd0>)
   195a0:	4817      	ldr	r0, [pc, #92]	; (19600 <z_impl_k_sem_take+0xc8>)
   195a2:	22a7      	movs	r2, #167	; 0xa7
   195a4:	f001 f964 	bl	1a870 <printk>
   195a8:	21a7      	movs	r1, #167	; 0xa7
   195aa:	4817      	ldr	r0, [pc, #92]	; (19608 <z_impl_k_sem_take+0xd0>)
   195ac:	f001 fc06 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   195b0:	f387 8811 	msr	BASEPRI, r7
   195b4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   195b8:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   195ba:	b003      	add	sp, #12
   195bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   195be:	ea56 0305 	orrs.w	r3, r6, r5
   195c2:	d113      	bne.n	195ec <z_impl_k_sem_take+0xb4>
   195c4:	480f      	ldr	r0, [pc, #60]	; (19604 <z_impl_k_sem_take+0xcc>)
   195c6:	f000 f975 	bl	198b4 <z_spin_unlock_valid>
   195ca:	b940      	cbnz	r0, 195de <z_impl_k_sem_take+0xa6>
   195cc:	490e      	ldr	r1, [pc, #56]	; (19608 <z_impl_k_sem_take+0xd0>)
   195ce:	480c      	ldr	r0, [pc, #48]	; (19600 <z_impl_k_sem_take+0xc8>)
   195d0:	22a7      	movs	r2, #167	; 0xa7
   195d2:	f001 f94d 	bl	1a870 <printk>
   195d6:	21a7      	movs	r1, #167	; 0xa7
   195d8:	480b      	ldr	r0, [pc, #44]	; (19608 <z_impl_k_sem_take+0xd0>)
   195da:	f001 fbef 	bl	1adbc <assert_post_action>
   195de:	f387 8811 	msr	BASEPRI, r7
   195e2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   195e6:	f06f 000f 	mvn.w	r0, #15
   195ea:	e7e6      	b.n	195ba <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   195ec:	4622      	mov	r2, r4
   195ee:	4639      	mov	r1, r7
   195f0:	e9cd 6500 	strd	r6, r5, [sp]
   195f4:	4803      	ldr	r0, [pc, #12]	; (19604 <z_impl_k_sem_take+0xcc>)
   195f6:	f7ff fd0b 	bl	19010 <z_pend_curr>
	return ret;
   195fa:	e7de      	b.n	195ba <z_impl_k_sem_take+0x82>
   195fc:	00022ca1 	.word	0x00022ca1
   19600:	0001fdfa 	.word	0x0001fdfa
   19604:	2000b190 	.word	0x2000b190
   19608:	0001fe34 	.word	0x0001fe34

0001960c <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1960c:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1960e:	4c08      	ldr	r4, [pc, #32]	; (19630 <k_sys_work_q_init+0x24>)
   19610:	f04f 33ff 	mov.w	r3, #4294967295
   19614:	f44f 6280 	mov.w	r2, #1024	; 0x400
   19618:	4620      	mov	r0, r4
   1961a:	4906      	ldr	r1, [pc, #24]	; (19634 <k_sys_work_q_init+0x28>)
   1961c:	f000 f98c 	bl	19938 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   19620:	4905      	ldr	r1, [pc, #20]	; (19638 <k_sys_work_q_init+0x2c>)
   19622:	f104 0020 	add.w	r0, r4, #32
   19626:	f004 fd52 	bl	1e0ce <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1962a:	2000      	movs	r0, #0
   1962c:	bd10      	pop	{r4, pc}
   1962e:	bf00      	nop
   19630:	2000a540 	.word	0x2000a540
   19634:	20014450 	.word	0x20014450
   19638:	00022cc1 	.word	0x00022cc1

0001963c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1963c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   19640:	4604      	mov	r4, r0
   19642:	460f      	mov	r7, r1
   19644:	4698      	mov	r8, r3
   19646:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   19648:	4b2c      	ldr	r3, [pc, #176]	; (196fc <z_setup_new_thread+0xc0>)
   1964a:	4616      	mov	r6, r2
   1964c:	f100 0238 	add.w	r2, r0, #56	; 0x38
   19650:	e8d2 1fef 	ldaex	r1, [r2]
   19654:	e8c2 3fe0 	stlex	r0, r3, [r2]
   19658:	2800      	cmp	r0, #0
   1965a:	d1f9      	bne.n	19650 <z_setup_new_thread+0x14>
	atomic_val_t old_val = atomic_set(&new_thread->base.cookie,
					  THREAD_COOKIE);
	/* Must be garbage or 0, never already set. Cleared at the end of
	 * z_thread_single_abort()
	 */
	__ASSERT(old_val != THREAD_COOKIE,
   1965c:	4299      	cmp	r1, r3
   1965e:	d10a      	bne.n	19676 <z_setup_new_thread+0x3a>
   19660:	4927      	ldr	r1, [pc, #156]	; (19700 <z_setup_new_thread+0xc4>)
   19662:	4828      	ldr	r0, [pc, #160]	; (19704 <z_setup_new_thread+0xc8>)
   19664:	f240 2223 	movw	r2, #547	; 0x223
   19668:	f001 f902 	bl	1a870 <printk>
   1966c:	f240 2123 	movw	r1, #547	; 0x223
   19670:	4823      	ldr	r0, [pc, #140]	; (19700 <z_setup_new_thread+0xc4>)
   19672:	f001 fba3 	bl	1adbc <assert_post_action>
		 "re-use of active thread object %p detected", new_thread);
#endif
	Z_ASSERT_VALID_PRIO(prio, entry);
   19676:	2d0f      	cmp	r5, #15
   19678:	d12f      	bne.n	196da <z_setup_new_thread+0x9e>
   1967a:	4b23      	ldr	r3, [pc, #140]	; (19708 <z_setup_new_thread+0xcc>)
   1967c:	4598      	cmp	r8, r3
   1967e:	d130      	bne.n	196e2 <z_setup_new_thread+0xa6>
	sys_dlist_init(&w->waitq);
   19680:	f104 0330 	add.w	r3, r4, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   19684:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   19688:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
   1968a:	73a5      	strb	r5, [r4, #14]
	thread_base->user_options = (uint8_t)options;
   1968c:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1968e:	2304      	movs	r3, #4

	thread_base->sched_locked = 0U;
   19690:	2500      	movs	r5, #0
	thread_base->thread_state = (uint8_t)initial_state;
   19692:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   19694:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   19696:	1df0      	adds	r0, r6, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   19698:	9302      	str	r3, [sp, #8]
   1969a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1969c:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   196a0:	9301      	str	r3, [sp, #4]
   196a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	stack_ptr = (char *)stack + stack_obj_size;
   196a4:	183e      	adds	r6, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   196a6:	e9c4 701d 	strd	r7, r0, [r4, #116]	; 0x74
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   196aa:	9300      	str	r3, [sp, #0]
   196ac:	4632      	mov	r2, r6
   196ae:	4643      	mov	r3, r8
   196b0:	4639      	mov	r1, r7
   196b2:	4620      	mov	r0, r4
	node->prev = NULL;
   196b4:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->sched_locked = 0U;
   196b8:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   196ba:	67e5      	str	r5, [r4, #124]	; 0x7c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   196bc:	f7f4 f9ce 	bl	da5c <arch_new_thread>
	if (!_current) {
   196c0:	4b12      	ldr	r3, [pc, #72]	; (1970c <z_setup_new_thread+0xd0>)
	new_thread->fn_abort = NULL;
   196c2:	e9c4 5519 	strd	r5, r5, [r4, #100]	; 0x64
	if (!_current) {
   196c6:	689b      	ldr	r3, [r3, #8]
   196c8:	b10b      	cbz	r3, 196ce <z_setup_new_thread+0x92>
	new_thread->resource_pool = _current->resource_pool;
   196ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
   196ce:	4630      	mov	r0, r6
   196d0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   196d4:	b004      	add	sp, #16
   196d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   196da:	f105 0310 	add.w	r3, r5, #16
   196de:	2b1e      	cmp	r3, #30
   196e0:	d9ce      	bls.n	19680 <z_setup_new_thread+0x44>
   196e2:	f240 2226 	movw	r2, #550	; 0x226
   196e6:	4906      	ldr	r1, [pc, #24]	; (19700 <z_setup_new_thread+0xc4>)
   196e8:	4806      	ldr	r0, [pc, #24]	; (19704 <z_setup_new_thread+0xc8>)
   196ea:	f001 f8c1 	bl	1a870 <printk>
   196ee:	f240 2126 	movw	r1, #550	; 0x226
   196f2:	4803      	ldr	r0, [pc, #12]	; (19700 <z_setup_new_thread+0xc4>)
   196f4:	f001 fb62 	bl	1adbc <assert_post_action>
   196f8:	e7c2      	b.n	19680 <z_setup_new_thread+0x44>
   196fa:	bf00      	nop
   196fc:	1337c0d3 	.word	0x1337c0d3
   19700:	00022cca 	.word	0x00022cca
   19704:	0001fdfa 	.word	0x0001fdfa
   19708:	00017a25 	.word	0x00017a25
   1970c:	2000b14c 	.word	0x2000b14c

00019710 <z_impl_k_thread_create>:
{
   19710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19714:	b087      	sub	sp, #28
   19716:	4604      	mov	r4, r0
   19718:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
   1971c:	460f      	mov	r7, r1
   1971e:	4690      	mov	r8, r2
   19720:	4699      	mov	r9, r3
   19722:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   19726:	b153      	cbz	r3, 1973e <z_impl_k_thread_create+0x2e>
   19728:	491a      	ldr	r1, [pc, #104]	; (19794 <z_impl_k_thread_create+0x84>)
   1972a:	481b      	ldr	r0, [pc, #108]	; (19798 <z_impl_k_thread_create+0x88>)
   1972c:	f240 228f 	movw	r2, #655	; 0x28f
   19730:	f001 f89e 	bl	1a870 <printk>
   19734:	f240 218f 	movw	r1, #655	; 0x28f
   19738:	4816      	ldr	r0, [pc, #88]	; (19794 <z_impl_k_thread_create+0x84>)
   1973a:	f001 fb3f 	bl	1adbc <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1973e:	2300      	movs	r3, #0
   19740:	9305      	str	r3, [sp, #20]
   19742:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19744:	4642      	mov	r2, r8
   19746:	9304      	str	r3, [sp, #16]
   19748:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1974a:	4639      	mov	r1, r7
   1974c:	9303      	str	r3, [sp, #12]
   1974e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19750:	4620      	mov	r0, r4
   19752:	9302      	str	r3, [sp, #8]
   19754:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19756:	9301      	str	r3, [sp, #4]
   19758:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1975a:	9300      	str	r3, [sp, #0]
   1975c:	464b      	mov	r3, r9
   1975e:	f7ff ff6d 	bl	1963c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   19762:	f1b5 3fff 	cmp.w	r5, #4294967295
   19766:	bf08      	it	eq
   19768:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1976c:	d005      	beq.n	1977a <z_impl_k_thread_create+0x6a>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1976e:	ea55 0306 	orrs.w	r3, r5, r6
   19772:	d106      	bne.n	19782 <z_impl_k_thread_create+0x72>
	z_sched_start(thread);
   19774:	4620      	mov	r0, r4
   19776:	f7ff f917 	bl	189a8 <z_sched_start>
}
   1977a:	4620      	mov	r0, r4
   1977c:	b007      	add	sp, #28
   1977e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19782:	4632      	mov	r2, r6
   19784:	462b      	mov	r3, r5
   19786:	4905      	ldr	r1, [pc, #20]	; (1979c <z_impl_k_thread_create+0x8c>)
   19788:	f104 0018 	add.w	r0, r4, #24
   1978c:	f000 fa18 	bl	19bc0 <z_add_timeout>
   19790:	e7f3      	b.n	1977a <z_impl_k_thread_create+0x6a>
   19792:	bf00      	nop
   19794:	00022cca 	.word	0x00022cca
   19798:	0001fdfa 	.word	0x0001fdfa
   1979c:	00018a2d 	.word	0x00018a2d

000197a0 <z_init_static_threads>:
{
   197a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   197a4:	4c37      	ldr	r4, [pc, #220]	; (19884 <z_init_static_threads+0xe4>)
	_FOREACH_STATIC_THREAD(thread_data) {
   197a6:	4d38      	ldr	r5, [pc, #224]	; (19888 <z_init_static_threads+0xe8>)
   197a8:	4f38      	ldr	r7, [pc, #224]	; (1988c <z_init_static_threads+0xec>)
{
   197aa:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   197ac:	42ac      	cmp	r4, r5
   197ae:	4626      	mov	r6, r4
   197b0:	d90a      	bls.n	197c8 <z_init_static_threads+0x28>
   197b2:	4639      	mov	r1, r7
   197b4:	4836      	ldr	r0, [pc, #216]	; (19890 <z_init_static_threads+0xf0>)
   197b6:	f240 22fd 	movw	r2, #765	; 0x2fd
   197ba:	f001 f859 	bl	1a870 <printk>
   197be:	f240 21fd 	movw	r1, #765	; 0x2fd
   197c2:	4638      	mov	r0, r7
   197c4:	f001 fafa 	bl	1adbc <assert_post_action>
   197c8:	42ae      	cmp	r6, r5
   197ca:	f104 0430 	add.w	r4, r4, #48	; 0x30
   197ce:	d31b      	bcc.n	19808 <z_init_static_threads+0x68>
	k_sched_lock();
   197d0:	f7fe ff16 	bl	18600 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   197d4:	4c2b      	ldr	r4, [pc, #172]	; (19884 <z_init_static_threads+0xe4>)
   197d6:	4e2d      	ldr	r6, [pc, #180]	; (1988c <z_init_static_threads+0xec>)
   197d8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 19890 <z_init_static_threads+0xf0>
   197dc:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 19894 <z_init_static_threads+0xf4>
   197e0:	42ac      	cmp	r4, r5
   197e2:	d90a      	bls.n	197fa <z_init_static_threads+0x5a>
   197e4:	4631      	mov	r1, r6
   197e6:	4640      	mov	r0, r8
   197e8:	f44f 7247 	mov.w	r2, #796	; 0x31c
   197ec:	f001 f840 	bl	1a870 <printk>
   197f0:	f44f 7147 	mov.w	r1, #796	; 0x31c
   197f4:	4630      	mov	r0, r6
   197f6:	f001 fae1 	bl	1adbc <assert_post_action>
   197fa:	42ac      	cmp	r4, r5
   197fc:	d320      	bcc.n	19840 <z_init_static_threads+0xa0>
}
   197fe:	b007      	add	sp, #28
   19800:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   19804:	f7fe bff4 	b.w	187f0 <k_sched_unlock>
		z_setup_new_thread(
   19808:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1980c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   19810:	9305      	str	r3, [sp, #20]
   19812:	f854 3c10 	ldr.w	r3, [r4, #-16]
   19816:	9304      	str	r3, [sp, #16]
   19818:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1981c:	9303      	str	r3, [sp, #12]
   1981e:	f854 3c18 	ldr.w	r3, [r4, #-24]
   19822:	9302      	str	r3, [sp, #8]
   19824:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   19828:	9301      	str	r3, [sp, #4]
   1982a:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1982e:	9300      	str	r3, [sp, #0]
   19830:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   19834:	f7ff ff02 	bl	1963c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   19838:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1983c:	665e      	str	r6, [r3, #100]	; 0x64
	_FOREACH_STATIC_THREAD(thread_data) {
   1983e:	e7b5      	b.n	197ac <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   19840:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19842:	1c5a      	adds	r2, r3, #1
   19844:	d00f      	beq.n	19866 <z_init_static_threads+0xc6>
   19846:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1984a:	f240 30e7 	movw	r0, #999	; 0x3e7
   1984e:	2100      	movs	r1, #0
					    K_MSEC(thread_data->init_delay));
   19850:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   19854:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19858:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1985c:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1985e:	d104      	bne.n	1986a <z_init_static_threads+0xca>
	z_sched_start(thread);
   19860:	4638      	mov	r0, r7
   19862:	f7ff f8a1 	bl	189a8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   19866:	3430      	adds	r4, #48	; 0x30
   19868:	e7ba      	b.n	197e0 <z_init_static_threads+0x40>
   1986a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1986e:	2300      	movs	r3, #0
   19870:	f7ef f95c 	bl	8b2c <__aeabi_uldivmod>
   19874:	4602      	mov	r2, r0
   19876:	460b      	mov	r3, r1
   19878:	f107 0018 	add.w	r0, r7, #24
   1987c:	4649      	mov	r1, r9
   1987e:	f000 f99f 	bl	19bc0 <z_add_timeout>
   19882:	e7f0      	b.n	19866 <z_init_static_threads+0xc6>
   19884:	200085e0 	.word	0x200085e0
   19888:	200085e0 	.word	0x200085e0
   1988c:	00022cca 	.word	0x00022cca
   19890:	0001fdfa 	.word	0x0001fdfa
   19894:	00018a2d 	.word	0x00018a2d

00019898 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   19898:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   1989a:	b138      	cbz	r0, 198ac <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   1989c:	4b04      	ldr	r3, [pc, #16]	; (198b0 <z_spin_lock_valid+0x18>)
   1989e:	f000 0003 	and.w	r0, r0, #3
   198a2:	7e1b      	ldrb	r3, [r3, #24]
   198a4:	1ac0      	subs	r0, r0, r3
   198a6:	bf18      	it	ne
   198a8:	2001      	movne	r0, #1
   198aa:	4770      	bx	lr
			return false;
		}
	}
	return true;
   198ac:	2001      	movs	r0, #1
}
   198ae:	4770      	bx	lr
   198b0:	2000b14c 	.word	0x2000b14c

000198b4 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   198b4:	4905      	ldr	r1, [pc, #20]	; (198cc <z_spin_unlock_valid+0x18>)
{
   198b6:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   198b8:	688a      	ldr	r2, [r1, #8]
   198ba:	7e08      	ldrb	r0, [r1, #24]
   198bc:	6819      	ldr	r1, [r3, #0]
   198be:	4302      	orrs	r2, r0
   198c0:	2000      	movs	r0, #0
   198c2:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   198c4:	bf04      	itt	eq
   198c6:	6018      	streq	r0, [r3, #0]
	return true;
   198c8:	2001      	moveq	r0, #1
}
   198ca:	4770      	bx	lr
   198cc:	2000b14c 	.word	0x2000b14c

000198d0 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   198d0:	4a02      	ldr	r2, [pc, #8]	; (198dc <z_spin_lock_set_owner+0xc>)
   198d2:	7e11      	ldrb	r1, [r2, #24]
   198d4:	6893      	ldr	r3, [r2, #8]
   198d6:	430b      	orrs	r3, r1
   198d8:	6003      	str	r3, [r0, #0]
}
   198da:	4770      	bx	lr
   198dc:	2000b14c 	.word	0x2000b14c

000198e0 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   198e0:	b508      	push	{r3, lr}
	__asm__ volatile(
   198e2:	f04f 0320 	mov.w	r3, #32
   198e6:	f3ef 8511 	mrs	r5, BASEPRI
   198ea:	f383 8811 	msr	BASEPRI, r3
   198ee:	f3bf 8f6f 	isb	sy
	/* Lock local IRQs to prevent us from migrating to another CPU
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
   198f2:	4c0e      	ldr	r4, [pc, #56]	; (1992c <z_self_abort+0x4c>)
   198f4:	6923      	ldr	r3, [r4, #16]
   198f6:	b143      	cbz	r3, 1990a <z_self_abort+0x2a>
   198f8:	490d      	ldr	r1, [pc, #52]	; (19930 <z_self_abort+0x50>)
   198fa:	480e      	ldr	r0, [pc, #56]	; (19934 <z_self_abort+0x54>)
   198fc:	2228      	movs	r2, #40	; 0x28
   198fe:	f000 ffb7 	bl	1a870 <printk>
   19902:	2128      	movs	r1, #40	; 0x28
   19904:	480a      	ldr	r0, [pc, #40]	; (19930 <z_self_abort+0x50>)
   19906:	f001 fa59 	bl	1adbc <assert_post_action>
	cpu->pending_abort = _current;
   1990a:	68a0      	ldr	r0, [r4, #8]
   1990c:	6120      	str	r0, [r4, #16]
	z_impl_k_thread_suspend(thread);
   1990e:	f7ff f981 	bl	18c14 <z_impl_k_thread_suspend>
   19912:	4628      	mov	r0, r5
   19914:	f7f4 f804 	bl	d920 <arch_swap>
	LOG_DBG("%p self-aborting, handle on idle thread %p",
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
   19918:	4905      	ldr	r1, [pc, #20]	; (19930 <z_self_abort+0x50>)
   1991a:	4806      	ldr	r0, [pc, #24]	; (19934 <z_self_abort+0x54>)
   1991c:	2230      	movs	r2, #48	; 0x30
   1991e:	f000 ffa7 	bl	1a870 <printk>
   19922:	2130      	movs	r1, #48	; 0x30
   19924:	4802      	ldr	r0, [pc, #8]	; (19930 <z_self_abort+0x50>)
   19926:	f001 fa49 	bl	1adbc <assert_post_action>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1992a:	bf00      	nop
   1992c:	2000b14c 	.word	0x2000b14c
   19930:	00022ced 	.word	0x00022ced
   19934:	0001fdfa 	.word	0x0001fdfa

00019938 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   19938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1993c:	4604      	mov	r4, r0
   1993e:	b088      	sub	sp, #32
   19940:	460d      	mov	r5, r1
   19942:	4616      	mov	r6, r2
   19944:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   19946:	f004 fb43 	bl	1dfd0 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1994a:	f104 0820 	add.w	r8, r4, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1994e:	2200      	movs	r2, #0
   19950:	2300      	movs	r3, #0
   19952:	e9cd 7203 	strd	r7, r2, [sp, #12]
   19956:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1995a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1995e:	4629      	mov	r1, r5
   19960:	4632      	mov	r2, r6
   19962:	4640      	mov	r0, r8
   19964:	4b05      	ldr	r3, [pc, #20]	; (1997c <k_work_q_start+0x44>)
   19966:	9400      	str	r4, [sp, #0]
   19968:	f7ff fed2 	bl	19710 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1996c:	4640      	mov	r0, r8
   1996e:	4904      	ldr	r1, [pc, #16]	; (19980 <k_work_q_start+0x48>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   19970:	b008      	add	sp, #32
   19972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19976:	f004 bbaa 	b.w	1e0ce <z_impl_k_thread_name_set>
   1997a:	bf00      	nop
   1997c:	0000abd9 	.word	0x0000abd9
   19980:	00022d16 	.word	0x00022d16

00019984 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   19984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19988:	4606      	mov	r6, r0
   1998a:	460d      	mov	r5, r1
   1998c:	4690      	mov	r8, r2
   1998e:	461f      	mov	r7, r3
   19990:	f04f 0320 	mov.w	r3, #32
   19994:	f3ef 8911 	mrs	r9, BASEPRI
   19998:	f383 8811 	msr	BASEPRI, r3
   1999c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   199a0:	482c      	ldr	r0, [pc, #176]	; (19a54 <k_delayed_work_submit_to_queue+0xd0>)
   199a2:	f7ff ff79 	bl	19898 <z_spin_lock_valid>
   199a6:	b940      	cbnz	r0, 199ba <k_delayed_work_submit_to_queue+0x36>
   199a8:	492b      	ldr	r1, [pc, #172]	; (19a58 <k_delayed_work_submit_to_queue+0xd4>)
   199aa:	482c      	ldr	r0, [pc, #176]	; (19a5c <k_delayed_work_submit_to_queue+0xd8>)
   199ac:	227c      	movs	r2, #124	; 0x7c
   199ae:	f000 ff5f 	bl	1a870 <printk>
   199b2:	217c      	movs	r1, #124	; 0x7c
   199b4:	4828      	ldr	r0, [pc, #160]	; (19a58 <k_delayed_work_submit_to_queue+0xd4>)
   199b6:	f001 fa01 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   199ba:	4826      	ldr	r0, [pc, #152]	; (19a54 <k_delayed_work_submit_to_queue+0xd0>)
   199bc:	f7ff ff88 	bl	198d0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   199c0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   199c2:	b1e3      	cbz	r3, 199fe <k_delayed_work_submit_to_queue+0x7a>
   199c4:	42b3      	cmp	r3, r6
   199c6:	d142      	bne.n	19a4e <k_delayed_work_submit_to_queue+0xca>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   199c8:	4628      	mov	r0, r5
   199ca:	f004 fb9e 	bl	1e10a <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   199ce:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   199d2:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   199d4:	d015      	beq.n	19a02 <k_delayed_work_submit_to_queue+0x7e>
			err = 0;
		} else if (err < 0) {
   199d6:	2800      	cmp	r0, #0
   199d8:	da14      	bge.n	19a04 <k_delayed_work_submit_to_queue+0x80>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   199da:	481e      	ldr	r0, [pc, #120]	; (19a54 <k_delayed_work_submit_to_queue+0xd0>)
   199dc:	f7ff ff6a 	bl	198b4 <z_spin_unlock_valid>
   199e0:	b940      	cbnz	r0, 199f4 <k_delayed_work_submit_to_queue+0x70>
   199e2:	491d      	ldr	r1, [pc, #116]	; (19a58 <k_delayed_work_submit_to_queue+0xd4>)
   199e4:	481d      	ldr	r0, [pc, #116]	; (19a5c <k_delayed_work_submit_to_queue+0xd8>)
   199e6:	22a7      	movs	r2, #167	; 0xa7
   199e8:	f000 ff42 	bl	1a870 <printk>
   199ec:	21a7      	movs	r1, #167	; 0xa7
   199ee:	481a      	ldr	r0, [pc, #104]	; (19a58 <k_delayed_work_submit_to_queue+0xd4>)
   199f0:	f001 f9e4 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   199f4:	f389 8811 	msr	BASEPRI, r9
   199f8:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   199fc:	e01c      	b.n	19a38 <k_delayed_work_submit_to_queue+0xb4>
	if (work->work_q == work_q) {
   199fe:	2e00      	cmp	r6, #0
   19a00:	d0e2      	beq.n	199c8 <k_delayed_work_submit_to_queue+0x44>
	int err = 0;
   19a02:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19a04:	ea58 0307 	orrs.w	r3, r8, r7
	work->work_q = work_q;
   19a08:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19a0a:	d118      	bne.n	19a3e <k_delayed_work_submit_to_queue+0xba>
   19a0c:	4811      	ldr	r0, [pc, #68]	; (19a54 <k_delayed_work_submit_to_queue+0xd0>)
   19a0e:	f7ff ff51 	bl	198b4 <z_spin_unlock_valid>
   19a12:	b940      	cbnz	r0, 19a26 <k_delayed_work_submit_to_queue+0xa2>
   19a14:	4910      	ldr	r1, [pc, #64]	; (19a58 <k_delayed_work_submit_to_queue+0xd4>)
   19a16:	4811      	ldr	r0, [pc, #68]	; (19a5c <k_delayed_work_submit_to_queue+0xd8>)
   19a18:	22a7      	movs	r2, #167	; 0xa7
   19a1a:	f000 ff29 	bl	1a870 <printk>
   19a1e:	21a7      	movs	r1, #167	; 0xa7
   19a20:	480d      	ldr	r0, [pc, #52]	; (19a58 <k_delayed_work_submit_to_queue+0xd4>)
   19a22:	f001 f9cb 	bl	1adbc <assert_post_action>
   19a26:	f389 8811 	msr	BASEPRI, r9
   19a2a:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   19a2e:	4629      	mov	r1, r5
   19a30:	4630      	mov	r0, r6
   19a32:	f004 fb51 	bl	1e0d8 <k_work_submit_to_queue>
		return 0;
   19a36:	2400      	movs	r4, #0
}
   19a38:	4620      	mov	r0, r4
   19a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   19a3e:	4642      	mov	r2, r8
   19a40:	463b      	mov	r3, r7
   19a42:	4907      	ldr	r1, [pc, #28]	; (19a60 <k_delayed_work_submit_to_queue+0xdc>)
   19a44:	f105 0010 	add.w	r0, r5, #16
   19a48:	f000 f8ba 	bl	19bc0 <z_add_timeout>
   19a4c:	e7c5      	b.n	199da <k_delayed_work_submit_to_queue+0x56>
		err = -EADDRINUSE;
   19a4e:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   19a52:	e7c2      	b.n	199da <k_delayed_work_submit_to_queue+0x56>
   19a54:	2000b194 	.word	0x2000b194
   19a58:	0001fe34 	.word	0x0001fe34
   19a5c:	0001fdfa 	.word	0x0001fdfa
   19a60:	0001e101 	.word	0x0001e101

00019a64 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   19a64:	b538      	push	{r3, r4, r5, lr}
   19a66:	4604      	mov	r4, r0
	__asm__ volatile(
   19a68:	f04f 0320 	mov.w	r3, #32
   19a6c:	f3ef 8511 	mrs	r5, BASEPRI
   19a70:	f383 8811 	msr	BASEPRI, r3
   19a74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19a78:	4815      	ldr	r0, [pc, #84]	; (19ad0 <k_delayed_work_cancel+0x6c>)
   19a7a:	f7ff ff0d 	bl	19898 <z_spin_lock_valid>
   19a7e:	b940      	cbnz	r0, 19a92 <k_delayed_work_cancel+0x2e>
   19a80:	4914      	ldr	r1, [pc, #80]	; (19ad4 <k_delayed_work_cancel+0x70>)
   19a82:	4815      	ldr	r0, [pc, #84]	; (19ad8 <k_delayed_work_cancel+0x74>)
   19a84:	227c      	movs	r2, #124	; 0x7c
   19a86:	f000 fef3 	bl	1a870 <printk>
   19a8a:	217c      	movs	r1, #124	; 0x7c
   19a8c:	4811      	ldr	r0, [pc, #68]	; (19ad4 <k_delayed_work_cancel+0x70>)
   19a8e:	f001 f995 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   19a92:	480f      	ldr	r0, [pc, #60]	; (19ad0 <k_delayed_work_cancel+0x6c>)
   19a94:	f7ff ff1c 	bl	198d0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   19a98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19a9a:	b1b3      	cbz	r3, 19aca <k_delayed_work_cancel+0x66>
		ret = work_cancel(work);
   19a9c:	4620      	mov	r0, r4
   19a9e:	f004 fb34 	bl	1e10a <work_cancel>
   19aa2:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19aa4:	480a      	ldr	r0, [pc, #40]	; (19ad0 <k_delayed_work_cancel+0x6c>)
   19aa6:	f7ff ff05 	bl	198b4 <z_spin_unlock_valid>
   19aaa:	b940      	cbnz	r0, 19abe <k_delayed_work_cancel+0x5a>
   19aac:	4909      	ldr	r1, [pc, #36]	; (19ad4 <k_delayed_work_cancel+0x70>)
   19aae:	480a      	ldr	r0, [pc, #40]	; (19ad8 <k_delayed_work_cancel+0x74>)
   19ab0:	22a7      	movs	r2, #167	; 0xa7
   19ab2:	f000 fedd 	bl	1a870 <printk>
   19ab6:	21a7      	movs	r1, #167	; 0xa7
   19ab8:	4806      	ldr	r0, [pc, #24]	; (19ad4 <k_delayed_work_cancel+0x70>)
   19aba:	f001 f97f 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   19abe:	f385 8811 	msr	BASEPRI, r5
   19ac2:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   19ac6:	4620      	mov	r0, r4
   19ac8:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   19aca:	f06f 0415 	mvn.w	r4, #21
   19ace:	e7e9      	b.n	19aa4 <k_delayed_work_cancel+0x40>
   19ad0:	2000b194 	.word	0x2000b194
   19ad4:	0001fe34 	.word	0x0001fe34
   19ad8:	0001fdfa 	.word	0x0001fdfa

00019adc <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   19adc:	4a02      	ldr	r2, [pc, #8]	; (19ae8 <boot_banner+0xc>)
   19ade:	4903      	ldr	r1, [pc, #12]	; (19aec <boot_banner+0x10>)
   19ae0:	4803      	ldr	r0, [pc, #12]	; (19af0 <boot_banner+0x14>)
   19ae2:	f000 bec5 	b.w	1a870 <printk>
   19ae6:	bf00      	nop
   19ae8:	00022b59 	.word	0x00022b59
   19aec:	00022d20 	.word	0x00022d20
   19af0:	00022d2d 	.word	0x00022d2d

00019af4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   19af4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   19af6:	4806      	ldr	r0, [pc, #24]	; (19b10 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   19af8:	4a06      	ldr	r2, [pc, #24]	; (19b14 <z_data_copy+0x20>)
   19afa:	4907      	ldr	r1, [pc, #28]	; (19b18 <z_data_copy+0x24>)
   19afc:	1a12      	subs	r2, r2, r0
   19afe:	f002 f8fb 	bl	1bcf8 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   19b02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   19b06:	4a05      	ldr	r2, [pc, #20]	; (19b1c <z_data_copy+0x28>)
   19b08:	4905      	ldr	r1, [pc, #20]	; (19b20 <z_data_copy+0x2c>)
   19b0a:	4806      	ldr	r0, [pc, #24]	; (19b24 <z_data_copy+0x30>)
   19b0c:	f002 b8f4 	b.w	1bcf8 <memcpy>
   19b10:	20008000 	.word	0x20008000
   19b14:	200087d8 	.word	0x200087d8
   19b18:	00022dc4 	.word	0x00022dc4
   19b1c:	00000000 	.word	0x00000000
   19b20:	00022dc4 	.word	0x00022dc4
   19b24:	20008000 	.word	0x20008000

00019b28 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   19b28:	4b03      	ldr	r3, [pc, #12]	; (19b38 <elapsed+0x10>)
   19b2a:	681b      	ldr	r3, [r3, #0]
   19b2c:	b90b      	cbnz	r3, 19b32 <elapsed+0xa>
   19b2e:	f7f2 bc9d 	b.w	c46c <z_clock_elapsed>
}
   19b32:	2000      	movs	r0, #0
   19b34:	4770      	bx	lr
   19b36:	bf00      	nop
   19b38:	2000b198 	.word	0x2000b198

00019b3c <next_timeout>:
	return list->head == list;
   19b3c:	4b11      	ldr	r3, [pc, #68]	; (19b84 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   19b3e:	b510      	push	{r4, lr}
   19b40:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19b42:	429c      	cmp	r4, r3
   19b44:	bf08      	it	eq
   19b46:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   19b48:	f7ff ffee 	bl	19b28 <elapsed>
   19b4c:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
   19b4e:	b16c      	cbz	r4, 19b6c <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   19b50:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   19b54:	1ac0      	subs	r0, r0, r3
   19b56:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   19b5a:	2801      	cmp	r0, #1
   19b5c:	f173 0200 	sbcs.w	r2, r3, #0
   19b60:	db0d      	blt.n	19b7e <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   19b62:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   19b66:	f173 0300 	sbcs.w	r3, r3, #0
   19b6a:	db01      	blt.n	19b70 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
   19b6c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   19b70:	4b05      	ldr	r3, [pc, #20]	; (19b88 <next_timeout+0x4c>)
   19b72:	695b      	ldr	r3, [r3, #20]
   19b74:	b113      	cbz	r3, 19b7c <next_timeout+0x40>
   19b76:	4298      	cmp	r0, r3
   19b78:	bfa8      	it	ge
   19b7a:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   19b7c:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   19b7e:	2000      	movs	r0, #0
   19b80:	e7f6      	b.n	19b70 <next_timeout+0x34>
   19b82:	bf00      	nop
   19b84:	2000854c 	.word	0x2000854c
   19b88:	2000b14c 	.word	0x2000b14c

00019b8c <remove_timeout>:
{
   19b8c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   19b8e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   19b90:	b168      	cbz	r0, 19bae <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   19b92:	4a0a      	ldr	r2, [pc, #40]	; (19bbc <remove_timeout+0x30>)
   19b94:	6852      	ldr	r2, [r2, #4]
   19b96:	4290      	cmp	r0, r2
   19b98:	d009      	beq.n	19bae <remove_timeout+0x22>
	if (next(t) != NULL) {
   19b9a:	b143      	cbz	r3, 19bae <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   19b9c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   19ba0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   19ba4:	1912      	adds	r2, r2, r4
   19ba6:	eb41 0105 	adc.w	r1, r1, r5
   19baa:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   19bae:	6842      	ldr	r2, [r0, #4]
   19bb0:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   19bb2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19bb4:	2300      	movs	r3, #0
	node->prev = NULL;
   19bb6:	e9c0 3300 	strd	r3, r3, [r0]
}
   19bba:	bd30      	pop	{r4, r5, pc}
   19bbc:	2000854c 	.word	0x2000854c

00019bc0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
   19bc4:	bf08      	it	eq
   19bc6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   19bca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19bce:	4604      	mov	r4, r0
   19bd0:	4688      	mov	r8, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19bd2:	f000 808c 	beq.w	19cee <z_add_timeout+0x12e>
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   19bd6:	f06f 0601 	mvn.w	r6, #1
   19bda:	f04f 39ff 	mov.w	r9, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   19bde:	1c55      	adds	r5, r2, #1
   19be0:	f143 0700 	adc.w	r7, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   19be4:	1b73      	subs	r3, r6, r5
   19be6:	eb69 0307 	sbc.w	r3, r9, r7
   19bea:	2b00      	cmp	r3, #0
   19bec:	db0d      	blt.n	19c0a <z_add_timeout+0x4a>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   19bee:	f7ff ff9b 	bl	19b28 <elapsed>
   19bf2:	4b44      	ldr	r3, [pc, #272]	; (19d04 <z_add_timeout+0x144>)
   19bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
   19bf8:	1ab6      	subs	r6, r6, r2
   19bfa:	eb69 0303 	sbc.w	r3, r9, r3
   19bfe:	1b75      	subs	r5, r6, r5
   19c00:	eb63 0707 	sbc.w	r7, r3, r7
   19c04:	1a2d      	subs	r5, r5, r0
   19c06:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   19c0a:	6823      	ldr	r3, [r4, #0]
   19c0c:	b143      	cbz	r3, 19c20 <z_add_timeout+0x60>
   19c0e:	493e      	ldr	r1, [pc, #248]	; (19d08 <z_add_timeout+0x148>)
   19c10:	483e      	ldr	r0, [pc, #248]	; (19d0c <z_add_timeout+0x14c>)
   19c12:	2268      	movs	r2, #104	; 0x68
   19c14:	f000 fe2c 	bl	1a870 <printk>
   19c18:	2168      	movs	r1, #104	; 0x68
   19c1a:	483b      	ldr	r0, [pc, #236]	; (19d08 <z_add_timeout+0x148>)
   19c1c:	f001 f8ce 	bl	1adbc <assert_post_action>
	to->fn = fn;
	ticks = MAX(1, ticks);
   19c20:	2d01      	cmp	r5, #1
   19c22:	f177 0300 	sbcs.w	r3, r7, #0
   19c26:	bfbc      	itt	lt
   19c28:	2501      	movlt	r5, #1
   19c2a:	2700      	movlt	r7, #0
	to->fn = fn;
   19c2c:	f8c4 8008 	str.w	r8, [r4, #8]
	__asm__ volatile(
   19c30:	f04f 0320 	mov.w	r3, #32
   19c34:	f3ef 8611 	mrs	r6, BASEPRI
   19c38:	f383 8811 	msr	BASEPRI, r3
   19c3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19c40:	4833      	ldr	r0, [pc, #204]	; (19d10 <z_add_timeout+0x150>)
   19c42:	f7ff fe29 	bl	19898 <z_spin_lock_valid>
   19c46:	b940      	cbnz	r0, 19c5a <z_add_timeout+0x9a>
   19c48:	4932      	ldr	r1, [pc, #200]	; (19d14 <z_add_timeout+0x154>)
   19c4a:	4830      	ldr	r0, [pc, #192]	; (19d0c <z_add_timeout+0x14c>)
   19c4c:	227c      	movs	r2, #124	; 0x7c
   19c4e:	f000 fe0f 	bl	1a870 <printk>
   19c52:	217c      	movs	r1, #124	; 0x7c
   19c54:	482f      	ldr	r0, [pc, #188]	; (19d14 <z_add_timeout+0x154>)
   19c56:	f001 f8b1 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   19c5a:	482d      	ldr	r0, [pc, #180]	; (19d10 <z_add_timeout+0x150>)
   19c5c:	f7ff fe38 	bl	198d0 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   19c60:	f7ff ff62 	bl	19b28 <elapsed>
	return list->head == list;
   19c64:	4a2c      	ldr	r2, [pc, #176]	; (19d18 <z_add_timeout+0x158>)
   19c66:	1945      	adds	r5, r0, r5
   19c68:	6813      	ldr	r3, [r2, #0]
   19c6a:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19c6e:	4293      	cmp	r3, r2
   19c70:	e9c4 5704 	strd	r5, r7, [r4, #16]
   19c74:	d002      	beq.n	19c7c <z_add_timeout+0xbc>
	return (node == list->tail) ? NULL : node->next;
   19c76:	f8d2 c004 	ldr.w	ip, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
   19c7a:	b933      	cbnz	r3, 19c8a <z_add_timeout+0xca>
	node->prev = list->tail;
   19c7c:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   19c7e:	6022      	str	r2, [r4, #0]
	node->prev = list->tail;
   19c80:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   19c82:	6853      	ldr	r3, [r2, #4]
   19c84:	601c      	str	r4, [r3, #0]
	list->tail = node;
   19c86:	6054      	str	r4, [r2, #4]
}
   19c88:	e011      	b.n	19cae <z_add_timeout+0xee>
			if (t->dticks > to->dticks) {
   19c8a:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
   19c8e:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   19c92:	4281      	cmp	r1, r0
   19c94:	eb75 0e07 	sbcs.w	lr, r5, r7
   19c98:	da2b      	bge.n	19cf2 <z_add_timeout+0x132>
				t->dticks -= to->dticks;
   19c9a:	1a41      	subs	r1, r0, r1
   19c9c:	eb67 0505 	sbc.w	r5, r7, r5
   19ca0:	e9c3 1504 	strd	r1, r5, [r3, #16]
	node->prev = successor->prev;
   19ca4:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   19ca6:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   19caa:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   19cac:	605c      	str	r4, [r3, #4]
	return list->head == list;
   19cae:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19cb0:	4293      	cmp	r3, r2
   19cb2:	d00b      	beq.n	19ccc <z_add_timeout+0x10c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   19cb4:	429c      	cmp	r4, r3
   19cb6:	d109      	bne.n	19ccc <z_add_timeout+0x10c>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   19cb8:	f7ff ff40 	bl	19b3c <next_timeout>

			if (next_time == 0 ||
   19cbc:	b118      	cbz	r0, 19cc6 <z_add_timeout+0x106>
			    _current_cpu->slice_ticks != next_time) {
   19cbe:	4b17      	ldr	r3, [pc, #92]	; (19d1c <z_add_timeout+0x15c>)
			if (next_time == 0 ||
   19cc0:	695b      	ldr	r3, [r3, #20]
   19cc2:	4283      	cmp	r3, r0
   19cc4:	d002      	beq.n	19ccc <z_add_timeout+0x10c>
				z_clock_set_timeout(next_time, false);
   19cc6:	2100      	movs	r1, #0
   19cc8:	f7f2 fb9e 	bl	c408 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19ccc:	4810      	ldr	r0, [pc, #64]	; (19d10 <z_add_timeout+0x150>)
   19cce:	f7ff fdf1 	bl	198b4 <z_spin_unlock_valid>
   19cd2:	b940      	cbnz	r0, 19ce6 <z_add_timeout+0x126>
   19cd4:	490f      	ldr	r1, [pc, #60]	; (19d14 <z_add_timeout+0x154>)
   19cd6:	480d      	ldr	r0, [pc, #52]	; (19d0c <z_add_timeout+0x14c>)
   19cd8:	22a7      	movs	r2, #167	; 0xa7
   19cda:	f000 fdc9 	bl	1a870 <printk>
   19cde:	21a7      	movs	r1, #167	; 0xa7
   19ce0:	480c      	ldr	r0, [pc, #48]	; (19d14 <z_add_timeout+0x154>)
   19ce2:	f001 f86b 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   19ce6:	f386 8811 	msr	BASEPRI, r6
   19cea:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   19cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			to->dticks -= t->dticks;
   19cf2:	1a09      	subs	r1, r1, r0
   19cf4:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   19cf8:	4563      	cmp	r3, ip
   19cfa:	e9c4 1504 	strd	r1, r5, [r4, #16]
   19cfe:	d0bd      	beq.n	19c7c <z_add_timeout+0xbc>
   19d00:	681b      	ldr	r3, [r3, #0]
   19d02:	e7ba      	b.n	19c7a <z_add_timeout+0xba>
   19d04:	2000a5f0 	.word	0x2000a5f0
   19d08:	00022d54 	.word	0x00022d54
   19d0c:	0001fdfa 	.word	0x0001fdfa
   19d10:	2000b19c 	.word	0x2000b19c
   19d14:	0001fe34 	.word	0x0001fe34
   19d18:	2000854c 	.word	0x2000854c
   19d1c:	2000b14c 	.word	0x2000b14c

00019d20 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   19d20:	b538      	push	{r3, r4, r5, lr}
   19d22:	4604      	mov	r4, r0
	__asm__ volatile(
   19d24:	f04f 0320 	mov.w	r3, #32
   19d28:	f3ef 8511 	mrs	r5, BASEPRI
   19d2c:	f383 8811 	msr	BASEPRI, r3
   19d30:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19d34:	4815      	ldr	r0, [pc, #84]	; (19d8c <z_abort_timeout+0x6c>)
   19d36:	f7ff fdaf 	bl	19898 <z_spin_lock_valid>
   19d3a:	b940      	cbnz	r0, 19d4e <z_abort_timeout+0x2e>
   19d3c:	4914      	ldr	r1, [pc, #80]	; (19d90 <z_abort_timeout+0x70>)
   19d3e:	4815      	ldr	r0, [pc, #84]	; (19d94 <z_abort_timeout+0x74>)
   19d40:	227c      	movs	r2, #124	; 0x7c
   19d42:	f000 fd95 	bl	1a870 <printk>
   19d46:	217c      	movs	r1, #124	; 0x7c
   19d48:	4811      	ldr	r0, [pc, #68]	; (19d90 <z_abort_timeout+0x70>)
   19d4a:	f001 f837 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   19d4e:	480f      	ldr	r0, [pc, #60]	; (19d8c <z_abort_timeout+0x6c>)
   19d50:	f7ff fdbe 	bl	198d0 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   19d54:	6823      	ldr	r3, [r4, #0]
   19d56:	b1b3      	cbz	r3, 19d86 <z_abort_timeout+0x66>
			remove_timeout(to);
   19d58:	4620      	mov	r0, r4
   19d5a:	f7ff ff17 	bl	19b8c <remove_timeout>
			ret = 0;
   19d5e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19d60:	480a      	ldr	r0, [pc, #40]	; (19d8c <z_abort_timeout+0x6c>)
   19d62:	f7ff fda7 	bl	198b4 <z_spin_unlock_valid>
   19d66:	b940      	cbnz	r0, 19d7a <z_abort_timeout+0x5a>
   19d68:	4909      	ldr	r1, [pc, #36]	; (19d90 <z_abort_timeout+0x70>)
   19d6a:	480a      	ldr	r0, [pc, #40]	; (19d94 <z_abort_timeout+0x74>)
   19d6c:	22a7      	movs	r2, #167	; 0xa7
   19d6e:	f000 fd7f 	bl	1a870 <printk>
   19d72:	21a7      	movs	r1, #167	; 0xa7
   19d74:	4806      	ldr	r0, [pc, #24]	; (19d90 <z_abort_timeout+0x70>)
   19d76:	f001 f821 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   19d7a:	f385 8811 	msr	BASEPRI, r5
   19d7e:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   19d82:	4620      	mov	r0, r4
   19d84:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   19d86:	f06f 0415 	mvn.w	r4, #21
   19d8a:	e7e9      	b.n	19d60 <z_abort_timeout+0x40>
   19d8c:	2000b19c 	.word	0x2000b19c
   19d90:	0001fe34 	.word	0x0001fe34
   19d94:	0001fdfa 	.word	0x0001fdfa

00019d98 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   19d98:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   19d9a:	f04f 0320 	mov.w	r3, #32
   19d9e:	f3ef 8511 	mrs	r5, BASEPRI
   19da2:	f383 8811 	msr	BASEPRI, r3
   19da6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19daa:	4813      	ldr	r0, [pc, #76]	; (19df8 <z_get_next_timeout_expiry+0x60>)
   19dac:	f7ff fd74 	bl	19898 <z_spin_lock_valid>
   19db0:	b940      	cbnz	r0, 19dc4 <z_get_next_timeout_expiry+0x2c>
   19db2:	4912      	ldr	r1, [pc, #72]	; (19dfc <z_get_next_timeout_expiry+0x64>)
   19db4:	4812      	ldr	r0, [pc, #72]	; (19e00 <z_get_next_timeout_expiry+0x68>)
   19db6:	227c      	movs	r2, #124	; 0x7c
   19db8:	f000 fd5a 	bl	1a870 <printk>
   19dbc:	217c      	movs	r1, #124	; 0x7c
   19dbe:	480f      	ldr	r0, [pc, #60]	; (19dfc <z_get_next_timeout_expiry+0x64>)
   19dc0:	f000 fffc 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   19dc4:	480c      	ldr	r0, [pc, #48]	; (19df8 <z_get_next_timeout_expiry+0x60>)
   19dc6:	f7ff fd83 	bl	198d0 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   19dca:	f7ff feb7 	bl	19b3c <next_timeout>
   19dce:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19dd0:	4809      	ldr	r0, [pc, #36]	; (19df8 <z_get_next_timeout_expiry+0x60>)
   19dd2:	f7ff fd6f 	bl	198b4 <z_spin_unlock_valid>
   19dd6:	b940      	cbnz	r0, 19dea <z_get_next_timeout_expiry+0x52>
   19dd8:	4908      	ldr	r1, [pc, #32]	; (19dfc <z_get_next_timeout_expiry+0x64>)
   19dda:	4809      	ldr	r0, [pc, #36]	; (19e00 <z_get_next_timeout_expiry+0x68>)
   19ddc:	22a7      	movs	r2, #167	; 0xa7
   19dde:	f000 fd47 	bl	1a870 <printk>
   19de2:	21a7      	movs	r1, #167	; 0xa7
   19de4:	4805      	ldr	r0, [pc, #20]	; (19dfc <z_get_next_timeout_expiry+0x64>)
   19de6:	f000 ffe9 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   19dea:	f385 8811 	msr	BASEPRI, r5
   19dee:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   19df2:	4620      	mov	r0, r4
   19df4:	bd38      	pop	{r3, r4, r5, pc}
   19df6:	bf00      	nop
   19df8:	2000b19c 	.word	0x2000b19c
   19dfc:	0001fe34 	.word	0x0001fe34
   19e00:	0001fdfa 	.word	0x0001fdfa

00019e04 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   19e04:	b570      	push	{r4, r5, r6, lr}
   19e06:	4604      	mov	r4, r0
   19e08:	460d      	mov	r5, r1
	__asm__ volatile(
   19e0a:	f04f 0320 	mov.w	r3, #32
   19e0e:	f3ef 8611 	mrs	r6, BASEPRI
   19e12:	f383 8811 	msr	BASEPRI, r3
   19e16:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19e1a:	4816      	ldr	r0, [pc, #88]	; (19e74 <z_set_timeout_expiry+0x70>)
   19e1c:	f7ff fd3c 	bl	19898 <z_spin_lock_valid>
   19e20:	b940      	cbnz	r0, 19e34 <z_set_timeout_expiry+0x30>
   19e22:	4915      	ldr	r1, [pc, #84]	; (19e78 <z_set_timeout_expiry+0x74>)
   19e24:	4815      	ldr	r0, [pc, #84]	; (19e7c <z_set_timeout_expiry+0x78>)
   19e26:	227c      	movs	r2, #124	; 0x7c
   19e28:	f000 fd22 	bl	1a870 <printk>
   19e2c:	217c      	movs	r1, #124	; 0x7c
   19e2e:	4812      	ldr	r0, [pc, #72]	; (19e78 <z_set_timeout_expiry+0x74>)
   19e30:	f000 ffc4 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   19e34:	480f      	ldr	r0, [pc, #60]	; (19e74 <z_set_timeout_expiry+0x70>)
   19e36:	f7ff fd4b 	bl	198d0 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   19e3a:	f7ff fe7f 	bl	19b3c <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   19e3e:	2801      	cmp	r0, #1
   19e40:	dd05      	ble.n	19e4e <z_set_timeout_expiry+0x4a>
   19e42:	42a0      	cmp	r0, r4
   19e44:	dd03      	ble.n	19e4e <z_set_timeout_expiry+0x4a>
			z_clock_set_timeout(ticks, is_idle);
   19e46:	4629      	mov	r1, r5
   19e48:	4620      	mov	r0, r4
   19e4a:	f7f2 fadd 	bl	c408 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19e4e:	4809      	ldr	r0, [pc, #36]	; (19e74 <z_set_timeout_expiry+0x70>)
   19e50:	f7ff fd30 	bl	198b4 <z_spin_unlock_valid>
   19e54:	b940      	cbnz	r0, 19e68 <z_set_timeout_expiry+0x64>
   19e56:	4908      	ldr	r1, [pc, #32]	; (19e78 <z_set_timeout_expiry+0x74>)
   19e58:	4808      	ldr	r0, [pc, #32]	; (19e7c <z_set_timeout_expiry+0x78>)
   19e5a:	22a7      	movs	r2, #167	; 0xa7
   19e5c:	f000 fd08 	bl	1a870 <printk>
   19e60:	21a7      	movs	r1, #167	; 0xa7
   19e62:	4805      	ldr	r0, [pc, #20]	; (19e78 <z_set_timeout_expiry+0x74>)
   19e64:	f000 ffaa 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   19e68:	f386 8811 	msr	BASEPRI, r6
   19e6c:	f3bf 8f6f 	isb	sy
		}
	}
}
   19e70:	bd70      	pop	{r4, r5, r6, pc}
   19e72:	bf00      	nop
   19e74:	2000b19c 	.word	0x2000b19c
   19e78:	0001fe34 	.word	0x0001fe34
   19e7c:	0001fdfa 	.word	0x0001fdfa

00019e80 <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
   19e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19e84:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   19e86:	f7fe fe61 	bl	18b4c <z_time_slice>
	__asm__ volatile(
   19e8a:	f04f 0320 	mov.w	r3, #32
   19e8e:	f3ef 8511 	mrs	r5, BASEPRI
   19e92:	f383 8811 	msr	BASEPRI, r3
   19e96:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19e9a:	4842      	ldr	r0, [pc, #264]	; (19fa4 <z_clock_announce+0x124>)
   19e9c:	f7ff fcfc 	bl	19898 <z_spin_lock_valid>
   19ea0:	b940      	cbnz	r0, 19eb4 <z_clock_announce+0x34>
   19ea2:	4941      	ldr	r1, [pc, #260]	; (19fa8 <z_clock_announce+0x128>)
   19ea4:	4841      	ldr	r0, [pc, #260]	; (19fac <z_clock_announce+0x12c>)
   19ea6:	227c      	movs	r2, #124	; 0x7c
   19ea8:	f000 fce2 	bl	1a870 <printk>
   19eac:	217c      	movs	r1, #124	; 0x7c
   19eae:	483e      	ldr	r0, [pc, #248]	; (19fa8 <z_clock_announce+0x128>)
   19eb0:	f000 ff84 	bl	1adbc <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   19eb4:	4f3e      	ldr	r7, [pc, #248]	; (19fb0 <z_clock_announce+0x130>)
	z_spin_lock_set_owner(l);
   19eb6:	483b      	ldr	r0, [pc, #236]	; (19fa4 <z_clock_announce+0x124>)
	return list->head == list;
   19eb8:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 19fb4 <z_clock_announce+0x134>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   19ebc:	4e3e      	ldr	r6, [pc, #248]	; (19fb8 <z_clock_announce+0x138>)
   19ebe:	f7ff fd07 	bl	198d0 <z_spin_lock_set_owner>
	announce_remaining = ticks;
   19ec2:	603c      	str	r4, [r7, #0]
   19ec4:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   19ec8:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19eca:	4544      	cmp	r4, r8
   19ecc:	ea4f 70e2 	mov.w	r0, r2, asr #31
		curr_tick += dt;
   19ed0:	e9d6 1e00 	ldrd	r1, lr, [r6]
   19ed4:	d00b      	beq.n	19eee <z_clock_announce+0x6e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   19ed6:	b154      	cbz	r4, 19eee <z_clock_announce+0x6e>
   19ed8:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
   19edc:	429a      	cmp	r2, r3
   19ede:	eb70 090c 	sbcs.w	r9, r0, ip
   19ee2:	da23      	bge.n	19f2c <z_clock_announce+0xac>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   19ee4:	1a9b      	subs	r3, r3, r2
   19ee6:	eb6c 0c00 	sbc.w	ip, ip, r0
   19eea:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   19eee:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   19ef0:	1852      	adds	r2, r2, r1
   19ef2:	eb4e 0000 	adc.w	r0, lr, r0
   19ef6:	e9c6 2000 	strd	r2, r0, [r6]
	announce_remaining = 0;
   19efa:	603c      	str	r4, [r7, #0]

	z_clock_set_timeout(next_timeout(), false);
   19efc:	f7ff fe1e 	bl	19b3c <next_timeout>
   19f00:	4621      	mov	r1, r4
   19f02:	f7f2 fa81 	bl	c408 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19f06:	4827      	ldr	r0, [pc, #156]	; (19fa4 <z_clock_announce+0x124>)
   19f08:	f7ff fcd4 	bl	198b4 <z_spin_unlock_valid>
   19f0c:	b940      	cbnz	r0, 19f20 <z_clock_announce+0xa0>
   19f0e:	4926      	ldr	r1, [pc, #152]	; (19fa8 <z_clock_announce+0x128>)
   19f10:	4826      	ldr	r0, [pc, #152]	; (19fac <z_clock_announce+0x12c>)
   19f12:	22a7      	movs	r2, #167	; 0xa7
   19f14:	f000 fcac 	bl	1a870 <printk>
   19f18:	21a7      	movs	r1, #167	; 0xa7
   19f1a:	4823      	ldr	r0, [pc, #140]	; (19fa8 <z_clock_announce+0x128>)
   19f1c:	f000 ff4e 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   19f20:	f385 8811 	msr	BASEPRI, r5
   19f24:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   19f28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   19f2c:	1859      	adds	r1, r3, r1
   19f2e:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
   19f32:	1ad3      	subs	r3, r2, r3
   19f34:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
   19f36:	2200      	movs	r2, #0
   19f38:	2300      	movs	r3, #0
		curr_tick += dt;
   19f3a:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
   19f3e:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   19f42:	4620      	mov	r0, r4
   19f44:	f7ff fe22 	bl	19b8c <remove_timeout>
   19f48:	4816      	ldr	r0, [pc, #88]	; (19fa4 <z_clock_announce+0x124>)
   19f4a:	f7ff fcb3 	bl	198b4 <z_spin_unlock_valid>
   19f4e:	b940      	cbnz	r0, 19f62 <z_clock_announce+0xe2>
   19f50:	4915      	ldr	r1, [pc, #84]	; (19fa8 <z_clock_announce+0x128>)
   19f52:	4816      	ldr	r0, [pc, #88]	; (19fac <z_clock_announce+0x12c>)
   19f54:	22a7      	movs	r2, #167	; 0xa7
   19f56:	f000 fc8b 	bl	1a870 <printk>
   19f5a:	21a7      	movs	r1, #167	; 0xa7
   19f5c:	4812      	ldr	r0, [pc, #72]	; (19fa8 <z_clock_announce+0x128>)
   19f5e:	f000 ff2d 	bl	1adbc <assert_post_action>
   19f62:	f385 8811 	msr	BASEPRI, r5
   19f66:	f3bf 8f6f 	isb	sy
		t->fn(t);
   19f6a:	4620      	mov	r0, r4
   19f6c:	68a3      	ldr	r3, [r4, #8]
   19f6e:	4798      	blx	r3
	__asm__ volatile(
   19f70:	f04f 0320 	mov.w	r3, #32
   19f74:	f3ef 8511 	mrs	r5, BASEPRI
   19f78:	f383 8811 	msr	BASEPRI, r3
   19f7c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19f80:	4808      	ldr	r0, [pc, #32]	; (19fa4 <z_clock_announce+0x124>)
   19f82:	f7ff fc89 	bl	19898 <z_spin_lock_valid>
   19f86:	b940      	cbnz	r0, 19f9a <z_clock_announce+0x11a>
   19f88:	4907      	ldr	r1, [pc, #28]	; (19fa8 <z_clock_announce+0x128>)
   19f8a:	4808      	ldr	r0, [pc, #32]	; (19fac <z_clock_announce+0x12c>)
   19f8c:	227c      	movs	r2, #124	; 0x7c
   19f8e:	f000 fc6f 	bl	1a870 <printk>
   19f92:	217c      	movs	r1, #124	; 0x7c
   19f94:	4804      	ldr	r0, [pc, #16]	; (19fa8 <z_clock_announce+0x128>)
   19f96:	f000 ff11 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   19f9a:	4802      	ldr	r0, [pc, #8]	; (19fa4 <z_clock_announce+0x124>)
   19f9c:	f7ff fc98 	bl	198d0 <z_spin_lock_set_owner>
	return k;
   19fa0:	e790      	b.n	19ec4 <z_clock_announce+0x44>
   19fa2:	bf00      	nop
   19fa4:	2000b19c 	.word	0x2000b19c
   19fa8:	0001fe34 	.word	0x0001fe34
   19fac:	0001fdfa 	.word	0x0001fdfa
   19fb0:	2000b198 	.word	0x2000b198
   19fb4:	2000854c 	.word	0x2000854c
   19fb8:	2000a5f0 	.word	0x2000a5f0

00019fbc <z_tick_get>:

int64_t z_tick_get(void)
{
   19fbc:	b570      	push	{r4, r5, r6, lr}
   19fbe:	f04f 0320 	mov.w	r3, #32
   19fc2:	f3ef 8611 	mrs	r6, BASEPRI
   19fc6:	f383 8811 	msr	BASEPRI, r3
   19fca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19fce:	4816      	ldr	r0, [pc, #88]	; (1a028 <z_tick_get+0x6c>)
   19fd0:	f7ff fc62 	bl	19898 <z_spin_lock_valid>
   19fd4:	b940      	cbnz	r0, 19fe8 <z_tick_get+0x2c>
   19fd6:	4915      	ldr	r1, [pc, #84]	; (1a02c <z_tick_get+0x70>)
   19fd8:	4815      	ldr	r0, [pc, #84]	; (1a030 <z_tick_get+0x74>)
   19fda:	227c      	movs	r2, #124	; 0x7c
   19fdc:	f000 fc48 	bl	1a870 <printk>
   19fe0:	217c      	movs	r1, #124	; 0x7c
   19fe2:	4812      	ldr	r0, [pc, #72]	; (1a02c <z_tick_get+0x70>)
   19fe4:	f000 feea 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   19fe8:	480f      	ldr	r0, [pc, #60]	; (1a028 <z_tick_get+0x6c>)
   19fea:	f7ff fc71 	bl	198d0 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   19fee:	f7f2 fa3d 	bl	c46c <z_clock_elapsed>
   19ff2:	4b10      	ldr	r3, [pc, #64]	; (1a034 <z_tick_get+0x78>)
   19ff4:	e9d3 4500 	ldrd	r4, r5, [r3]
   19ff8:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19ffa:	480b      	ldr	r0, [pc, #44]	; (1a028 <z_tick_get+0x6c>)
   19ffc:	f145 0500 	adc.w	r5, r5, #0
   1a000:	f7ff fc58 	bl	198b4 <z_spin_unlock_valid>
   1a004:	b940      	cbnz	r0, 1a018 <z_tick_get+0x5c>
   1a006:	4909      	ldr	r1, [pc, #36]	; (1a02c <z_tick_get+0x70>)
   1a008:	4809      	ldr	r0, [pc, #36]	; (1a030 <z_tick_get+0x74>)
   1a00a:	22a7      	movs	r2, #167	; 0xa7
   1a00c:	f000 fc30 	bl	1a870 <printk>
   1a010:	21a7      	movs	r1, #167	; 0xa7
   1a012:	4806      	ldr	r0, [pc, #24]	; (1a02c <z_tick_get+0x70>)
   1a014:	f000 fed2 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   1a018:	f386 8811 	msr	BASEPRI, r6
   1a01c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1a020:	4620      	mov	r0, r4
   1a022:	4629      	mov	r1, r5
   1a024:	bd70      	pop	{r4, r5, r6, pc}
   1a026:	bf00      	nop
   1a028:	2000b19c 	.word	0x2000b19c
   1a02c:	0001fe34 	.word	0x0001fe34
   1a030:	0001fdfa 	.word	0x0001fdfa
   1a034:	2000a5f0 	.word	0x2000a5f0

0001a038 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   1a038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1a03c:	6884      	ldr	r4, [r0, #8]
{
   1a03e:	4605      	mov	r5, r0
   1a040:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   1a042:	b1b4      	cbz	r4, 1a072 <signal_poll_event+0x3a>
		if (poller->mode == MODE_POLL) {
   1a044:	7863      	ldrb	r3, [r4, #1]
   1a046:	2b01      	cmp	r3, #1
   1a048:	d145      	bne.n	1a0d6 <signal_poll_event+0x9e>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   1a04a:	f1b4 076c 	subs.w	r7, r4, #108	; 0x6c
   1a04e:	d10a      	bne.n	1a066 <signal_poll_event+0x2e>
   1a050:	22e3      	movs	r2, #227	; 0xe3
   1a052:	492d      	ldr	r1, [pc, #180]	; (1a108 <signal_poll_event+0xd0>)
   1a054:	482d      	ldr	r0, [pc, #180]	; (1a10c <signal_poll_event+0xd4>)
   1a056:	f000 fc0b 	bl	1a870 <printk>
   1a05a:	21e3      	movs	r1, #227	; 0xe3
   1a05c:	482a      	ldr	r0, [pc, #168]	; (1a108 <signal_poll_event+0xd0>)
   1a05e:	f000 fead 	bl	1adbc <assert_post_action>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   1a062:	7b7b      	ldrb	r3, [r7, #13]
   1a064:	deff      	udf	#255	; 0xff
	if (!z_is_thread_pending(thread)) {
   1a066:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   1a06a:	f013 0302 	ands.w	r3, r3, #2
   1a06e:	d10a      	bne.n	1a086 <signal_poll_event+0x4e>
			retcode = signal_poller(event, state);
		} else if (poller->mode == MODE_TRIGGERED) {
			retcode = signal_triggered_work(event, state);
		}

		poller->is_polling = false;
   1a070:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   1a072:	2000      	movs	r0, #0
	event->state |= state;
   1a074:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   1a076:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1a078:	f3c3 3104 	ubfx	r1, r3, #12, #5
   1a07c:	430e      	orrs	r6, r1
   1a07e:	f366 3310 	bfi	r3, r6, #12, #5
   1a082:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   1a084:	e00b      	b.n	1a09e <signal_poll_event+0x66>
	if (z_is_thread_timeout_expired(thread)) {
   1a086:	e954 2311 	ldrd	r2, r3, [r4, #-68]	; 0x44
   1a08a:	f1b3 3fff 	cmp.w	r3, #4294967295
   1a08e:	bf08      	it	eq
   1a090:	f112 0f02 	cmneq.w	r2, #2
   1a094:	d105      	bne.n	1a0a2 <signal_poll_event+0x6a>
		poller->is_polling = false;
   1a096:	2300      	movs	r3, #0
		return -EAGAIN;
   1a098:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   1a09c:	7023      	strb	r3, [r4, #0]
}
   1a09e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
   1a0a2:	4638      	mov	r0, r7
   1a0a4:	f7fe fb30 	bl	18708 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1a0a8:	2e08      	cmp	r6, #8
   1a0aa:	bf0c      	ite	eq
   1a0ac:	f06f 0303 	mvneq.w	r3, #3
   1a0b0:	2300      	movne	r3, #0
   1a0b2:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1a0b4:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   1a0b8:	06db      	lsls	r3, r3, #27
   1a0ba:	d104      	bne.n	1a0c6 <signal_poll_event+0x8e>
	if (!z_is_thread_ready(thread)) {
   1a0bc:	f854 8c54 	ldr.w	r8, [r4, #-84]
   1a0c0:	f1b8 0f00 	cmp.w	r8, #0
   1a0c4:	d001      	beq.n	1a0ca <signal_poll_event+0x92>
		poller->is_polling = false;
   1a0c6:	2300      	movs	r3, #0
   1a0c8:	e7d2      	b.n	1a070 <signal_poll_event+0x38>
	z_ready_thread(thread);
   1a0ca:	4638      	mov	r0, r7
   1a0cc:	f7fe fc36 	bl	1893c <z_ready_thread>
		poller->is_polling = false;
   1a0d0:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1a0d4:	e7cd      	b.n	1a072 <signal_poll_event+0x3a>
		} else if (poller->mode == MODE_TRIGGERED) {
   1a0d6:	2b02      	cmp	r3, #2
   1a0d8:	d1f5      	bne.n	1a0c6 <signal_poll_event+0x8e>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1a0da:	7823      	ldrb	r3, [r4, #0]
   1a0dc:	2b00      	cmp	r3, #0
   1a0de:	d0c8      	beq.n	1a072 <signal_poll_event+0x3a>
   1a0e0:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1a0e4:	b177      	cbz	r7, 1a104 <signal_poll_event+0xcc>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1a0e6:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1a0ea:	f1a4 0910 	sub.w	r9, r4, #16
   1a0ee:	f104 0010 	add.w	r0, r4, #16
   1a0f2:	f7ff fe15 	bl	19d20 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   1a0f6:	4649      	mov	r1, r9
   1a0f8:	4638      	mov	r0, r7
		twork->poll_result = 0;
   1a0fa:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   1a0fe:	f004 f875 	bl	1e1ec <k_work_submit_to_queue>
   1a102:	e7e5      	b.n	1a0d0 <signal_poll_event+0x98>
		poller->is_polling = false;
   1a104:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1a106:	e7b4      	b.n	1a072 <signal_poll_event+0x3a>
   1a108:	00022d78 	.word	0x00022d78
   1a10c:	0001fdfa 	.word	0x0001fdfa

0001a110 <register_events>:
{
   1a110:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1a114:	2600      	movs	r6, #0
{
   1a116:	4614      	mov	r4, r2
   1a118:	4681      	mov	r9, r0
	int events_registered = 0;
   1a11a:	46b0      	mov	r8, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a11c:	f8df a188 	ldr.w	sl, [pc, #392]	; 1a2a8 <register_events+0x198>
   1a120:	4f62      	ldr	r7, [pc, #392]	; (1a2ac <register_events+0x19c>)
   1a122:	4d63      	ldr	r5, [pc, #396]	; (1a2b0 <register_events+0x1a0>)
{
   1a124:	9100      	str	r1, [sp, #0]
   1a126:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   1a128:	9b00      	ldr	r3, [sp, #0]
   1a12a:	429e      	cmp	r6, r3
   1a12c:	db03      	blt.n	1a136 <register_events+0x26>
}
   1a12e:	4640      	mov	r0, r8
   1a130:	b003      	add	sp, #12
   1a132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   1a136:	f04f 0220 	mov.w	r2, #32
   1a13a:	f3ef 8b11 	mrs	fp, BASEPRI
   1a13e:	f382 8811 	msr	BASEPRI, r2
   1a142:	f3bf 8f6f 	isb	sy
   1a146:	4650      	mov	r0, sl
   1a148:	f7ff fba6 	bl	19898 <z_spin_lock_valid>
   1a14c:	b940      	cbnz	r0, 1a160 <register_events+0x50>
   1a14e:	4639      	mov	r1, r7
   1a150:	4628      	mov	r0, r5
   1a152:	227c      	movs	r2, #124	; 0x7c
   1a154:	f000 fb8c 	bl	1a870 <printk>
   1a158:	217c      	movs	r1, #124	; 0x7c
   1a15a:	4638      	mov	r0, r7
   1a15c:	f000 fe2e 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   1a160:	4650      	mov	r0, sl
   1a162:	f7ff fbb5 	bl	198d0 <z_spin_lock_set_owner>
	switch (event->type) {
   1a166:	f899 200d 	ldrb.w	r2, [r9, #13]
   1a16a:	f002 020f 	and.w	r2, r2, #15
   1a16e:	2a04      	cmp	r2, #4
   1a170:	d848      	bhi.n	1a204 <register_events+0xf4>
   1a172:	e8df f002 	tbb	[pc, r2]
   1a176:	402f      	.short	0x402f
   1a178:	4703      	.short	0x4703
   1a17a:	2b          	.byte	0x2b
   1a17b:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   1a17c:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1a180:	6892      	ldr	r2, [r2, #8]
   1a182:	b33a      	cbz	r2, 1a1d4 <register_events+0xc4>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1a184:	2102      	movs	r1, #2
	event->poller = NULL;
   1a186:	2000      	movs	r0, #0
	event->state |= state;
   1a188:	f8d9 200c 	ldr.w	r2, [r9, #12]
	event->poller = NULL;
   1a18c:	f8c9 0008 	str.w	r0, [r9, #8]
	event->state |= state;
   1a190:	f3c2 3c04 	ubfx	ip, r2, #12, #5
   1a194:	ea41 010c 	orr.w	r1, r1, ip
   1a198:	f361 3210 	bfi	r2, r1, #12, #5
   1a19c:	f8c9 200c 	str.w	r2, [r9, #12]
			poller->is_polling = false;
   1a1a0:	7020      	strb	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a1a2:	4650      	mov	r0, sl
   1a1a4:	f7ff fb86 	bl	198b4 <z_spin_unlock_valid>
   1a1a8:	b940      	cbnz	r0, 1a1bc <register_events+0xac>
   1a1aa:	4639      	mov	r1, r7
   1a1ac:	4628      	mov	r0, r5
   1a1ae:	22a7      	movs	r2, #167	; 0xa7
   1a1b0:	f000 fb5e 	bl	1a870 <printk>
   1a1b4:	21a7      	movs	r1, #167	; 0xa7
   1a1b6:	4638      	mov	r0, r7
   1a1b8:	f000 fe00 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   1a1bc:	f38b 8811 	msr	BASEPRI, fp
   1a1c0:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1a1c4:	3601      	adds	r6, #1
   1a1c6:	f109 0914 	add.w	r9, r9, #20
   1a1ca:	e7ad      	b.n	1a128 <register_events+0x18>
		if (!k_queue_is_empty(event->queue)) {
   1a1cc:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1a1d0:	6812      	ldr	r2, [r2, #0]
   1a1d2:	bb0a      	cbnz	r2, 1a218 <register_events+0x108>
		} else if (!just_check && poller->is_polling) {
   1a1d4:	9b01      	ldr	r3, [sp, #4]
   1a1d6:	2b00      	cmp	r3, #0
   1a1d8:	d1e3      	bne.n	1a1a2 <register_events+0x92>
   1a1da:	7822      	ldrb	r2, [r4, #0]
   1a1dc:	2a00      	cmp	r2, #0
   1a1de:	d0e0      	beq.n	1a1a2 <register_events+0x92>
	switch (event->type) {
   1a1e0:	f899 200d 	ldrb.w	r2, [r9, #13]
   1a1e4:	f002 020f 	and.w	r2, r2, #15
   1a1e8:	2a04      	cmp	r2, #4
   1a1ea:	d852      	bhi.n	1a292 <register_events+0x182>
   1a1ec:	e8df f002 	tbb	[pc, r2]
   1a1f0:	51164029 	.word	0x51164029
   1a1f4:	2e          	.byte	0x2e
   1a1f5:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   1a1f6:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1a1fa:	6892      	ldr	r2, [r2, #8]
   1a1fc:	2a00      	cmp	r2, #0
   1a1fe:	d0e9      	beq.n	1a1d4 <register_events+0xc4>
			*state = K_POLL_STATE_SIGNALED;
   1a200:	2101      	movs	r1, #1
   1a202:	e7c0      	b.n	1a186 <register_events+0x76>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   1a204:	4628      	mov	r0, r5
   1a206:	2254      	movs	r2, #84	; 0x54
   1a208:	492a      	ldr	r1, [pc, #168]	; (1a2b4 <register_events+0x1a4>)
   1a20a:	f000 fb31 	bl	1a870 <printk>
   1a20e:	2154      	movs	r1, #84	; 0x54
   1a210:	4828      	ldr	r0, [pc, #160]	; (1a2b4 <register_events+0x1a4>)
   1a212:	f000 fdd3 	bl	1adbc <assert_post_action>
		break;
   1a216:	e7dd      	b.n	1a1d4 <register_events+0xc4>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1a218:	2104      	movs	r1, #4
   1a21a:	e7b4      	b.n	1a186 <register_events+0x76>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1a21c:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1a220:	b942      	cbnz	r2, 1a234 <register_events+0x124>
   1a222:	4628      	mov	r0, r5
   1a224:	4923      	ldr	r1, [pc, #140]	; (1a2b4 <register_events+0x1a4>)
   1a226:	227e      	movs	r2, #126	; 0x7e
   1a228:	f000 fb22 	bl	1a870 <printk>
   1a22c:	217e      	movs	r1, #126	; 0x7e
   1a22e:	4821      	ldr	r0, [pc, #132]	; (1a2b4 <register_events+0x1a4>)
   1a230:	f000 fdc4 	bl	1adbc <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   1a234:	4622      	mov	r2, r4
   1a236:	4649      	mov	r1, r9
   1a238:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1a23c:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   1a23e:	f003 ffe9 	bl	1e214 <add_event>
	event->poller = poller;
   1a242:	f8c9 4008 	str.w	r4, [r9, #8]
			events_registered += 1;
   1a246:	f108 0801 	add.w	r8, r8, #1
   1a24a:	e7aa      	b.n	1a1a2 <register_events+0x92>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1a24c:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1a250:	b942      	cbnz	r2, 1a264 <register_events+0x154>
   1a252:	4628      	mov	r0, r5
   1a254:	4917      	ldr	r1, [pc, #92]	; (1a2b4 <register_events+0x1a4>)
   1a256:	2282      	movs	r2, #130	; 0x82
   1a258:	f000 fb0a 	bl	1a870 <printk>
   1a25c:	2182      	movs	r1, #130	; 0x82
   1a25e:	4815      	ldr	r0, [pc, #84]	; (1a2b4 <register_events+0x1a4>)
   1a260:	f000 fdac 	bl	1adbc <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   1a264:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1a268:	4622      	mov	r2, r4
   1a26a:	4649      	mov	r1, r9
   1a26c:	3014      	adds	r0, #20
   1a26e:	e7e6      	b.n	1a23e <register_events+0x12e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1a270:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1a274:	b942      	cbnz	r2, 1a288 <register_events+0x178>
   1a276:	4628      	mov	r0, r5
   1a278:	490e      	ldr	r1, [pc, #56]	; (1a2b4 <register_events+0x1a4>)
   1a27a:	2286      	movs	r2, #134	; 0x86
   1a27c:	f000 faf8 	bl	1a870 <printk>
   1a280:	2186      	movs	r1, #134	; 0x86
   1a282:	480c      	ldr	r0, [pc, #48]	; (1a2b4 <register_events+0x1a4>)
   1a284:	f000 fd9a 	bl	1adbc <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   1a288:	4622      	mov	r2, r4
   1a28a:	4649      	mov	r1, r9
   1a28c:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1a290:	e7d5      	b.n	1a23e <register_events+0x12e>
		__ASSERT(false, "invalid event type\n");
   1a292:	4628      	mov	r0, r5
   1a294:	228d      	movs	r2, #141	; 0x8d
   1a296:	4907      	ldr	r1, [pc, #28]	; (1a2b4 <register_events+0x1a4>)
   1a298:	f000 faea 	bl	1a870 <printk>
   1a29c:	218d      	movs	r1, #141	; 0x8d
   1a29e:	4805      	ldr	r0, [pc, #20]	; (1a2b4 <register_events+0x1a4>)
   1a2a0:	f000 fd8c 	bl	1adbc <assert_post_action>
		break;
   1a2a4:	e7cd      	b.n	1a242 <register_events+0x132>
   1a2a6:	bf00      	nop
   1a2a8:	2000b1a0 	.word	0x2000b1a0
   1a2ac:	0001fe34 	.word	0x0001fe34
   1a2b0:	0001fdfa 	.word	0x0001fdfa
   1a2b4:	00022d78 	.word	0x00022d78

0001a2b8 <clear_event_registrations>:
{
   1a2b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a2bc:	2414      	movs	r4, #20
   1a2be:	4617      	mov	r7, r2
	while (num_events--) {
   1a2c0:	460e      	mov	r6, r1
   1a2c2:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   1a2c6:	4d3d      	ldr	r5, [pc, #244]	; (1a3bc <clear_event_registrations+0x104>)
   1a2c8:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1a3c0 <clear_event_registrations+0x108>
   1a2cc:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1a3c4 <clear_event_registrations+0x10c>
	while (num_events--) {
   1a2d0:	b90e      	cbnz	r6, 1a2d6 <clear_event_registrations+0x1e>
}
   1a2d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	event->poller = NULL;
   1a2d6:	2300      	movs	r3, #0
   1a2d8:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   1a2dc:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1a2e0:	f1a4 0a14 	sub.w	sl, r4, #20
   1a2e4:	f003 030f 	and.w	r3, r3, #15
   1a2e8:	2b04      	cmp	r3, #4
   1a2ea:	d831      	bhi.n	1a350 <clear_event_registrations+0x98>
   1a2ec:	e8df f003 	tbb	[pc, r3]
   1a2f0:	30032539 	.word	0x30032539
   1a2f4:	1a          	.byte	0x1a
   1a2f5:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1a2f6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1a2fa:	b943      	cbnz	r3, 1a30e <clear_event_registrations+0x56>
   1a2fc:	4629      	mov	r1, r5
   1a2fe:	229d      	movs	r2, #157	; 0x9d
   1a300:	4640      	mov	r0, r8
   1a302:	f000 fab5 	bl	1a870 <printk>
   1a306:	219d      	movs	r1, #157	; 0x9d
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1a308:	4628      	mov	r0, r5
   1a30a:	f000 fd57 	bl	1adbc <assert_post_action>
	return node->next != NULL;
   1a30e:	f854 3c14 	ldr.w	r3, [r4, #-20]
	if (remove && sys_dnode_is_linked(&event->_node)) {
   1a312:	b333      	cbz	r3, 1a362 <clear_event_registrations+0xaa>
	node->prev->next = node->next;
   1a314:	f854 2c10 	ldr.w	r2, [r4, #-16]
   1a318:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1a31a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a31c:	2300      	movs	r3, #0
	node->prev = NULL;
   1a31e:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   1a322:	e01e      	b.n	1a362 <clear_event_registrations+0xaa>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1a324:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1a328:	2b00      	cmp	r3, #0
   1a32a:	d1f0      	bne.n	1a30e <clear_event_registrations+0x56>
   1a32c:	4629      	mov	r1, r5
   1a32e:	22a1      	movs	r2, #161	; 0xa1
   1a330:	4640      	mov	r0, r8
   1a332:	f000 fa9d 	bl	1a870 <printk>
   1a336:	21a1      	movs	r1, #161	; 0xa1
   1a338:	e7e6      	b.n	1a308 <clear_event_registrations+0x50>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1a33a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1a33e:	2b00      	cmp	r3, #0
   1a340:	d1e5      	bne.n	1a30e <clear_event_registrations+0x56>
   1a342:	4629      	mov	r1, r5
   1a344:	22a5      	movs	r2, #165	; 0xa5
   1a346:	4640      	mov	r0, r8
   1a348:	f000 fa92 	bl	1a870 <printk>
   1a34c:	21a5      	movs	r1, #165	; 0xa5
   1a34e:	e7db      	b.n	1a308 <clear_event_registrations+0x50>
		__ASSERT(false, "invalid event type\n");
   1a350:	4629      	mov	r1, r5
   1a352:	4640      	mov	r0, r8
   1a354:	22ac      	movs	r2, #172	; 0xac
   1a356:	f000 fa8b 	bl	1a870 <printk>
   1a35a:	21ac      	movs	r1, #172	; 0xac
   1a35c:	4628      	mov	r0, r5
   1a35e:	f000 fd2d 	bl	1adbc <assert_post_action>
   1a362:	4648      	mov	r0, r9
   1a364:	f7ff faa6 	bl	198b4 <z_spin_unlock_valid>
   1a368:	b940      	cbnz	r0, 1a37c <clear_event_registrations+0xc4>
   1a36a:	4640      	mov	r0, r8
   1a36c:	4916      	ldr	r1, [pc, #88]	; (1a3c8 <clear_event_registrations+0x110>)
   1a36e:	22a7      	movs	r2, #167	; 0xa7
   1a370:	f000 fa7e 	bl	1a870 <printk>
   1a374:	21a7      	movs	r1, #167	; 0xa7
   1a376:	4814      	ldr	r0, [pc, #80]	; (1a3c8 <clear_event_registrations+0x110>)
   1a378:	f000 fd20 	bl	1adbc <assert_post_action>
   1a37c:	f387 8811 	msr	BASEPRI, r7
   1a380:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1a384:	f04f 0320 	mov.w	r3, #32
   1a388:	f3ef 8711 	mrs	r7, BASEPRI
   1a38c:	f383 8811 	msr	BASEPRI, r3
   1a390:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a394:	4648      	mov	r0, r9
   1a396:	f7ff fa7f 	bl	19898 <z_spin_lock_valid>
   1a39a:	b940      	cbnz	r0, 1a3ae <clear_event_registrations+0xf6>
   1a39c:	4640      	mov	r0, r8
   1a39e:	490a      	ldr	r1, [pc, #40]	; (1a3c8 <clear_event_registrations+0x110>)
   1a3a0:	227c      	movs	r2, #124	; 0x7c
   1a3a2:	f000 fa65 	bl	1a870 <printk>
   1a3a6:	217c      	movs	r1, #124	; 0x7c
   1a3a8:	4807      	ldr	r0, [pc, #28]	; (1a3c8 <clear_event_registrations+0x110>)
   1a3aa:	f000 fd07 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   1a3ae:	4648      	mov	r0, r9
   1a3b0:	f7ff fa8e 	bl	198d0 <z_spin_lock_set_owner>
	return k;
   1a3b4:	4654      	mov	r4, sl
   1a3b6:	3e01      	subs	r6, #1
   1a3b8:	e78a      	b.n	1a2d0 <clear_event_registrations+0x18>
   1a3ba:	bf00      	nop
   1a3bc:	00022d78 	.word	0x00022d78
   1a3c0:	0001fdfa 	.word	0x0001fdfa
   1a3c4:	2000b1a0 	.word	0x2000b1a0
   1a3c8:	0001fe34 	.word	0x0001fe34

0001a3cc <k_poll_event_init>:
{
   1a3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a3ce:	4605      	mov	r5, r0
   1a3d0:	460f      	mov	r7, r1
   1a3d2:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   1a3d4:	4614      	mov	r4, r2
   1a3d6:	b142      	cbz	r2, 1a3ea <k_poll_event_init+0x1e>
   1a3d8:	4915      	ldr	r1, [pc, #84]	; (1a430 <k_poll_event_init+0x64>)
   1a3da:	4816      	ldr	r0, [pc, #88]	; (1a434 <k_poll_event_init+0x68>)
   1a3dc:	222d      	movs	r2, #45	; 0x2d
   1a3de:	f000 fa47 	bl	1a870 <printk>
   1a3e2:	212d      	movs	r1, #45	; 0x2d
   1a3e4:	4812      	ldr	r0, [pc, #72]	; (1a430 <k_poll_event_init+0x64>)
   1a3e6:	f000 fce9 	bl	1adbc <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   1a3ea:	2f0f      	cmp	r7, #15
   1a3ec:	d908      	bls.n	1a400 <k_poll_event_init+0x34>
   1a3ee:	4910      	ldr	r1, [pc, #64]	; (1a430 <k_poll_event_init+0x64>)
   1a3f0:	4810      	ldr	r0, [pc, #64]	; (1a434 <k_poll_event_init+0x68>)
   1a3f2:	222f      	movs	r2, #47	; 0x2f
   1a3f4:	f000 fa3c 	bl	1a870 <printk>
   1a3f8:	212f      	movs	r1, #47	; 0x2f
   1a3fa:	480d      	ldr	r0, [pc, #52]	; (1a430 <k_poll_event_init+0x64>)
   1a3fc:	f000 fcde 	bl	1adbc <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   1a400:	b946      	cbnz	r6, 1a414 <k_poll_event_init+0x48>
   1a402:	490b      	ldr	r1, [pc, #44]	; (1a430 <k_poll_event_init+0x64>)
   1a404:	480b      	ldr	r0, [pc, #44]	; (1a434 <k_poll_event_init+0x68>)
   1a406:	2230      	movs	r2, #48	; 0x30
   1a408:	f000 fa32 	bl	1a870 <printk>
   1a40c:	2130      	movs	r1, #48	; 0x30
   1a40e:	4808      	ldr	r0, [pc, #32]	; (1a430 <k_poll_event_init+0x64>)
   1a410:	f000 fcd4 	bl	1adbc <assert_post_action>
	event->poller = NULL;
   1a414:	2300      	movs	r3, #0
	event->type = type;
   1a416:	0464      	lsls	r4, r4, #17
   1a418:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   1a41a:	60ab      	str	r3, [r5, #8]
	event->type = type;
   1a41c:	f404 3400 	and.w	r4, r4, #131072	; 0x20000
   1a420:	7b2b      	ldrb	r3, [r5, #12]
   1a422:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
   1a426:	433c      	orrs	r4, r7
   1a428:	431c      	orrs	r4, r3
	event->obj = obj;
   1a42a:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   1a42e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a430:	00022d78 	.word	0x00022d78
   1a434:	0001fdfa 	.word	0x0001fdfa

0001a438 <z_impl_k_poll>:
{
   1a438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a43c:	461d      	mov	r5, r3
	struct z_poller *poller = &_current->poller;
   1a43e:	4b64      	ldr	r3, [pc, #400]	; (1a5d0 <z_impl_k_poll+0x198>)
{
   1a440:	4604      	mov	r4, r0
	struct z_poller *poller = &_current->poller;
   1a442:	689f      	ldr	r7, [r3, #8]
	poller->is_polling = true;
   1a444:	2301      	movs	r3, #1
{
   1a446:	4688      	mov	r8, r1
   1a448:	4616      	mov	r6, r2
   1a44a:	b085      	sub	sp, #20
	struct z_poller *poller = &_current->poller;
   1a44c:	f107 096c 	add.w	r9, r7, #108	; 0x6c
	poller->is_polling = true;
   1a450:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	poller->mode = MODE_POLL;
   1a454:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
   1a458:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1a45c:	b153      	cbz	r3, 1a474 <z_impl_k_poll+0x3c>
   1a45e:	495d      	ldr	r1, [pc, #372]	; (1a5d4 <z_impl_k_poll+0x19c>)
   1a460:	485d      	ldr	r0, [pc, #372]	; (1a5d8 <z_impl_k_poll+0x1a0>)
   1a462:	f44f 7282 	mov.w	r2, #260	; 0x104
   1a466:	f000 fa03 	bl	1a870 <printk>
   1a46a:	f44f 7182 	mov.w	r1, #260	; 0x104
   1a46e:	4859      	ldr	r0, [pc, #356]	; (1a5d4 <z_impl_k_poll+0x19c>)
   1a470:	f000 fca4 	bl	1adbc <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   1a474:	b954      	cbnz	r4, 1a48c <z_impl_k_poll+0x54>
   1a476:	4957      	ldr	r1, [pc, #348]	; (1a5d4 <z_impl_k_poll+0x19c>)
   1a478:	4857      	ldr	r0, [pc, #348]	; (1a5d8 <z_impl_k_poll+0x1a0>)
   1a47a:	f240 1205 	movw	r2, #261	; 0x105
   1a47e:	f000 f9f7 	bl	1a870 <printk>
   1a482:	f240 1105 	movw	r1, #261	; 0x105
   1a486:	4853      	ldr	r0, [pc, #332]	; (1a5d4 <z_impl_k_poll+0x19c>)
   1a488:	f000 fc98 	bl	1adbc <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   1a48c:	f1b8 0f00 	cmp.w	r8, #0
   1a490:	da0a      	bge.n	1a4a8 <z_impl_k_poll+0x70>
   1a492:	4950      	ldr	r1, [pc, #320]	; (1a5d4 <z_impl_k_poll+0x19c>)
   1a494:	4850      	ldr	r0, [pc, #320]	; (1a5d8 <z_impl_k_poll+0x1a0>)
   1a496:	f44f 7283 	mov.w	r2, #262	; 0x106
   1a49a:	f000 f9e9 	bl	1a870 <printk>
   1a49e:	f44f 7183 	mov.w	r1, #262	; 0x106
   1a4a2:	484c      	ldr	r0, [pc, #304]	; (1a5d4 <z_impl_k_poll+0x19c>)
   1a4a4:	f000 fc8a 	bl	1adbc <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   1a4a8:	ea56 0305 	orrs.w	r3, r6, r5
   1a4ac:	bf0c      	ite	eq
   1a4ae:	2301      	moveq	r3, #1
   1a4b0:	2300      	movne	r3, #0
   1a4b2:	4641      	mov	r1, r8
   1a4b4:	464a      	mov	r2, r9
   1a4b6:	4620      	mov	r0, r4
   1a4b8:	f7ff fe2a 	bl	1a110 <register_events>
   1a4bc:	4680      	mov	r8, r0
   1a4be:	f04f 0320 	mov.w	r3, #32
   1a4c2:	f3ef 8911 	mrs	r9, BASEPRI
   1a4c6:	f383 8811 	msr	BASEPRI, r3
   1a4ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a4ce:	4843      	ldr	r0, [pc, #268]	; (1a5dc <z_impl_k_poll+0x1a4>)
   1a4d0:	f7ff f9e2 	bl	19898 <z_spin_lock_valid>
   1a4d4:	b940      	cbnz	r0, 1a4e8 <z_impl_k_poll+0xb0>
   1a4d6:	4942      	ldr	r1, [pc, #264]	; (1a5e0 <z_impl_k_poll+0x1a8>)
   1a4d8:	483f      	ldr	r0, [pc, #252]	; (1a5d8 <z_impl_k_poll+0x1a0>)
   1a4da:	227c      	movs	r2, #124	; 0x7c
   1a4dc:	f000 f9c8 	bl	1a870 <printk>
   1a4e0:	217c      	movs	r1, #124	; 0x7c
   1a4e2:	483f      	ldr	r0, [pc, #252]	; (1a5e0 <z_impl_k_poll+0x1a8>)
   1a4e4:	f000 fc6a 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   1a4e8:	483c      	ldr	r0, [pc, #240]	; (1a5dc <z_impl_k_poll+0x1a4>)
   1a4ea:	f7ff f9f1 	bl	198d0 <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   1a4ee:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
   1a4f2:	b9d3      	cbnz	r3, 1a52a <z_impl_k_poll+0xf2>
		clear_event_registrations(events, events_registered, key);
   1a4f4:	4620      	mov	r0, r4
   1a4f6:	464a      	mov	r2, r9
   1a4f8:	4641      	mov	r1, r8
   1a4fa:	f7ff fedd 	bl	1a2b8 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a4fe:	4837      	ldr	r0, [pc, #220]	; (1a5dc <z_impl_k_poll+0x1a4>)
   1a500:	f7ff f9d8 	bl	198b4 <z_spin_unlock_valid>
   1a504:	b940      	cbnz	r0, 1a518 <z_impl_k_poll+0xe0>
   1a506:	4936      	ldr	r1, [pc, #216]	; (1a5e0 <z_impl_k_poll+0x1a8>)
   1a508:	4833      	ldr	r0, [pc, #204]	; (1a5d8 <z_impl_k_poll+0x1a0>)
   1a50a:	22a7      	movs	r2, #167	; 0xa7
   1a50c:	f000 f9b0 	bl	1a870 <printk>
   1a510:	21a7      	movs	r1, #167	; 0xa7
   1a512:	4833      	ldr	r0, [pc, #204]	; (1a5e0 <z_impl_k_poll+0x1a8>)
   1a514:	f000 fc52 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   1a518:	f389 8811 	msr	BASEPRI, r9
   1a51c:	f3bf 8f6f 	isb	sy
		return 0;
   1a520:	2500      	movs	r5, #0
}
   1a522:	4628      	mov	r0, r5
   1a524:	b005      	add	sp, #20
   1a526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   1a52a:	2300      	movs	r3, #0
   1a52c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a530:	ea56 0305 	orrs.w	r3, r6, r5
   1a534:	d113      	bne.n	1a55e <z_impl_k_poll+0x126>
   1a536:	4829      	ldr	r0, [pc, #164]	; (1a5dc <z_impl_k_poll+0x1a4>)
   1a538:	f7ff f9bc 	bl	198b4 <z_spin_unlock_valid>
   1a53c:	b940      	cbnz	r0, 1a550 <z_impl_k_poll+0x118>
   1a53e:	4928      	ldr	r1, [pc, #160]	; (1a5e0 <z_impl_k_poll+0x1a8>)
   1a540:	4825      	ldr	r0, [pc, #148]	; (1a5d8 <z_impl_k_poll+0x1a0>)
   1a542:	22a7      	movs	r2, #167	; 0xa7
   1a544:	f000 f994 	bl	1a870 <printk>
   1a548:	21a7      	movs	r1, #167	; 0xa7
   1a54a:	4825      	ldr	r0, [pc, #148]	; (1a5e0 <z_impl_k_poll+0x1a8>)
   1a54c:	f000 fc36 	bl	1adbc <assert_post_action>
   1a550:	f389 8811 	msr	BASEPRI, r9
   1a554:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1a558:	f06f 050a 	mvn.w	r5, #10
   1a55c:	e7e1      	b.n	1a522 <z_impl_k_poll+0xea>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1a55e:	e9cd 6500 	strd	r6, r5, [sp]
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1a562:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1a564:	4649      	mov	r1, r9
   1a566:	481d      	ldr	r0, [pc, #116]	; (1a5dc <z_impl_k_poll+0x1a4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1a568:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1a56c:	f7fe fd50 	bl	19010 <z_pend_curr>
   1a570:	4605      	mov	r5, r0
	__asm__ volatile(
   1a572:	f04f 0320 	mov.w	r3, #32
   1a576:	f3ef 8611 	mrs	r6, BASEPRI
   1a57a:	f383 8811 	msr	BASEPRI, r3
   1a57e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a582:	4816      	ldr	r0, [pc, #88]	; (1a5dc <z_impl_k_poll+0x1a4>)
   1a584:	f7ff f988 	bl	19898 <z_spin_lock_valid>
   1a588:	b940      	cbnz	r0, 1a59c <z_impl_k_poll+0x164>
   1a58a:	4915      	ldr	r1, [pc, #84]	; (1a5e0 <z_impl_k_poll+0x1a8>)
   1a58c:	4812      	ldr	r0, [pc, #72]	; (1a5d8 <z_impl_k_poll+0x1a0>)
   1a58e:	227c      	movs	r2, #124	; 0x7c
   1a590:	f000 f96e 	bl	1a870 <printk>
   1a594:	217c      	movs	r1, #124	; 0x7c
   1a596:	4812      	ldr	r0, [pc, #72]	; (1a5e0 <z_impl_k_poll+0x1a8>)
   1a598:	f000 fc10 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   1a59c:	480f      	ldr	r0, [pc, #60]	; (1a5dc <z_impl_k_poll+0x1a4>)
   1a59e:	f7ff f997 	bl	198d0 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   1a5a2:	4620      	mov	r0, r4
   1a5a4:	4632      	mov	r2, r6
   1a5a6:	4641      	mov	r1, r8
   1a5a8:	f7ff fe86 	bl	1a2b8 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a5ac:	480b      	ldr	r0, [pc, #44]	; (1a5dc <z_impl_k_poll+0x1a4>)
   1a5ae:	f7ff f981 	bl	198b4 <z_spin_unlock_valid>
   1a5b2:	b940      	cbnz	r0, 1a5c6 <z_impl_k_poll+0x18e>
   1a5b4:	490a      	ldr	r1, [pc, #40]	; (1a5e0 <z_impl_k_poll+0x1a8>)
   1a5b6:	4808      	ldr	r0, [pc, #32]	; (1a5d8 <z_impl_k_poll+0x1a0>)
   1a5b8:	22a7      	movs	r2, #167	; 0xa7
   1a5ba:	f000 f959 	bl	1a870 <printk>
   1a5be:	21a7      	movs	r1, #167	; 0xa7
   1a5c0:	4807      	ldr	r0, [pc, #28]	; (1a5e0 <z_impl_k_poll+0x1a8>)
   1a5c2:	f000 fbfb 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   1a5c6:	f386 8811 	msr	BASEPRI, r6
   1a5ca:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1a5ce:	e7a8      	b.n	1a522 <z_impl_k_poll+0xea>
   1a5d0:	2000b14c 	.word	0x2000b14c
   1a5d4:	00022d78 	.word	0x00022d78
   1a5d8:	0001fdfa 	.word	0x0001fdfa
   1a5dc:	2000b1a0 	.word	0x2000b1a0
   1a5e0:	0001fe34 	.word	0x0001fe34

0001a5e4 <z_impl_k_poll_signal_raise>:
{
   1a5e4:	b570      	push	{r4, r5, r6, lr}
   1a5e6:	4604      	mov	r4, r0
   1a5e8:	460d      	mov	r5, r1
	__asm__ volatile(
   1a5ea:	f04f 0320 	mov.w	r3, #32
   1a5ee:	f3ef 8611 	mrs	r6, BASEPRI
   1a5f2:	f383 8811 	msr	BASEPRI, r3
   1a5f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a5fa:	481c      	ldr	r0, [pc, #112]	; (1a66c <z_impl_k_poll_signal_raise+0x88>)
   1a5fc:	f7ff f94c 	bl	19898 <z_spin_lock_valid>
   1a600:	b940      	cbnz	r0, 1a614 <z_impl_k_poll_signal_raise+0x30>
   1a602:	491b      	ldr	r1, [pc, #108]	; (1a670 <z_impl_k_poll_signal_raise+0x8c>)
   1a604:	481b      	ldr	r0, [pc, #108]	; (1a674 <z_impl_k_poll_signal_raise+0x90>)
   1a606:	227c      	movs	r2, #124	; 0x7c
   1a608:	f000 f932 	bl	1a870 <printk>
   1a60c:	217c      	movs	r1, #124	; 0x7c
   1a60e:	4818      	ldr	r0, [pc, #96]	; (1a670 <z_impl_k_poll_signal_raise+0x8c>)
   1a610:	f000 fbd4 	bl	1adbc <assert_post_action>
	z_spin_lock_set_owner(l);
   1a614:	4815      	ldr	r0, [pc, #84]	; (1a66c <z_impl_k_poll_signal_raise+0x88>)
   1a616:	f7ff f95b 	bl	198d0 <z_spin_lock_set_owner>
	signal->signaled = 1U;
   1a61a:	2101      	movs	r1, #1
	return list->head == list;
   1a61c:	6820      	ldr	r0, [r4, #0]
	signal->result = result;
   1a61e:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1a620:	4284      	cmp	r4, r0
	signal->signaled = 1U;
   1a622:	60a1      	str	r1, [r4, #8]
   1a624:	d112      	bne.n	1a64c <z_impl_k_poll_signal_raise+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a626:	4811      	ldr	r0, [pc, #68]	; (1a66c <z_impl_k_poll_signal_raise+0x88>)
   1a628:	f7ff f944 	bl	198b4 <z_spin_unlock_valid>
   1a62c:	b940      	cbnz	r0, 1a640 <z_impl_k_poll_signal_raise+0x5c>
   1a62e:	4910      	ldr	r1, [pc, #64]	; (1a670 <z_impl_k_poll_signal_raise+0x8c>)
   1a630:	4810      	ldr	r0, [pc, #64]	; (1a674 <z_impl_k_poll_signal_raise+0x90>)
   1a632:	22a7      	movs	r2, #167	; 0xa7
   1a634:	f000 f91c 	bl	1a870 <printk>
   1a638:	21a7      	movs	r1, #167	; 0xa7
   1a63a:	480d      	ldr	r0, [pc, #52]	; (1a670 <z_impl_k_poll_signal_raise+0x8c>)
   1a63c:	f000 fbbe 	bl	1adbc <assert_post_action>
	__asm__ volatile(
   1a640:	f386 8811 	msr	BASEPRI, r6
   1a644:	f3bf 8f6f 	isb	sy
		return 0;
   1a648:	2400      	movs	r4, #0
   1a64a:	e00d      	b.n	1a668 <z_impl_k_poll_signal_raise+0x84>
	node->prev->next = node->next;
   1a64c:	e9d0 3200 	ldrd	r3, r2, [r0]
   1a650:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1a652:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a654:	2300      	movs	r3, #0
	node->prev = NULL;
   1a656:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1a65a:	f7ff fced 	bl	1a038 <signal_poll_event>
	z_reschedule(&lock, key);
   1a65e:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1a660:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1a662:	4802      	ldr	r0, [pc, #8]	; (1a66c <z_impl_k_poll_signal_raise+0x88>)
   1a664:	f7fd ff96 	bl	18594 <z_reschedule>
}
   1a668:	4620      	mov	r0, r4
   1a66a:	bd70      	pop	{r4, r5, r6, pc}
   1a66c:	2000b1a0 	.word	0x2000b1a0
   1a670:	0001fe34 	.word	0x0001fe34
   1a674:	0001fdfa 	.word	0x0001fdfa

0001a678 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   1a678:	2803      	cmp	r0, #3
{
   1a67a:	b538      	push	{r3, r4, r5, lr}
   1a67c:	4604      	mov	r4, r0
   1a67e:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
   1a680:	d901      	bls.n	1a686 <k_aligned_alloc+0xe>
   1a682:	0783      	lsls	r3, r0, #30
   1a684:	d008      	beq.n	1a698 <k_aligned_alloc+0x20>
   1a686:	490e      	ldr	r1, [pc, #56]	; (1a6c0 <k_aligned_alloc+0x48>)
   1a688:	480e      	ldr	r0, [pc, #56]	; (1a6c4 <k_aligned_alloc+0x4c>)
   1a68a:	223e      	movs	r2, #62	; 0x3e
   1a68c:	f000 f8f0 	bl	1a870 <printk>
   1a690:	213e      	movs	r1, #62	; 0x3e
   1a692:	480b      	ldr	r0, [pc, #44]	; (1a6c0 <k_aligned_alloc+0x48>)
   1a694:	f000 fb92 	bl	1adbc <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   1a698:	1e63      	subs	r3, r4, #1
   1a69a:	4223      	tst	r3, r4
   1a69c:	d008      	beq.n	1a6b0 <k_aligned_alloc+0x38>
   1a69e:	4908      	ldr	r1, [pc, #32]	; (1a6c0 <k_aligned_alloc+0x48>)
   1a6a0:	4808      	ldr	r0, [pc, #32]	; (1a6c4 <k_aligned_alloc+0x4c>)
   1a6a2:	2242      	movs	r2, #66	; 0x42
   1a6a4:	f000 f8e4 	bl	1a870 <printk>
   1a6a8:	2142      	movs	r1, #66	; 0x42
   1a6aa:	4805      	ldr	r0, [pc, #20]	; (1a6c0 <k_aligned_alloc+0x48>)
   1a6ac:	f000 fb86 	bl	1adbc <assert_post_action>
		"align must be a power of 2");

	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   1a6b0:	462a      	mov	r2, r5
   1a6b2:	4621      	mov	r1, r4
}
   1a6b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   1a6b8:	4803      	ldr	r0, [pc, #12]	; (1a6c8 <k_aligned_alloc+0x50>)
   1a6ba:	f003 bdeb 	b.w	1e294 <z_heap_aligned_alloc>
   1a6be:	bf00      	nop
   1a6c0:	00022d99 	.word	0x00022d99
   1a6c4:	0001fdfa 	.word	0x0001fdfa
   1a6c8:	20008634 	.word	0x20008634

0001a6cc <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1a6cc:	b538      	push	{r3, r4, r5, lr}
   1a6ce:	4604      	mov	r4, r0
   1a6d0:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1a6d2:	f003 fcf2 	bl	1e0ba <k_is_in_isr>
   1a6d6:	b958      	cbnz	r0, 1a6f0 <z_thread_aligned_alloc+0x24>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1a6d8:	4b07      	ldr	r3, [pc, #28]	; (1a6f8 <z_thread_aligned_alloc+0x2c>)
   1a6da:	689b      	ldr	r3, [r3, #8]
   1a6dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
	}

	if (heap) {
   1a6e0:	b143      	cbz	r3, 1a6f4 <z_thread_aligned_alloc+0x28>
		ret = z_heap_aligned_alloc(heap, align, size);
   1a6e2:	462a      	mov	r2, r5
   1a6e4:	4621      	mov	r1, r4
   1a6e6:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   1a6e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   1a6ec:	f003 bdd2 	b.w	1e294 <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   1a6f0:	4b02      	ldr	r3, [pc, #8]	; (1a6fc <z_thread_aligned_alloc+0x30>)
   1a6f2:	e7f6      	b.n	1a6e2 <z_thread_aligned_alloc+0x16>
}
   1a6f4:	bd38      	pop	{r3, r4, r5, pc}
   1a6f6:	bf00      	nop
   1a6f8:	2000b14c 	.word	0x2000b14c
   1a6fc:	20008634 	.word	0x20008634

0001a700 <_ZN13deviceManager12le_param_reqEP7bt_connP16bt_le_conn_param>:
}
   1a700:	2001      	movs	r0, #1
   1a702:	4770      	bx	lr

0001a704 <_ZN13deviceManager16le_param_updatedEP7bt_connttt>:
}
   1a704:	4770      	bx	lr

0001a706 <_ZN13deviceManager10app_led_cbEb>:
void deviceManager::app_led_cb(bool led_state){
   1a706:	4601      	mov	r1, r0
    dk_set_led(USER_LED,led_state);
   1a708:	2003      	movs	r0, #3
   1a70a:	f7fc b9eb 	b.w	16ae4 <dk_set_led>

0001a70e <_ZN13deviceManager11deviceFoundEPK12bt_addr_le_tahP14net_buf_simple>:
	initScan();
   1a70e:	f7ef b849 	b.w	97a4 <_ZN13deviceManager8initScanEv>

0001a712 <_ZN13deviceManager14checkAddressesEPcS0_>:

bool deviceManager::checkAddresses(char addr1[],char addr2[])
{
	uint8_t cnt = 0;
   1a712:	2300      	movs	r3, #0
{
   1a714:	b530      	push	{r4, r5, lr}
   1a716:	1e42      	subs	r2, r0, #1
   1a718:	3901      	subs	r1, #1
   1a71a:	3010      	adds	r0, #16
	bool retVal = false;
	for (uint8_t i = 0; i < 17; i++)
	{
		if (addr1[i] == addr2[i])
   1a71c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
   1a720:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1a724:	42a5      	cmp	r5, r4
		{
			cnt++;
   1a726:	bf04      	itt	eq
   1a728:	3301      	addeq	r3, #1
   1a72a:	b2db      	uxtbeq	r3, r3
	for (uint8_t i = 0; i < 17; i++)
   1a72c:	4282      	cmp	r2, r0
   1a72e:	d1f5      	bne.n	1a71c <_ZN13deviceManager14checkAddressesEPcS0_+0xa>
	{
		cnt = 0;
		retVal = false;
	}
	return retVal;
}
   1a730:	3b11      	subs	r3, #17
   1a732:	4258      	negs	r0, r3
   1a734:	4158      	adcs	r0, r3
   1a736:	bd30      	pop	{r4, r5, pc}

0001a738 <_ZL7on_sentP7bt_connPv>:
    const bt_addr_le_t * addr = bt_conn_get_dst(conn);
   1a738:	f001 bd92 	b.w	1c260 <bt_conn_get_dst>

0001a73c <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   1a73c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   1a73e:	2364      	movs	r3, #100	; 0x64
{
   1a740:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   1a742:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   1a744:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   1a746:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   1a74a:	b111      	cbz	r1, 1a752 <u8_to_dec+0x16>
   1a74c:	3d01      	subs	r5, #1
   1a74e:	d101      	bne.n	1a754 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   1a750:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   1a752:	bdf0      	pop	{r4, r5, r6, r7, pc}
		digit = value / divisor;
   1a754:	fbb2 f7f3 	udiv	r7, r2, r3
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1a758:	429a      	cmp	r2, r3
		digit = value / divisor;
   1a75a:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1a75c:	d202      	bcs.n	1a764 <u8_to_dec+0x28>
   1a75e:	2b01      	cmp	r3, #1
   1a760:	d000      	beq.n	1a764 <u8_to_dec+0x28>
   1a762:	b130      	cbz	r0, 1a772 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   1a764:	3630      	adds	r6, #48	; 0x30
			buflen--;
   1a766:	3901      	subs	r1, #1
			num_digits++;
   1a768:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   1a76a:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   1a76e:	b2c9      	uxtb	r1, r1
			num_digits++;
   1a770:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   1a772:	fb03 2217 	mls	r2, r3, r7, r2
		divisor /= 10;
   1a776:	fbb3 f3fc 	udiv	r3, r3, ip
   1a77a:	b2d2      	uxtb	r2, r2
   1a77c:	e7e5      	b.n	1a74a <u8_to_dec+0xe>

0001a77e <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   1a77e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1a782:	b2db      	uxtb	r3, r3
   1a784:	2b09      	cmp	r3, #9
   1a786:	d802      	bhi.n	1a78e <char2hex+0x10>
		*x = c - '0';
   1a788:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   1a78a:	2000      	movs	r0, #0
   1a78c:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   1a78e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1a792:	2b05      	cmp	r3, #5
   1a794:	d802      	bhi.n	1a79c <char2hex+0x1e>
		*x = c - 'a' + 10;
   1a796:	3857      	subs	r0, #87	; 0x57
   1a798:	7008      	strb	r0, [r1, #0]
   1a79a:	e7f6      	b.n	1a78a <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   1a79c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1a7a0:	2b05      	cmp	r3, #5
   1a7a2:	d801      	bhi.n	1a7a8 <char2hex+0x2a>
		*x = c - 'A' + 10;
   1a7a4:	3837      	subs	r0, #55	; 0x37
   1a7a6:	e7f7      	b.n	1a798 <char2hex+0x1a>
		return -EINVAL;
   1a7a8:	f06f 0015 	mvn.w	r0, #21
}
   1a7ac:	4770      	bx	lr

0001a7ae <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   1a7ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a7b0:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   1a7b2:	f001 0001 	and.w	r0, r1, #1
   1a7b6:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   1a7ba:	429d      	cmp	r5, r3
   1a7bc:	ea4f 0651 	mov.w	r6, r1, lsr #1
   1a7c0:	d903      	bls.n	1a7ca <hex2bin+0x1c>
		return 0;
   1a7c2:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   1a7c4:	4628      	mov	r0, r5
   1a7c6:	b003      	add	sp, #12
   1a7c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   1a7ca:	b158      	cbz	r0, 1a7e4 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   1a7cc:	7820      	ldrb	r0, [r4, #0]
   1a7ce:	f10d 0107 	add.w	r1, sp, #7
   1a7d2:	f7ff ffd4 	bl	1a77e <char2hex>
   1a7d6:	2800      	cmp	r0, #0
   1a7d8:	dbf3      	blt.n	1a7c2 <hex2bin+0x14>
		buf[0] = dec;
   1a7da:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   1a7de:	3401      	adds	r4, #1
		buf[0] = dec;
   1a7e0:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1a7e4:	3401      	adds	r4, #1
   1a7e6:	4416      	add	r6, r2
   1a7e8:	42b2      	cmp	r2, r6
   1a7ea:	d0eb      	beq.n	1a7c4 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   1a7ec:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1a7f0:	f10d 0107 	add.w	r1, sp, #7
   1a7f4:	f7ff ffc3 	bl	1a77e <char2hex>
   1a7f8:	2800      	cmp	r0, #0
   1a7fa:	dbe2      	blt.n	1a7c2 <hex2bin+0x14>
		buf[i] = dec << 4;
   1a7fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1a800:	011b      	lsls	r3, r3, #4
   1a802:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   1a804:	f814 0b02 	ldrb.w	r0, [r4], #2
   1a808:	f7ff ffb9 	bl	1a77e <char2hex>
   1a80c:	2800      	cmp	r0, #0
   1a80e:	dbd8      	blt.n	1a7c2 <hex2bin+0x14>
		buf[i] += dec;
   1a810:	7813      	ldrb	r3, [r2, #0]
   1a812:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1a816:	440b      	add	r3, r1
   1a818:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1a81c:	e7e4      	b.n	1a7e8 <hex2bin+0x3a>

0001a81e <sys_notify_validate>:
	if (notify == NULL) {
   1a81e:	4603      	mov	r3, r0
   1a820:	b140      	cbz	r0, 1a834 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1a822:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1a824:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   1a828:	2a02      	cmp	r2, #2
   1a82a:	d006      	beq.n	1a83a <sys_notify_validate+0x1c>
   1a82c:	2a03      	cmp	r2, #3
   1a82e:	d004      	beq.n	1a83a <sys_notify_validate+0x1c>
   1a830:	2a01      	cmp	r2, #1
   1a832:	d005      	beq.n	1a840 <sys_notify_validate+0x22>
		return -EINVAL;
   1a834:	f06f 0015 	mvn.w	r0, #21
}
   1a838:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1a83a:	681a      	ldr	r2, [r3, #0]
   1a83c:	2a00      	cmp	r2, #0
   1a83e:	d0f9      	beq.n	1a834 <sys_notify_validate+0x16>
		notify->result = 0;
   1a840:	2000      	movs	r0, #0
   1a842:	6098      	str	r0, [r3, #8]
   1a844:	4770      	bx	lr

0001a846 <arch_printk_char_out>:
}
   1a846:	2000      	movs	r0, #0
   1a848:	4770      	bx	lr

0001a84a <str_out>:
{
   1a84a:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1a84c:	688a      	ldr	r2, [r1, #8]
   1a84e:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   1a850:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1a852:	b114      	cbz	r4, 1a85a <str_out+0x10>
   1a854:	684b      	ldr	r3, [r1, #4]
   1a856:	4293      	cmp	r3, r2
   1a858:	dc01      	bgt.n	1a85e <str_out+0x14>
		ctx->count++;
   1a85a:	608d      	str	r5, [r1, #8]
}
   1a85c:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1a85e:	3b01      	subs	r3, #1
   1a860:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1a862:	bf08      	it	eq
   1a864:	2200      	moveq	r2, #0
   1a866:	608d      	str	r5, [r1, #8]
   1a868:	bf0c      	ite	eq
   1a86a:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1a86c:	54a0      	strbne	r0, [r4, r2]
   1a86e:	e7f5      	b.n	1a85c <str_out+0x12>

0001a870 <printk>:
{
   1a870:	b40f      	push	{r0, r1, r2, r3}
   1a872:	b507      	push	{r0, r1, r2, lr}
   1a874:	a904      	add	r1, sp, #16
   1a876:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1a87a:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1a87c:	f7ef ff26 	bl	a6cc <vprintk>
}
   1a880:	b003      	add	sp, #12
   1a882:	f85d eb04 	ldr.w	lr, [sp], #4
   1a886:	b004      	add	sp, #16
   1a888:	4770      	bx	lr

0001a88a <snprintk>:
{
   1a88a:	b40c      	push	{r2, r3}
   1a88c:	b507      	push	{r0, r1, r2, lr}
   1a88e:	ab04      	add	r3, sp, #16
   1a890:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1a894:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1a896:	f7ef ff27 	bl	a6e8 <vsnprintk>
}
   1a89a:	b003      	add	sp, #12
   1a89c:	f85d eb04 	ldr.w	lr, [sp], #4
   1a8a0:	b002      	add	sp, #8
   1a8a2:	4770      	bx	lr

0001a8a4 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1a8a4:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   1a8a6:	f013 0307 	ands.w	r3, r3, #7
   1a8aa:	d105      	bne.n	1a8b8 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1a8ac:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1a8ae:	2b00      	cmp	r3, #0
   1a8b0:	bf0c      	ite	eq
   1a8b2:	2000      	moveq	r0, #0
   1a8b4:	2003      	movne	r0, #3
   1a8b6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1a8b8:	2b02      	cmp	r3, #2
   1a8ba:	d105      	bne.n	1a8c8 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1a8bc:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
   1a8be:	2b00      	cmp	r3, #0
   1a8c0:	bf14      	ite	ne
   1a8c2:	2000      	movne	r0, #0
   1a8c4:	2004      	moveq	r0, #4
   1a8c6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1a8c8:	2b01      	cmp	r3, #1
   1a8ca:	d105      	bne.n	1a8d8 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1a8cc:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1a8ce:	2b00      	cmp	r3, #0
   1a8d0:	bf0c      	ite	eq
   1a8d2:	2000      	moveq	r0, #0
   1a8d4:	2005      	movne	r0, #5
   1a8d6:	4770      	bx	lr
	int evt = EVT_NOP;
   1a8d8:	2000      	movs	r0, #0
}
   1a8da:	4770      	bx	lr

0001a8dc <notify_one>:
{
   1a8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a8e0:	460d      	mov	r5, r1
   1a8e2:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1a8e4:	4619      	mov	r1, r3
   1a8e6:	1d28      	adds	r0, r5, #4
{
   1a8e8:	4690      	mov	r8, r2
   1a8ea:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1a8ec:	f7ef feb4 	bl	a658 <sys_notify_finalize>
	if (cb) {
   1a8f0:	4604      	mov	r4, r0
   1a8f2:	b138      	cbz	r0, 1a904 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1a8f4:	4633      	mov	r3, r6
   1a8f6:	4642      	mov	r2, r8
   1a8f8:	4629      	mov	r1, r5
   1a8fa:	4638      	mov	r0, r7
   1a8fc:	46a4      	mov	ip, r4
}
   1a8fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1a902:	4760      	bx	ip
}
   1a904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a908 <validate_args>:
{
   1a908:	b510      	push	{r4, lr}
   1a90a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1a90c:	b140      	cbz	r0, 1a920 <validate_args+0x18>
   1a90e:	b139      	cbz	r1, 1a920 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1a910:	1d08      	adds	r0, r1, #4
   1a912:	f7ff ff84 	bl	1a81e <sys_notify_validate>
	if ((rv == 0)
   1a916:	b928      	cbnz	r0, 1a924 <validate_args+0x1c>
	    && ((cli->notify.flags
   1a918:	68a3      	ldr	r3, [r4, #8]
   1a91a:	f033 0303 	bics.w	r3, r3, #3
   1a91e:	d001      	beq.n	1a924 <validate_args+0x1c>
		rv = -EINVAL;
   1a920:	f06f 0015 	mvn.w	r0, #21
}
   1a924:	bd10      	pop	{r4, pc}

0001a926 <onoff_manager_init>:
{
   1a926:	b538      	push	{r3, r4, r5, lr}
   1a928:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1a92a:	4605      	mov	r5, r0
   1a92c:	b158      	cbz	r0, 1a946 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1a92e:	b151      	cbz	r1, 1a946 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1a930:	680b      	ldr	r3, [r1, #0]
   1a932:	b143      	cbz	r3, 1a946 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1a934:	684b      	ldr	r3, [r1, #4]
   1a936:	b133      	cbz	r3, 1a946 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1a938:	2220      	movs	r2, #32
   1a93a:	2100      	movs	r1, #0
   1a93c:	f001 fa07 	bl	1bd4e <memset>
	return 0;
   1a940:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1a942:	612c      	str	r4, [r5, #16]
}
   1a944:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1a946:	f06f 0015 	mvn.w	r0, #21
   1a94a:	e7fb      	b.n	1a944 <onoff_manager_init+0x1e>

0001a94c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1a94c:	4604      	mov	r4, r0
   1a94e:	b508      	push	{r3, lr}
   1a950:	4608      	mov	r0, r1
   1a952:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1a954:	461a      	mov	r2, r3
   1a956:	47a0      	blx	r4
	return z_impl_k_current_get();
   1a958:	f7fe fdac 	bl	194b4 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1a95c:	f7f3 fb74 	bl	e048 <z_impl_k_thread_abort>

0001a960 <chunk_field>:
	if (big_heap(h)) {
   1a960:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1a962:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1a966:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1a96a:	bf2c      	ite	cs
   1a96c:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   1a970:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   1a974:	4770      	bx	lr

0001a976 <chunk_set>:
	void *cmem = &buf[c];
   1a976:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1a97a:	6880      	ldr	r0, [r0, #8]
   1a97c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   1a980:	bf2c      	ite	cs
   1a982:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1a986:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   1a98a:	4770      	bx	lr

0001a98c <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1a98c:	2201      	movs	r2, #1
{
   1a98e:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1a990:	f7ff ffe6 	bl	1a960 <chunk_field>
}
   1a994:	40d0      	lsrs	r0, r2
   1a996:	bd08      	pop	{r3, pc}

0001a998 <set_chunk_used>:
	if (big_heap(h)) {
   1a998:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1a99a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1a99e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1a9a2:	d308      	bcc.n	1a9b6 <set_chunk_used+0x1e>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1a9a4:	684b      	ldr	r3, [r1, #4]
		if (used) {
   1a9a6:	b11a      	cbz	r2, 1a9b0 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1a9a8:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1a9ac:	604b      	str	r3, [r1, #4]
   1a9ae:	4770      	bx	lr
   1a9b0:	f023 0301 	bic.w	r3, r3, #1
   1a9b4:	e7fa      	b.n	1a9ac <set_chunk_used+0x14>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1a9b6:	884b      	ldrh	r3, [r1, #2]
		if (used) {
   1a9b8:	b11a      	cbz	r2, 1a9c2 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1a9ba:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1a9be:	804b      	strh	r3, [r1, #2]
}
   1a9c0:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1a9c2:	f023 0301 	bic.w	r3, r3, #1
   1a9c6:	e7fa      	b.n	1a9be <set_chunk_used+0x26>

0001a9c8 <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1a9c8:	0053      	lsls	r3, r2, #1
   1a9ca:	2201      	movs	r2, #1
   1a9cc:	f7ff bfd3 	b.w	1a976 <chunk_set>

0001a9d0 <bytes_to_chunksz.isra.0>:
	return big_heap(h) ? 8 : 4;
   1a9d0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1a9d4:	bf2c      	ite	cs
   1a9d6:	2008      	movcs	r0, #8
   1a9d8:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1a9da:	3107      	adds	r1, #7
   1a9dc:	4408      	add	r0, r1
}

static inline size_t bytes_to_chunksz(struct z_heap *h, size_t bytes)
{
	return chunksz(chunk_header_bytes(h) + bytes);
}
   1a9de:	08c0      	lsrs	r0, r0, #3
   1a9e0:	4770      	bx	lr

0001a9e2 <bucket_idx.isra.0>:
static inline int min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
   1a9e2:	b508      	push	{r3, lr}
   1a9e4:	460b      	mov	r3, r1
   1a9e6:	2101      	movs	r1, #1
   1a9e8:	f7ff fff2 	bl	1a9d0 <bytes_to_chunksz.isra.0>
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1a9ec:	3301      	adds	r3, #1
   1a9ee:	1a1b      	subs	r3, r3, r0
	return 31 - __builtin_clz(usable_sz);
   1a9f0:	fab3 f083 	clz	r0, r3
}
   1a9f4:	f1c0 001f 	rsb	r0, r0, #31
   1a9f8:	bd08      	pop	{r3, pc}

0001a9fa <free_list_remove_bidx>:
{
   1a9fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a9fe:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1aa00:	2203      	movs	r2, #3
   1aa02:	460e      	mov	r6, r1
   1aa04:	4604      	mov	r4, r0
   1aa06:	f7ff ffab 	bl	1a960 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1aa0a:	4286      	cmp	r6, r0
   1aa0c:	4605      	mov	r5, r0
   1aa0e:	f107 0804 	add.w	r8, r7, #4
   1aa12:	d10b      	bne.n	1aa2c <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1aa14:	2301      	movs	r3, #1
   1aa16:	fa03 f707 	lsl.w	r7, r3, r7
   1aa1a:	68e3      	ldr	r3, [r4, #12]
   1aa1c:	ea23 0307 	bic.w	r3, r3, r7
   1aa20:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1aa22:	2300      	movs	r3, #0
   1aa24:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1aa28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1aa2c:	4631      	mov	r1, r6
   1aa2e:	2202      	movs	r2, #2
   1aa30:	4620      	mov	r0, r4
   1aa32:	f7ff ff95 	bl	1a960 <chunk_field>
   1aa36:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1aa38:	462b      	mov	r3, r5
   1aa3a:	4601      	mov	r1, r0
   1aa3c:	2203      	movs	r2, #3
   1aa3e:	4620      	mov	r0, r4
		b->next = second;
   1aa40:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1aa44:	f7ff ff97 	bl	1a976 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1aa48:	4633      	mov	r3, r6
   1aa4a:	4629      	mov	r1, r5
   1aa4c:	4620      	mov	r0, r4
}
   1aa4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1aa52:	2202      	movs	r2, #2
   1aa54:	f7ff bf8f 	b.w	1a976 <chunk_set>

0001aa58 <free_list_remove>:
{
   1aa58:	b570      	push	{r4, r5, r6, lr}
   1aa5a:	460d      	mov	r5, r1
	return big_heap_chunks(h->len);
   1aa5c:	6886      	ldr	r6, [r0, #8]
   1aa5e:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   1aa60:	f7ff ff94 	bl	1a98c <chunk_size>
   1aa64:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1aa68:	4601      	mov	r1, r0
   1aa6a:	d301      	bcc.n	1aa70 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1aa6c:	2801      	cmp	r0, #1
   1aa6e:	d009      	beq.n	1aa84 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1aa70:	4630      	mov	r0, r6
   1aa72:	f7ff ffb6 	bl	1a9e2 <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
   1aa76:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1aa78:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1aa7a:	4620      	mov	r0, r4
}
   1aa7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
   1aa80:	f7ff bfbb 	b.w	1a9fa <free_list_remove_bidx>
}
   1aa84:	bd70      	pop	{r4, r5, r6, pc}

0001aa86 <alloc_chunk>:
{
   1aa86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1aa8a:	6886      	ldr	r6, [r0, #8]
   1aa8c:	4604      	mov	r4, r0
	int bi = bucket_idx(h, sz);
   1aa8e:	4630      	mov	r0, r6
{
   1aa90:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1aa92:	f7ff ffa6 	bl	1a9e2 <bucket_idx.isra.0>
	if (bi > bucket_idx(h, h->len)) {
   1aa96:	4631      	mov	r1, r6
	int bi = bucket_idx(h, sz);
   1aa98:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   1aa9a:	4630      	mov	r0, r6
   1aa9c:	f7ff ffa1 	bl	1a9e2 <bucket_idx.isra.0>
   1aaa0:	42a8      	cmp	r0, r5
   1aaa2:	da03      	bge.n	1aaac <alloc_chunk+0x26>
		return 0;
   1aaa4:	2600      	movs	r6, #0
}
   1aaa6:	4630      	mov	r0, r6
   1aaa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   1aaac:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   1aab0:	f8da 9010 	ldr.w	r9, [sl, #16]
   1aab4:	f1b9 0f00 	cmp.w	r9, #0
   1aab8:	d019      	beq.n	1aaee <alloc_chunk+0x68>
   1aaba:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   1aabc:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1aac0:	4620      	mov	r0, r4
   1aac2:	4631      	mov	r1, r6
   1aac4:	f7ff ff62 	bl	1a98c <chunk_size>
   1aac8:	4540      	cmp	r0, r8
   1aaca:	d305      	bcc.n	1aad8 <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   1aacc:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   1aace:	4631      	mov	r1, r6
   1aad0:	4620      	mov	r0, r4
   1aad2:	f7ff ff92 	bl	1a9fa <free_list_remove_bidx>
		return c;
   1aad6:	e7e6      	b.n	1aaa6 <alloc_chunk+0x20>
	return chunk_field(h, c, FREE_NEXT);
   1aad8:	2203      	movs	r2, #3
   1aada:	4631      	mov	r1, r6
   1aadc:	4620      	mov	r0, r4
   1aade:	f7ff ff3f 	bl	1a960 <chunk_field>
		} while (--i && b->next != first);
   1aae2:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1aae4:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1aae8:	d001      	beq.n	1aaee <alloc_chunk+0x68>
   1aaea:	4581      	cmp	r9, r0
   1aaec:	d1e6      	bne.n	1aabc <alloc_chunk+0x36>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1aaee:	f04f 32ff 	mov.w	r2, #4294967295
   1aaf2:	68e3      	ldr	r3, [r4, #12]
   1aaf4:	3501      	adds	r5, #1
   1aaf6:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   1aaf8:	401a      	ands	r2, r3
   1aafa:	d0d3      	beq.n	1aaa4 <alloc_chunk+0x1e>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   1aafc:	fa92 f2a2 	rbit	r2, r2
   1ab00:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1ab04:	1d13      	adds	r3, r2, #4
   1ab06:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   1ab0a:	e7e0      	b.n	1aace <alloc_chunk+0x48>

0001ab0c <split_chunks>:
{
   1ab0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ab10:	4614      	mov	r4, r2
   1ab12:	460e      	mov	r6, r1
   1ab14:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
   1ab16:	f7ff ff39 	bl	1a98c <chunk_size>
	size_t lsz = rc - lc;
   1ab1a:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   1ab1e:	1b37      	subs	r7, r6, r4
   1ab20:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1ab22:	4642      	mov	r2, r8
   1ab24:	4631      	mov	r1, r6
   1ab26:	4628      	mov	r0, r5
   1ab28:	f7ff ff4e 	bl	1a9c8 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1ab2c:	463a      	mov	r2, r7
   1ab2e:	4621      	mov	r1, r4
   1ab30:	4628      	mov	r0, r5
   1ab32:	f7ff ff49 	bl	1a9c8 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1ab36:	4643      	mov	r3, r8
   1ab38:	2200      	movs	r2, #0
   1ab3a:	4621      	mov	r1, r4
   1ab3c:	4628      	mov	r0, r5
   1ab3e:	f7ff ff1a 	bl	1a976 <chunk_set>
	return c + chunk_size(h, c);
   1ab42:	4621      	mov	r1, r4
   1ab44:	4628      	mov	r0, r5
   1ab46:	f7ff ff21 	bl	1a98c <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1ab4a:	463b      	mov	r3, r7
   1ab4c:	1821      	adds	r1, r4, r0
   1ab4e:	2200      	movs	r2, #0
   1ab50:	4628      	mov	r0, r5
}
   1ab52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ab56:	f7ff bf0e 	b.w	1a976 <chunk_set>

0001ab5a <merge_chunks>:
{
   1ab5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ab5e:	4616      	mov	r6, r2
   1ab60:	4604      	mov	r4, r0
   1ab62:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1ab64:	f7ff ff12 	bl	1a98c <chunk_size>
   1ab68:	4631      	mov	r1, r6
   1ab6a:	4605      	mov	r5, r0
   1ab6c:	4620      	mov	r0, r4
   1ab6e:	f7ff ff0d 	bl	1a98c <chunk_size>
   1ab72:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   1ab74:	462a      	mov	r2, r5
   1ab76:	4639      	mov	r1, r7
   1ab78:	4620      	mov	r0, r4
   1ab7a:	f7ff ff25 	bl	1a9c8 <set_chunk_size>
	return c + chunk_size(h, c);
   1ab7e:	4631      	mov	r1, r6
   1ab80:	4620      	mov	r0, r4
   1ab82:	f7ff ff03 	bl	1a98c <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1ab86:	462b      	mov	r3, r5
   1ab88:	1831      	adds	r1, r6, r0
   1ab8a:	2200      	movs	r2, #0
   1ab8c:	4620      	mov	r0, r4
}
   1ab8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ab92:	f7ff bef0 	b.w	1a976 <chunk_set>

0001ab96 <free_list_add>:
{
   1ab96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ab9a:	460d      	mov	r5, r1
	return big_heap_chunks(h->len);
   1ab9c:	6886      	ldr	r6, [r0, #8]
   1ab9e:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   1aba0:	f7ff fef4 	bl	1a98c <chunk_size>
   1aba4:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1aba8:	4601      	mov	r1, r0
   1abaa:	d301      	bcc.n	1abb0 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1abac:	2801      	cmp	r0, #1
   1abae:	d033      	beq.n	1ac18 <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1abb0:	4630      	mov	r0, r6
   1abb2:	f7ff ff16 	bl	1a9e2 <bucket_idx.isra.0>
	if (b->next == 0U) {
   1abb6:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1abba:	6916      	ldr	r6, [r2, #16]
   1abbc:	b99e      	cbnz	r6, 1abe6 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1abbe:	2301      	movs	r3, #1
   1abc0:	fa03 f000 	lsl.w	r0, r3, r0
   1abc4:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1abc6:	4629      	mov	r1, r5
   1abc8:	4303      	orrs	r3, r0
   1abca:	60e3      	str	r3, [r4, #12]
   1abcc:	4620      	mov	r0, r4
		b->next = c;
   1abce:	6115      	str	r5, [r2, #16]
   1abd0:	462b      	mov	r3, r5
   1abd2:	2202      	movs	r2, #2
   1abd4:	f7ff fecf 	bl	1a976 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1abd8:	2203      	movs	r2, #3
   1abda:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1abdc:	4620      	mov	r0, r4
}
   1abde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1abe2:	f7ff bec8 	b.w	1a976 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1abe6:	2202      	movs	r2, #2
   1abe8:	4631      	mov	r1, r6
   1abea:	4620      	mov	r0, r4
   1abec:	f7ff feb8 	bl	1a960 <chunk_field>
   1abf0:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1abf2:	4603      	mov	r3, r0
   1abf4:	4629      	mov	r1, r5
   1abf6:	4620      	mov	r0, r4
   1abf8:	f7ff febd 	bl	1a976 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1abfc:	2203      	movs	r2, #3
   1abfe:	4633      	mov	r3, r6
   1ac00:	4629      	mov	r1, r5
   1ac02:	4620      	mov	r0, r4
   1ac04:	f7ff feb7 	bl	1a976 <chunk_set>
   1ac08:	4639      	mov	r1, r7
   1ac0a:	462b      	mov	r3, r5
   1ac0c:	4620      	mov	r0, r4
   1ac0e:	f7ff feb2 	bl	1a976 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1ac12:	2202      	movs	r2, #2
   1ac14:	4631      	mov	r1, r6
   1ac16:	e7e1      	b.n	1abdc <free_list_add+0x46>
   1ac18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ac1c <free_chunk>:
{
   1ac1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ac1e:	460c      	mov	r4, r1
   1ac20:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1ac22:	f7ff feb3 	bl	1a98c <chunk_size>
   1ac26:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1ac28:	2201      	movs	r2, #1
   1ac2a:	4631      	mov	r1, r6
   1ac2c:	4628      	mov	r0, r5
   1ac2e:	f7ff fe97 	bl	1a960 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1ac32:	07c3      	lsls	r3, r0, #31
   1ac34:	d40c      	bmi.n	1ac50 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   1ac36:	4631      	mov	r1, r6
   1ac38:	4628      	mov	r0, r5
   1ac3a:	f7ff ff0d 	bl	1aa58 <free_list_remove>
	return c + chunk_size(h, c);
   1ac3e:	4621      	mov	r1, r4
   1ac40:	4628      	mov	r0, r5
   1ac42:	f7ff fea3 	bl	1a98c <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1ac46:	4621      	mov	r1, r4
   1ac48:	1822      	adds	r2, r4, r0
   1ac4a:	4628      	mov	r0, r5
   1ac4c:	f7ff ff85 	bl	1ab5a <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1ac50:	2200      	movs	r2, #0
   1ac52:	4621      	mov	r1, r4
   1ac54:	4628      	mov	r0, r5
   1ac56:	f7ff fe83 	bl	1a960 <chunk_field>
   1ac5a:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1ac5c:	2201      	movs	r2, #1
   1ac5e:	4639      	mov	r1, r7
   1ac60:	4628      	mov	r0, r5
   1ac62:	f7ff fe7d 	bl	1a960 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1ac66:	ea10 0602 	ands.w	r6, r0, r2
   1ac6a:	d113      	bne.n	1ac94 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   1ac6c:	4639      	mov	r1, r7
   1ac6e:	4628      	mov	r0, r5
   1ac70:	f7ff fef2 	bl	1aa58 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1ac74:	4621      	mov	r1, r4
   1ac76:	4632      	mov	r2, r6
   1ac78:	4628      	mov	r0, r5
   1ac7a:	f7ff fe71 	bl	1a960 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1ac7e:	4622      	mov	r2, r4
   1ac80:	1a21      	subs	r1, r4, r0
   1ac82:	4628      	mov	r0, r5
   1ac84:	f7ff ff69 	bl	1ab5a <merge_chunks>
   1ac88:	4621      	mov	r1, r4
   1ac8a:	4632      	mov	r2, r6
   1ac8c:	4628      	mov	r0, r5
   1ac8e:	f7ff fe67 	bl	1a960 <chunk_field>
   1ac92:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1ac94:	4621      	mov	r1, r4
   1ac96:	4628      	mov	r0, r5
}
   1ac98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1ac9c:	f7ff bf7b 	b.w	1ab96 <free_list_add>

0001aca0 <sys_heap_alloc>:
{
   1aca0:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1aca2:	6806      	ldr	r6, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1aca4:	b909      	cbnz	r1, 1acaa <sys_heap_alloc+0xa>
		return NULL;
   1aca6:	2000      	movs	r0, #0
}
   1aca8:	bd70      	pop	{r4, r5, r6, pc}
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 * There is a minimum of one chunk always in use by the heap header.
	 */
	return (bytes / CHUNK_UNIT) >= h->len;
   1acaa:	68b0      	ldr	r0, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1acac:	ebb0 0fd1 	cmp.w	r0, r1, lsr #3
   1acb0:	d9f9      	bls.n	1aca6 <sys_heap_alloc+0x6>
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   1acb2:	f7ff fe8d 	bl	1a9d0 <bytes_to_chunksz.isra.0>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1acb6:	4601      	mov	r1, r0
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   1acb8:	4605      	mov	r5, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1acba:	4630      	mov	r0, r6
   1acbc:	f7ff fee3 	bl	1aa86 <alloc_chunk>
	if (c == 0U) {
   1acc0:	4604      	mov	r4, r0
   1acc2:	2800      	cmp	r0, #0
   1acc4:	d0ef      	beq.n	1aca6 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1acc6:	4601      	mov	r1, r0
   1acc8:	4630      	mov	r0, r6
   1acca:	f7ff fe5f 	bl	1a98c <chunk_size>
   1acce:	42a8      	cmp	r0, r5
   1acd0:	d909      	bls.n	1ace6 <sys_heap_alloc+0x46>
		split_chunks(h, c, c + chunk_sz);
   1acd2:	4425      	add	r5, r4
   1acd4:	4621      	mov	r1, r4
   1acd6:	4630      	mov	r0, r6
   1acd8:	462a      	mov	r2, r5
   1acda:	f7ff ff17 	bl	1ab0c <split_chunks>
		free_list_add(h, c + chunk_sz);
   1acde:	4629      	mov	r1, r5
   1ace0:	4630      	mov	r0, r6
   1ace2:	f7ff ff58 	bl	1ab96 <free_list_add>
	set_chunk_used(h, c, true);
   1ace6:	4621      	mov	r1, r4
   1ace8:	4630      	mov	r0, r6
   1acea:	2201      	movs	r2, #1
   1acec:	f7ff fe54 	bl	1a998 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1acf0:	68b3      	ldr	r3, [r6, #8]
   1acf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1acf6:	bf2c      	ite	cs
   1acf8:	2308      	movcs	r3, #8
   1acfa:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1acfc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1ad00:	4420      	add	r0, r4
	return chunk_mem(h, c);
   1ad02:	e7d1      	b.n	1aca8 <sys_heap_alloc+0x8>

0001ad04 <encode_uint>:
{
   1ad04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad08:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   1ad0a:	78d3      	ldrb	r3, [r2, #3]
{
   1ad0c:	4680      	mov	r8, r0
	switch (specifier) {
   1ad0e:	2b6f      	cmp	r3, #111	; 0x6f
{
   1ad10:	460f      	mov	r7, r1
   1ad12:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1ad14:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1ad18:	d029      	beq.n	1ad6e <encode_uint+0x6a>
   1ad1a:	d824      	bhi.n	1ad66 <encode_uint+0x62>
		return 16;
   1ad1c:	2b58      	cmp	r3, #88	; 0x58
   1ad1e:	bf14      	ite	ne
   1ad20:	260a      	movne	r6, #10
   1ad22:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   1ad24:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1ad28:	4632      	mov	r2, r6
   1ad2a:	2300      	movs	r3, #0
   1ad2c:	4640      	mov	r0, r8
   1ad2e:	4639      	mov	r1, r7
   1ad30:	f7ed fefc 	bl	8b2c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1ad34:	2a09      	cmp	r2, #9
   1ad36:	b2d4      	uxtb	r4, r2
   1ad38:	d81e      	bhi.n	1ad78 <encode_uint+0x74>
   1ad3a:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1ad3c:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1ad3e:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1ad40:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1ad44:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1ad48:	d301      	bcc.n	1ad4e <encode_uint+0x4a>
   1ad4a:	45d1      	cmp	r9, sl
   1ad4c:	d811      	bhi.n	1ad72 <encode_uint+0x6e>
	if (conv->flag_hash) {
   1ad4e:	782b      	ldrb	r3, [r5, #0]
   1ad50:	069b      	lsls	r3, r3, #26
   1ad52:	d505      	bpl.n	1ad60 <encode_uint+0x5c>
		if (radix == 8) {
   1ad54:	2e08      	cmp	r6, #8
   1ad56:	d115      	bne.n	1ad84 <encode_uint+0x80>
			conv->altform_0 = true;
   1ad58:	78ab      	ldrb	r3, [r5, #2]
   1ad5a:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1ad5e:	70ab      	strb	r3, [r5, #2]
}
   1ad60:	4648      	mov	r0, r9
   1ad62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1ad66:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1ad6a:	2b70      	cmp	r3, #112	; 0x70
   1ad6c:	e7d7      	b.n	1ad1e <encode_uint+0x1a>
	switch (specifier) {
   1ad6e:	2608      	movs	r6, #8
   1ad70:	e7d8      	b.n	1ad24 <encode_uint+0x20>
		value /= radix;
   1ad72:	4680      	mov	r8, r0
   1ad74:	460f      	mov	r7, r1
   1ad76:	e7d7      	b.n	1ad28 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1ad78:	f1bb 0f19 	cmp.w	fp, #25
   1ad7c:	bf94      	ite	ls
   1ad7e:	3437      	addls	r4, #55	; 0x37
   1ad80:	3457      	addhi	r4, #87	; 0x57
   1ad82:	e7db      	b.n	1ad3c <encode_uint+0x38>
		} else if (radix == 16) {
   1ad84:	2e10      	cmp	r6, #16
   1ad86:	d1eb      	bne.n	1ad60 <encode_uint+0x5c>
			conv->altform_0c = true;
   1ad88:	78ab      	ldrb	r3, [r5, #2]
   1ad8a:	f043 0310 	orr.w	r3, r3, #16
   1ad8e:	e7e6      	b.n	1ad5e <encode_uint+0x5a>

0001ad90 <outs>:
{
   1ad90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ad94:	4607      	mov	r7, r0
   1ad96:	4688      	mov	r8, r1
   1ad98:	4615      	mov	r5, r2
   1ad9a:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1ad9c:	4614      	mov	r4, r2
   1ad9e:	42b4      	cmp	r4, r6
   1ada0:	eba4 0005 	sub.w	r0, r4, r5
   1ada4:	d302      	bcc.n	1adac <outs+0x1c>
   1ada6:	b93e      	cbnz	r6, 1adb8 <outs+0x28>
   1ada8:	7823      	ldrb	r3, [r4, #0]
   1adaa:	b12b      	cbz	r3, 1adb8 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1adac:	4641      	mov	r1, r8
   1adae:	f814 0b01 	ldrb.w	r0, [r4], #1
   1adb2:	47b8      	blx	r7
		if (rc < 0) {
   1adb4:	2800      	cmp	r0, #0
   1adb6:	daf2      	bge.n	1ad9e <outs+0xe>
}
   1adb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001adbc <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   1adbc:	4040      	eors	r0, r0
   1adbe:	f380 8811 	msr	BASEPRI, r0
   1adc2:	f04f 0004 	mov.w	r0, #4
   1adc6:	df02      	svc	2
}
   1adc8:	4770      	bx	lr

0001adca <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1adca:	4770      	bx	lr

0001adcc <nordicsemi_nrf53_init>:
	__asm__ volatile(
   1adcc:	f04f 0320 	mov.w	r3, #32
   1add0:	f3ef 8111 	mrs	r1, BASEPRI
   1add4:	f383 8811 	msr	BASEPRI, r3
   1add8:	f3bf 8f6f 	isb	sy
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   1addc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1ade0:	2201      	movs	r2, #1
   1ade2:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   1ade6:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   1adea:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
	__asm__ volatile(
   1adee:	f381 8811 	msr	BASEPRI, r1
   1adf2:	f3bf 8f6f 	isb	sy
}
   1adf6:	2000      	movs	r0, #0
   1adf8:	4770      	bx	lr

0001adfa <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   1adfa:	f002 bcb0 	b.w	1d75e <SystemInit>

0001adfe <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   1adfe:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1ae02:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1ae06:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   1ae08:	4640      	mov	r0, r8
{
   1ae0a:	461f      	mov	r7, r3
   1ae0c:	460c      	mov	r4, r1
   1ae0e:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   1ae10:	f000 ff34 	bl	1bc7c <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1ae14:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1ae18:	b280      	uxth	r0, r0
   1ae1a:	e9cd 8001 	strd	r8, r0, [sp, #4]
   1ae1e:	9300      	str	r3, [sp, #0]
   1ae20:	4632      	mov	r2, r6
   1ae22:	463b      	mov	r3, r7
   1ae24:	4621      	mov	r1, r4
   1ae26:	4628      	mov	r0, r5
   1ae28:	f002 f8f6 	bl	1d018 <bt_gatt_attr_read>
}
   1ae2c:	b004      	add	sp, #16
   1ae2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ae32 <virtio_get_status>:
}
   1ae32:	2004      	movs	r0, #4
   1ae34:	4770      	bx	lr

0001ae36 <virtio_get_features>:
}
   1ae36:	2001      	movs	r0, #1
   1ae38:	4770      	bx	lr

0001ae3a <virtio_set_features>:
}
   1ae3a:	4770      	bx	lr

0001ae3c <virtqueue_allocate.constprop.0>:

int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
   1ae3c:	b510      	push	{r4, lr}
	return k_aligned_alloc(sizeof(void *), size);
   1ae3e:	21b4      	movs	r1, #180	; 0xb4
   1ae40:	2004      	movs	r0, #4
   1ae42:	f7ff fc19 	bl	1a678 <k_aligned_alloc>
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   1ae46:	4604      	mov	r4, r0
   1ae48:	b118      	cbz	r0, 1ae52 <virtqueue_allocate.constprop.0+0x16>
		memset(vqs, 0x00, vq_size);
   1ae4a:	22b4      	movs	r2, #180	; 0xb4
   1ae4c:	2100      	movs	r1, #0
   1ae4e:	f000 ff7e 	bl	1bd4e <memset>
	}

	return vqs;
}
   1ae52:	4620      	mov	r0, r4
   1ae54:	bd10      	pop	{r4, pc}

0001ae56 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   1ae56:	f002 bf91 	b.w	1dd7c <rpmsg_destroy_ept>

0001ae5a <settings_load>:
	return settings_load_subtree(NULL);
   1ae5a:	2000      	movs	r0, #0
   1ae5c:	f7f0 bde4 	b.w	ba28 <settings_load_subtree>

0001ae60 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   1ae60:	2200      	movs	r2, #0
   1ae62:	4611      	mov	r1, r2
   1ae64:	f7f0 bdba 	b.w	b9dc <settings_save_one>

0001ae68 <settings_name_steq>:
{
   1ae68:	4603      	mov	r3, r0
   1ae6a:	b530      	push	{r4, r5, lr}
   1ae6c:	4608      	mov	r0, r1
	if (next) {
   1ae6e:	b10a      	cbz	r2, 1ae74 <settings_name_steq+0xc>
		*next = NULL;
   1ae70:	2100      	movs	r1, #0
   1ae72:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   1ae74:	b163      	cbz	r3, 1ae90 <settings_name_steq+0x28>
   1ae76:	b190      	cbz	r0, 1ae9e <settings_name_steq+0x36>
   1ae78:	1e41      	subs	r1, r0, #1
   1ae7a:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   1ae7c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   1ae80:	4604      	mov	r4, r0
   1ae82:	f810 3b01 	ldrb.w	r3, [r0], #1
   1ae86:	b15d      	cbz	r5, 1aea0 <settings_name_steq+0x38>
   1ae88:	429d      	cmp	r5, r3
   1ae8a:	d101      	bne.n	1ae90 <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   1ae8c:	2d3d      	cmp	r5, #61	; 0x3d
   1ae8e:	d1f5      	bne.n	1ae7c <settings_name_steq+0x14>
	return 0;
   1ae90:	2000      	movs	r0, #0
   1ae92:	e004      	b.n	1ae9e <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   1ae94:	2b3d      	cmp	r3, #61	; 0x3d
   1ae96:	d008      	beq.n	1aeaa <settings_name_steq+0x42>
   1ae98:	fab3 f083 	clz	r0, r3
   1ae9c:	0940      	lsrs	r0, r0, #5
}
   1ae9e:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   1aea0:	2b2f      	cmp	r3, #47	; 0x2f
   1aea2:	d1f7      	bne.n	1ae94 <settings_name_steq+0x2c>
		if (next) {
   1aea4:	b10a      	cbz	r2, 1aeaa <settings_name_steq+0x42>
			*next = name + 1;
   1aea6:	3401      	adds	r4, #1
   1aea8:	6014      	str	r4, [r2, #0]
		return 1;
   1aeaa:	2001      	movs	r0, #1
   1aeac:	e7f7      	b.n	1ae9e <settings_name_steq+0x36>

0001aeae <settings_name_next>:
{
   1aeae:	4603      	mov	r3, r0
   1aeb0:	b530      	push	{r4, r5, lr}
	if (next) {
   1aeb2:	b109      	cbz	r1, 1aeb8 <settings_name_next+0xa>
		*next = NULL;
   1aeb4:	2200      	movs	r2, #0
   1aeb6:	600a      	str	r2, [r1, #0]
	if (!name) {
   1aeb8:	b16b      	cbz	r3, 1aed6 <settings_name_next+0x28>
   1aeba:	461a      	mov	r2, r3
   1aebc:	4614      	mov	r4, r2
   1aebe:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   1aec0:	f812 5b01 	ldrb.w	r5, [r2], #1
   1aec4:	b135      	cbz	r5, 1aed4 <settings_name_next+0x26>
   1aec6:	2d3d      	cmp	r5, #61	; 0x3d
   1aec8:	d004      	beq.n	1aed4 <settings_name_next+0x26>
   1aeca:	2d2f      	cmp	r5, #47	; 0x2f
   1aecc:	d1f6      	bne.n	1aebc <settings_name_next+0xe>
		if (next) {
   1aece:	b109      	cbz	r1, 1aed4 <settings_name_next+0x26>
			*next = name + 1;
   1aed0:	3401      	adds	r4, #1
   1aed2:	600c      	str	r4, [r1, #0]
}
   1aed4:	bd30      	pop	{r4, r5, pc}
		return 0;
   1aed6:	4618      	mov	r0, r3
   1aed8:	e7fc      	b.n	1aed4 <settings_name_next+0x26>

0001aeda <settings_backend_init>:
 */

int settings_backend_init(void)
{
	return 0;
}
   1aeda:	2000      	movs	r0, #0
   1aedc:	4770      	bx	lr

0001aede <set_on_state>:
	__asm__ volatile(
   1aede:	f04f 0320 	mov.w	r3, #32
   1aee2:	f3ef 8211 	mrs	r2, BASEPRI
   1aee6:	f383 8811 	msr	BASEPRI, r3
   1aeea:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1aeee:	6803      	ldr	r3, [r0, #0]
   1aef0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1aef4:	f043 0302 	orr.w	r3, r3, #2
   1aef8:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1aefa:	f382 8811 	msr	BASEPRI, r2
   1aefe:	f3bf 8f6f 	isb	sy
}
   1af02:	4770      	bx	lr

0001af04 <async_start>:
{
   1af04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1af06:	9f06      	ldr	r7, [sp, #24]
   1af08:	4605      	mov	r5, r0
	struct nrf_clock_control_data *data = dev->data;
   1af0a:	68c4      	ldr	r4, [r0, #12]
	return &data->subsys[type];
   1af0c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1af0e:	f04f 0020 	mov.w	r0, #32
   1af12:	f3ef 8c11 	mrs	ip, BASEPRI
   1af16:	f380 8811 	msr	BASEPRI, r0
   1af1a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1af1e:	260c      	movs	r6, #12
   1af20:	fb06 4601 	mla	r6, r6, r1, r4
   1af24:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1af28:	f000 0e07 	and.w	lr, r0, #7
   1af2c:	f1be 0f01 	cmp.w	lr, #1
   1af30:	d111      	bne.n	1af56 <async_start+0x52>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1af32:	f8c6 7088 	str.w	r7, [r6, #136]	; 0x88
	int err = 0;
   1af36:	2600      	movs	r6, #0
	__asm__ volatile(
   1af38:	f38c 8811 	msr	BASEPRI, ip
   1af3c:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1af40:	b93e      	cbnz	r6, 1af52 <async_start+0x4e>
	subdata->cb = cb;
   1af42:	200c      	movs	r0, #12
   1af44:	4341      	muls	r1, r0
   1af46:	440c      	add	r4, r1
	subdata->user_data = user_data;
   1af48:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   1af4c:	686b      	ldr	r3, [r5, #4]
   1af4e:	585b      	ldr	r3, [r3, r1]
   1af50:	4798      	blx	r3
}
   1af52:	4630      	mov	r0, r6
   1af54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1af56:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   1af5a:	4287      	cmp	r7, r0
   1af5c:	bf14      	ite	ne
   1af5e:	f04f 36ff 	movne.w	r6, #4294967295
   1af62:	f06f 0644 	mvneq.w	r6, #68	; 0x44
   1af66:	e7e7      	b.n	1af38 <async_start+0x34>

0001af68 <api_start>:
{
   1af68:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1af6a:	2480      	movs	r4, #128	; 0x80
   1af6c:	9400      	str	r4, [sp, #0]
   1af6e:	f7ff ffc9 	bl	1af04 <async_start>
}
   1af72:	b002      	add	sp, #8
   1af74:	bd10      	pop	{r4, pc}

0001af76 <onoff_started_callback>:
	return &data->mgr[type];
   1af76:	68c0      	ldr	r0, [r0, #12]
   1af78:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1af7a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   1af7e:	2100      	movs	r1, #0
   1af80:	4710      	bx	r2

0001af82 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1af82:	2003      	movs	r0, #3
   1af84:	f7fb be82 	b.w	16c8c <nrfx_clock_start>

0001af88 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   1af88:	2002      	movs	r0, #2
   1af8a:	f7fb be7f 	b.w	16c8c <nrfx_clock_start>

0001af8e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1af8e:	2000      	movs	r0, #0
   1af90:	f7fb be7c 	b.w	16c8c <nrfx_clock_start>

0001af94 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1af94:	2003      	movs	r0, #3
   1af96:	f7fb bee3 	b.w	16d60 <nrfx_clock_stop>

0001af9a <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   1af9a:	2002      	movs	r0, #2
   1af9c:	f7fb bee0 	b.w	16d60 <nrfx_clock_stop>

0001afa0 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1afa0:	2000      	movs	r0, #0
   1afa2:	f7fb bedd 	b.w	16d60 <nrfx_clock_stop>

0001afa6 <api_stop>:
	return stop(dev, subsys, CTX_API);
   1afa6:	2280      	movs	r2, #128	; 0x80
   1afa8:	f7f0 be6e 	b.w	bc88 <stop>

0001afac <blocking_start_callback>:
{
   1afac:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1afae:	f7fe ba87 	b.w	194c0 <z_impl_k_sem_give>

0001afb2 <bt_rpmsg_open>:
{
   1afb2:	b508      	push	{r3, lr}
	while (!bt_rpmsg_platform_endpoint_is_bound()) {
   1afb4:	f7f1 f968 	bl	c288 <bt_rpmsg_platform_endpoint_is_bound>
   1afb8:	b108      	cbz	r0, 1afbe <bt_rpmsg_open+0xc>
}
   1afba:	2000      	movs	r0, #0
   1afbc:	bd08      	pop	{r3, pc}
	return z_impl_k_sleep(timeout);
   1afbe:	2100      	movs	r1, #0
   1afc0:	2021      	movs	r0, #33	; 0x21
   1afc2:	f7fe fa47 	bl	19454 <z_impl_k_sleep>
   1afc6:	e7f5      	b.n	1afb4 <bt_rpmsg_open+0x2>

0001afc8 <endpoint_cb>:
{
   1afc8:	b508      	push	{r3, lr}
   1afca:	4608      	mov	r0, r1
	bt_rpmsg_rx(data, len);
   1afcc:	4611      	mov	r1, r2
   1afce:	f7f1 f871 	bl	c0b4 <bt_rpmsg_rx>
}
   1afd2:	2000      	movs	r0, #0
   1afd4:	bd08      	pop	{r3, pc}

0001afd6 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1afd6:	4770      	bx	lr

0001afd8 <attr_find_by_handle>:
{
   1afd8:	b570      	push	{r4, r5, r6, lr}
   1afda:	4604      	mov	r4, r0
	if (!dm->cur_attr_id) {
   1afdc:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   1afe0:	b1a8      	cbz	r0, 1b00e <attr_find_by_handle+0x36>
	ssize_t lower = 0;
   1afe2:	2600      	movs	r6, #0
	ssize_t upper = dm->cur_attr_id - 1;
   1afe4:	3801      	subs	r0, #1
	while (upper >= lower) {
   1afe6:	4286      	cmp	r6, r0
   1afe8:	dd01      	ble.n	1afee <attr_find_by_handle+0x16>
		return NULL;
   1afea:	2000      	movs	r0, #0
   1afec:	e00f      	b.n	1b00e <attr_find_by_handle+0x36>
		size_t m = (lower + upper) / 2;
   1afee:	1832      	adds	r2, r6, r0
   1aff0:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   1aff4:	1052      	asrs	r2, r2, #1
		if (cur_attr->handle < handle) {
   1aff6:	1cd5      	adds	r5, r2, #3
   1aff8:	00eb      	lsls	r3, r5, #3
   1affa:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   1affe:	892d      	ldrh	r5, [r5, #8]
   1b000:	428d      	cmp	r5, r1
   1b002:	d201      	bcs.n	1b008 <attr_find_by_handle+0x30>
			lower = m + 1;
   1b004:	1c56      	adds	r6, r2, #1
   1b006:	e7ee      	b.n	1afe6 <attr_find_by_handle+0xe>
		} else if (cur_attr->handle > handle) {
   1b008:	d802      	bhi.n	1b010 <attr_find_by_handle+0x38>
		struct bt_gatt_dm_attr *cur_attr = &dm->attrs[m];
   1b00a:	3304      	adds	r3, #4
   1b00c:	18e0      	adds	r0, r4, r3
}
   1b00e:	bd70      	pop	{r4, r5, r6, pc}
			upper = m - 1;
   1b010:	1e50      	subs	r0, r2, #1
   1b012:	e7e8      	b.n	1afe6 <attr_find_by_handle+0xe>

0001b014 <svc_attr_memory_release>:
	dm->cur_attr_id = 0;
   1b014:	2300      	movs	r3, #0
{
   1b016:	b510      	push	{r4, lr}
   1b018:	4604      	mov	r4, r0
	dm->cur_attr_id = 0;
   1b01a:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
   1b01e:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
	while (!sys_slist_is_empty(&dm->chunk_list)) {
   1b022:	b910      	cbnz	r0, 1b02a <svc_attr_memory_release+0x16>
	dm->cur_chunk_len = 0;
   1b024:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
}
   1b028:	bd10      	pop	{r4, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b02a:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	return node->next;
   1b02e:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b030:	4290      	cmp	r0, r2
	list->head = node;
   1b032:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
	list->tail = node;
   1b036:	bf08      	it	eq
   1b038:	f8c4 3140 	streq.w	r3, [r4, #320]	; 0x140
		k_free(item);
   1b03c:	f003 f948 	bl	1e2d0 <k_free>
   1b040:	e7ed      	b.n	1b01e <svc_attr_memory_release+0xa>

0001b042 <atomic_and>:
{
   1b042:	4603      	mov	r3, r0
}
   1b044:	e8d3 0fef 	ldaex	r0, [r3]
   1b048:	ea00 0201 	and.w	r2, r0, r1
   1b04c:	e8c3 2fec 	stlex	ip, r2, [r3]
   1b050:	f1bc 0f00 	cmp.w	ip, #0
   1b054:	d1f6      	bne.n	1b044 <atomic_and+0x2>
   1b056:	4770      	bx	lr

0001b058 <discovery_complete_not_found>:
{
   1b058:	b510      	push	{r4, lr}
   1b05a:	4604      	mov	r4, r0
	svc_attr_memory_release(dm);
   1b05c:	f7ff ffda 	bl	1b014 <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b060:	f06f 0101 	mvn.w	r1, #1
   1b064:	f504 709c 	add.w	r0, r4, #312	; 0x138
   1b068:	f7ff ffeb 	bl	1b042 <atomic_and>
	if (dm->callback->service_not_found) {
   1b06c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1b070:	685b      	ldr	r3, [r3, #4]
   1b072:	b123      	cbz	r3, 1b07e <discovery_complete_not_found+0x26>
		dm->callback->service_not_found(dm->conn, dm->context);
   1b074:	e9d4 0100 	ldrd	r0, r1, [r4]
}
   1b078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dm->callback->service_not_found(dm->conn, dm->context);
   1b07c:	4718      	bx	r3
}
   1b07e:	bd10      	pop	{r4, pc}

0001b080 <bt_gatt_dm_attr_service_val>:
{
   1b080:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1b082:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b086:	2400      	movs	r4, #0
{
   1b088:	4605      	mov	r5, r0
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1b08a:	6801      	ldr	r1, [r0, #0]
   1b08c:	4668      	mov	r0, sp
   1b08e:	f88d 4000 	strb.w	r4, [sp]
   1b092:	f8ad 3002 	strh.w	r3, [sp, #2]
   1b096:	f000 fea4 	bl	1bde2 <bt_uuid_cmp>
   1b09a:	b918      	cbnz	r0, 1b0a4 <bt_gatt_dm_attr_service_val+0x24>
		return &((struct bt_gatt_service_val *)attr->uuid)[-1];
   1b09c:	6828      	ldr	r0, [r5, #0]
   1b09e:	3808      	subs	r0, #8
}
   1b0a0:	b003      	add	sp, #12
   1b0a2:	bd30      	pop	{r4, r5, pc}
	    (!bt_uuid_cmp(BT_UUID_GATT_SECONDARY, attr->uuid))) {
   1b0a4:	f642 0301 	movw	r3, #10241	; 0x2801
   1b0a8:	6829      	ldr	r1, [r5, #0]
   1b0aa:	a801      	add	r0, sp, #4
   1b0ac:	f88d 4004 	strb.w	r4, [sp, #4]
   1b0b0:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b0b4:	f000 fe95 	bl	1bde2 <bt_uuid_cmp>
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1b0b8:	2800      	cmp	r0, #0
   1b0ba:	d0ef      	beq.n	1b09c <bt_gatt_dm_attr_service_val+0x1c>
	return NULL;
   1b0bc:	4620      	mov	r0, r4
   1b0be:	e7ef      	b.n	1b0a0 <bt_gatt_dm_attr_service_val+0x20>

0001b0c0 <bt_gatt_dm_attr_chrc_val>:
{
   1b0c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   1b0c2:	f642 0303 	movw	r3, #10243	; 0x2803
   1b0c6:	2400      	movs	r4, #0
{
   1b0c8:	4605      	mov	r5, r0
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   1b0ca:	6801      	ldr	r1, [r0, #0]
   1b0cc:	a801      	add	r0, sp, #4
   1b0ce:	f88d 4004 	strb.w	r4, [sp, #4]
   1b0d2:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b0d6:	f000 fe84 	bl	1bde2 <bt_uuid_cmp>
   1b0da:	b918      	cbnz	r0, 1b0e4 <bt_gatt_dm_attr_chrc_val+0x24>
		return &((struct bt_gatt_chrc *)attr->uuid)[-1];
   1b0dc:	6828      	ldr	r0, [r5, #0]
   1b0de:	3808      	subs	r0, #8
}
   1b0e0:	b003      	add	sp, #12
   1b0e2:	bd30      	pop	{r4, r5, pc}
	return NULL;
   1b0e4:	4620      	mov	r0, r4
   1b0e6:	e7fb      	b.n	1b0e0 <bt_gatt_dm_attr_chrc_val+0x20>

0001b0e8 <bt_gatt_dm_conn_get>:
}
   1b0e8:	6800      	ldr	r0, [r0, #0]
   1b0ea:	4770      	bx	lr

0001b0ec <bt_gatt_dm_service_get>:
}
   1b0ec:	301c      	adds	r0, #28
   1b0ee:	4770      	bx	lr

0001b0f0 <bt_gatt_dm_char_next>:
{
   1b0f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		prev = dm->attrs;
   1b0f2:	f100 051c 	add.w	r5, r0, #28
	if (!prev) {
   1b0f6:	b131      	cbz	r1, 1b106 <bt_gatt_dm_char_next+0x16>
	if (dm->attrs <= prev) {
   1b0f8:	42a9      	cmp	r1, r5
   1b0fa:	d203      	bcs.n	1b104 <bt_gatt_dm_char_next+0x14>
	return NULL;
   1b0fc:	2500      	movs	r5, #0
}
   1b0fe:	4628      	mov	r0, r5
   1b100:	b003      	add	sp, #12
   1b102:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b104:	460d      	mov	r5, r1
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   1b106:	2600      	movs	r6, #0
   1b108:	f642 0703 	movw	r7, #10243	; 0x2803
		const struct bt_gatt_dm_attr *const end =
   1b10c:	f8d0 4134 	ldr.w	r4, [r0, #308]	; 0x134
   1b110:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   1b114:	f100 041c 	add.w	r4, r0, #28
		while (++prev < end) {
   1b118:	3508      	adds	r5, #8
   1b11a:	42ac      	cmp	r4, r5
   1b11c:	d9ee      	bls.n	1b0fc <bt_gatt_dm_char_next+0xc>
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   1b11e:	6829      	ldr	r1, [r5, #0]
   1b120:	a801      	add	r0, sp, #4
   1b122:	f88d 6004 	strb.w	r6, [sp, #4]
   1b126:	f8ad 7006 	strh.w	r7, [sp, #6]
   1b12a:	f000 fe5a 	bl	1bde2 <bt_uuid_cmp>
   1b12e:	2800      	cmp	r0, #0
   1b130:	d1f2      	bne.n	1b118 <bt_gatt_dm_char_next+0x28>
   1b132:	e7e4      	b.n	1b0fe <bt_gatt_dm_char_next+0xe>

0001b134 <bt_gatt_dm_attr_next>:
{
   1b134:	4602      	mov	r2, r0
		prev = dm->attrs;
   1b136:	f100 031c 	add.w	r3, r0, #28
	if (!prev) {
   1b13a:	b111      	cbz	r1, 1b142 <bt_gatt_dm_attr_next+0xe>
	if (dm->attrs <= prev) {
   1b13c:	4299      	cmp	r1, r3
   1b13e:	d30b      	bcc.n	1b158 <bt_gatt_dm_attr_next+0x24>
   1b140:	460b      	mov	r3, r1
		if (++prev < end) {
   1b142:	f103 0008 	add.w	r0, r3, #8
		const struct bt_gatt_dm_attr *const end =
   1b146:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
   1b14a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1b14e:	321c      	adds	r2, #28
	return NULL;
   1b150:	4290      	cmp	r0, r2
   1b152:	bf28      	it	cs
   1b154:	2000      	movcs	r0, #0
   1b156:	4770      	bx	lr
   1b158:	2000      	movs	r0, #0
}
   1b15a:	4770      	bx	lr

0001b15c <bt_gatt_dm_desc_next>:
{
   1b15c:	b513      	push	{r0, r1, r4, lr}
	const struct bt_gatt_dm_attr *curr = bt_gatt_dm_attr_next(dm, prev);
   1b15e:	f7ff ffe9 	bl	1b134 <bt_gatt_dm_attr_next>
	if (curr && !bt_uuid_cmp(BT_UUID_GATT_CHRC, curr->uuid)) {
   1b162:	4604      	mov	r4, r0
   1b164:	b158      	cbz	r0, 1b17e <bt_gatt_dm_desc_next+0x22>
   1b166:	2300      	movs	r3, #0
   1b168:	f88d 3004 	strb.w	r3, [sp, #4]
   1b16c:	f642 0303 	movw	r3, #10243	; 0x2803
   1b170:	6801      	ldr	r1, [r0, #0]
   1b172:	a801      	add	r0, sp, #4
   1b174:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b178:	f000 fe33 	bl	1bde2 <bt_uuid_cmp>
   1b17c:	b900      	cbnz	r0, 1b180 <bt_gatt_dm_desc_next+0x24>
		curr = NULL;
   1b17e:	2400      	movs	r4, #0
}
   1b180:	4620      	mov	r0, r4
   1b182:	b002      	add	sp, #8
   1b184:	bd10      	pop	{r4, pc}

0001b186 <bt_gatt_dm_desc_by_uuid>:
{
   1b186:	b570      	push	{r4, r5, r6, lr}
   1b188:	4605      	mov	r5, r0
   1b18a:	4616      	mov	r6, r2
	const struct bt_gatt_dm_attr *curr = attr_chrc;
   1b18c:	460c      	mov	r4, r1
	while ((curr = bt_gatt_dm_desc_next(dm, curr)) != NULL) {
   1b18e:	4621      	mov	r1, r4
   1b190:	4628      	mov	r0, r5
   1b192:	f7ff ffe3 	bl	1b15c <bt_gatt_dm_desc_next>
   1b196:	4604      	mov	r4, r0
   1b198:	b128      	cbz	r0, 1b1a6 <bt_gatt_dm_desc_by_uuid+0x20>
		if (!bt_uuid_cmp(uuid, curr->uuid)) {
   1b19a:	4630      	mov	r0, r6
   1b19c:	6821      	ldr	r1, [r4, #0]
   1b19e:	f000 fe20 	bl	1bde2 <bt_uuid_cmp>
   1b1a2:	2800      	cmp	r0, #0
   1b1a4:	d1f3      	bne.n	1b18e <bt_gatt_dm_desc_by_uuid+0x8>
}
   1b1a6:	4620      	mov	r0, r4
   1b1a8:	bd70      	pop	{r4, r5, r6, pc}

0001b1aa <bt_gatt_dm_data_release>:

	return err;
}

int bt_gatt_dm_data_release(struct bt_gatt_dm *dm)
{
   1b1aa:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_and_clear_bit(dm->state_flags,
   1b1ac:	f500 759c 	add.w	r5, r0, #312	; 0x138
{
   1b1b0:	4604      	mov	r4, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b1b2:	f06f 0102 	mvn.w	r1, #2
   1b1b6:	4628      	mov	r0, r5
   1b1b8:	f7ff ff43 	bl	1b042 <atomic_and>
	if (!atomic_test_and_clear_bit(dm->state_flags,
   1b1bc:	0783      	lsls	r3, r0, #30
   1b1be:	d509      	bpl.n	1b1d4 <bt_gatt_dm_data_release+0x2a>
				       STATE_ATTRS_RELEASE_PENDING)) {
		return -EALREADY;
	}

	svc_attr_memory_release(dm);
   1b1c0:	4620      	mov	r0, r4
   1b1c2:	f7ff ff27 	bl	1b014 <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b1c6:	f06f 0101 	mvn.w	r1, #1
   1b1ca:	4628      	mov	r0, r5
   1b1cc:	f7ff ff39 	bl	1b042 <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);

	return 0;
   1b1d0:	2000      	movs	r0, #0
}
   1b1d2:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   1b1d4:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1b1d8:	e7fb      	b.n	1b1d2 <bt_gatt_dm_data_release+0x28>

0001b1da <bt_scan_stop>:
	return bt_le_scan_stop();
   1b1da:	f7f5 be0f 	b.w	10dfc <bt_le_scan_stop>

0001b1de <bt_bas_conn>:
}
   1b1de:	6800      	ldr	r0, [r0, #0]
   1b1e0:	4770      	bx	lr

0001b1e2 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   1b1e2:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   1b1e4:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   1b1e6:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1b1e8:	bf9c      	itt	ls
   1b1ea:	6880      	ldrls	r0, [r0, #8]
   1b1ec:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   1b1ee:	3b01      	subs	r3, #1
   1b1f0:	1a98      	subs	r0, r3, r2
}
   1b1f2:	4770      	bx	lr

0001b1f4 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1b1f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   1b1f8:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1b1fc:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   1b1fe:	eba9 0804 	sub.w	r8, r9, r4
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1b202:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   1b204:	4590      	cmp	r8, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1b206:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1b208:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
   1b20a:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   1b20c:	d904      	bls.n	1b218 <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1b20e:	f000 fd73 	bl	1bcf8 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1b212:	60ec      	str	r4, [r5, #12]
}
   1b214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1b218:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   1b21a:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1b21e:	f000 fd6b 	bl	1bcf8 <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1b222:	4622      	mov	r2, r4
   1b224:	6868      	ldr	r0, [r5, #4]
   1b226:	eb07 0108 	add.w	r1, r7, r8
   1b22a:	e7f0      	b.n	1b20e <_WriteNoCheck+0x1a>

0001b22c <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1b22c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b230:	4606      	mov	r6, r0
   1b232:	4689      	mov	r9, r1
   1b234:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   1b236:	f04f 0800 	mov.w	r8, #0
  WrOff = pRing->WrOff;
   1b23a:	68c5      	ldr	r5, [r0, #12]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1b23c:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1b23e:	68b3      	ldr	r3, [r6, #8]
    if (RdOff > WrOff) {
   1b240:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1b242:	bf28      	it	cs
   1b244:	18e4      	addcs	r4, r4, r3
   1b246:	3c01      	subs	r4, #1
   1b248:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1b24a:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1b24c:	42bc      	cmp	r4, r7
   1b24e:	bf28      	it	cs
   1b250:	463c      	movcs	r4, r7
   1b252:	4294      	cmp	r4, r2
   1b254:	bf28      	it	cs
   1b256:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1b258:	6870      	ldr	r0, [r6, #4]
   1b25a:	4649      	mov	r1, r9
   1b25c:	4428      	add	r0, r5
   1b25e:	4622      	mov	r2, r4
   1b260:	f000 fd4a 	bl	1bcf8 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1b264:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   1b266:	4425      	add	r5, r4
      WrOff = 0u;
   1b268:	42ab      	cmp	r3, r5
   1b26a:	bf08      	it	eq
   1b26c:	2500      	moveq	r5, #0
  } while (NumBytes);
   1b26e:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   1b270:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   1b272:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   1b274:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   1b276:	d1e1      	bne.n	1b23c <_WriteBlocking+0x10>
}
   1b278:	4640      	mov	r0, r8
   1b27a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001b27e <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1b27e:	f7f2 b97b 	b.w	d578 <_DoInit>

0001b282 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1b282:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1b284:	f7ff fffb 	bl	1b27e <SEGGER_RTT_Init>

	return 0;
}
   1b288:	2000      	movs	r0, #0
   1b28a:	bd08      	pop	{r3, pc}

0001b28c <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1b28c:	b538      	push	{r3, r4, r5, lr}
   1b28e:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1b290:	42ab      	cmp	r3, r5
{
   1b292:	4611      	mov	r1, r2
   1b294:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1b296:	d804      	bhi.n	1b2a2 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1b298:	461a      	mov	r2, r3
   1b29a:	f000 fd2d 	bl	1bcf8 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1b29e:	4620      	mov	r0, r4
   1b2a0:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1b2a2:	2400      	movs	r4, #0
   1b2a4:	e7fb      	b.n	1b29e <_copy+0x12>

0001b2a6 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1b2a6:	f000 bd52 	b.w	1bd4e <memset>

0001b2aa <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1b2aa:	09c3      	lsrs	r3, r0, #7
   1b2ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1b2b0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1b2b4:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1b2b8:	b2c0      	uxtb	r0, r0
   1b2ba:	4770      	bx	lr

0001b2bc <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1b2bc:	78cb      	ldrb	r3, [r1, #3]
   1b2be:	7802      	ldrb	r2, [r0, #0]
   1b2c0:	4053      	eors	r3, r2
   1b2c2:	7003      	strb	r3, [r0, #0]
   1b2c4:	884b      	ldrh	r3, [r1, #2]
   1b2c6:	7842      	ldrb	r2, [r0, #1]
   1b2c8:	4053      	eors	r3, r2
   1b2ca:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1b2cc:	680a      	ldr	r2, [r1, #0]
   1b2ce:	7883      	ldrb	r3, [r0, #2]
   1b2d0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b2d4:	7083      	strb	r3, [r0, #2]
   1b2d6:	680a      	ldr	r2, [r1, #0]
   1b2d8:	78c3      	ldrb	r3, [r0, #3]
   1b2da:	4053      	eors	r3, r2
   1b2dc:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1b2de:	79cb      	ldrb	r3, [r1, #7]
   1b2e0:	7902      	ldrb	r2, [r0, #4]
   1b2e2:	4053      	eors	r3, r2
   1b2e4:	7103      	strb	r3, [r0, #4]
   1b2e6:	88cb      	ldrh	r3, [r1, #6]
   1b2e8:	7942      	ldrb	r2, [r0, #5]
   1b2ea:	4053      	eors	r3, r2
   1b2ec:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1b2ee:	684a      	ldr	r2, [r1, #4]
   1b2f0:	7983      	ldrb	r3, [r0, #6]
   1b2f2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b2f6:	7183      	strb	r3, [r0, #6]
   1b2f8:	684a      	ldr	r2, [r1, #4]
   1b2fa:	79c3      	ldrb	r3, [r0, #7]
   1b2fc:	4053      	eors	r3, r2
   1b2fe:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1b300:	7acb      	ldrb	r3, [r1, #11]
   1b302:	7a02      	ldrb	r2, [r0, #8]
   1b304:	4053      	eors	r3, r2
   1b306:	7203      	strb	r3, [r0, #8]
   1b308:	7a42      	ldrb	r2, [r0, #9]
   1b30a:	894b      	ldrh	r3, [r1, #10]
   1b30c:	4053      	eors	r3, r2
   1b30e:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1b310:	688a      	ldr	r2, [r1, #8]
   1b312:	7a83      	ldrb	r3, [r0, #10]
   1b314:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b318:	7283      	strb	r3, [r0, #10]
   1b31a:	688a      	ldr	r2, [r1, #8]
   1b31c:	7ac3      	ldrb	r3, [r0, #11]
   1b31e:	4053      	eors	r3, r2
   1b320:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1b322:	7bcb      	ldrb	r3, [r1, #15]
   1b324:	7b02      	ldrb	r2, [r0, #12]
   1b326:	4053      	eors	r3, r2
   1b328:	7303      	strb	r3, [r0, #12]
   1b32a:	89cb      	ldrh	r3, [r1, #14]
   1b32c:	7b42      	ldrb	r2, [r0, #13]
   1b32e:	4053      	eors	r3, r2
   1b330:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1b332:	68ca      	ldr	r2, [r1, #12]
   1b334:	7b83      	ldrb	r3, [r0, #14]
   1b336:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b33a:	7383      	strb	r3, [r0, #14]
   1b33c:	68ca      	ldr	r2, [r1, #12]
   1b33e:	7bc3      	ldrb	r3, [r0, #15]
   1b340:	4053      	eors	r3, r2
   1b342:	73c3      	strb	r3, [r0, #15]
}
   1b344:	4770      	bx	lr

0001b346 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   1b346:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1b348:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1b34a:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1b34c:	f88d 2000 	strb.w	r2, [sp]
   1b350:	7942      	ldrb	r2, [r0, #5]
   1b352:	f88d 2001 	strb.w	r2, [sp, #1]
   1b356:	7a82      	ldrb	r2, [r0, #10]
   1b358:	f88d 2002 	strb.w	r2, [sp, #2]
   1b35c:	7bc2      	ldrb	r2, [r0, #15]
   1b35e:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1b362:	7902      	ldrb	r2, [r0, #4]
   1b364:	f88d 2004 	strb.w	r2, [sp, #4]
   1b368:	7a42      	ldrb	r2, [r0, #9]
   1b36a:	f88d 2005 	strb.w	r2, [sp, #5]
   1b36e:	7b82      	ldrb	r2, [r0, #14]
   1b370:	f88d 2006 	strb.w	r2, [sp, #6]
   1b374:	78c2      	ldrb	r2, [r0, #3]
   1b376:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1b37a:	7a02      	ldrb	r2, [r0, #8]
   1b37c:	f88d 2008 	strb.w	r2, [sp, #8]
   1b380:	7b42      	ldrb	r2, [r0, #13]
   1b382:	f88d 2009 	strb.w	r2, [sp, #9]
   1b386:	7882      	ldrb	r2, [r0, #2]
   1b388:	f88d 200a 	strb.w	r2, [sp, #10]
   1b38c:	79c2      	ldrb	r2, [r0, #7]
   1b38e:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1b392:	7b02      	ldrb	r2, [r0, #12]
   1b394:	f88d 200c 	strb.w	r2, [sp, #12]
   1b398:	7842      	ldrb	r2, [r0, #1]
   1b39a:	f88d 200d 	strb.w	r2, [sp, #13]
   1b39e:	7982      	ldrb	r2, [r0, #6]
   1b3a0:	f88d 200e 	strb.w	r2, [sp, #14]
   1b3a4:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1b3a8:	2310      	movs	r3, #16
   1b3aa:	466a      	mov	r2, sp
   1b3ac:	4619      	mov	r1, r3
   1b3ae:	f7ff ff6d 	bl	1b28c <_copy>
}
   1b3b2:	b005      	add	sp, #20
   1b3b4:	f85d fb04 	ldr.w	pc, [sp], #4

0001b3b8 <mult_row_column>:
{
   1b3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b3ba:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1b3bc:	7808      	ldrb	r0, [r1, #0]
{
   1b3be:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1b3c0:	f7ff ff73 	bl	1b2aa <_double_byte>
   1b3c4:	4605      	mov	r5, r0
   1b3c6:	7860      	ldrb	r0, [r4, #1]
   1b3c8:	f7ff ff6f 	bl	1b2aa <_double_byte>
   1b3cc:	78a2      	ldrb	r2, [r4, #2]
   1b3ce:	7863      	ldrb	r3, [r4, #1]
   1b3d0:	4053      	eors	r3, r2
   1b3d2:	78e2      	ldrb	r2, [r4, #3]
   1b3d4:	4053      	eors	r3, r2
   1b3d6:	405d      	eors	r5, r3
   1b3d8:	4045      	eors	r5, r0
   1b3da:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1b3dc:	7860      	ldrb	r0, [r4, #1]
   1b3de:	7827      	ldrb	r7, [r4, #0]
   1b3e0:	f7ff ff63 	bl	1b2aa <_double_byte>
   1b3e4:	4605      	mov	r5, r0
   1b3e6:	78a0      	ldrb	r0, [r4, #2]
   1b3e8:	f7ff ff5f 	bl	1b2aa <_double_byte>
   1b3ec:	78a3      	ldrb	r3, [r4, #2]
   1b3ee:	405f      	eors	r7, r3
   1b3f0:	78e3      	ldrb	r3, [r4, #3]
   1b3f2:	405f      	eors	r7, r3
   1b3f4:	407d      	eors	r5, r7
   1b3f6:	4045      	eors	r5, r0
   1b3f8:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1b3fa:	78a0      	ldrb	r0, [r4, #2]
   1b3fc:	7865      	ldrb	r5, [r4, #1]
   1b3fe:	7827      	ldrb	r7, [r4, #0]
   1b400:	f7ff ff53 	bl	1b2aa <_double_byte>
   1b404:	406f      	eors	r7, r5
   1b406:	4605      	mov	r5, r0
   1b408:	78e0      	ldrb	r0, [r4, #3]
   1b40a:	f7ff ff4e 	bl	1b2aa <_double_byte>
   1b40e:	78e3      	ldrb	r3, [r4, #3]
   1b410:	405f      	eors	r7, r3
   1b412:	407d      	eors	r5, r7
   1b414:	4045      	eors	r5, r0
   1b416:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1b418:	7820      	ldrb	r0, [r4, #0]
   1b41a:	f7ff ff46 	bl	1b2aa <_double_byte>
   1b41e:	7863      	ldrb	r3, [r4, #1]
   1b420:	7825      	ldrb	r5, [r4, #0]
   1b422:	405d      	eors	r5, r3
   1b424:	78a3      	ldrb	r3, [r4, #2]
   1b426:	405d      	eors	r5, r3
   1b428:	4045      	eors	r5, r0
   1b42a:	78e0      	ldrb	r0, [r4, #3]
   1b42c:	f7ff ff3d 	bl	1b2aa <_double_byte>
   1b430:	b2ed      	uxtb	r5, r5
   1b432:	4045      	eors	r5, r0
   1b434:	70f5      	strb	r5, [r6, #3]
}
   1b436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b438 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1b438:	b570      	push	{r4, r5, r6, lr}
   1b43a:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1b43c:	4605      	mov	r5, r0
{
   1b43e:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   1b440:	2800      	cmp	r0, #0
   1b442:	d049      	beq.n	1b4d8 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1b444:	2900      	cmp	r1, #0
   1b446:	d049      	beq.n	1b4dc <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1b448:	2a00      	cmp	r2, #0
   1b44a:	d049      	beq.n	1b4e0 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1b44c:	2310      	movs	r3, #16
   1b44e:	460a      	mov	r2, r1
   1b450:	4668      	mov	r0, sp
   1b452:	4619      	mov	r1, r3
   1b454:	f7ff ff1a 	bl	1b28c <_copy>
	add_round_key(state, s->words);
   1b458:	4621      	mov	r1, r4
   1b45a:	4668      	mov	r0, sp
   1b45c:	f7ff ff2e 	bl	1b2bc <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1b460:	3410      	adds	r4, #16
   1b462:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1b466:	4668      	mov	r0, sp
   1b468:	f7f2 f8e6 	bl	d638 <sub_bytes>
		shift_rows(state);
   1b46c:	4668      	mov	r0, sp
   1b46e:	f7ff ff6a 	bl	1b346 <shift_rows>
	mult_row_column(t, s);
   1b472:	4669      	mov	r1, sp
   1b474:	a804      	add	r0, sp, #16
   1b476:	f7ff ff9f 	bl	1b3b8 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1b47a:	a901      	add	r1, sp, #4
   1b47c:	a805      	add	r0, sp, #20
   1b47e:	f7ff ff9b 	bl	1b3b8 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1b482:	a902      	add	r1, sp, #8
   1b484:	a806      	add	r0, sp, #24
   1b486:	f7ff ff97 	bl	1b3b8 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1b48a:	a903      	add	r1, sp, #12
   1b48c:	a807      	add	r0, sp, #28
   1b48e:	f7ff ff93 	bl	1b3b8 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1b492:	2310      	movs	r3, #16
   1b494:	4668      	mov	r0, sp
   1b496:	4619      	mov	r1, r3
   1b498:	eb0d 0203 	add.w	r2, sp, r3
   1b49c:	f7ff fef6 	bl	1b28c <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1b4a0:	4621      	mov	r1, r4
   1b4a2:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1b4a4:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1b4a6:	f7ff ff09 	bl	1b2bc <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1b4aa:	42a6      	cmp	r6, r4
   1b4ac:	d1db      	bne.n	1b466 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   1b4ae:	f7f2 f8c3 	bl	d638 <sub_bytes>
	shift_rows(state);
   1b4b2:	4668      	mov	r0, sp
   1b4b4:	f7ff ff47 	bl	1b346 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1b4b8:	4631      	mov	r1, r6
   1b4ba:	4668      	mov	r0, sp
   1b4bc:	f7ff fefe 	bl	1b2bc <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1b4c0:	2310      	movs	r3, #16
   1b4c2:	466a      	mov	r2, sp
   1b4c4:	4619      	mov	r1, r3
   1b4c6:	4628      	mov	r0, r5
   1b4c8:	f7ff fee0 	bl	1b28c <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1b4cc:	4668      	mov	r0, sp
   1b4ce:	2210      	movs	r2, #16
   1b4d0:	2100      	movs	r1, #0
   1b4d2:	f7ff fee8 	bl	1b2a6 <_set>

	return TC_CRYPTO_SUCCESS;
   1b4d6:	2001      	movs	r0, #1
}
   1b4d8:	b008      	add	sp, #32
   1b4da:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1b4dc:	4608      	mov	r0, r1
   1b4de:	e7fb      	b.n	1b4d8 <tc_aes_encrypt+0xa0>
   1b4e0:	4610      	mov	r0, r2
   1b4e2:	e7f9      	b.n	1b4d8 <tc_aes_encrypt+0xa0>

0001b4e4 <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1b4e4:	460a      	mov	r2, r1
{
   1b4e6:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1b4e8:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   1b4ec:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1b4ee:	2b00      	cmp	r3, #0
   1b4f0:	bfb4      	ite	lt
   1b4f2:	2387      	movlt	r3, #135	; 0x87
   1b4f4:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1b4f6:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1b4fa:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1b4fe:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1b500:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1b504:	d002      	beq.n	1b50c <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1b506:	7813      	ldrb	r3, [r2, #0]
   1b508:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1b50a:	e7f4      	b.n	1b4f6 <gf_double+0x12>
	}
}
   1b50c:	bd10      	pop	{r4, pc}

0001b50e <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1b50e:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1b510:	b120      	cbz	r0, 1b51c <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1b512:	2258      	movs	r2, #88	; 0x58
   1b514:	2100      	movs	r1, #0
   1b516:	f7ff fec6 	bl	1b2a6 <_set>
   1b51a:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1b51c:	bd08      	pop	{r3, pc}

0001b51e <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1b51e:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1b520:	4604      	mov	r4, r0
   1b522:	b188      	cbz	r0, 1b548 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1b524:	2210      	movs	r2, #16
   1b526:	2100      	movs	r1, #0
   1b528:	f7ff febd 	bl	1b2a6 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1b52c:	2210      	movs	r2, #16
   1b52e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1b532:	2100      	movs	r1, #0
   1b534:	f7ff feb7 	bl	1b2a6 <_set>
	s->leftover_offset = 0;
   1b538:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1b53a:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   1b53c:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   1b53e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1b542:	2001      	movs	r0, #1
   1b544:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   1b548:	bd10      	pop	{r4, pc}

0001b54a <tc_cmac_setup>:
{
   1b54a:	b570      	push	{r4, r5, r6, lr}
   1b54c:	460d      	mov	r5, r1
   1b54e:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1b550:	4604      	mov	r4, r0
   1b552:	b310      	cbz	r0, 1b59a <tc_cmac_setup+0x50>
   1b554:	b311      	cbz	r1, 1b59c <_flash_used>
	_set(s, 0, sizeof(*s));
   1b556:	2258      	movs	r2, #88	; 0x58
   1b558:	2100      	movs	r1, #0
   1b55a:	f7ff fea4 	bl	1b2a6 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1b55e:	4629      	mov	r1, r5
   1b560:	4630      	mov	r0, r6
	s->sched = sched;
   1b562:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1b564:	f7f2 f874 	bl	d650 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1b568:	2210      	movs	r2, #16
   1b56a:	2100      	movs	r1, #0
   1b56c:	4620      	mov	r0, r4
   1b56e:	f7ff fe9a 	bl	1b2a6 <_set>
	gf_double (s->K1, s->iv);
   1b572:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1b576:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b578:	4621      	mov	r1, r4
   1b57a:	4620      	mov	r0, r4
   1b57c:	f7ff ff5c 	bl	1b438 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1b580:	4621      	mov	r1, r4
   1b582:	4628      	mov	r0, r5
   1b584:	f7ff ffae 	bl	1b4e4 <gf_double>
	gf_double (s->K2, s->K1);
   1b588:	4629      	mov	r1, r5
   1b58a:	f104 0020 	add.w	r0, r4, #32
   1b58e:	f7ff ffa9 	bl	1b4e4 <gf_double>
	tc_cmac_init(s);
   1b592:	4620      	mov	r0, r4
   1b594:	f7ff ffc3 	bl	1b51e <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1b598:	2001      	movs	r0, #1
}
   1b59a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1b59c:	4608      	mov	r0, r1
   1b59e:	e7fc      	b.n	1b59a <tc_cmac_setup+0x50>

0001b5a0 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1b5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b5a4:	460d      	mov	r5, r1
   1b5a6:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1b5a8:	4604      	mov	r4, r0
   1b5aa:	2800      	cmp	r0, #0
   1b5ac:	d061      	beq.n	1b672 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1b5ae:	b912      	cbnz	r2, 1b5b6 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1b5b0:	2001      	movs	r0, #1
}
   1b5b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1b5b6:	2900      	cmp	r1, #0
   1b5b8:	d05b      	beq.n	1b672 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   1b5ba:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   1b5be:	ea53 0102 	orrs.w	r1, r3, r2
   1b5c2:	d056      	beq.n	1b672 <tc_cmac_update+0xd2>
	s->countdown--;
   1b5c4:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   1b5c6:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1b5ca:	f142 32ff 	adc.w	r2, r2, #4294967295
   1b5ce:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1b5d2:	f1b8 0f00 	cmp.w	r8, #0
   1b5d6:	d02a      	beq.n	1b62e <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1b5d8:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1b5dc:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   1b5e0:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1b5e2:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   1b5e4:	d208      	bcs.n	1b5f8 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1b5e6:	462a      	mov	r2, r5
   1b5e8:	4633      	mov	r3, r6
   1b5ea:	4631      	mov	r1, r6
   1b5ec:	f7ff fe4e 	bl	1b28c <_copy>
			s->leftover_offset += data_length;
   1b5f0:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1b5f2:	4432      	add	r2, r6
   1b5f4:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1b5f6:	e7db      	b.n	1b5b0 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1b5f8:	463b      	mov	r3, r7
   1b5fa:	462a      	mov	r2, r5
   1b5fc:	4639      	mov	r1, r7
   1b5fe:	f7ff fe45 	bl	1b28c <_copy>
		s->leftover_offset = 0;
   1b602:	2300      	movs	r3, #0
   1b604:	3e10      	subs	r6, #16
   1b606:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1b608:	4446      	add	r6, r8
		data += remaining_space;
   1b60a:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b60c:	1e63      	subs	r3, r4, #1
   1b60e:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1b612:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b616:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b61a:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1b61c:	ea82 0200 	eor.w	r2, r2, r0
   1b620:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b622:	d1f6      	bne.n	1b612 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1b624:	4621      	mov	r1, r4
   1b626:	4620      	mov	r0, r4
   1b628:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b62a:	f7ff ff05 	bl	1b438 <tc_aes_encrypt>
   1b62e:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1b632:	2e10      	cmp	r6, #16
   1b634:	d80a      	bhi.n	1b64c <tc_cmac_update+0xac>
	if (data_length > 0) {
   1b636:	2e00      	cmp	r6, #0
   1b638:	d0ba      	beq.n	1b5b0 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1b63a:	4633      	mov	r3, r6
   1b63c:	462a      	mov	r2, r5
   1b63e:	4631      	mov	r1, r6
   1b640:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1b644:	f7ff fe22 	bl	1b28c <_copy>
		s->leftover_offset = data_length;
   1b648:	6466      	str	r6, [r4, #68]	; 0x44
   1b64a:	e7b1      	b.n	1b5b0 <tc_cmac_update+0x10>
   1b64c:	1e63      	subs	r3, r4, #1
   1b64e:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1b650:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b654:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b658:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1b65a:	ea82 0200 	eor.w	r2, r2, r0
   1b65e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b660:	d1f6      	bne.n	1b650 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1b662:	4621      	mov	r1, r4
   1b664:	4620      	mov	r0, r4
   1b666:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b668:	f7ff fee6 	bl	1b438 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1b66c:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1b66e:	3e10      	subs	r6, #16
   1b670:	e7df      	b.n	1b632 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   1b672:	2000      	movs	r0, #0
   1b674:	e79d      	b.n	1b5b2 <tc_cmac_update+0x12>

0001b676 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1b676:	b570      	push	{r4, r5, r6, lr}
   1b678:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1b67a:	4605      	mov	r5, r0
   1b67c:	b1f0      	cbz	r0, 1b6bc <tc_cmac_final+0x46>
   1b67e:	b371      	cbz	r1, 1b6de <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1b680:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1b682:	2a10      	cmp	r2, #16
   1b684:	d11b      	bne.n	1b6be <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1b686:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b688:	1e63      	subs	r3, r4, #1
   1b68a:	3901      	subs	r1, #1
   1b68c:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1b690:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b694:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b698:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1b69a:	ea82 0206 	eor.w	r2, r2, r6
   1b69e:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   1b6a2:	ea82 0206 	eor.w	r2, r2, r6
   1b6a6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b6a8:	d1f2      	bne.n	1b690 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1b6aa:	4621      	mov	r1, r4
   1b6ac:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b6ae:	4628      	mov	r0, r5
   1b6b0:	f7ff fec2 	bl	1b438 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1b6b4:	4620      	mov	r0, r4
   1b6b6:	f7ff ff2a 	bl	1b50e <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1b6ba:	2001      	movs	r0, #1
}
   1b6bc:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1b6be:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1b6c2:	2100      	movs	r1, #0
   1b6c4:	f1c2 0210 	rsb	r2, r2, #16
   1b6c8:	4420      	add	r0, r4
   1b6ca:	f7ff fdec 	bl	1b2a6 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1b6ce:	2280      	movs	r2, #128	; 0x80
   1b6d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   1b6d2:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1b6d6:	4423      	add	r3, r4
   1b6d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1b6dc:	e7d4      	b.n	1b688 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1b6de:	4608      	mov	r0, r1
   1b6e0:	e7ec      	b.n	1b6bc <tc_cmac_final+0x46>

0001b6e2 <tc_sha256_update>:
{
   1b6e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b6e4:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   1b6e6:	b110      	cbz	r0, 1b6ee <tc_sha256_update+0xc>
   1b6e8:	b1f9      	cbz	r1, 1b72a <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   1b6ea:	b90a      	cbnz	r2, 1b6f0 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   1b6ec:	2001      	movs	r0, #1
}
   1b6ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   1b6f0:	2600      	movs	r6, #0
   1b6f2:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   1b6f4:	f100 0728 	add.w	r7, r0, #40	; 0x28
	while (datalen-- > 0) {
   1b6f8:	42a5      	cmp	r5, r4
   1b6fa:	d0f7      	beq.n	1b6ec <tc_sha256_update+0xa>
		s->leftover[s->leftover_offset++] = *(data++);
   1b6fc:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1b6fe:	1c5a      	adds	r2, r3, #1
   1b700:	6682      	str	r2, [r0, #104]	; 0x68
   1b702:	f814 1b01 	ldrb.w	r1, [r4], #1
   1b706:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1b708:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   1b70a:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1b70e:	d9f3      	bls.n	1b6f8 <tc_sha256_update+0x16>
			compress(s->iv, s->leftover);
   1b710:	4639      	mov	r1, r7
   1b712:	f7f1 fff1 	bl	d6f8 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   1b716:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   1b71a:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   1b71e:	f142 0200 	adc.w	r2, r2, #0
   1b722:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   1b726:	6686      	str	r6, [r0, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   1b728:	e7e6      	b.n	1b6f8 <tc_sha256_update+0x16>
		return TC_CRYPTO_FAIL;
   1b72a:	4608      	mov	r0, r1
   1b72c:	e7df      	b.n	1b6ee <tc_sha256_update+0xc>

0001b72e <tc_sha256_final>:
{
   1b72e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b730:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   1b732:	4605      	mov	r5, r0
   1b734:	2800      	cmp	r0, #0
   1b736:	d055      	beq.n	1b7e4 <tc_sha256_final+0xb6>
   1b738:	2900      	cmp	r1, #0
   1b73a:	d054      	beq.n	1b7e6 <tc_sha256_final+0xb8>
	s->bits_hashed += (s->leftover_offset << 3);
   1b73c:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   1b73e:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   1b742:	00d8      	lsls	r0, r3, #3
   1b744:	1812      	adds	r2, r2, r0
   1b746:	f141 0100 	adc.w	r1, r1, #0
   1b74a:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1b74e:	2280      	movs	r2, #128	; 0x80
   1b750:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1b752:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1b754:	4423      	add	r3, r4
   1b756:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   1b758:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1b75c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   1b760:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1b764:	d90a      	bls.n	1b77c <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   1b766:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   1b76a:	4639      	mov	r1, r7
   1b76c:	4430      	add	r0, r6
   1b76e:	f7ff fd9a 	bl	1b2a6 <_set>
		compress(s->iv, s->leftover);
   1b772:	4631      	mov	r1, r6
   1b774:	4620      	mov	r0, r4
   1b776:	f7f1 ffbf 	bl	d6f8 <compress>
		s->leftover_offset = 0;
   1b77a:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   1b77c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   1b77e:	2100      	movs	r1, #0
   1b780:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   1b784:	4430      	add	r0, r6
   1b786:	f7ff fd8e 	bl	1b2a6 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1b78a:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   1b78c:	4631      	mov	r1, r6
   1b78e:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1b790:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   1b792:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1b794:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   1b796:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1b79a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1b79e:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1b7a0:	0e1b      	lsrs	r3, r3, #24
	compress(s->iv, s->leftover);
   1b7a2:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1b7a4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1b7a8:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   1b7ac:	f7f1 ffa4 	bl	d6f8 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1b7b0:	1f26      	subs	r6, r4, #4
   1b7b2:	1d2b      	adds	r3, r5, #4
   1b7b4:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   1b7b8:	f856 2f04 	ldr.w	r2, [r6, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1b7bc:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   1b7be:	0e11      	lsrs	r1, r2, #24
   1b7c0:	f803 1c08 	strb.w	r1, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   1b7c4:	0c11      	lsrs	r1, r2, #16
   1b7c6:	f803 1c07 	strb.w	r1, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   1b7ca:	0a11      	lsrs	r1, r2, #8
   1b7cc:	f803 1c06 	strb.w	r1, [r3, #-6]
		*digest++ = (uint8_t)(t);
   1b7d0:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1b7d4:	4283      	cmp	r3, r0
   1b7d6:	d1ef      	bne.n	1b7b8 <tc_sha256_final+0x8a>
	_set(s, 0, sizeof(*s));
   1b7d8:	4620      	mov	r0, r4
   1b7da:	2270      	movs	r2, #112	; 0x70
   1b7dc:	2100      	movs	r1, #0
   1b7de:	f7ff fd62 	bl	1b2a6 <_set>
	return TC_CRYPTO_SUCCESS;
   1b7e2:	2001      	movs	r0, #1
}
   1b7e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1b7e6:	4608      	mov	r0, r1
   1b7e8:	e7fc      	b.n	1b7e4 <tc_sha256_final+0xb6>

0001b7ea <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   1b7ea:	b530      	push	{r4, r5, lr}
   1b7ec:	1e43      	subs	r3, r0, #1
   1b7ee:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   1b7f0:	42a9      	cmp	r1, r5
   1b7f2:	d106      	bne.n	1b802 <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1b7f4:	2136      	movs	r1, #54	; 0x36
   1b7f6:	245c      	movs	r4, #92	; 0x5c
   1b7f8:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1b7fa:	1a13      	subs	r3, r2, r0
   1b7fc:	2b3f      	cmp	r3, #63	; 0x3f
   1b7fe:	d90c      	bls.n	1b81a <rekey+0x30>
	}
}
   1b800:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   1b802:	780c      	ldrb	r4, [r1, #0]
   1b804:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   1b808:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   1b80c:	f811 4b01 	ldrb.w	r4, [r1], #1
   1b810:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   1b814:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   1b818:	e7ea      	b.n	1b7f0 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1b81a:	f802 1b01 	strb.w	r1, [r2], #1
   1b81e:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1b822:	e7ea      	b.n	1b7fa <rekey+0x10>

0001b824 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   1b824:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b826:	460e      	mov	r6, r1
   1b828:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   1b82a:	4605      	mov	r5, r0
{
   1b82c:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   1b82e:	b1b8      	cbz	r0, 1b860 <tc_hmac_set_key+0x3c>
   1b830:	b341      	cbz	r1, 1b884 <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   1b832:	b34a      	cbz	r2, 1b888 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1b834:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   1b836:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1b83a:	d813      	bhi.n	1b864 <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   1b83c:	a810      	add	r0, sp, #64	; 0x40
   1b83e:	f7f2 f843 	bl	d8c8 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   1b842:	4622      	mov	r2, r4
   1b844:	4669      	mov	r1, sp
   1b846:	a810      	add	r0, sp, #64	; 0x40
   1b848:	f7ff ff4b 	bl	1b6e2 <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   1b84c:	a910      	add	r1, sp, #64	; 0x40
   1b84e:	a834      	add	r0, sp, #208	; 0xd0
   1b850:	f7ff ff6d 	bl	1b72e <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   1b854:	4622      	mov	r2, r4
   1b856:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   1b858:	4638      	mov	r0, r7
   1b85a:	f7ff ffc6 	bl	1b7ea <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   1b85e:	2001      	movs	r0, #1
}
   1b860:	b04d      	add	sp, #308	; 0x134
   1b862:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   1b864:	f7f2 f830 	bl	d8c8 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1b868:	4622      	mov	r2, r4
   1b86a:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1b86c:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1b870:	4628      	mov	r0, r5
   1b872:	f7ff ff36 	bl	1b6e2 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1b876:	4629      	mov	r1, r5
   1b878:	4620      	mov	r0, r4
   1b87a:	f7ff ff58 	bl	1b72e <tc_sha256_final>
		rekey(ctx->key,
   1b87e:	2220      	movs	r2, #32
   1b880:	4621      	mov	r1, r4
   1b882:	e7e9      	b.n	1b858 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   1b884:	4608      	mov	r0, r1
   1b886:	e7eb      	b.n	1b860 <tc_hmac_set_key+0x3c>
   1b888:	4610      	mov	r0, r2
   1b88a:	e7e9      	b.n	1b860 <tc_hmac_set_key+0x3c>

0001b88c <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   1b88c:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1b88e:	4604      	mov	r4, r0
   1b890:	b140      	cbz	r0, 1b8a4 <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   1b892:	f7f2 f819 	bl	d8c8 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   1b896:	2240      	movs	r2, #64	; 0x40
   1b898:	4620      	mov	r0, r4
   1b89a:	f104 0170 	add.w	r1, r4, #112	; 0x70
   1b89e:	f7ff ff20 	bl	1b6e2 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1b8a2:	2001      	movs	r0, #1
}
   1b8a4:	bd10      	pop	{r4, pc}

0001b8a6 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   1b8a6:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1b8a8:	b110      	cbz	r0, 1b8b0 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   1b8aa:	f7ff ff1a 	bl	1b6e2 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1b8ae:	2001      	movs	r0, #1
}
   1b8b0:	bd08      	pop	{r3, pc}

0001b8b2 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   1b8b2:	b570      	push	{r4, r5, r6, lr}
   1b8b4:	460e      	mov	r6, r1
   1b8b6:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1b8b8:	4605      	mov	r5, r0
   1b8ba:	b1f0      	cbz	r0, 1b8fa <tc_hmac_final+0x48>
   1b8bc:	2920      	cmp	r1, #32
   1b8be:	d11c      	bne.n	1b8fa <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   1b8c0:	b1ea      	cbz	r2, 1b8fe <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   1b8c2:	4611      	mov	r1, r2
   1b8c4:	f7ff ff33 	bl	1b72e <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   1b8c8:	4620      	mov	r0, r4
   1b8ca:	f7f1 fffd 	bl	d8c8 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   1b8ce:	2240      	movs	r2, #64	; 0x40
   1b8d0:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   1b8d4:	4620      	mov	r0, r4
   1b8d6:	f7ff ff04 	bl	1b6e2 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   1b8da:	4632      	mov	r2, r6
   1b8dc:	4629      	mov	r1, r5
   1b8de:	4620      	mov	r0, r4
   1b8e0:	f7ff feff 	bl	1b6e2 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   1b8e4:	4621      	mov	r1, r4
   1b8e6:	4628      	mov	r0, r5
   1b8e8:	f7ff ff21 	bl	1b72e <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   1b8ec:	4620      	mov	r0, r4
   1b8ee:	22f0      	movs	r2, #240	; 0xf0
   1b8f0:	2100      	movs	r1, #0
   1b8f2:	f7ff fcd8 	bl	1b2a6 <_set>

	return TC_CRYPTO_SUCCESS;
   1b8f6:	2001      	movs	r0, #1
}
   1b8f8:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1b8fa:	2000      	movs	r0, #0
   1b8fc:	e7fc      	b.n	1b8f8 <tc_hmac_final+0x46>
   1b8fe:	4610      	mov	r0, r2
   1b900:	e7fa      	b.n	1b8f8 <tc_hmac_final+0x46>

0001b902 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   1b902:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b906:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   1b908:	f04f 0b01 	mov.w	fp, #1
{
   1b90c:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   1b90e:	2300      	movs	r3, #0
{
   1b910:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1b912:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   1b916:	4631      	mov	r1, r6
{
   1b918:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1b91a:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   1b91c:	f88d 3006 	strb.w	r3, [sp, #6]
{
   1b920:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   1b924:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1b928:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1b92c:	f7ff ff7a 	bl	1b824 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   1b930:	4620      	mov	r0, r4
   1b932:	f7ff ffab 	bl	1b88c <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1b936:	2220      	movs	r2, #32
   1b938:	4629      	mov	r1, r5
   1b93a:	4620      	mov	r0, r4
   1b93c:	f7ff ffb3 	bl	1b8a6 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   1b940:	465a      	mov	r2, fp
   1b942:	4620      	mov	r0, r4
   1b944:	f10d 0106 	add.w	r1, sp, #6
   1b948:	f7ff ffad 	bl	1b8a6 <tc_hmac_update>

	if (data && datalen)
   1b94c:	f1b8 0f00 	cmp.w	r8, #0
   1b950:	d007      	beq.n	1b962 <update+0x60>
   1b952:	f1b9 0f00 	cmp.w	r9, #0
   1b956:	d004      	beq.n	1b962 <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   1b958:	464a      	mov	r2, r9
   1b95a:	4641      	mov	r1, r8
   1b95c:	4620      	mov	r0, r4
   1b95e:	f7ff ffa2 	bl	1b8a6 <tc_hmac_update>
	if (additional_data && additional_datalen)
   1b962:	b13f      	cbz	r7, 1b974 <update+0x72>
   1b964:	f1ba 0f00 	cmp.w	sl, #0
   1b968:	d004      	beq.n	1b974 <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1b96a:	4652      	mov	r2, sl
   1b96c:	4639      	mov	r1, r7
   1b96e:	4620      	mov	r0, r4
   1b970:	f7ff ff99 	bl	1b8a6 <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1b974:	4622      	mov	r2, r4
   1b976:	2120      	movs	r1, #32
   1b978:	4630      	mov	r0, r6
   1b97a:	f7ff ff9a 	bl	1b8b2 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1b97e:	2220      	movs	r2, #32
   1b980:	4631      	mov	r1, r6
   1b982:	4620      	mov	r0, r4
   1b984:	f7ff ff4e 	bl	1b824 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1b988:	4620      	mov	r0, r4
   1b98a:	f7ff ff7f 	bl	1b88c <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1b98e:	2220      	movs	r2, #32
   1b990:	4629      	mov	r1, r5
   1b992:	4620      	mov	r0, r4
   1b994:	f7ff ff87 	bl	1b8a6 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1b998:	4622      	mov	r2, r4
   1b99a:	2120      	movs	r1, #32
   1b99c:	4628      	mov	r0, r5
   1b99e:	f7ff ff88 	bl	1b8b2 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   1b9a2:	f1b8 0f00 	cmp.w	r8, #0
   1b9a6:	d03a      	beq.n	1ba1e <update+0x11c>
   1b9a8:	f1b9 0f00 	cmp.w	r9, #0
   1b9ac:	d037      	beq.n	1ba1e <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1b9ae:	2220      	movs	r2, #32
   1b9b0:	4631      	mov	r1, r6
   1b9b2:	4620      	mov	r0, r4
   1b9b4:	f7ff ff36 	bl	1b824 <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   1b9b8:	4620      	mov	r0, r4
   1b9ba:	f7ff ff67 	bl	1b88c <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1b9be:	2220      	movs	r2, #32
   1b9c0:	4629      	mov	r1, r5
   1b9c2:	4620      	mov	r0, r4
   1b9c4:	f7ff ff6f 	bl	1b8a6 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   1b9c8:	2201      	movs	r2, #1
   1b9ca:	f10d 0107 	add.w	r1, sp, #7
   1b9ce:	4620      	mov	r0, r4
   1b9d0:	f7ff ff69 	bl	1b8a6 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   1b9d4:	464a      	mov	r2, r9
   1b9d6:	4641      	mov	r1, r8
   1b9d8:	4620      	mov	r0, r4
   1b9da:	f7ff ff64 	bl	1b8a6 <tc_hmac_update>
	if (additional_data && additional_datalen)
   1b9de:	b13f      	cbz	r7, 1b9f0 <update+0xee>
   1b9e0:	f1ba 0f00 	cmp.w	sl, #0
   1b9e4:	d004      	beq.n	1b9f0 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1b9e6:	4652      	mov	r2, sl
   1b9e8:	4639      	mov	r1, r7
   1b9ea:	4620      	mov	r0, r4
   1b9ec:	f7ff ff5b 	bl	1b8a6 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1b9f0:	4622      	mov	r2, r4
   1b9f2:	2120      	movs	r1, #32
   1b9f4:	4630      	mov	r0, r6
   1b9f6:	f7ff ff5c 	bl	1b8b2 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1b9fa:	2220      	movs	r2, #32
   1b9fc:	4631      	mov	r1, r6
   1b9fe:	4620      	mov	r0, r4
   1ba00:	f7ff ff10 	bl	1b824 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1ba04:	4620      	mov	r0, r4
   1ba06:	f7ff ff41 	bl	1b88c <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1ba0a:	2220      	movs	r2, #32
   1ba0c:	4629      	mov	r1, r5
   1ba0e:	4620      	mov	r0, r4
   1ba10:	f7ff ff49 	bl	1b8a6 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1ba14:	4622      	mov	r2, r4
   1ba16:	2120      	movs	r1, #32
   1ba18:	4628      	mov	r0, r5
   1ba1a:	f7ff ff4a 	bl	1b8b2 <tc_hmac_final>
}
   1ba1e:	b003      	add	sp, #12
   1ba20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001ba24 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   1ba24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ba26:	460c      	mov	r4, r1
   1ba28:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1ba2a:	4605      	mov	r5, r0
   1ba2c:	b1b0      	cbz	r0, 1ba5c <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   1ba2e:	b1b9      	cbz	r1, 1ba60 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   1ba30:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   1ba32:	2220      	movs	r2, #32
   1ba34:	2100      	movs	r1, #0
   1ba36:	30f0      	adds	r0, #240	; 0xf0
   1ba38:	f7ff fc35 	bl	1b2a6 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   1ba3c:	2220      	movs	r2, #32
   1ba3e:	2101      	movs	r1, #1
   1ba40:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1ba44:	f7ff fc2f 	bl	1b2a6 <_set>
	update(prng, personalization, plen, 0, 0);
   1ba48:	4628      	mov	r0, r5
   1ba4a:	4633      	mov	r3, r6
   1ba4c:	463a      	mov	r2, r7
   1ba4e:	4621      	mov	r1, r4
   1ba50:	9600      	str	r6, [sp, #0]
   1ba52:	f7ff ff56 	bl	1b902 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   1ba56:	2001      	movs	r0, #1
	prng->countdown = 0;
   1ba58:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   1ba5c:	b003      	add	sp, #12
   1ba5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1ba60:	4608      	mov	r0, r1
   1ba62:	e7fb      	b.n	1ba5c <tc_hmac_prng_init+0x38>

0001ba64 <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   1ba64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ba66:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1ba68:	4605      	mov	r5, r0
   1ba6a:	b180      	cbz	r0, 1ba8e <tc_hmac_prng_reseed+0x2a>
   1ba6c:	b179      	cbz	r1, 1ba8e <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   1ba6e:	2a1f      	cmp	r2, #31
   1ba70:	d90d      	bls.n	1ba8e <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   1ba72:	b153      	cbz	r3, 1ba8a <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   1ba74:	b16c      	cbz	r4, 1ba92 <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   1ba76:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   1ba78:	f7ff ff43 	bl	1b902 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   1ba7c:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   1ba80:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   1ba82:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   1ba86:	b003      	add	sp, #12
   1ba88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   1ba8a:	9300      	str	r3, [sp, #0]
   1ba8c:	e7f4      	b.n	1ba78 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   1ba8e:	2000      	movs	r0, #0
   1ba90:	e7f9      	b.n	1ba86 <tc_hmac_prng_reseed+0x22>
   1ba92:	4620      	mov	r0, r4
   1ba94:	e7f7      	b.n	1ba86 <tc_hmac_prng_reseed+0x22>

0001ba96 <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   1ba96:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1ba9a:	460d      	mov	r5, r1
   1ba9c:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   1ba9e:	4680      	mov	r8, r0
   1baa0:	b3d8      	cbz	r0, 1bb1a <tc_hmac_prng_generate+0x84>
   1baa2:	b3d2      	cbz	r2, 1bb1a <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   1baa4:	1e4b      	subs	r3, r1, #1
   1baa6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   1baaa:	d236      	bcs.n	1bb1a <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   1baac:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   1bab0:	b3ab      	cbz	r3, 1bb1e <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   1bab2:	3b01      	subs	r3, #1
   1bab4:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1bab8:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1babc:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1bac0:	2220      	movs	r2, #32
   1bac2:	4649      	mov	r1, r9
   1bac4:	4620      	mov	r0, r4
   1bac6:	f7ff fead 	bl	1b824 <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   1baca:	4620      	mov	r0, r4
   1bacc:	f7ff fede 	bl	1b88c <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1bad0:	2220      	movs	r2, #32
   1bad2:	4639      	mov	r1, r7
   1bad4:	4620      	mov	r0, r4
   1bad6:	f7ff fee6 	bl	1b8a6 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1bada:	4622      	mov	r2, r4
   1badc:	2120      	movs	r1, #32
   1bade:	4638      	mov	r0, r7
   1bae0:	f7ff fee7 	bl	1b8b2 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   1bae4:	2d20      	cmp	r5, #32
   1bae6:	462e      	mov	r6, r5
   1bae8:	bf28      	it	cs
   1baea:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   1baec:	4640      	mov	r0, r8
   1baee:	4633      	mov	r3, r6
   1baf0:	463a      	mov	r2, r7
   1baf2:	4631      	mov	r1, r6
   1baf4:	f7ff fbca 	bl	1b28c <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   1baf8:	2d20      	cmp	r5, #32
   1bafa:	bf38      	it	cc
   1bafc:	2520      	movcc	r5, #32
	while (outlen != 0) {
   1bafe:	3d20      	subs	r5, #32
		out += bufferlen;
   1bb00:	44b0      	add	r8, r6
	while (outlen != 0) {
   1bb02:	d1dd      	bne.n	1bac0 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   1bb04:	4620      	mov	r0, r4
   1bb06:	462b      	mov	r3, r5
   1bb08:	462a      	mov	r2, r5
   1bb0a:	4629      	mov	r1, r5
   1bb0c:	9500      	str	r5, [sp, #0]
   1bb0e:	f7ff fef8 	bl	1b902 <update>

	return TC_CRYPTO_SUCCESS;
   1bb12:	2001      	movs	r0, #1
}
   1bb14:	b003      	add	sp, #12
   1bb16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   1bb1a:	2000      	movs	r0, #0
   1bb1c:	e7fa      	b.n	1bb14 <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   1bb1e:	f04f 30ff 	mov.w	r0, #4294967295
   1bb22:	e7f7      	b.n	1bb14 <tc_hmac_prng_generate+0x7e>

0001bb24 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1bb24:	2100      	movs	r1, #0
   1bb26:	2001      	movs	r0, #1
   1bb28:	f7f1 bfec 	b.w	db04 <z_arm_fatal_error>

0001bb2c <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1bb2c:	6f43      	ldr	r3, [r0, #116]	; 0x74
   1bb2e:	f383 880b 	msr	PSPLIM, r3
}
   1bb32:	4770      	bx	lr

0001bb34 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1bb34:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1bb36:	6800      	ldr	r0, [r0, #0]
   1bb38:	f7f1 bfe4 	b.w	db04 <z_arm_fatal_error>

0001bb3c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1bb3c:	b508      	push	{r3, lr}
	handler();
   1bb3e:	f7f2 f80f 	bl	db60 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1bb42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1bb46:	f7f2 ba53 	b.w	dff0 <z_arm_exc_exit>

0001bb4a <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1bb4a:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   1bb4e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1bb52:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   1bb54:	bf08      	it	eq
   1bb56:	f06f 0015 	mvneq.w	r0, #21
   1bb5a:	4770      	bx	lr

0001bb5c <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1bb5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bb60:	4684      	mov	ip, r0
   1bb62:	4688      	mov	r8, r1
	register const char *s = nptr;
   1bb64:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1bb66:	4621      	mov	r1, r4
   1bb68:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1bb6c:	2b20      	cmp	r3, #32
   1bb6e:	d0fa      	beq.n	1bb66 <strtol+0xa>
   1bb70:	f1a3 0009 	sub.w	r0, r3, #9
   1bb74:	2804      	cmp	r0, #4
   1bb76:	d9f6      	bls.n	1bb66 <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
   1bb78:	2b2d      	cmp	r3, #45	; 0x2d
   1bb7a:	d12d      	bne.n	1bbd8 <strtol+0x7c>
		neg = 1;
		c = *s++;
   1bb7c:	784b      	ldrb	r3, [r1, #1]
   1bb7e:	1c8c      	adds	r4, r1, #2
		neg = 1;
   1bb80:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1bb82:	2a00      	cmp	r2, #0
   1bb84:	d05a      	beq.n	1bc3c <strtol+0xe0>
   1bb86:	2a10      	cmp	r2, #16
   1bb88:	d109      	bne.n	1bb9e <strtol+0x42>
   1bb8a:	2b30      	cmp	r3, #48	; 0x30
   1bb8c:	d107      	bne.n	1bb9e <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1bb8e:	7823      	ldrb	r3, [r4, #0]
   1bb90:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1bb94:	2b58      	cmp	r3, #88	; 0x58
   1bb96:	d14c      	bne.n	1bc32 <strtol+0xd6>
		c = s[1];
		s += 2;
		base = 16;
   1bb98:	2210      	movs	r2, #16
		c = s[1];
   1bb9a:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1bb9c:	3402      	adds	r4, #2
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1bb9e:	2600      	movs	r6, #0
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1bba0:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   1bba4:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
   1bba6:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   1bbaa:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1bbac:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1bbb0:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1bbb4:	2d09      	cmp	r5, #9
   1bbb6:	d815      	bhi.n	1bbe4 <strtol+0x88>
			c -= '0';
   1bbb8:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1bbba:	429a      	cmp	r2, r3
   1bbbc:	dd22      	ble.n	1bc04 <strtol+0xa8>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1bbbe:	1c75      	adds	r5, r6, #1
   1bbc0:	d007      	beq.n	1bbd2 <strtol+0x76>
   1bbc2:	4570      	cmp	r0, lr
   1bbc4:	d81b      	bhi.n	1bbfe <strtol+0xa2>
   1bbc6:	d101      	bne.n	1bbcc <strtol+0x70>
   1bbc8:	454b      	cmp	r3, r9
   1bbca:	dc18      	bgt.n	1bbfe <strtol+0xa2>
			any = -1;
		} else {
			any = 1;
   1bbcc:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1bbce:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1bbd2:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1bbd6:	e7eb      	b.n	1bbb0 <strtol+0x54>
	} else if (c == '+') {
   1bbd8:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1bbda:	bf04      	itt	eq
   1bbdc:	784b      	ldrbeq	r3, [r1, #1]
   1bbde:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   1bbe0:	2100      	movs	r1, #0
   1bbe2:	e7ce      	b.n	1bb82 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1bbe4:	f043 0520 	orr.w	r5, r3, #32
   1bbe8:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1bbea:	2d19      	cmp	r5, #25
   1bbec:	d80a      	bhi.n	1bc04 <strtol+0xa8>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1bbee:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1bbf2:	2d1a      	cmp	r5, #26
   1bbf4:	bf34      	ite	cc
   1bbf6:	2537      	movcc	r5, #55	; 0x37
   1bbf8:	2557      	movcs	r5, #87	; 0x57
   1bbfa:	1b5b      	subs	r3, r3, r5
   1bbfc:	e7dd      	b.n	1bbba <strtol+0x5e>
			any = -1;
   1bbfe:	f04f 36ff 	mov.w	r6, #4294967295
   1bc02:	e7e6      	b.n	1bbd2 <strtol+0x76>
		}
	}

	if (any < 0) {
   1bc04:	1c73      	adds	r3, r6, #1
   1bc06:	d109      	bne.n	1bc1c <strtol+0xc0>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   1bc08:	f7fb feaa 	bl	17960 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1bc0c:	2326      	movs	r3, #38	; 0x26
   1bc0e:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1bc10:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1bc12:	f1b8 0f00 	cmp.w	r8, #0
   1bc16:	d107      	bne.n	1bc28 <strtol+0xcc>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1bc18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1bc1c:	b101      	cbz	r1, 1bc20 <strtol+0xc4>
		acc = -acc;
   1bc1e:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1bc20:	f1b8 0f00 	cmp.w	r8, #0
   1bc24:	d0f8      	beq.n	1bc18 <strtol+0xbc>
		*endptr = (char *)(any ? s - 1 : nptr);
   1bc26:	b10e      	cbz	r6, 1bc2c <strtol+0xd0>
   1bc28:	f104 3cff 	add.w	ip, r4, #4294967295
   1bc2c:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   1bc30:	e7f2      	b.n	1bc18 <strtol+0xbc>
	if (base == 0) {
   1bc32:	2330      	movs	r3, #48	; 0x30
   1bc34:	2a00      	cmp	r2, #0
   1bc36:	d1b2      	bne.n	1bb9e <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1bc38:	2208      	movs	r2, #8
   1bc3a:	e7b0      	b.n	1bb9e <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1bc3c:	2b30      	cmp	r3, #48	; 0x30
   1bc3e:	d0a6      	beq.n	1bb8e <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1bc40:	220a      	movs	r2, #10
   1bc42:	e7ac      	b.n	1bb9e <strtol+0x42>

0001bc44 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1bc44:	4603      	mov	r3, r0
   1bc46:	3901      	subs	r1, #1
   1bc48:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1bc4c:	b90a      	cbnz	r2, 1bc52 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1bc4e:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1bc50:	4770      	bx	lr
		*d = *s;
   1bc52:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1bc56:	e7f7      	b.n	1bc48 <strcpy+0x4>

0001bc58 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1bc58:	b570      	push	{r4, r5, r6, lr}
   1bc5a:	4605      	mov	r5, r0
   1bc5c:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1bc5e:	b142      	cbz	r2, 1bc72 <strncpy+0x1a>
   1bc60:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   1bc64:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   1bc66:	b92c      	cbnz	r4, 1bc74 <strncpy+0x1c>
   1bc68:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   1bc6a:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   1bc6e:	429a      	cmp	r2, r3
   1bc70:	d1fb      	bne.n	1bc6a <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   1bc72:	bd70      	pop	{r4, r5, r6, pc}
		n--;
   1bc74:	4632      	mov	r2, r6
		*d = *s;
   1bc76:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   1bc7a:	e7ef      	b.n	1bc5c <strncpy+0x4>

0001bc7c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1bc7c:	4603      	mov	r3, r0
	size_t n = 0;
   1bc7e:	2000      	movs	r0, #0

	while (*s != '\0') {
   1bc80:	5c1a      	ldrb	r2, [r3, r0]
   1bc82:	b902      	cbnz	r2, 1bc86 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1bc84:	4770      	bx	lr
		n++;
   1bc86:	3001      	adds	r0, #1
   1bc88:	e7fa      	b.n	1bc80 <strlen+0x4>

0001bc8a <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1bc8a:	4603      	mov	r3, r0
	size_t n = 0;
   1bc8c:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1bc8e:	5c1a      	ldrb	r2, [r3, r0]
   1bc90:	b10a      	cbz	r2, 1bc96 <strnlen+0xc>
   1bc92:	4288      	cmp	r0, r1
   1bc94:	d100      	bne.n	1bc98 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1bc96:	4770      	bx	lr
		n++;
   1bc98:	3001      	adds	r0, #1
   1bc9a:	e7f8      	b.n	1bc8e <strnlen+0x4>

0001bc9c <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1bc9c:	1e43      	subs	r3, r0, #1
   1bc9e:	3901      	subs	r1, #1
   1bca0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1bca4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1bca8:	4282      	cmp	r2, r0
   1bcaa:	d101      	bne.n	1bcb0 <strcmp+0x14>
   1bcac:	2a00      	cmp	r2, #0
   1bcae:	d1f7      	bne.n	1bca0 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1bcb0:	1a10      	subs	r0, r2, r0
   1bcb2:	4770      	bx	lr

0001bcb4 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1bcb4:	b510      	push	{r4, lr}
   1bcb6:	3901      	subs	r1, #1
   1bcb8:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1bcba:	4282      	cmp	r2, r0
   1bcbc:	d009      	beq.n	1bcd2 <strncmp+0x1e>
   1bcbe:	7803      	ldrb	r3, [r0, #0]
   1bcc0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1bcc4:	42a3      	cmp	r3, r4
   1bcc6:	d100      	bne.n	1bcca <strncmp+0x16>
   1bcc8:	b90b      	cbnz	r3, 1bcce <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1bcca:	1b18      	subs	r0, r3, r4
   1bccc:	e002      	b.n	1bcd4 <strncmp+0x20>
		s1++;
   1bcce:	3001      	adds	r0, #1
		n--;
   1bcd0:	e7f3      	b.n	1bcba <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   1bcd2:	2000      	movs	r0, #0
}
   1bcd4:	bd10      	pop	{r4, pc}

0001bcd6 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1bcd6:	4603      	mov	r3, r0
   1bcd8:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1bcda:	b15a      	cbz	r2, 1bcf4 <memcmp+0x1e>
   1bcdc:	3901      	subs	r1, #1
   1bcde:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1bce0:	f813 0b01 	ldrb.w	r0, [r3], #1
   1bce4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1bce8:	42a3      	cmp	r3, r4
   1bcea:	d001      	beq.n	1bcf0 <memcmp+0x1a>
   1bcec:	4290      	cmp	r0, r2
   1bcee:	d0f7      	beq.n	1bce0 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1bcf0:	1a80      	subs	r0, r0, r2
}
   1bcf2:	bd10      	pop	{r4, pc}
		return 0;
   1bcf4:	4610      	mov	r0, r2
   1bcf6:	e7fc      	b.n	1bcf2 <memcmp+0x1c>

0001bcf8 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1bcf8:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1bcfa:	ea81 0400 	eor.w	r4, r1, r0
   1bcfe:	07a5      	lsls	r5, r4, #30
   1bd00:	4603      	mov	r3, r0
   1bd02:	d00b      	beq.n	1bd1c <memcpy+0x24>
   1bd04:	3b01      	subs	r3, #1
   1bd06:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1bd08:	4291      	cmp	r1, r2
   1bd0a:	d11b      	bne.n	1bd44 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1bd0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1bd0e:	2a00      	cmp	r2, #0
   1bd10:	d0fc      	beq.n	1bd0c <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1bd12:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1bd16:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1bd18:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   1bd1c:	079c      	lsls	r4, r3, #30
   1bd1e:	d1f6      	bne.n	1bd0e <memcpy+0x16>
   1bd20:	f022 0403 	bic.w	r4, r2, #3
   1bd24:	1f1d      	subs	r5, r3, #4
   1bd26:	0896      	lsrs	r6, r2, #2
   1bd28:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1bd2a:	42b9      	cmp	r1, r7
   1bd2c:	d105      	bne.n	1bd3a <memcpy+0x42>
   1bd2e:	f06f 0503 	mvn.w	r5, #3
		d_byte = (unsigned char *)d_word;
   1bd32:	4423      	add	r3, r4
   1bd34:	fb05 2206 	mla	r2, r5, r6, r2
   1bd38:	e7e4      	b.n	1bd04 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1bd3a:	f851 cb04 	ldr.w	ip, [r1], #4
   1bd3e:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   1bd42:	e7f2      	b.n	1bd2a <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1bd44:	f811 4b01 	ldrb.w	r4, [r1], #1
   1bd48:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1bd4c:	e7dc      	b.n	1bd08 <memcpy+0x10>

0001bd4e <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   1bd4e:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1bd50:	4604      	mov	r4, r0
	unsigned char c_byte = (unsigned char)c;
   1bd52:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1bd54:	07a3      	lsls	r3, r4, #30
   1bd56:	d111      	bne.n	1bd7c <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1bd58:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
	c_word |= c_word << 16;
   1bd5c:	ea43 4503 	orr.w	r5, r3, r3, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1bd60:	f022 0303 	bic.w	r3, r2, #3
   1bd64:	0896      	lsrs	r6, r2, #2
   1bd66:	4423      	add	r3, r4
   1bd68:	429c      	cmp	r4, r3
   1bd6a:	d10d      	bne.n	1bd88 <memset+0x3a>
   1bd6c:	f06f 0403 	mvn.w	r4, #3
   1bd70:	fb04 2206 	mla	r2, r4, r6, r2
   1bd74:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1bd76:	4293      	cmp	r3, r2
   1bd78:	d109      	bne.n	1bd8e <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1bd7a:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1bd7c:	2a00      	cmp	r2, #0
   1bd7e:	d0fc      	beq.n	1bd7a <memset+0x2c>
		*(d_byte++) = c_byte;
   1bd80:	f804 1b01 	strb.w	r1, [r4], #1
		n--;
   1bd84:	3a01      	subs	r2, #1
   1bd86:	e7e5      	b.n	1bd54 <memset+0x6>
		*(d_word++) = c_word;
   1bd88:	f844 5b04 	str.w	r5, [r4], #4
		n -= sizeof(mem_word_t);
   1bd8c:	e7ec      	b.n	1bd68 <memset+0x1a>
		*(d_byte++) = c_byte;
   1bd8e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1bd92:	e7f0      	b.n	1bd76 <memset+0x28>

0001bd94 <_stdout_hook_default>:
}
   1bd94:	f04f 30ff 	mov.w	r0, #4294967295
   1bd98:	4770      	bx	lr

0001bd9a <bt_settings_decode_key>:
{
   1bd9a:	b570      	push	{r4, r5, r6, lr}
   1bd9c:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   1bd9e:	2100      	movs	r1, #0
{
   1bda0:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   1bda2:	f7ff f884 	bl	1aeae <settings_name_next>
   1bda6:	280d      	cmp	r0, #13
   1bda8:	d118      	bne.n	1bddc <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   1bdaa:	7b23      	ldrb	r3, [r4, #12]
   1bdac:	2b30      	cmp	r3, #48	; 0x30
   1bdae:	d111      	bne.n	1bdd4 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   1bdb0:	2300      	movs	r3, #0
   1bdb2:	702b      	strb	r3, [r5, #0]
   1bdb4:	f104 060c 	add.w	r6, r4, #12
   1bdb8:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1bdba:	462a      	mov	r2, r5
   1bdbc:	4620      	mov	r0, r4
   1bdbe:	2301      	movs	r3, #1
   1bdc0:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   1bdc2:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1bdc4:	f7fe fcf3 	bl	1a7ae <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   1bdc8:	42b4      	cmp	r4, r6
   1bdca:	f105 35ff 	add.w	r5, r5, #4294967295
   1bdce:	d1f4      	bne.n	1bdba <bt_settings_decode_key+0x20>
	return 0;
   1bdd0:	2000      	movs	r0, #0
}
   1bdd2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   1bdd4:	2b31      	cmp	r3, #49	; 0x31
   1bdd6:	d101      	bne.n	1bddc <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   1bdd8:	2301      	movs	r3, #1
   1bdda:	e7ea      	b.n	1bdb2 <bt_settings_decode_key+0x18>
		return -EINVAL;
   1bddc:	f06f 0015 	mvn.w	r0, #21
   1bde0:	e7f7      	b.n	1bdd2 <bt_settings_decode_key+0x38>

0001bde2 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1bde2:	b510      	push	{r4, lr}
   1bde4:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1bde6:	7801      	ldrb	r1, [r0, #0]
   1bde8:	7822      	ldrb	r2, [r4, #0]
{
   1bdea:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1bdec:	428a      	cmp	r2, r1
   1bdee:	d00f      	beq.n	1be10 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1bdf0:	4669      	mov	r1, sp
   1bdf2:	f7f2 fca3 	bl	e73c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1bdf6:	4620      	mov	r0, r4
   1bdf8:	a905      	add	r1, sp, #20
   1bdfa:	f7f2 fc9f 	bl	e73c <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1bdfe:	2210      	movs	r2, #16
   1be00:	f10d 0115 	add.w	r1, sp, #21
   1be04:	f10d 0001 	add.w	r0, sp, #1
   1be08:	f7ff ff65 	bl	1bcd6 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1be0c:	b00a      	add	sp, #40	; 0x28
   1be0e:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1be10:	2a01      	cmp	r2, #1
   1be12:	d006      	beq.n	1be22 <bt_uuid_cmp+0x40>
   1be14:	2a02      	cmp	r2, #2
   1be16:	d007      	beq.n	1be28 <bt_uuid_cmp+0x46>
   1be18:	b972      	cbnz	r2, 1be38 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1be1a:	8840      	ldrh	r0, [r0, #2]
   1be1c:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1be1e:	1ac0      	subs	r0, r0, r3
   1be20:	e7f4      	b.n	1be0c <bt_uuid_cmp+0x2a>
   1be22:	6840      	ldr	r0, [r0, #4]
   1be24:	6863      	ldr	r3, [r4, #4]
   1be26:	e7fa      	b.n	1be1e <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1be28:	2210      	movs	r2, #16
   1be2a:	1c61      	adds	r1, r4, #1
   1be2c:	3001      	adds	r0, #1
}
   1be2e:	b00a      	add	sp, #40	; 0x28
   1be30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1be34:	f7ff bf4f 	b.w	1bcd6 <memcmp>
	switch (u1->type) {
   1be38:	f06f 0015 	mvn.w	r0, #21
   1be3c:	e7e6      	b.n	1be0c <bt_uuid_cmp+0x2a>

0001be3e <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1be3e:	2a04      	cmp	r2, #4
{
   1be40:	b510      	push	{r4, lr}
	switch (data_len) {
   1be42:	d00a      	beq.n	1be5a <bt_uuid_create+0x1c>
   1be44:	2a10      	cmp	r2, #16
   1be46:	d00d      	beq.n	1be64 <bt_uuid_create+0x26>
   1be48:	2a02      	cmp	r2, #2
   1be4a:	f04f 0300 	mov.w	r3, #0
   1be4e:	d10f      	bne.n	1be70 <bt_uuid_create+0x32>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   1be50:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1be52:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1be54:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1be56:	2001      	movs	r0, #1
}
   1be58:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   1be5a:	2301      	movs	r3, #1
   1be5c:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1be5e:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1be60:	6042      	str	r2, [r0, #4]
		break;
   1be62:	e7f8      	b.n	1be56 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   1be64:	2302      	movs	r3, #2
   1be66:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1be6a:	f7ff ff45 	bl	1bcf8 <memcpy>
		break;
   1be6e:	e7f2      	b.n	1be56 <bt_uuid_create+0x18>
	switch (data_len) {
   1be70:	4618      	mov	r0, r3
   1be72:	e7f1      	b.n	1be58 <bt_uuid_create+0x1a>

0001be74 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1be74:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1be76:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1be78:	2106      	movs	r1, #6
{
   1be7a:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1be7c:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1be80:	f7f5 f850 	bl	10f24 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1be84:	b918      	cbnz	r0, 1be8e <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1be86:	79a3      	ldrb	r3, [r4, #6]
   1be88:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1be8c:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1be8e:	bd10      	pop	{r4, pc}

0001be90 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1be90:	280f      	cmp	r0, #15
   1be92:	d806      	bhi.n	1bea2 <bt_hci_evt_get_flags+0x12>
   1be94:	280d      	cmp	r0, #13
   1be96:	d80b      	bhi.n	1beb0 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1be98:	2805      	cmp	r0, #5
   1be9a:	bf14      	ite	ne
   1be9c:	2002      	movne	r0, #2
   1be9e:	2003      	moveq	r0, #3
   1bea0:	4770      	bx	lr
	switch (evt) {
   1bea2:	2813      	cmp	r0, #19
   1bea4:	d004      	beq.n	1beb0 <bt_hci_evt_get_flags+0x20>
   1bea6:	281a      	cmp	r0, #26
   1bea8:	bf14      	ite	ne
   1beaa:	2002      	movne	r0, #2
   1beac:	2001      	moveq	r0, #1
   1beae:	4770      	bx	lr
   1beb0:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1beb2:	4770      	bx	lr

0001beb4 <get_adv_channel_map>:
{
   1beb4:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1beb6:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1beba:	bf0c      	ite	eq
   1bebc:	2007      	moveq	r0, #7
   1bebe:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1bec0:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1bec2:	bf48      	it	mi
   1bec4:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1bec8:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1beca:	bf48      	it	mi
   1becc:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1bed0:	4770      	bx	lr

0001bed2 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bed2:	e8d0 0faf 	lda	r0, [r0]
}
   1bed6:	4770      	bx	lr

0001bed8 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1bed8:	2207      	movs	r2, #7
   1beda:	f7ff bf0d 	b.w	1bcf8 <memcpy>

0001bede <atomic_or>:
{
   1bede:	4603      	mov	r3, r0
}
   1bee0:	e8d3 0fef 	ldaex	r0, [r3]
   1bee4:	ea40 0201 	orr.w	r2, r0, r1
   1bee8:	e8c3 2fec 	stlex	ip, r2, [r3]
   1beec:	f1bc 0f00 	cmp.w	ip, #0
   1bef0:	d1f6      	bne.n	1bee0 <atomic_or+0x2>
   1bef2:	4770      	bx	lr

0001bef4 <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   1bef4:	2207      	movs	r2, #7
   1bef6:	f7ff beee 	b.w	1bcd6 <memcmp>

0001befa <atomic_and>:
{
   1befa:	4603      	mov	r3, r0
}
   1befc:	e8d3 0fef 	ldaex	r0, [r3]
   1bf00:	ea00 0201 	and.w	r2, r0, r1
   1bf04:	e8c3 2fec 	stlex	ip, r2, [r3]
   1bf08:	f1bc 0f00 	cmp.w	ip, #0
   1bf0c:	d1f6      	bne.n	1befc <atomic_and+0x2>
   1bf0e:	4770      	bx	lr

0001bf10 <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   1bf10:	460b      	mov	r3, r1
   1bf12:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1bf14:	f001 041f 	and.w	r4, r1, #31
   1bf18:	2101      	movs	r1, #1

	if (val) {
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1bf1a:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1bf1c:	40a1      	lsls	r1, r4
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1bf1e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	if (val) {
   1bf22:	b112      	cbz	r2, 1bf2a <atomic_set_bit_to+0x1a>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   1bf24:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1bf26:	f7ff bfda 	b.w	1bede <atomic_or>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1bf2a:	43c9      	mvns	r1, r1
}
   1bf2c:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1bf2e:	f7ff bfe4 	b.w	1befa <atomic_and>

0001bf32 <adv_id_check_connectable_func>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1bf32:	f100 0210 	add.w	r2, r0, #16
{
   1bf36:	b508      	push	{r3, lr}
   1bf38:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1bf3a:	4610      	mov	r0, r2
   1bf3c:	f7ff ffc9 	bl	1bed2 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1bf40:	0640      	lsls	r0, r0, #25
   1bf42:	d50a      	bpl.n	1bf5a <adv_id_check_connectable_func+0x28>
   1bf44:	4610      	mov	r0, r2
   1bf46:	f7ff ffc4 	bl	1bed2 <atomic_get>
   1bf4a:	05c2      	lsls	r2, r0, #23
   1bf4c:	d505      	bpl.n	1bf5a <adv_id_check_connectable_func+0x28>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
   1bf4e:	781a      	ldrb	r2, [r3, #0]
   1bf50:	780b      	ldrb	r3, [r1, #0]
   1bf52:	429a      	cmp	r2, r3
		check_data->adv_enabled = true;
   1bf54:	bf1c      	itt	ne
   1bf56:	2301      	movne	r3, #1
   1bf58:	704b      	strbne	r3, [r1, #1]
}
   1bf5a:	bd08      	pop	{r3, pc}

0001bf5c <le_set_private_addr.constprop.0>:
static int le_set_private_addr(uint8_t id)
   1bf5c:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1bf5e:	2106      	movs	r1, #6
   1bf60:	4668      	mov	r0, sp
   1bf62:	f7f4 ffdf 	bl	10f24 <bt_rand>
	if (err) {
   1bf66:	b940      	cbnz	r0, 1bf7a <le_set_private_addr.constprop.0+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1bf68:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1bf6c:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1bf6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1bf72:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1bf76:	f7f3 f8e9 	bl	f14c <set_random_address>
}
   1bf7a:	b003      	add	sp, #12
   1bf7c:	f85d fb04 	ldr.w	pc, [sp], #4

0001bf80 <bt_lookup_id_addr>:
}
   1bf80:	4608      	mov	r0, r1
   1bf82:	4770      	bx	lr

0001bf84 <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   1bf84:	f7f3 bb3a 	b.w	f5fc <bt_le_create_conn_legacy>

0001bf88 <bt_hci_disconnect>:
{
   1bf88:	b570      	push	{r4, r5, r6, lr}
   1bf8a:	4606      	mov	r6, r0
   1bf8c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1bf8e:	f240 4006 	movw	r0, #1030	; 0x406
   1bf92:	2103      	movs	r1, #3
   1bf94:	f7f3 f80e 	bl	efb4 <bt_hci_cmd_create>
	if (!buf) {
   1bf98:	4604      	mov	r4, r0
   1bf9a:	b168      	cbz	r0, 1bfb8 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   1bf9c:	2103      	movs	r1, #3
   1bf9e:	3008      	adds	r0, #8
   1bfa0:	f7f9 fd06 	bl	159b0 <net_buf_simple_add>
	disconn->reason = reason;
   1bfa4:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1bfa6:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1bfa8:	4621      	mov	r1, r4
}
   1bfaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1bfae:	2200      	movs	r2, #0
   1bfb0:	f240 4006 	movw	r0, #1030	; 0x406
   1bfb4:	f7f3 b848 	b.w	f048 <bt_hci_cmd_send_sync>
}
   1bfb8:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1bfbc:	bd70      	pop	{r4, r5, r6, pc}

0001bfbe <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1bfbe:	8803      	ldrh	r3, [r0, #0]
   1bfc0:	8842      	ldrh	r2, [r0, #2]
{
   1bfc2:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1bfc4:	4293      	cmp	r3, r2
   1bfc6:	d819      	bhi.n	1bffc <bt_le_conn_params_valid+0x3e>
   1bfc8:	2b05      	cmp	r3, #5
   1bfca:	d917      	bls.n	1bffc <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1bfcc:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1bfd0:	d814      	bhi.n	1bffc <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1bfd2:	8883      	ldrh	r3, [r0, #4]
   1bfd4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1bfd8:	d210      	bcs.n	1bffc <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1bfda:	f640 4476 	movw	r4, #3190	; 0xc76
   1bfde:	88c0      	ldrh	r0, [r0, #6]
   1bfe0:	f1a0 010a 	sub.w	r1, r0, #10
   1bfe4:	b289      	uxth	r1, r1
   1bfe6:	42a1      	cmp	r1, r4
   1bfe8:	d808      	bhi.n	1bffc <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1bfea:	3301      	adds	r3, #1
   1bfec:	b29b      	uxth	r3, r3
   1bfee:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1bff0:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1bff4:	bf34      	ite	cc
   1bff6:	2001      	movcc	r0, #1
   1bff8:	2000      	movcs	r0, #0
}
   1bffa:	bd10      	pop	{r4, pc}
		return false;
   1bffc:	2000      	movs	r0, #0
   1bffe:	e7fc      	b.n	1bffa <bt_le_conn_params_valid+0x3c>

0001c000 <bt_le_set_data_len>:
{
   1c000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c002:	4607      	mov	r7, r0
   1c004:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1c006:	f242 0022 	movw	r0, #8226	; 0x2022
   1c00a:	2106      	movs	r1, #6
{
   1c00c:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1c00e:	f7f2 ffd1 	bl	efb4 <bt_hci_cmd_create>
	if (!buf) {
   1c012:	4604      	mov	r4, r0
   1c014:	b170      	cbz	r0, 1c034 <bt_le_set_data_len+0x34>
   1c016:	2106      	movs	r1, #6
   1c018:	3008      	adds	r0, #8
   1c01a:	f7f9 fcc9 	bl	159b0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1c01e:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1c020:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(conn->handle);
   1c022:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1c024:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1c026:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1c028:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1c02c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1c030:	f7f3 bd06 	b.w	fa40 <bt_hci_cmd_send>
}
   1c034:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1c038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c03a <bt_le_set_phy>:
{
   1c03a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c03e:	4680      	mov	r8, r0
   1c040:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1c042:	f242 0032 	movw	r0, #8242	; 0x2032
   1c046:	2107      	movs	r1, #7
{
   1c048:	4616      	mov	r6, r2
   1c04a:	461d      	mov	r5, r3
   1c04c:	f89d 9020 	ldrb.w	r9, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1c050:	f7f2 ffb0 	bl	efb4 <bt_hci_cmd_create>
	if (!buf) {
   1c054:	4604      	mov	r4, r0
   1c056:	b190      	cbz	r0, 1c07e <bt_le_set_phy+0x44>
   1c058:	2107      	movs	r1, #7
   1c05a:	3008      	adds	r0, #8
   1c05c:	f7f9 fca8 	bl	159b0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1c060:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1c064:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1c066:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1c068:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1c06a:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1c06c:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1c070:	4621      	mov	r1, r4
}
   1c072:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1c076:	f242 0032 	movw	r0, #8242	; 0x2032
   1c07a:	f7f3 bce1 	b.w	fa40 <bt_hci_cmd_send>
}
   1c07e:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1c082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001c086 <bt_addr_le_is_bonded>:
}
   1c086:	2000      	movs	r0, #0
   1c088:	4770      	bx	lr

0001c08a <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   1c08a:	6880      	ldr	r0, [r0, #8]
   1c08c:	f7f4 bd54 	b.w	10b38 <enh_conn_complete>

0001c090 <le_legacy_conn_complete>:
{
   1c090:	b510      	push	{r4, lr}
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1c092:	2400      	movs	r4, #0
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1c094:	6881      	ldr	r1, [r0, #8]
{
   1c096:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   1c098:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1c09a:	a803      	add	r0, sp, #12
	enh.status         = evt->status;
   1c09c:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1c0a0:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1c0a4:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   1c0a6:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1c0aa:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   1c0ae:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1c0b2:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   1c0b6:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1c0ba:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   1c0be:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1c0c2:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1c0c6:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1c0ca:	7b4b      	ldrb	r3, [r1, #13]
   1c0cc:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1c0d0:	f7ff ff02 	bl	1bed8 <bt_addr_le_copy>
	memcpy(dst, src, sizeof(*dst));
   1c0d4:	4669      	mov	r1, sp
   1c0d6:	2206      	movs	r2, #6
   1c0d8:	f10d 0013 	add.w	r0, sp, #19
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1c0dc:	9400      	str	r4, [sp, #0]
   1c0de:	f8ad 4004 	strh.w	r4, [sp, #4]
   1c0e2:	f7ff fe09 	bl	1bcf8 <memcpy>
   1c0e6:	2206      	movs	r2, #6
   1c0e8:	4669      	mov	r1, sp
   1c0ea:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1c0ee:	9400      	str	r4, [sp, #0]
   1c0f0:	f8ad 4004 	strh.w	r4, [sp, #4]
   1c0f4:	f7ff fe00 	bl	1bcf8 <memcpy>
	enh_conn_complete(&enh);
   1c0f8:	a802      	add	r0, sp, #8
   1c0fa:	f7f4 fd1d 	bl	10b38 <enh_conn_complete>
}
   1c0fe:	b00a      	add	sp, #40	; 0x28
   1c100:	bd10      	pop	{r4, pc}

0001c102 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c102:	e8d0 0faf 	lda	r0, [r0]
}
   1c106:	4770      	bx	lr

0001c108 <tx_notify>:
{
   1c108:	b570      	push	{r4, r5, r6, lr}
   1c10a:	4604      	mov	r4, r0
	__asm__ volatile(
   1c10c:	f04f 0220 	mov.w	r2, #32
   1c110:	f3ef 8311 	mrs	r3, BASEPRI
   1c114:	f382 8811 	msr	BASEPRI, r2
   1c118:	f3bf 8f6f 	isb	sy
	return list->head;
   1c11c:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1c11e:	b920      	cbnz	r0, 1c12a <tx_notify+0x22>
	__asm__ volatile(
   1c120:	f383 8811 	msr	BASEPRI, r3
   1c124:	f3bf 8f6f 	isb	sy
}
   1c128:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c12a:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   1c12c:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c12e:	4288      	cmp	r0, r1
	list->tail = node;
   1c130:	bf08      	it	eq
   1c132:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   1c134:	6222      	str	r2, [r4, #32]
   1c136:	f383 8811 	msr	BASEPRI, r3
   1c13a:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1c13e:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1c142:	f7f4 ff07 	bl	10f54 <tx_free>
		cb(conn, user_data);
   1c146:	4631      	mov	r1, r6
   1c148:	4620      	mov	r0, r4
   1c14a:	47a8      	blx	r5
	while (1) {
   1c14c:	e7de      	b.n	1c10c <tx_notify+0x4>

0001c14e <tx_complete_work>:
	tx_notify(conn);
   1c14e:	3828      	subs	r0, #40	; 0x28
   1c150:	f7ff bfda 	b.w	1c108 <tx_notify>

0001c154 <bt_conn_new>:
{
   1c154:	b538      	push	{r3, r4, r5, lr}
   1c156:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   1c158:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1c15a:	2501      	movs	r5, #1
   1c15c:	428b      	cmp	r3, r1
   1c15e:	d102      	bne.n	1c166 <bt_conn_new+0x12>
		return NULL;
   1c160:	2400      	movs	r4, #0
}
   1c162:	4620      	mov	r0, r4
   1c164:	bd38      	pop	{r3, r4, r5, pc}
   1c166:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   1c16a:	e8d2 0fef 	ldaex	r0, [r2]
   1c16e:	2800      	cmp	r0, #0
   1c170:	d104      	bne.n	1c17c <bt_conn_new+0x28>
   1c172:	e8c2 5fec 	stlex	ip, r5, [r2]
   1c176:	f1bc 0f00 	cmp.w	ip, #0
   1c17a:	d1f6      	bne.n	1c16a <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1c17c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1c180:	d002      	beq.n	1c188 <bt_conn_new+0x34>
	for (i = 0; i < size; i++) {
   1c182:	4604      	mov	r4, r0
   1c184:	3301      	adds	r3, #1
   1c186:	e7e9      	b.n	1c15c <bt_conn_new+0x8>
	if (!conn) {
   1c188:	2c00      	cmp	r4, #0
   1c18a:	d0ea      	beq.n	1c162 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   1c18c:	22b8      	movs	r2, #184	; 0xb8
   1c18e:	2100      	movs	r1, #0
   1c190:	4620      	mov	r0, r4
   1c192:	f7ff fddc 	bl	1bd4e <memset>
	return conn;
   1c196:	e7e4      	b.n	1c162 <bt_conn_new+0xe>

0001c198 <bt_conn_get_security>:
}
   1c198:	2001      	movs	r0, #1
   1c19a:	4770      	bx	lr

0001c19c <bt_conn_reset_rx_state>:
{
   1c19c:	b510      	push	{r4, lr}
   1c19e:	4604      	mov	r4, r0
	if (!conn->rx) {
   1c1a0:	6900      	ldr	r0, [r0, #16]
   1c1a2:	b118      	cbz	r0, 1c1ac <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1c1a4:	f7f9 faee 	bl	15784 <net_buf_unref>
	conn->rx = NULL;
   1c1a8:	2300      	movs	r3, #0
   1c1aa:	6123      	str	r3, [r4, #16]
}
   1c1ac:	bd10      	pop	{r4, pc}

0001c1ae <bt_conn_is_peer_addr_le>:
{
   1c1ae:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1c1b0:	7a03      	ldrb	r3, [r0, #8]
{
   1c1b2:	4604      	mov	r4, r0
	if (id != conn->id) {
   1c1b4:	428b      	cmp	r3, r1
{
   1c1b6:	4615      	mov	r5, r2
	if (id != conn->id) {
   1c1b8:	d115      	bne.n	1c1e6 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1c1ba:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1c1be:	2207      	movs	r2, #7
   1c1c0:	4628      	mov	r0, r5
   1c1c2:	f7ff fd88 	bl	1bcd6 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1c1c6:	b180      	cbz	r0, 1c1ea <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1c1c8:	78e3      	ldrb	r3, [r4, #3]
   1c1ca:	2207      	movs	r2, #7
   1c1cc:	b943      	cbnz	r3, 1c1e0 <bt_conn_is_peer_addr_le+0x32>
   1c1ce:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1c1d2:	4628      	mov	r0, r5
   1c1d4:	f7ff fd7f 	bl	1bcd6 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1c1d8:	fab0 f080 	clz	r0, r0
   1c1dc:	0940      	lsrs	r0, r0, #5
}
   1c1de:	bd38      	pop	{r3, r4, r5, pc}
   1c1e0:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1c1e4:	e7f5      	b.n	1c1d2 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1c1e6:	2000      	movs	r0, #0
   1c1e8:	e7f9      	b.n	1c1de <bt_conn_is_peer_addr_le+0x30>
		return true;
   1c1ea:	2001      	movs	r0, #1
   1c1ec:	e7f7      	b.n	1c1de <bt_conn_is_peer_addr_le+0x30>

0001c1ee <bt_conn_ref>:
{
   1c1ee:	4603      	mov	r3, r0
   1c1f0:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   1c1f2:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   1c1f6:	4610      	mov	r0, r2
   1c1f8:	f7ff ff83 	bl	1c102 <atomic_get>
		if (!old) {
   1c1fc:	b160      	cbz	r0, 1c218 <bt_conn_ref+0x2a>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1c1fe:	1c41      	adds	r1, r0, #1
   1c200:	e8d2 4fef 	ldaex	r4, [r2]
   1c204:	4284      	cmp	r4, r0
   1c206:	d104      	bne.n	1c212 <bt_conn_ref+0x24>
   1c208:	e8c2 1fec 	stlex	ip, r1, [r2]
   1c20c:	f1bc 0f00 	cmp.w	ip, #0
   1c210:	d1f6      	bne.n	1c200 <bt_conn_ref+0x12>
   1c212:	d1f0      	bne.n	1c1f6 <bt_conn_ref+0x8>
}
   1c214:	4618      	mov	r0, r3
   1c216:	bd10      	pop	{r4, pc}
			return NULL;
   1c218:	4603      	mov	r3, r0
   1c21a:	e7fb      	b.n	1c214 <bt_conn_ref+0x26>

0001c21c <conn_lookup_handle>:
{
   1c21c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c220:	4607      	mov	r7, r0
   1c222:	460e      	mov	r6, r1
   1c224:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1c226:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1c228:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1c22c:	42b4      	cmp	r4, r6
   1c22e:	d103      	bne.n	1c238 <conn_lookup_handle+0x1c>
	return NULL;
   1c230:	2300      	movs	r3, #0
}
   1c232:	4618      	mov	r0, r3
   1c234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1c238:	fb09 7004 	mla	r0, r9, r4, r7
   1c23c:	f7ff ffd7 	bl	1c1ee <bt_conn_ref>
   1c240:	4603      	mov	r3, r0
		if (!conn) {
   1c242:	b158      	cbz	r0, 1c25c <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1c244:	7a85      	ldrb	r5, [r0, #10]
   1c246:	2d01      	cmp	r5, #1
   1c248:	d002      	beq.n	1c250 <conn_lookup_handle+0x34>
   1c24a:	3d07      	subs	r5, #7
   1c24c:	2d01      	cmp	r5, #1
   1c24e:	d803      	bhi.n	1c258 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1c250:	881a      	ldrh	r2, [r3, #0]
   1c252:	4542      	cmp	r2, r8
   1c254:	d0ed      	beq.n	1c232 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1c256:	4618      	mov	r0, r3
   1c258:	f7f5 f900 	bl	1145c <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1c25c:	3401      	adds	r4, #1
   1c25e:	e7e5      	b.n	1c22c <conn_lookup_handle+0x10>

0001c260 <bt_conn_get_dst>:
}
   1c260:	3088      	adds	r0, #136	; 0x88
   1c262:	4770      	bx	lr

0001c264 <bt_conn_le_conn_update>:
{
   1c264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c266:	4607      	mov	r7, r0
   1c268:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1c26a:	f242 0013 	movw	r0, #8211	; 0x2013
   1c26e:	210e      	movs	r1, #14
   1c270:	f7f2 fea0 	bl	efb4 <bt_hci_cmd_create>
	if (!buf) {
   1c274:	4606      	mov	r6, r0
   1c276:	b1d0      	cbz	r0, 1c2ae <bt_conn_le_conn_update+0x4a>
   1c278:	210e      	movs	r1, #14
   1c27a:	3008      	adds	r0, #8
   1c27c:	f7f9 fb98 	bl	159b0 <net_buf_simple_add>
   1c280:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1c282:	220e      	movs	r2, #14
   1c284:	2100      	movs	r1, #0
   1c286:	f7ff fd62 	bl	1bd4e <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1c28a:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c28c:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1c28e:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1c290:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c292:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1c294:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1c296:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c298:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1c29c:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1c29e:	88ab      	ldrh	r3, [r5, #4]
   1c2a0:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1c2a2:	88eb      	ldrh	r3, [r5, #6]
   1c2a4:	8123      	strh	r3, [r4, #8]
}
   1c2a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c2aa:	f7f2 becd 	b.w	f048 <bt_hci_cmd_send_sync>
}
   1c2ae:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1c2b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c2b4 <l2cap_connected>:
}
   1c2b4:	4770      	bx	lr

0001c2b6 <l2cap_disconnected>:
   1c2b6:	4770      	bx	lr

0001c2b8 <bt_l2cap_chan_remove>:
	return list->head;
   1c2b8:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1c2ba:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c2bc:	b17b      	cbz	r3, 1c2de <bt_l2cap_chan_remove+0x26>
   1c2be:	2200      	movs	r2, #0
   1c2c0:	3b08      	subs	r3, #8
   1c2c2:	b163      	cbz	r3, 1c2de <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1c2c4:	428b      	cmp	r3, r1
			sys_slist_remove(&conn->channels, prev, &chan->node);
   1c2c6:	f103 0408 	add.w	r4, r3, #8
		if (chan == ch) {
   1c2ca:	d10e      	bne.n	1c2ea <bt_l2cap_chan_remove+0x32>
	return node->next;
   1c2cc:	6899      	ldr	r1, [r3, #8]
	return list->tail;
   1c2ce:	6d45      	ldr	r5, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   1c2d0:	b932      	cbnz	r2, 1c2e0 <bt_l2cap_chan_remove+0x28>
   1c2d2:	42ac      	cmp	r4, r5
	list->head = node;
   1c2d4:	6501      	str	r1, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   1c2d6:	d100      	bne.n	1c2da <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1c2d8:	6541      	str	r1, [r0, #84]	; 0x54
	parent->next = child;
   1c2da:	2200      	movs	r2, #0
   1c2dc:	609a      	str	r2, [r3, #8]
}
   1c2de:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   1c2e0:	42ac      	cmp	r4, r5
	parent->next = child;
   1c2e2:	6011      	str	r1, [r2, #0]
	list->tail = node;
   1c2e4:	bf08      	it	eq
   1c2e6:	6542      	streq	r2, [r0, #84]	; 0x54
}
   1c2e8:	e7f7      	b.n	1c2da <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c2ea:	2c00      	cmp	r4, #0
   1c2ec:	d0f7      	beq.n	1c2de <bt_l2cap_chan_remove+0x26>
	return node->next;
   1c2ee:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c2f0:	2b00      	cmp	r3, #0
   1c2f2:	d0f4      	beq.n	1c2de <bt_l2cap_chan_remove+0x26>
   1c2f4:	4622      	mov	r2, r4
   1c2f6:	3b08      	subs	r3, #8
   1c2f8:	e7e3      	b.n	1c2c2 <bt_l2cap_chan_remove+0xa>

0001c2fa <bt_l2cap_chan_del>:
{
   1c2fa:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1c2fc:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1c300:	4604      	mov	r4, r0
	if (!chan->conn) {
   1c302:	b123      	cbz	r3, 1c30e <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1c304:	686b      	ldr	r3, [r5, #4]
   1c306:	b103      	cbz	r3, 1c30a <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1c308:	4798      	blx	r3
	chan->conn = NULL;
   1c30a:	2300      	movs	r3, #0
   1c30c:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1c30e:	68e3      	ldr	r3, [r4, #12]
   1c310:	b10b      	cbz	r3, 1c316 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1c312:	4620      	mov	r0, r4
   1c314:	4798      	blx	r3
	if (ops->released) {
   1c316:	69eb      	ldr	r3, [r5, #28]
   1c318:	b11b      	cbz	r3, 1c322 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1c31a:	4620      	mov	r0, r4
}
   1c31c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1c320:	4718      	bx	r3
}
   1c322:	bd70      	pop	{r4, r5, r6, pc}

0001c324 <bt_l2cap_disconnected>:
	return list->head;
   1c324:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1c326:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c328:	b18b      	cbz	r3, 1c34e <bt_l2cap_disconnected+0x2a>
   1c32a:	f1b3 0008 	subs.w	r0, r3, #8
   1c32e:	d00e      	beq.n	1c34e <bt_l2cap_disconnected+0x2a>
	return node->next;
   1c330:	681c      	ldr	r4, [r3, #0]
   1c332:	b104      	cbz	r4, 1c336 <bt_l2cap_disconnected+0x12>
   1c334:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1c336:	f7ff ffe0 	bl	1c2fa <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c33a:	b144      	cbz	r4, 1c34e <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c33c:	f114 0308 	adds.w	r3, r4, #8
   1c340:	d002      	beq.n	1c348 <bt_l2cap_disconnected+0x24>
	return node->next;
   1c342:	68a3      	ldr	r3, [r4, #8]
   1c344:	b103      	cbz	r3, 1c348 <bt_l2cap_disconnected+0x24>
   1c346:	3b08      	subs	r3, #8
{
   1c348:	4620      	mov	r0, r4
   1c34a:	461c      	mov	r4, r3
   1c34c:	e7f3      	b.n	1c336 <bt_l2cap_disconnected+0x12>
}
   1c34e:	bd10      	pop	{r4, pc}

0001c350 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1c350:	3104      	adds	r1, #4
   1c352:	f7f5 bc0f 	b.w	11b74 <bt_conn_create_pdu_timeout>

0001c356 <bt_l2cap_send_cb>:
{
   1c356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c35a:	4614      	mov	r4, r2
   1c35c:	4605      	mov	r5, r0
   1c35e:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1c360:	f102 0008 	add.w	r0, r2, #8
   1c364:	2104      	movs	r1, #4
   1c366:	461e      	mov	r6, r3
   1c368:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1c36c:	f7f9 fac8 	bl	15900 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1c370:	89a2      	ldrh	r2, [r4, #12]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1c372:	4643      	mov	r3, r8
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1c374:	3a04      	subs	r2, #4
   1c376:	8002      	strh	r2, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   1c378:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1c37a:	4632      	mov	r2, r6
   1c37c:	4621      	mov	r1, r4
   1c37e:	4628      	mov	r0, r5
}
   1c380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1c384:	f7f4 bfa8 	b.w	112d8 <bt_conn_send_cb>

0001c388 <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   1c388:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c38a:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1c38c:	2202      	movs	r2, #2
   1c38e:	2001      	movs	r0, #1
   1c390:	f7f5 fd42 	bl	11e18 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1c394:	4604      	mov	r4, r0
   1c396:	b160      	cbz	r0, 1c3b2 <l2cap_send_reject.constprop.0+0x2a>
	return net_buf_simple_add(&buf->b, len);
   1c398:	2102      	movs	r1, #2
   1c39a:	3008      	adds	r0, #8
   1c39c:	f7f9 fb08 	bl	159b0 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1c3a0:	2300      	movs	r3, #0
   1c3a2:	4622      	mov	r2, r4
   1c3a4:	7003      	strb	r3, [r0, #0]
   1c3a6:	7043      	strb	r3, [r0, #1]
   1c3a8:	2105      	movs	r1, #5
   1c3aa:	4628      	mov	r0, r5
   1c3ac:	9300      	str	r3, [sp, #0]
   1c3ae:	f7ff ffd2 	bl	1c356 <bt_l2cap_send_cb>
}
   1c3b2:	b003      	add	sp, #12
   1c3b4:	bd30      	pop	{r4, r5, pc}

0001c3b6 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   1c3b6:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c3b8:	b160      	cbz	r0, 1c3d4 <bt_l2cap_le_lookup_tx_cid+0x1e>
   1c3ba:	3808      	subs	r0, #8
   1c3bc:	b900      	cbnz	r0, 1c3c0 <bt_l2cap_le_lookup_tx_cid+0xa>
   1c3be:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1c3c0:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   1c3c4:	428b      	cmp	r3, r1
   1c3c6:	d005      	beq.n	1c3d4 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c3c8:	f110 0308 	adds.w	r3, r0, #8
   1c3cc:	d001      	beq.n	1c3d2 <bt_l2cap_le_lookup_tx_cid+0x1c>
	return node->next;
   1c3ce:	6880      	ldr	r0, [r0, #8]
   1c3d0:	e7f2      	b.n	1c3b8 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1c3d2:	4618      	mov	r0, r3
}
   1c3d4:	4770      	bx	lr

0001c3d6 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1c3d6:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c3d8:	b160      	cbz	r0, 1c3f4 <bt_l2cap_le_lookup_rx_cid+0x1e>
   1c3da:	3808      	subs	r0, #8
   1c3dc:	b900      	cbnz	r0, 1c3e0 <bt_l2cap_le_lookup_rx_cid+0xa>
   1c3de:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1c3e0:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   1c3e4:	428b      	cmp	r3, r1
   1c3e6:	d005      	beq.n	1c3f4 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c3e8:	f110 0308 	adds.w	r3, r0, #8
   1c3ec:	d001      	beq.n	1c3f2 <bt_l2cap_le_lookup_rx_cid+0x1c>
	return node->next;
   1c3ee:	6880      	ldr	r0, [r0, #8]
   1c3f0:	e7f2      	b.n	1c3d8 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1c3f2:	4618      	mov	r0, r3
}
   1c3f4:	4770      	bx	lr

0001c3f6 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1c3f6:	4770      	bx	lr

0001c3f8 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1c3f8:	4603      	mov	r3, r0
	return list->head;
   1c3fa:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1c3fc:	b128      	cbz	r0, 1c40a <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c3fe:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1c400:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c402:	4288      	cmp	r0, r1
	list->head = node;
   1c404:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1c406:	bf08      	it	eq
   1c408:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1c40a:	4770      	bx	lr

0001c40c <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1c40c:	4603      	mov	r3, r0
	size_t bytes = 0;
   1c40e:	2000      	movs	r0, #0

	while (buf) {
   1c410:	b903      	cbnz	r3, 1c414 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1c412:	4770      	bx	lr
		bytes += buf->len;
   1c414:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1c416:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1c418:	4410      	add	r0, r2
		buf = buf->frags;
   1c41a:	e7f9      	b.n	1c410 <net_buf_frags_len+0x4>

0001c41c <att_sent>:
	if (chan->ops->sent) {
   1c41c:	684b      	ldr	r3, [r1, #4]
{
   1c41e:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1c420:	695b      	ldr	r3, [r3, #20]
   1c422:	b103      	cbz	r3, 1c426 <att_sent+0xa>
		chan->ops->sent(chan);
   1c424:	4718      	bx	r3
}
   1c426:	4770      	bx	lr

0001c428 <attr_read_type_cb>:
{
   1c428:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1c42a:	68d4      	ldr	r4, [r2, #12]
   1c42c:	3102      	adds	r1, #2
   1c42e:	7823      	ldrb	r3, [r4, #0]
   1c430:	b913      	cbnz	r3, 1c438 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1c432:	7021      	strb	r1, [r4, #0]
	return true;
   1c434:	2001      	movs	r0, #1
   1c436:	e006      	b.n	1c446 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1c438:	428b      	cmp	r3, r1
   1c43a:	d0fb      	beq.n	1c434 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1c43c:	8983      	ldrh	r3, [r0, #12]
   1c43e:	3b02      	subs	r3, #2
   1c440:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1c442:	2000      	movs	r0, #0
   1c444:	6110      	str	r0, [r2, #16]
}
   1c446:	bd10      	pop	{r4, pc}

0001c448 <att_prepare_write_req>:
}
   1c448:	2006      	movs	r0, #6
   1c44a:	4770      	bx	lr

0001c44c <att_op_get_type>:
	switch (op) {
   1c44c:	281e      	cmp	r0, #30
   1c44e:	d816      	bhi.n	1c47e <att_op_get_type+0x32>
   1c450:	b308      	cbz	r0, 1c496 <att_op_get_type+0x4a>
   1c452:	1e43      	subs	r3, r0, #1
   1c454:	2b1d      	cmp	r3, #29
   1c456:	d81e      	bhi.n	1c496 <att_op_get_type+0x4a>
   1c458:	e8df f003 	tbb	[pc, r3]
   1c45c:	23172317 	.word	0x23172317
   1c460:	23172317 	.word	0x23172317
   1c464:	23172317 	.word	0x23172317
   1c468:	23172317 	.word	0x23172317
   1c46c:	1d172317 	.word	0x1d172317
   1c470:	2317231d 	.word	0x2317231d
   1c474:	1d191d17 	.word	0x1d191d17
   1c478:	0f1b      	.short	0x0f1b
   1c47a:	2004      	movs	r0, #4
   1c47c:	4770      	bx	lr
   1c47e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1c482:	2b52      	cmp	r3, #82	; 0x52
   1c484:	d107      	bne.n	1c496 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1c486:	2000      	movs	r0, #0
}
   1c488:	4770      	bx	lr
		return ATT_RESPONSE;
   1c48a:	2002      	movs	r0, #2
   1c48c:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1c48e:	2003      	movs	r0, #3
   1c490:	4770      	bx	lr
		return ATT_INDICATION;
   1c492:	2005      	movs	r0, #5
   1c494:	4770      	bx	lr
		return ATT_COMMAND;
   1c496:	f010 0f40 	tst.w	r0, #64	; 0x40
   1c49a:	bf0c      	ite	eq
   1c49c:	2006      	moveq	r0, #6
   1c49e:	2000      	movne	r0, #0
   1c4a0:	4770      	bx	lr
		return ATT_REQUEST;
   1c4a2:	2001      	movs	r0, #1
   1c4a4:	4770      	bx	lr

0001c4a6 <att_notify_mult>:
{
   1c4a6:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   1c4a8:	6803      	ldr	r3, [r0, #0]
   1c4aa:	898a      	ldrh	r2, [r1, #12]
   1c4ac:	6818      	ldr	r0, [r3, #0]
   1c4ae:	6889      	ldr	r1, [r1, #8]
   1c4b0:	f7f8 fe10 	bl	150d4 <bt_gatt_mult_notification>
}
   1c4b4:	2000      	movs	r0, #0
   1c4b6:	bd08      	pop	{r3, pc}

0001c4b8 <att_notify>:
{
   1c4b8:	b538      	push	{r3, r4, r5, lr}
   1c4ba:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1c4bc:	f101 0008 	add.w	r0, r1, #8
   1c4c0:	460c      	mov	r4, r1
   1c4c2:	f000 ff43 	bl	1d34c <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   1c4c6:	682d      	ldr	r5, [r5, #0]
   1c4c8:	4601      	mov	r1, r0
   1c4ca:	89a3      	ldrh	r3, [r4, #12]
   1c4cc:	6828      	ldr	r0, [r5, #0]
   1c4ce:	68a2      	ldr	r2, [r4, #8]
   1c4d0:	f000 fea4 	bl	1d21c <bt_gatt_notification>
}
   1c4d4:	2000      	movs	r0, #0
   1c4d6:	bd38      	pop	{r3, r4, r5, pc}

0001c4d8 <bt_gatt_foreach_attr>:
{
   1c4d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1c4da:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1c4de:	2300      	movs	r3, #0
   1c4e0:	461a      	mov	r2, r3
   1c4e2:	9300      	str	r3, [sp, #0]
   1c4e4:	f7f7 fc4a 	bl	13d7c <bt_gatt_foreach_attr_type>
}
   1c4e8:	b005      	add	sp, #20
   1c4ea:	f85d fb04 	ldr.w	pc, [sp], #4

0001c4ee <find_info_cb>:
{
   1c4ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1c4f0:	6893      	ldr	r3, [r2, #8]
{
   1c4f2:	4605      	mov	r5, r0
   1c4f4:	460e      	mov	r6, r1
   1c4f6:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1c4f8:	6817      	ldr	r7, [r2, #0]
	if (!data->rsp) {
   1c4fa:	b963      	cbnz	r3, 1c516 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1c4fc:	6850      	ldr	r0, [r2, #4]
   1c4fe:	2101      	movs	r1, #1
   1c500:	3008      	adds	r0, #8
   1c502:	f7f9 fa55 	bl	159b0 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1c506:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1c508:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1c50a:	781b      	ldrb	r3, [r3, #0]
   1c50c:	2b00      	cmp	r3, #0
   1c50e:	bf0c      	ite	eq
   1c510:	2301      	moveq	r3, #1
   1c512:	2302      	movne	r3, #2
   1c514:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1c516:	68a3      	ldr	r3, [r4, #8]
   1c518:	781b      	ldrb	r3, [r3, #0]
   1c51a:	2b01      	cmp	r3, #1
   1c51c:	d003      	beq.n	1c526 <find_info_cb+0x38>
   1c51e:	2b02      	cmp	r3, #2
   1c520:	d019      	beq.n	1c556 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1c522:	2000      	movs	r0, #0
   1c524:	e016      	b.n	1c554 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1c526:	682b      	ldr	r3, [r5, #0]
   1c528:	781b      	ldrb	r3, [r3, #0]
   1c52a:	2b00      	cmp	r3, #0
   1c52c:	d1f9      	bne.n	1c522 <find_info_cb+0x34>
   1c52e:	6860      	ldr	r0, [r4, #4]
   1c530:	2104      	movs	r1, #4
   1c532:	3008      	adds	r0, #8
   1c534:	f7f9 fa3c 	bl	159b0 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1c538:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1c53a:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1c53c:	885b      	ldrh	r3, [r3, #2]
		data->info16->handle = sys_cpu_to_le16(handle);
   1c53e:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1c540:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1c542:	6863      	ldr	r3, [r4, #4]
   1c544:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1c548:	899b      	ldrh	r3, [r3, #12]
   1c54a:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1c54c:	2804      	cmp	r0, #4
   1c54e:	bf94      	ite	ls
   1c550:	2000      	movls	r0, #0
   1c552:	2001      	movhi	r0, #1
}
   1c554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1c556:	682b      	ldr	r3, [r5, #0]
   1c558:	781b      	ldrb	r3, [r3, #0]
   1c55a:	2b02      	cmp	r3, #2
   1c55c:	d1e1      	bne.n	1c522 <find_info_cb+0x34>
   1c55e:	6860      	ldr	r0, [r4, #4]
   1c560:	2112      	movs	r1, #18
   1c562:	3008      	adds	r0, #8
   1c564:	f7f9 fa24 	bl	159b0 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1c568:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1c56a:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1c56c:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   1c56e:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1c572:	3101      	adds	r1, #1
   1c574:	f7ff fbc0 	bl	1bcf8 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1c578:	6863      	ldr	r3, [r4, #4]
   1c57a:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1c57e:	899b      	ldrh	r3, [r3, #12]
   1c580:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1c582:	2812      	cmp	r0, #18
   1c584:	e7e3      	b.n	1c54e <find_info_cb+0x60>

0001c586 <attr_read_group_cb>:
	if (!data->rsp->len) {
   1c586:	68d0      	ldr	r0, [r2, #12]
   1c588:	3104      	adds	r1, #4
   1c58a:	7803      	ldrb	r3, [r0, #0]
   1c58c:	b913      	cbnz	r3, 1c594 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1c58e:	7001      	strb	r1, [r0, #0]
	return true;
   1c590:	2001      	movs	r0, #1
}
   1c592:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1c594:	428b      	cmp	r3, r1
   1c596:	d0fb      	beq.n	1c590 <attr_read_group_cb+0xa>
		data->group = NULL;
   1c598:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1c59a:	6891      	ldr	r1, [r2, #8]
   1c59c:	898b      	ldrh	r3, [r1, #12]
   1c59e:	3b04      	subs	r3, #4
   1c5a0:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1c5a2:	6110      	str	r0, [r2, #16]
		return false;
   1c5a4:	4770      	bx	lr

0001c5a6 <write_cb>:
{
   1c5a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c5a8:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1c5aa:	4601      	mov	r1, r0
{
   1c5ac:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1c5ae:	222a      	movs	r2, #42	; 0x2a
   1c5b0:	6820      	ldr	r0, [r4, #0]
   1c5b2:	f000 fda4 	bl	1d0fe <bt_gatt_check_perm>
   1c5b6:	4605      	mov	r5, r0
   1c5b8:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1c5ba:	bb00      	cbnz	r0, 1c5fe <write_cb+0x58>
	if (!data->req) {
   1c5bc:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1c5be:	4631      	mov	r1, r6
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1c5c0:	2b00      	cmp	r3, #0
   1c5c2:	bf14      	ite	ne
   1c5c4:	2300      	movne	r3, #0
   1c5c6:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1c5c8:	9301      	str	r3, [sp, #4]
   1c5ca:	8a63      	ldrh	r3, [r4, #18]
   1c5cc:	68b7      	ldr	r7, [r6, #8]
   1c5ce:	9300      	str	r3, [sp, #0]
   1c5d0:	68e2      	ldr	r2, [r4, #12]
   1c5d2:	8a23      	ldrh	r3, [r4, #16]
   1c5d4:	6820      	ldr	r0, [r4, #0]
   1c5d6:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1c5d8:	1e03      	subs	r3, r0, #0
   1c5da:	db05      	blt.n	1c5e8 <write_cb+0x42>
   1c5dc:	8a22      	ldrh	r2, [r4, #16]
   1c5de:	4293      	cmp	r3, r2
   1c5e0:	d10b      	bne.n	1c5fa <write_cb+0x54>
	data->err = 0U;
   1c5e2:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1c5e4:	2501      	movs	r5, #1
   1c5e6:	e005      	b.n	1c5f4 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1c5e8:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1c5ec:	d305      	bcc.n	1c5fa <write_cb+0x54>
		return -err;
   1c5ee:	425b      	negs	r3, r3
   1c5f0:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1c5f2:	7523      	strb	r3, [r4, #20]
}
   1c5f4:	4628      	mov	r0, r5
   1c5f6:	b003      	add	sp, #12
   1c5f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1c5fa:	230e      	movs	r3, #14
   1c5fc:	e7f9      	b.n	1c5f2 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1c5fe:	2500      	movs	r5, #0
   1c600:	e7f8      	b.n	1c5f4 <write_cb+0x4e>

0001c602 <att_chan_read>:
{
   1c602:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c606:	4680      	mov	r8, r0
   1c608:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1c60a:	4610      	mov	r0, r2
{
   1c60c:	4699      	mov	r9, r3
   1c60e:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1c610:	f7ff fefc 	bl	1c40c <net_buf_frags_len>
   1c614:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
{
   1c618:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1c61a:	4283      	cmp	r3, r0
   1c61c:	d97a      	bls.n	1c714 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1c61e:	f8d8 3008 	ldr.w	r3, [r8, #8]
	frag = net_buf_frag_last(buf);
   1c622:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   1c624:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1c626:	f7f9 f909 	bl	1583c <net_buf_frag_last>
	size_t len, total = 0;
   1c62a:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1c62e:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1c630:	4630      	mov	r0, r6
   1c632:	f7ff feeb 	bl	1c40c <net_buf_frags_len>
   1c636:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   1c63a:	f105 0708 	add.w	r7, r5, #8
   1c63e:	1a24      	subs	r4, r4, r0
   1c640:	4638      	mov	r0, r7
   1c642:	f000 fe8f 	bl	1d364 <net_buf_simple_tailroom>
   1c646:	4284      	cmp	r4, r0
   1c648:	d211      	bcs.n	1c66e <att_chan_read+0x6c>
   1c64a:	4630      	mov	r0, r6
   1c64c:	f7ff fede 	bl	1c40c <net_buf_frags_len>
   1c650:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1c654:	1a24      	subs	r4, r4, r0
		if (!len) {
   1c656:	bb34      	cbnz	r4, 1c6a6 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1c658:	79b0      	ldrb	r0, [r6, #6]
   1c65a:	f7f8 ff13 	bl	15484 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1c65e:	2200      	movs	r2, #0
   1c660:	2300      	movs	r3, #0
   1c662:	f000 fe59 	bl	1d318 <net_buf_alloc_fixed>
			if (!frag) {
   1c666:	4605      	mov	r5, r0
   1c668:	b930      	cbnz	r0, 1c678 <att_chan_read+0x76>
	return total;
   1c66a:	4657      	mov	r7, sl
   1c66c:	e02c      	b.n	1c6c8 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1c66e:	4638      	mov	r0, r7
   1c670:	f000 fe78 	bl	1d364 <net_buf_simple_tailroom>
   1c674:	4604      	mov	r4, r0
   1c676:	e7ee      	b.n	1c656 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1c678:	4601      	mov	r1, r0
   1c67a:	4630      	mov	r0, r6
   1c67c:	f7f9 f91e 	bl	158bc <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1c680:	4630      	mov	r0, r6
   1c682:	f7ff fec3 	bl	1c40c <net_buf_frags_len>
   1c686:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1c68a:	f105 0708 	add.w	r7, r5, #8
   1c68e:	1a24      	subs	r4, r4, r0
   1c690:	4638      	mov	r0, r7
   1c692:	f000 fe67 	bl	1d364 <net_buf_simple_tailroom>
   1c696:	4284      	cmp	r4, r0
   1c698:	d21a      	bcs.n	1c6d0 <att_chan_read+0xce>
   1c69a:	4630      	mov	r0, r6
   1c69c:	f7ff feb6 	bl	1c40c <net_buf_frags_len>
   1c6a0:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1c6a4:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1c6a6:	68a9      	ldr	r1, [r5, #8]
   1c6a8:	89aa      	ldrh	r2, [r5, #12]
   1c6aa:	f8db 7004 	ldr.w	r7, [fp, #4]
   1c6ae:	440a      	add	r2, r1
   1c6b0:	9803      	ldr	r0, [sp, #12]
   1c6b2:	4659      	mov	r1, fp
   1c6b4:	f8cd 9000 	str.w	r9, [sp]
   1c6b8:	b2a3      	uxth	r3, r4
   1c6ba:	47b8      	blx	r7
		if (read < 0) {
   1c6bc:	1e07      	subs	r7, r0, #0
   1c6be:	da0c      	bge.n	1c6da <att_chan_read+0xd8>
				return total;
   1c6c0:	f1ba 0f00 	cmp.w	sl, #0
   1c6c4:	bf18      	it	ne
   1c6c6:	4657      	movne	r7, sl
}
   1c6c8:	4638      	mov	r0, r7
   1c6ca:	b005      	add	sp, #20
   1c6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c6d0:	4638      	mov	r0, r7
   1c6d2:	f000 fe47 	bl	1d364 <net_buf_simple_tailroom>
   1c6d6:	4604      	mov	r4, r0
   1c6d8:	e7e5      	b.n	1c6a6 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1c6da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c6dc:	b993      	cbnz	r3, 1c704 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1c6de:	4639      	mov	r1, r7
   1c6e0:	f105 0008 	add.w	r0, r5, #8
   1c6e4:	f7f9 f964 	bl	159b0 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1c6e8:	4630      	mov	r0, r6
   1c6ea:	f7ff fe8f 	bl	1c40c <net_buf_frags_len>
   1c6ee:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   1c6f2:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1c6f4:	4283      	cmp	r3, r0
		total += read;
   1c6f6:	44ba      	add	sl, r7
		offset += read;
   1c6f8:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1c6fc:	d9b5      	bls.n	1c66a <att_chan_read+0x68>
   1c6fe:	42a7      	cmp	r7, r4
   1c700:	d096      	beq.n	1c630 <att_chan_read+0x2e>
   1c702:	e7b2      	b.n	1c66a <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1c704:	4639      	mov	r1, r7
   1c706:	4628      	mov	r0, r5
   1c708:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1c70a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c70c:	4798      	blx	r3
   1c70e:	2800      	cmp	r0, #0
   1c710:	d1e5      	bne.n	1c6de <att_chan_read+0xdc>
   1c712:	e7aa      	b.n	1c66a <att_chan_read+0x68>
		return 0;
   1c714:	2700      	movs	r7, #0
   1c716:	e7d7      	b.n	1c6c8 <att_chan_read+0xc6>

0001c718 <bt_att_chan_send>:
{
   1c718:	b570      	push	{r4, r5, r6, lr}
   1c71a:	4604      	mov	r4, r0
   1c71c:	460e      	mov	r6, r1
	if (!cb) {
   1c71e:	4615      	mov	r5, r2
   1c720:	b132      	cbz	r2, 1c730 <bt_att_chan_send+0x18>
	return chan_send(chan, buf, cb);
   1c722:	462a      	mov	r2, r5
   1c724:	4631      	mov	r1, r6
   1c726:	4620      	mov	r0, r4
}
   1c728:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return chan_send(chan, buf, cb);
   1c72c:	f7f5 be98 	b.w	12460 <chan_send>
	return z_impl_k_sem_take(sem, timeout);
   1c730:	2200      	movs	r2, #0
   1c732:	2300      	movs	r3, #0
   1c734:	f500 7090 	add.w	r0, r0, #288	; 0x120
   1c738:	f7fc fefe 	bl	19538 <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   1c73c:	2800      	cmp	r0, #0
   1c73e:	daf0      	bge.n	1c722 <bt_att_chan_send+0xa>
}
   1c740:	f06f 000a 	mvn.w	r0, #10
   1c744:	bd70      	pop	{r4, r5, r6, pc}

0001c746 <bt_att_chan_send_rsp>:
{
   1c746:	b538      	push	{r3, r4, r5, lr}
   1c748:	4604      	mov	r4, r0
   1c74a:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   1c74c:	f7ff ffe4 	bl	1c718 <bt_att_chan_send>
	if (err) {
   1c750:	b130      	cbz	r0, 1c760 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1c752:	4629      	mov	r1, r5
   1c754:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
}
   1c758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1c75c:	f7f8 bfe4 	b.w	15728 <net_buf_put>
}
   1c760:	bd38      	pop	{r3, r4, r5, pc}

0001c762 <process_queue>:
{
   1c762:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1c764:	2200      	movs	r2, #0
{
   1c766:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1c768:	2300      	movs	r3, #0
   1c76a:	4608      	mov	r0, r1
{
   1c76c:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1c76e:	f7f8 ff87 	bl	15680 <net_buf_get>
	if (buf) {
   1c772:	4605      	mov	r5, r0
   1c774:	b160      	cbz	r0, 1c790 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1c776:	4601      	mov	r1, r0
   1c778:	2200      	movs	r2, #0
   1c77a:	4620      	mov	r0, r4
   1c77c:	f7f5 fe70 	bl	12460 <chan_send>
		if (err) {
   1c780:	4604      	mov	r4, r0
   1c782:	b118      	cbz	r0, 1c78c <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1c784:	4629      	mov	r1, r5
   1c786:	4630      	mov	r0, r6
   1c788:	f001 fc3a 	bl	1e000 <k_queue_prepend>
}
   1c78c:	4620      	mov	r0, r4
   1c78e:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1c790:	f06f 0401 	mvn.w	r4, #1
   1c794:	e7fa      	b.n	1c78c <process_queue+0x2a>

0001c796 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c796:	2200      	movs	r2, #0
   1c798:	b510      	push	{r4, lr}
	return list->head;
   1c79a:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c79c:	b153      	cbz	r3, 1c7b4 <sys_slist_find_and_remove.isra.0+0x1e>
   1c79e:	428b      	cmp	r3, r1
   1c7a0:	d10e      	bne.n	1c7c0 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   1c7a2:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   1c7a4:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1c7a6:	b932      	cbnz	r2, 1c7b6 <sys_slist_find_and_remove.isra.0+0x20>
   1c7a8:	42a1      	cmp	r1, r4
	list->head = node;
   1c7aa:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c7ac:	d100      	bne.n	1c7b0 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1c7ae:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1c7b0:	2300      	movs	r3, #0
   1c7b2:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c7b4:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   1c7b6:	42a1      	cmp	r1, r4
	parent->next = child;
   1c7b8:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1c7ba:	bf08      	it	eq
   1c7bc:	6042      	streq	r2, [r0, #4]
}
   1c7be:	e7f7      	b.n	1c7b0 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1c7c0:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c7c2:	681b      	ldr	r3, [r3, #0]
   1c7c4:	e7ea      	b.n	1c79c <sys_slist_find_and_remove.isra.0+0x6>

0001c7c6 <att_exec_write_req>:
   1c7c6:	2006      	movs	r0, #6
   1c7c8:	4770      	bx	lr

0001c7ca <chan_req_send>:
{
   1c7ca:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1c7cc:	690e      	ldr	r6, [r1, #16]
{
   1c7ce:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1c7d0:	4630      	mov	r0, r6
   1c7d2:	f7ff fe1b 	bl	1c40c <net_buf_frags_len>
   1c7d6:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
{
   1c7da:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1c7dc:	4283      	cmp	r3, r0
   1c7de:	d317      	bcc.n	1c810 <chan_req_send+0x46>
	chan->req = req;
   1c7e0:	f8c5 10cc 	str.w	r1, [r5, #204]	; 0xcc
	state->offset = net_buf_simple_headroom(buf);
   1c7e4:	f106 0008 	add.w	r0, r6, #8
   1c7e8:	f000 fdb8 	bl	1d35c <net_buf_simple_headroom>
	state->len = buf->len;
   1c7ec:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   1c7ee:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   1c7f0:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   1c7f2:	6920      	ldr	r0, [r4, #16]
   1c7f4:	f7f9 f80a 	bl	1580c <net_buf_ref>
   1c7f8:	2200      	movs	r2, #0
   1c7fa:	4601      	mov	r1, r0
   1c7fc:	4628      	mov	r0, r5
   1c7fe:	f7f5 fe2f 	bl	12460 <chan_send>
	if (err) {
   1c802:	4605      	mov	r5, r0
   1c804:	b110      	cbz	r0, 1c80c <chan_req_send+0x42>
		net_buf_unref(req->buf);
   1c806:	6920      	ldr	r0, [r4, #16]
   1c808:	f7f8 ffbc 	bl	15784 <net_buf_unref>
}
   1c80c:	4628      	mov	r0, r5
   1c80e:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1c810:	f06f 0523 	mvn.w	r5, #35	; 0x23
   1c814:	e7fa      	b.n	1c80c <chan_req_send+0x42>

0001c816 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c816:	30c8      	adds	r0, #200	; 0xc8
   1c818:	e8d0 3fef 	ldaex	r3, [r0]
   1c81c:	f023 0301 	bic.w	r3, r3, #1
   1c820:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1c824:	2a00      	cmp	r2, #0
   1c826:	d1f7      	bne.n	1c818 <chan_rsp_sent+0x2>
}
   1c828:	4770      	bx	lr

0001c82a <chan_cfm_sent>:
   1c82a:	30c8      	adds	r0, #200	; 0xc8
   1c82c:	e8d0 3fef 	ldaex	r3, [r0]
   1c830:	f023 0302 	bic.w	r3, r3, #2
   1c834:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1c838:	2a00      	cmp	r2, #0
   1c83a:	d1f7      	bne.n	1c82c <chan_cfm_sent+0x2>
}
   1c83c:	4770      	bx	lr

0001c83e <read_cb>:
{
   1c83e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c842:	4606      	mov	r6, r0
	data->err = 0x00;
   1c844:	2700      	movs	r7, #0
	struct bt_att_chan *chan = data->chan;
   1c846:	f8d2 8000 	ldr.w	r8, [r2]
{
   1c84a:	4615      	mov	r5, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1c84c:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1c850:	4631      	mov	r1, r6
	data->err = 0x00;
   1c852:	7317      	strb	r7, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1c854:	2215      	movs	r2, #21
   1c856:	f000 fc52 	bl	1d0fe <bt_gatt_check_perm>
   1c85a:	4604      	mov	r4, r0
   1c85c:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1c85e:	b9a0      	cbnz	r0, 1c88a <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1c860:	e9cd 0000 	strd	r0, r0, [sp]
   1c864:	88ab      	ldrh	r3, [r5, #4]
   1c866:	4631      	mov	r1, r6
   1c868:	4640      	mov	r0, r8
   1c86a:	68aa      	ldr	r2, [r5, #8]
   1c86c:	f7ff fec9 	bl	1c602 <att_chan_read>
	if (ret < 0) {
   1c870:	1e03      	subs	r3, r0, #0
   1c872:	da0c      	bge.n	1c88e <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1c874:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1c878:	bf32      	itee	cc
   1c87a:	230e      	movcc	r3, #14
		return -err;
   1c87c:	425b      	negcs	r3, r3
   1c87e:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(ret);
   1c880:	732b      	strb	r3, [r5, #12]
}
   1c882:	4620      	mov	r0, r4
   1c884:	b002      	add	sp, #8
   1c886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1c88a:	463c      	mov	r4, r7
   1c88c:	e7f9      	b.n	1c882 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1c88e:	2401      	movs	r4, #1
   1c890:	e7f7      	b.n	1c882 <read_cb+0x44>

0001c892 <bt_att_sent>:
{
   1c892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1c894:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
{
   1c898:	4604      	mov	r4, r0
	struct bt_att *att = chan->att;
   1c89a:	f850 5c08 	ldr.w	r5, [r0, #-8]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1c89e:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1c8a2:	b10b      	cbz	r3, 1c8a8 <bt_att_sent+0x16>
		chan->sent(chan);
   1c8a4:	4638      	mov	r0, r7
   1c8a6:	4798      	blx	r3
   1c8a8:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   1c8ac:	e8d3 2fef 	ldaex	r2, [r3]
   1c8b0:	f022 0210 	bic.w	r2, r2, #16
   1c8b4:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1c8b8:	2900      	cmp	r1, #0
   1c8ba:	d1f7      	bne.n	1c8ac <bt_att_sent+0x1a>
	if (!att) {
   1c8bc:	b335      	cbz	r5, 1c90c <bt_att_sent+0x7a>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1c8be:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   1c8c2:	b98b      	cbnz	r3, 1c8e8 <bt_att_sent+0x56>
   1c8c4:	686b      	ldr	r3, [r5, #4]
   1c8c6:	b17b      	cbz	r3, 1c8e8 <bt_att_sent+0x56>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1c8c8:	1d28      	adds	r0, r5, #4
   1c8ca:	f7ff fd95 	bl	1c3f8 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1c8ce:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1c8d0:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1c8d2:	4638      	mov	r0, r7
   1c8d4:	f7ff ff79 	bl	1c7ca <chan_req_send>
   1c8d8:	2800      	cmp	r0, #0
   1c8da:	da17      	bge.n	1c90c <bt_att_sent+0x7a>
	parent->next = child;
   1c8dc:	686b      	ldr	r3, [r5, #4]
   1c8de:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c8e0:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1c8e2:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1c8e4:	b903      	cbnz	r3, 1c8e8 <bt_att_sent+0x56>
	list->tail = node;
   1c8e6:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   1c8e8:	4638      	mov	r0, r7
   1c8ea:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   1c8ee:	f7ff ff38 	bl	1c762 <process_queue>
	if (!err) {
   1c8f2:	b158      	cbz	r0, 1c90c <bt_att_sent+0x7a>
	err = process_queue(chan, &att->tx_queue);
   1c8f4:	4638      	mov	r0, r7
   1c8f6:	f105 010c 	add.w	r1, r5, #12
   1c8fa:	f7ff ff32 	bl	1c762 <process_queue>
	if (!err) {
   1c8fe:	b128      	cbz	r0, 1c90c <bt_att_sent+0x7a>
	z_impl_k_sem_give(sem);
   1c900:	f504 708c 	add.w	r0, r4, #280	; 0x118
}
   1c904:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1c908:	f7fc bdda 	b.w	194c0 <z_impl_k_sem_give>
   1c90c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c90e <att_req_send_process>:
{
   1c90e:	b570      	push	{r4, r5, r6, lr}
   1c910:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   1c912:	3004      	adds	r0, #4
   1c914:	f7ff fd70 	bl	1c3f8 <sys_slist_get>
	if (!node) {
   1c918:	4606      	mov	r6, r0
   1c91a:	b1c0      	cbz	r0, 1c94e <att_req_send_process+0x40>
	return list->head;
   1c91c:	6aab      	ldr	r3, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c91e:	b153      	cbz	r3, 1c936 <att_req_send_process+0x28>
   1c920:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   1c924:	d007      	beq.n	1c936 <att_req_send_process+0x28>
	return node->next;
   1c926:	681c      	ldr	r4, [r3, #0]
   1c928:	b10c      	cbz	r4, 1c92e <att_req_send_process+0x20>
   1c92a:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
		if (!chan->req) {
   1c92e:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   1c932:	b13b      	cbz	r3, 1c944 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c934:	b964      	cbnz	r4, 1c950 <att_req_send_process+0x42>
	parent->next = child;
   1c936:	686b      	ldr	r3, [r5, #4]
   1c938:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c93a:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1c93c:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1c93e:	b933      	cbnz	r3, 1c94e <att_req_send_process+0x40>
	list->tail = node;
   1c940:	60ae      	str	r6, [r5, #8]
}
   1c942:	e004      	b.n	1c94e <att_req_send_process+0x40>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1c944:	4631      	mov	r1, r6
   1c946:	f7f5 fdf7 	bl	12538 <bt_att_chan_req_send>
   1c94a:	2800      	cmp	r0, #0
   1c94c:	dbf2      	blt.n	1c934 <att_req_send_process+0x26>
}
   1c94e:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c950:	f514 739e 	adds.w	r3, r4, #316	; 0x13c
   1c954:	d004      	beq.n	1c960 <att_req_send_process+0x52>
	return node->next;
   1c956:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c95a:	b10b      	cbz	r3, 1c960 <att_req_send_process+0x52>
   1c95c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   1c960:	4620      	mov	r0, r4
   1c962:	461c      	mov	r4, r3
   1c964:	e7e3      	b.n	1c92e <att_req_send_process+0x20>

0001c966 <bt_att_status>:
{
   1c966:	b538      	push	{r3, r4, r5, lr}
   1c968:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c96a:	e8d1 3faf 	lda	r3, [r1]
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1c96e:	07db      	lsls	r3, r3, #31
   1c970:	d519      	bpl.n	1c9a6 <bt_att_status+0x40>
	if (!chan->att) {
   1c972:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1c976:	b1b0      	cbz	r0, 1c9a6 <bt_att_status+0x40>
	if (chan->req) {
   1c978:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   1c97c:	b99b      	cbnz	r3, 1c9a6 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   1c97e:	3004      	adds	r0, #4
   1c980:	f7ff fd3a 	bl	1c3f8 <sys_slist_get>
	if (!node) {
   1c984:	4604      	mov	r4, r0
   1c986:	b170      	cbz	r0, 1c9a6 <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1c988:	4601      	mov	r1, r0
   1c98a:	f1a5 0008 	sub.w	r0, r5, #8
   1c98e:	f7f5 fdd3 	bl	12538 <bt_att_chan_req_send>
   1c992:	2800      	cmp	r0, #0
   1c994:	da07      	bge.n	1c9a6 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   1c996:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   1c99a:	685a      	ldr	r2, [r3, #4]
   1c99c:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c99e:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1c9a0:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1c9a2:	b902      	cbnz	r2, 1c9a6 <bt_att_status+0x40>
	list->tail = node;
   1c9a4:	609c      	str	r4, [r3, #8]
}
   1c9a6:	bd38      	pop	{r3, r4, r5, pc}

0001c9a8 <att_write_req>:
{
   1c9a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c9aa:	460c      	mov	r4, r1
   1c9ac:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1c9ae:	f101 0008 	add.w	r0, r1, #8
   1c9b2:	f000 fccb 	bl	1d34c <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1c9b6:	89a2      	ldrh	r2, [r4, #12]
   1c9b8:	4603      	mov	r3, r0
   1c9ba:	9201      	str	r2, [sp, #4]
   1c9bc:	68a2      	ldr	r2, [r4, #8]
   1c9be:	2112      	movs	r1, #18
   1c9c0:	9200      	str	r2, [sp, #0]
   1c9c2:	4628      	mov	r0, r5
   1c9c4:	2213      	movs	r2, #19
   1c9c6:	f7f5 ff95 	bl	128f4 <att_write_rsp.constprop.0>
}
   1c9ca:	b003      	add	sp, #12
   1c9cc:	bd30      	pop	{r4, r5, pc}

0001c9ce <att_write_cmd>:
{
   1c9ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c9d0:	460c      	mov	r4, r1
   1c9d2:	4605      	mov	r5, r0
   1c9d4:	f101 0008 	add.w	r0, r1, #8
   1c9d8:	f000 fcb8 	bl	1d34c <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1c9dc:	89a2      	ldrh	r2, [r4, #12]
   1c9de:	4603      	mov	r3, r0
   1c9e0:	9201      	str	r2, [sp, #4]
   1c9e2:	68a2      	ldr	r2, [r4, #8]
   1c9e4:	4628      	mov	r0, r5
   1c9e6:	9200      	str	r2, [sp, #0]
   1c9e8:	2200      	movs	r2, #0
   1c9ea:	4611      	mov	r1, r2
   1c9ec:	f7f5 ff82 	bl	128f4 <att_write_rsp.constprop.0>
}
   1c9f0:	b003      	add	sp, #12
   1c9f2:	bd30      	pop	{r4, r5, pc}

0001c9f4 <att_read_blob_req>:
{
   1c9f4:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1c9f6:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1c9f8:	210c      	movs	r1, #12
   1c9fa:	8813      	ldrh	r3, [r2, #0]
   1c9fc:	8852      	ldrh	r2, [r2, #2]
   1c9fe:	9200      	str	r2, [sp, #0]
   1ca00:	220d      	movs	r2, #13
   1ca02:	f7f6 f8d3 	bl	12bac <att_read_rsp>
}
   1ca06:	b003      	add	sp, #12
   1ca08:	f85d fb04 	ldr.w	pc, [sp], #4

0001ca0c <att_read_req>:
{
   1ca0c:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1ca0e:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   1ca10:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1ca12:	210a      	movs	r1, #10
   1ca14:	881b      	ldrh	r3, [r3, #0]
   1ca16:	9200      	str	r2, [sp, #0]
   1ca18:	220b      	movs	r2, #11
   1ca1a:	f7f6 f8c7 	bl	12bac <att_read_rsp>
}
   1ca1e:	b003      	add	sp, #12
   1ca20:	f85d fb04 	ldr.w	pc, [sp], #4

0001ca24 <bt_att_init>:
	bt_gatt_init();
   1ca24:	f7f7 b8fe 	b.w	13c24 <bt_gatt_init>

0001ca28 <bt_att_get_mtu>:
{
   1ca28:	b508      	push	{r3, lr}
	att = att_get(conn);
   1ca2a:	f7f5 fb87 	bl	1213c <att_get>
	if (!att) {
   1ca2e:	b1d8      	cbz	r0, 1ca68 <bt_att_get_mtu+0x40>
	return list->head;
   1ca30:	6a80      	ldr	r0, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ca32:	b1c8      	cbz	r0, 1ca68 <bt_att_get_mtu+0x40>
   1ca34:	f5b0 719e 	subs.w	r1, r0, #316	; 0x13c
   1ca38:	d015      	beq.n	1ca66 <bt_att_get_mtu+0x3e>
	return node->next;
   1ca3a:	6803      	ldr	r3, [r0, #0]
   1ca3c:	b10b      	cbz	r3, 1ca42 <bt_att_get_mtu+0x1a>
   1ca3e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   1ca42:	2000      	movs	r0, #0
		if (chan->chan.tx.mtu > mtu) {
   1ca44:	f8b1 205e 	ldrh.w	r2, [r1, #94]	; 0x5e
   1ca48:	4290      	cmp	r0, r2
   1ca4a:	bf38      	it	cc
   1ca4c:	4610      	movcc	r0, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ca4e:	b15b      	cbz	r3, 1ca68 <bt_att_get_mtu+0x40>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ca50:	f513 729e 	adds.w	r2, r3, #316	; 0x13c
   1ca54:	d004      	beq.n	1ca60 <bt_att_get_mtu+0x38>
	return node->next;
   1ca56:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
   1ca5a:	b10a      	cbz	r2, 1ca60 <bt_att_get_mtu+0x38>
   1ca5c:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
{
   1ca60:	4619      	mov	r1, r3
   1ca62:	4613      	mov	r3, r2
   1ca64:	e7ee      	b.n	1ca44 <bt_att_get_mtu+0x1c>
		return 0;
   1ca66:	4608      	mov	r0, r1
}
   1ca68:	bd08      	pop	{r3, pc}

0001ca6a <att_req_destroy>:
{
   1ca6a:	b510      	push	{r4, lr}
   1ca6c:	4604      	mov	r4, r0
	if (req->buf) {
   1ca6e:	6900      	ldr	r0, [r0, #16]
   1ca70:	b108      	cbz	r0, 1ca76 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   1ca72:	f7f8 fe87 	bl	15784 <net_buf_unref>
	if (req->destroy) {
   1ca76:	68a3      	ldr	r3, [r4, #8]
   1ca78:	b10b      	cbz	r3, 1ca7e <att_req_destroy+0x14>
		req->destroy(req);
   1ca7a:	4620      	mov	r0, r4
   1ca7c:	4798      	blx	r3
	bt_att_req_free(req);
   1ca7e:	4620      	mov	r0, r4
}
   1ca80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   1ca84:	f7f6 ba30 	b.w	12ee8 <bt_att_req_free>

0001ca88 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1ca88:	898a      	ldrh	r2, [r1, #12]
   1ca8a:	2300      	movs	r3, #0
   1ca8c:	6889      	ldr	r1, [r1, #8]
   1ca8e:	f7f6 ba37 	b.w	12f00 <att_handle_rsp>

0001ca92 <att_handle_find_type_rsp>:
   1ca92:	f7ff bff9 	b.w	1ca88 <att_handle_find_info_rsp>

0001ca96 <att_handle_read_type_rsp>:
   1ca96:	f7ff bff7 	b.w	1ca88 <att_handle_find_info_rsp>

0001ca9a <att_handle_read_rsp>:
   1ca9a:	f7ff bff5 	b.w	1ca88 <att_handle_find_info_rsp>

0001ca9e <att_handle_read_blob_rsp>:
   1ca9e:	f7ff bff3 	b.w	1ca88 <att_handle_find_info_rsp>

0001caa2 <att_handle_read_mult_rsp>:
   1caa2:	f7ff bff1 	b.w	1ca88 <att_handle_find_info_rsp>

0001caa6 <att_handle_read_group_rsp>:
   1caa6:	f7ff bfef 	b.w	1ca88 <att_handle_find_info_rsp>

0001caaa <att_handle_write_rsp>:
   1caaa:	f7ff bfed 	b.w	1ca88 <att_handle_find_info_rsp>

0001caae <att_handle_prepare_write_rsp>:
   1caae:	f7ff bfeb 	b.w	1ca88 <att_handle_find_info_rsp>

0001cab2 <att_handle_exec_write_rsp>:
   1cab2:	f7ff bfe9 	b.w	1ca88 <att_handle_find_info_rsp>

0001cab6 <att_confirm>:
   1cab6:	f7ff bfe7 	b.w	1ca88 <att_handle_find_info_rsp>

0001caba <att_mtu_rsp>:
{
   1caba:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
   1cabc:	6889      	ldr	r1, [r1, #8]
{
   1cabe:	b410      	push	{r4}
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1cac0:	880c      	ldrh	r4, [r1, #0]
{
   1cac2:	4603      	mov	r3, r0
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1cac4:	2c16      	cmp	r4, #22
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1cac6:	bf89      	itett	hi
   1cac8:	2417      	movhi	r4, #23
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   1caca:	2200      	movls	r2, #0
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1cacc:	f8a3 4052 	strhhi.w	r4, [r3, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1cad0:	f8a3 405e 	strhhi.w	r4, [r3, #94]	; 0x5e
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   1cad4:	bf99      	ittee	ls
   1cad6:	2304      	movls	r3, #4
   1cad8:	4611      	movls	r1, r2
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1cada:	2300      	movhi	r3, #0
   1cadc:	8992      	ldrhhi	r2, [r2, #12]
}
   1cade:	bc10      	pop	{r4}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1cae0:	f7f6 ba0e 	b.w	12f00 <att_handle_rsp>

0001cae4 <att_chan_detach>:
{
   1cae4:	b538      	push	{r3, r4, r5, lr}
   1cae6:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1cae8:	6800      	ldr	r0, [r0, #0]
   1caea:	f504 719e 	add.w	r1, r4, #316	; 0x13c
   1caee:	3028      	adds	r0, #40	; 0x28
   1caf0:	f7ff fe51 	bl	1c796 <sys_slist_find_and_remove.isra.0>
		k_sem_give(&chan->tx_sem);
   1caf4:	f504 7590 	add.w	r5, r4, #288	; 0x120
   1caf8:	4628      	mov	r0, r5
   1cafa:	f7fc fce1 	bl	194c0 <z_impl_k_sem_give>
   1cafe:	4628      	mov	r0, r5
   1cb00:	f7fc fcde 	bl	194c0 <z_impl_k_sem_give>
   1cb04:	4628      	mov	r0, r5
   1cb06:	f7fc fcdb 	bl	194c0 <z_impl_k_sem_give>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1cb0a:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
   1cb0e:	2200      	movs	r2, #0
   1cb10:	2300      	movs	r3, #0
   1cb12:	4628      	mov	r0, r5
   1cb14:	f7f8 fdb4 	bl	15680 <net_buf_get>
   1cb18:	4602      	mov	r2, r0
   1cb1a:	b950      	cbnz	r0, 1cb32 <att_chan_detach+0x4e>
	if (chan->req) {
   1cb1c:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   1cb20:	b123      	cbz	r3, 1cb2c <att_chan_detach+0x48>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1cb22:	4601      	mov	r1, r0
   1cb24:	230e      	movs	r3, #14
   1cb26:	4620      	mov	r0, r4
   1cb28:	f7f6 f9ea 	bl	12f00 <att_handle_rsp>
	chan->att = NULL;
   1cb2c:	2300      	movs	r3, #0
   1cb2e:	6023      	str	r3, [r4, #0]
}
   1cb30:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   1cb32:	f7f8 fe27 	bl	15784 <net_buf_unref>
   1cb36:	e7ea      	b.n	1cb0e <att_chan_detach+0x2a>

0001cb38 <bt_att_disconnected>:
{
   1cb38:	b538      	push	{r3, r4, r5, lr}
   1cb3a:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   1cb3c:	f850 5d08 	ldr.w	r5, [r0, #-8]!
	att_chan_detach(att_chan);
   1cb40:	f7ff ffd0 	bl	1cae4 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   1cb44:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1cb46:	b93b      	cbnz	r3, 1cb58 <bt_att_disconnected+0x20>
	att_reset(att);
   1cb48:	4628      	mov	r0, r5
   1cb4a:	f7f6 fa37 	bl	12fbc <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1cb4e:	6820      	ldr	r0, [r4, #0]
}
   1cb50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_disconnected(ch->chan.conn);
   1cb54:	f7f8 bbc2 	b.w	152dc <bt_gatt_disconnected>
}
   1cb58:	bd38      	pop	{r3, r4, r5, pc}

0001cb5a <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   1cb5a:	6010      	str	r0, [r2, #0]
}
   1cb5c:	2000      	movs	r0, #0
   1cb5e:	4770      	bx	lr

0001cb60 <gatt_ccc_changed>:
{
   1cb60:	460b      	mov	r3, r1
   1cb62:	460a      	mov	r2, r1
   1cb64:	b430      	push	{r4, r5}
   1cb66:	f101 0464 	add.w	r4, r1, #100	; 0x64
	uint16_t value = 0x0000;
   1cb6a:	2100      	movs	r1, #0
		if (ccc->cfg[i].value > value) {
   1cb6c:	8915      	ldrh	r5, [r2, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1cb6e:	320a      	adds	r2, #10
   1cb70:	42a9      	cmp	r1, r5
   1cb72:	bf38      	it	cc
   1cb74:	4629      	movcc	r1, r5
   1cb76:	42a2      	cmp	r2, r4
   1cb78:	d1f8      	bne.n	1cb6c <gatt_ccc_changed+0xc>
	if (value != ccc->value) {
   1cb7a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
   1cb7e:	428a      	cmp	r2, r1
   1cb80:	d005      	beq.n	1cb8e <gatt_ccc_changed+0x2e>
		ccc->value = value;
   1cb82:	f8a3 1064 	strh.w	r1, [r3, #100]	; 0x64
		if (ccc->cfg_changed) {
   1cb86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1cb88:	b10b      	cbz	r3, 1cb8e <gatt_ccc_changed+0x2e>
}
   1cb8a:	bc30      	pop	{r4, r5}
			ccc->cfg_changed(attr, value);
   1cb8c:	4718      	bx	r3
}
   1cb8e:	bc30      	pop	{r4, r5}
   1cb90:	4770      	bx	lr

0001cb92 <gatt_indicate_rsp>:
{
   1cb92:	b510      	push	{r4, lr}
   1cb94:	9c02      	ldr	r4, [sp, #8]
   1cb96:	460a      	mov	r2, r1
	params->_ref--;
   1cb98:	7da3      	ldrb	r3, [r4, #22]
	params->func(conn, params, err);
   1cb9a:	4621      	mov	r1, r4
	params->_ref--;
   1cb9c:	3b01      	subs	r3, #1
   1cb9e:	75a3      	strb	r3, [r4, #22]
	params->func(conn, params, err);
   1cba0:	68a3      	ldr	r3, [r4, #8]
   1cba2:	4798      	blx	r3
	if (params->destroy && (params->_ref == 0)) {
   1cba4:	68e3      	ldr	r3, [r4, #12]
   1cba6:	b12b      	cbz	r3, 1cbb4 <gatt_indicate_rsp+0x22>
   1cba8:	7da2      	ldrb	r2, [r4, #22]
   1cbaa:	b91a      	cbnz	r2, 1cbb4 <gatt_indicate_rsp+0x22>
		params->destroy(params);
   1cbac:	4620      	mov	r0, r4
}
   1cbae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1cbb2:	4718      	bx	r3
}
   1cbb4:	bd10      	pop	{r4, pc}

0001cbb6 <match_uuid>:
	data->attr = attr;
   1cbb6:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1cbb8:	8091      	strh	r1, [r2, #4]
}
   1cbba:	2000      	movs	r0, #0
   1cbbc:	4770      	bx	lr

0001cbbe <ccc_set_cb>:
}
   1cbbe:	2000      	movs	r0, #0
   1cbc0:	4770      	bx	lr

0001cbc2 <gen_hash_m>:
{
   1cbc2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1cbc4:	6807      	ldr	r7, [r0, #0]
{
   1cbc6:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1cbc8:	783d      	ldrb	r5, [r7, #0]
{
   1cbca:	4614      	mov	r4, r2
   1cbcc:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1cbce:	b10d      	cbz	r5, 1cbd4 <gen_hash_m+0x12>
	switch (u16->val) {
   1cbd0:	2501      	movs	r5, #1
   1cbd2:	e014      	b.n	1cbfe <gen_hash_m+0x3c>
   1cbd4:	887b      	ldrh	r3, [r7, #2]
   1cbd6:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1cbda:	d004      	beq.n	1cbe6 <gen_hash_m+0x24>
   1cbdc:	d812      	bhi.n	1cc04 <gen_hash_m+0x42>
   1cbde:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1cbe2:	2b03      	cmp	r3, #3
   1cbe4:	d8f4      	bhi.n	1cbd0 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1cbe6:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1cbea:	2202      	movs	r2, #2
   1cbec:	4620      	mov	r0, r4
   1cbee:	f10d 010e 	add.w	r1, sp, #14
   1cbf2:	f7fe fcd5 	bl	1b5a0 <tc_cmac_update>
   1cbf6:	b9e0      	cbnz	r0, 1cc32 <gen_hash_m+0x70>
			state->err = -EINVAL;
   1cbf8:	f06f 0315 	mvn.w	r3, #21
   1cbfc:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1cbfe:	4628      	mov	r0, r5
   1cc00:	b009      	add	sp, #36	; 0x24
   1cc02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1cc04:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1cc08:	33ff      	adds	r3, #255	; 0xff
   1cc0a:	b29b      	uxth	r3, r3
   1cc0c:	2b04      	cmp	r3, #4
   1cc0e:	d8df      	bhi.n	1cbd0 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1cc10:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1cc14:	2202      	movs	r2, #2
   1cc16:	4620      	mov	r0, r4
   1cc18:	f10d 010e 	add.w	r1, sp, #14
   1cc1c:	f7fe fcc0 	bl	1b5a0 <tc_cmac_update>
   1cc20:	2800      	cmp	r0, #0
   1cc22:	d0e9      	beq.n	1cbf8 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1cc24:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1cc26:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   1cc28:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1cc2c:	f10d 010e 	add.w	r1, sp, #14
   1cc30:	e017      	b.n	1cc62 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   1cc32:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1cc34:	2202      	movs	r2, #2
   1cc36:	4620      	mov	r0, r4
   1cc38:	f10d 010e 	add.w	r1, sp, #14
		value = sys_cpu_to_le16(u16->val);
   1cc3c:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1cc40:	f7fe fcae 	bl	1b5a0 <tc_cmac_update>
   1cc44:	2800      	cmp	r0, #0
   1cc46:	d0d7      	beq.n	1cbf8 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1cc48:	2000      	movs	r0, #0
   1cc4a:	2310      	movs	r3, #16
   1cc4c:	4631      	mov	r1, r6
   1cc4e:	eb0d 0203 	add.w	r2, sp, r3
   1cc52:	6877      	ldr	r7, [r6, #4]
   1cc54:	9000      	str	r0, [sp, #0]
   1cc56:	47b8      	blx	r7
		if (len < 0) {
   1cc58:	1e02      	subs	r2, r0, #0
   1cc5a:	da01      	bge.n	1cc60 <gen_hash_m+0x9e>
			state->err = len;
   1cc5c:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1cc5e:	e7ce      	b.n	1cbfe <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1cc60:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1cc62:	4620      	mov	r0, r4
   1cc64:	f7fe fc9c 	bl	1b5a0 <tc_cmac_update>
   1cc68:	2800      	cmp	r0, #0
   1cc6a:	d1b1      	bne.n	1cbd0 <gen_hash_m+0xe>
   1cc6c:	e7c4      	b.n	1cbf8 <gen_hash_m+0x36>

0001cc6e <bt_addr_le_cmp>:
   1cc6e:	2207      	movs	r2, #7
   1cc70:	f7ff b831 	b.w	1bcd6 <memcmp>

0001cc74 <find_ccc_cfg>:
{
   1cc74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cc76:	4606      	mov	r6, r0
   1cc78:	1c4c      	adds	r4, r1, #1
   1cc7a:	f101 0565 	add.w	r5, r1, #101	; 0x65
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1cc7e:	1e67      	subs	r7, r4, #1
		if (conn) {
   1cc80:	b14e      	cbz	r6, 1cc96 <find_ccc_cfg+0x22>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1cc82:	4622      	mov	r2, r4
   1cc84:	4630      	mov	r0, r6
   1cc86:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   1cc8a:	f7ff fa90 	bl	1c1ae <bt_conn_is_peer_addr_le>
   1cc8e:	b158      	cbz	r0, 1cca8 <find_ccc_cfg+0x34>
}
   1cc90:	4638      	mov	r0, r7
   1cc92:	b003      	add	sp, #12
   1cc94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1cc96:	4669      	mov	r1, sp
   1cc98:	4620      	mov	r0, r4
   1cc9a:	9600      	str	r6, [sp, #0]
   1cc9c:	f8cd 6003 	str.w	r6, [sp, #3]
   1cca0:	f7ff ffe5 	bl	1cc6e <bt_addr_le_cmp>
   1cca4:	2800      	cmp	r0, #0
   1cca6:	d0f3      	beq.n	1cc90 <find_ccc_cfg+0x1c>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1cca8:	340a      	adds	r4, #10
   1ccaa:	42ac      	cmp	r4, r5
   1ccac:	d1e7      	bne.n	1cc7e <find_ccc_cfg+0xa>
	return NULL;
   1ccae:	2700      	movs	r7, #0
   1ccb0:	e7ee      	b.n	1cc90 <find_ccc_cfg+0x1c>

0001ccb2 <ccc_find_cfg>:
{
   1ccb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ccb6:	4604      	mov	r4, r0
   1ccb8:	460f      	mov	r7, r1
   1ccba:	4690      	mov	r8, r2
   1ccbc:	2500      	movs	r5, #0
   1ccbe:	1c46      	adds	r6, r0, #1
		if (id == ccc->cfg[i].id &&
   1ccc0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   1ccc4:	4543      	cmp	r3, r8
   1ccc6:	d107      	bne.n	1ccd8 <ccc_find_cfg+0x26>
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   1ccc8:	4639      	mov	r1, r7
   1ccca:	4630      	mov	r0, r6
   1cccc:	f7ff ffcf 	bl	1cc6e <bt_addr_le_cmp>
		if (id == ccc->cfg[i].id &&
   1ccd0:	b910      	cbnz	r0, 1ccd8 <ccc_find_cfg+0x26>
			return &ccc->cfg[i];
   1ccd2:	1960      	adds	r0, r4, r5
}
   1ccd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1ccd8:	350a      	adds	r5, #10
   1ccda:	2d64      	cmp	r5, #100	; 0x64
   1ccdc:	f106 060a 	add.w	r6, r6, #10
   1cce0:	d1ee      	bne.n	1ccc0 <ccc_find_cfg+0xe>
	return NULL;
   1cce2:	2000      	movs	r0, #0
   1cce4:	e7f6      	b.n	1ccd4 <ccc_find_cfg+0x22>

0001cce6 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1cce6:	2207      	movs	r2, #7
   1cce8:	f7ff b806 	b.w	1bcf8 <memcpy>

0001ccec <clear_ccc_cfg>:
{
   1ccec:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1ccee:	2500      	movs	r5, #0
{
   1ccf0:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1ccf2:	4669      	mov	r1, sp
   1ccf4:	3001      	adds	r0, #1
   1ccf6:	9500      	str	r5, [sp, #0]
   1ccf8:	f8cd 5003 	str.w	r5, [sp, #3]
   1ccfc:	f7ff fff3 	bl	1cce6 <bt_addr_le_copy>
	cfg->id = 0U;
   1cd00:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1cd02:	8125      	strh	r5, [r4, #8]
}
   1cd04:	b003      	add	sp, #12
   1cd06:	bd30      	pop	{r4, r5, pc}

0001cd08 <atomic_or>:
{
   1cd08:	4603      	mov	r3, r0
}
   1cd0a:	e8d3 0fef 	ldaex	r0, [r3]
   1cd0e:	ea40 0201 	orr.w	r2, r0, r1
   1cd12:	e8c3 2fec 	stlex	ip, r2, [r3]
   1cd16:	f1bc 0f00 	cmp.w	ip, #0
   1cd1a:	d1f6      	bne.n	1cd0a <atomic_or+0x2>
   1cd1c:	4770      	bx	lr

0001cd1e <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cd1e:	e8d0 0faf 	lda	r0, [r0]
}
   1cd22:	4770      	bx	lr

0001cd24 <gatt_read_mult_rsp>:
{
   1cd24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cd26:	9d08      	ldr	r5, [sp, #32]
   1cd28:	4606      	mov	r6, r0
	if (err || !length) {
   1cd2a:	460c      	mov	r4, r1
	params->func(conn, 0, params, pdu, length);
   1cd2c:	682f      	ldr	r7, [r5, #0]
	if (err || !length) {
   1cd2e:	b901      	cbnz	r1, 1cd32 <gatt_read_mult_rsp+0xe>
   1cd30:	b94b      	cbnz	r3, 1cd46 <gatt_read_mult_rsp+0x22>
		params->func(conn, err, params, NULL, 0);
   1cd32:	2300      	movs	r3, #0
   1cd34:	462a      	mov	r2, r5
   1cd36:	4621      	mov	r1, r4
   1cd38:	9308      	str	r3, [sp, #32]
	params->func(conn, 0, params, NULL, 0);
   1cd3a:	4630      	mov	r0, r6
   1cd3c:	46bc      	mov	ip, r7
}
   1cd3e:	b003      	add	sp, #12
   1cd40:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	params->func(conn, 0, params, NULL, 0);
   1cd44:	4760      	bx	ip
	params->func(conn, 0, params, pdu, length);
   1cd46:	9300      	str	r3, [sp, #0]
   1cd48:	4613      	mov	r3, r2
   1cd4a:	462a      	mov	r2, r5
   1cd4c:	47b8      	blx	r7
	params->func(conn, 0, params, NULL, 0);
   1cd4e:	9408      	str	r4, [sp, #32]
   1cd50:	4623      	mov	r3, r4
   1cd52:	462a      	mov	r2, r5
   1cd54:	4621      	mov	r1, r4
   1cd56:	682f      	ldr	r7, [r5, #0]
   1cd58:	e7ef      	b.n	1cd3a <gatt_read_mult_rsp+0x16>

0001cd5a <gatt_sub_remove.part.0>:
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1cd5a:	2300      	movs	r3, #0
static void gatt_sub_remove(struct bt_conn *conn, struct gatt_sub *sub,
   1cd5c:	b507      	push	{r0, r1, r2, lr}
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1cd5e:	3001      	adds	r0, #1
   1cd60:	4669      	mov	r1, sp
   1cd62:	9300      	str	r3, [sp, #0]
   1cd64:	f8cd 3003 	str.w	r3, [sp, #3]
   1cd68:	f7ff ffbd 	bl	1cce6 <bt_addr_le_copy>
}
   1cd6c:	b003      	add	sp, #12
   1cd6e:	f85d fb04 	ldr.w	pc, [sp], #4

0001cd72 <clear_cf_cfg>:
{
   1cd72:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1cd74:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1cd76:	2500      	movs	r5, #0
   1cd78:	4669      	mov	r1, sp
   1cd7a:	3001      	adds	r0, #1
   1cd7c:	9500      	str	r5, [sp, #0]
   1cd7e:	f8cd 5003 	str.w	r5, [sp, #3]
   1cd82:	f7ff ffb0 	bl	1cce6 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1cd86:	f104 0008 	add.w	r0, r4, #8
   1cd8a:	2201      	movs	r2, #1
   1cd8c:	4629      	mov	r1, r5
   1cd8e:	f7fe ffde 	bl	1bd4e <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1cd92:	340c      	adds	r4, #12
   1cd94:	e8d4 3fef 	ldaex	r3, [r4]
   1cd98:	e8c4 5fe2 	stlex	r2, r5, [r4]
   1cd9c:	2a00      	cmp	r2, #0
   1cd9e:	d1f9      	bne.n	1cd94 <clear_cf_cfg+0x22>
}
   1cda0:	b003      	add	sp, #12
   1cda2:	bd30      	pop	{r4, r5, pc}

0001cda4 <gatt_sub_remove>:
{
   1cda4:	b570      	push	{r4, r5, r6, lr}
   1cda6:	460c      	mov	r4, r1
	if (params) {
   1cda8:	4619      	mov	r1, r3
   1cdaa:	b16b      	cbz	r3, 1cdc8 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   1cdac:	f103 0614 	add.w	r6, r3, #20
	return list->tail;
   1cdb0:	68e5      	ldr	r5, [r4, #12]
	return node->next;
   1cdb2:	695b      	ldr	r3, [r3, #20]
Z_GENLIST_REMOVE(slist, snode)
   1cdb4:	b97a      	cbnz	r2, 1cdd6 <gatt_sub_remove+0x32>
   1cdb6:	42ae      	cmp	r6, r5
	list->head = node;
   1cdb8:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   1cdba:	d100      	bne.n	1cdbe <gatt_sub_remove+0x1a>
	list->tail = node;
   1cdbc:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   1cdbe:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   1cdc0:	680d      	ldr	r5, [r1, #0]
   1cdc2:	461a      	mov	r2, r3
   1cdc4:	614b      	str	r3, [r1, #20]
   1cdc6:	47a8      	blx	r5
	if (sys_slist_is_empty(&sub->list)) {
   1cdc8:	68a3      	ldr	r3, [r4, #8]
   1cdca:	b94b      	cbnz	r3, 1cde0 <gatt_sub_remove+0x3c>
   1cdcc:	4620      	mov	r0, r4
}
   1cdce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1cdd2:	f7ff bfc2 	b.w	1cd5a <gatt_sub_remove.part.0>
Z_GENLIST_REMOVE(slist, snode)
   1cdd6:	42ae      	cmp	r6, r5
	parent->next = child;
   1cdd8:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1cdda:	bf08      	it	eq
   1cddc:	60e2      	streq	r2, [r4, #12]
}
   1cdde:	e7ee      	b.n	1cdbe <gatt_sub_remove+0x1a>
   1cde0:	bd70      	pop	{r4, r5, r6, pc}

0001cde2 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1cde2:	2a02      	cmp	r2, #2
{
   1cde4:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1cde6:	d108      	bne.n	1cdfa <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1cde8:	2300      	movs	r3, #0
   1cdea:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1cdee:	461a      	mov	r2, r3
   1cdf0:	7a00      	ldrb	r0, [r0, #8]
   1cdf2:	f7f6 fb7d 	bl	134f0 <sc_save>
}
   1cdf6:	2002      	movs	r0, #2
   1cdf8:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1cdfa:	f7f6 fe2d 	bl	13a58 <sc_clear>
   1cdfe:	e7fa      	b.n	1cdf6 <sc_ccc_cfg_write+0x14>

0001ce00 <gatt_write_ccc_rsp>:
{
   1ce00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ce04:	4606      	mov	r6, r0
   1ce06:	460d      	mov	r5, r1
   1ce08:	9c06      	ldr	r4, [sp, #24]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ce0a:	f104 0310 	add.w	r3, r4, #16
   1ce0e:	e8d3 2fef 	ldaex	r2, [r3]
   1ce12:	f022 0204 	bic.w	r2, r2, #4
   1ce16:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1ce1a:	2900      	cmp	r1, #0
   1ce1c:	d1f7      	bne.n	1ce0e <gatt_write_ccc_rsp+0xe>
	if (err) {
   1ce1e:	b1dd      	cbz	r5, 1ce58 <gatt_write_ccc_rsp+0x58>
		sub = gatt_sub_find(conn);
   1ce20:	f7f6 fa4e 	bl	132c0 <gatt_sub_find>
		if (!sub) {
   1ce24:	4601      	mov	r1, r0
   1ce26:	b300      	cbz	r0, 1ce6a <gatt_write_ccc_rsp+0x6a>
	return list->head;
   1ce28:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ce2a:	b143      	cbz	r3, 1ce3e <gatt_write_ccc_rsp+0x3e>
	return node->next;
   1ce2c:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   1ce2e:	f104 0014 	add.w	r0, r4, #20
   1ce32:	4283      	cmp	r3, r0
   1ce34:	d10b      	bne.n	1ce4e <gatt_write_ccc_rsp+0x4e>
				gatt_sub_remove(conn, sub, tmp, params);
   1ce36:	4623      	mov	r3, r4
   1ce38:	4630      	mov	r0, r6
   1ce3a:	f7ff ffb3 	bl	1cda4 <gatt_sub_remove>
	if (params->write) {
   1ce3e:	6863      	ldr	r3, [r4, #4]
   1ce40:	b19b      	cbz	r3, 1ce6a <gatt_write_ccc_rsp+0x6a>
		params->write(conn, err, NULL);
   1ce42:	4629      	mov	r1, r5
   1ce44:	4630      	mov	r0, r6
}
   1ce46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   1ce4a:	2200      	movs	r2, #0
   1ce4c:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ce4e:	2a00      	cmp	r2, #0
   1ce50:	d0f5      	beq.n	1ce3e <gatt_write_ccc_rsp+0x3e>
	return node->next;
   1ce52:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ce54:	6812      	ldr	r2, [r2, #0]
   1ce56:	e7ec      	b.n	1ce32 <gatt_write_ccc_rsp+0x32>
	} else if (!params->value) {
   1ce58:	89a3      	ldrh	r3, [r4, #12]
   1ce5a:	2b00      	cmp	r3, #0
   1ce5c:	d1ef      	bne.n	1ce3e <gatt_write_ccc_rsp+0x3e>
		params->notify(conn, params, NULL, 0);
   1ce5e:	462b      	mov	r3, r5
   1ce60:	462a      	mov	r2, r5
   1ce62:	4621      	mov	r1, r4
   1ce64:	6827      	ldr	r7, [r4, #0]
   1ce66:	47b8      	blx	r7
   1ce68:	e7e9      	b.n	1ce3e <gatt_write_ccc_rsp+0x3e>
}
   1ce6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ce6e <read_ppcp>:
{
   1ce6e:	b513      	push	{r0, r1, r4, lr}
   1ce70:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   1ce72:	2218      	movs	r2, #24
   1ce74:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   1ce78:	2228      	movs	r2, #40	; 0x28
   1ce7a:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   1ce7e:	2200      	movs	r2, #0
   1ce80:	f8ad 2004 	strh.w	r2, [sp, #4]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1ce84:	222a      	movs	r2, #42	; 0x2a
{
   1ce86:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1ce8a:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1ce8e:	2908      	cmp	r1, #8
   1ce90:	d80b      	bhi.n	1ceaa <read_ppcp+0x3c>
	len = MIN(buf_len, value_len - offset);
   1ce92:	f1c1 0408 	rsb	r4, r1, #8
   1ce96:	429c      	cmp	r4, r3
   1ce98:	bfa8      	it	ge
   1ce9a:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1ce9c:	4469      	add	r1, sp
   1ce9e:	4622      	mov	r2, r4
   1cea0:	f7fe ff2a 	bl	1bcf8 <memcpy>
}
   1cea4:	4620      	mov	r0, r4
   1cea6:	b002      	add	sp, #8
   1cea8:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ceaa:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1ceae:	e7f9      	b.n	1cea4 <read_ppcp+0x36>

0001ceb0 <read_appearance>:
{
   1ceb0:	b513      	push	{r0, r1, r4, lr}
   1ceb2:	4610      	mov	r0, r2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1ceb4:	2200      	movs	r2, #0
{
   1ceb6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1ceba:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1cebe:	2902      	cmp	r1, #2
   1cec0:	d80d      	bhi.n	1cede <read_appearance+0x2e>
	len = MIN(buf_len, value_len - offset);
   1cec2:	f1c1 0402 	rsb	r4, r1, #2
   1cec6:	429c      	cmp	r4, r3
   1cec8:	bfa8      	it	ge
   1ceca:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1cecc:	f10d 0306 	add.w	r3, sp, #6
   1ced0:	4622      	mov	r2, r4
   1ced2:	4419      	add	r1, r3
   1ced4:	f7fe ff10 	bl	1bcf8 <memcpy>
}
   1ced8:	4620      	mov	r0, r4
   1ceda:	b002      	add	sp, #8
   1cedc:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cede:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1cee2:	e7f9      	b.n	1ced8 <read_appearance+0x28>

0001cee4 <read_name>:
{
   1cee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cee8:	4698      	mov	r8, r3
   1ceea:	4615      	mov	r5, r2
   1ceec:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	const char *name = bt_get_name();
   1cef0:	f7f3 fb70 	bl	105d4 <bt_get_name>
   1cef4:	4607      	mov	r7, r0
				 strlen(name));
   1cef6:	f7fe fec1 	bl	1bc7c <strlen>
	if (offset > value_len) {
   1cefa:	b283      	uxth	r3, r0
   1cefc:	42b3      	cmp	r3, r6
   1cefe:	d30c      	bcc.n	1cf1a <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1cf00:	1b9c      	subs	r4, r3, r6
   1cf02:	4544      	cmp	r4, r8
   1cf04:	bfa8      	it	ge
   1cf06:	4644      	movge	r4, r8
   1cf08:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1cf0a:	4622      	mov	r2, r4
   1cf0c:	4628      	mov	r0, r5
   1cf0e:	19b9      	adds	r1, r7, r6
   1cf10:	f7fe fef2 	bl	1bcf8 <memcpy>
}
   1cf14:	4620      	mov	r0, r4
   1cf16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cf1a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1cf1e:	e7f9      	b.n	1cf14 <read_name+0x30>

0001cf20 <cf_read>:
{
   1cf20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cf22:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1cf24:	2300      	movs	r3, #0
{
   1cf26:	4615      	mov	r5, r2
   1cf28:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1cf2c:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   1cf30:	f7f6 f988 	bl	13244 <find_cf_cfg>
	if (cfg) {
   1cf34:	b128      	cbz	r0, 1cf42 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1cf36:	f100 0108 	add.w	r1, r0, #8
   1cf3a:	2201      	movs	r2, #1
   1cf3c:	a801      	add	r0, sp, #4
   1cf3e:	f7fe fedb 	bl	1bcf8 <memcpy>
	if (offset > value_len) {
   1cf42:	2e01      	cmp	r6, #1
   1cf44:	d80d      	bhi.n	1cf62 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1cf46:	f1c6 0401 	rsb	r4, r6, #1
   1cf4a:	42bc      	cmp	r4, r7
   1cf4c:	bfa8      	it	ge
   1cf4e:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1cf50:	ab01      	add	r3, sp, #4
   1cf52:	4622      	mov	r2, r4
   1cf54:	4628      	mov	r0, r5
   1cf56:	1999      	adds	r1, r3, r6
   1cf58:	f7fe fece 	bl	1bcf8 <memcpy>
}
   1cf5c:	4620      	mov	r0, r4
   1cf5e:	b003      	add	sp, #12
   1cf60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cf62:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1cf66:	e7f9      	b.n	1cf5c <cf_read+0x3c>

0001cf68 <bt_gatt_attr_read_service>:
{
   1cf68:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1cf6a:	68c9      	ldr	r1, [r1, #12]
{
   1cf6c:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1cf6e:	780b      	ldrb	r3, [r1, #0]
{
   1cf70:	4610      	mov	r0, r2
   1cf72:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   1cf76:	b993      	cbnz	r3, 1cf9e <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1cf78:	884b      	ldrh	r3, [r1, #2]
	if (offset > value_len) {
   1cf7a:	2d02      	cmp	r5, #2
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1cf7c:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1cf80:	d819      	bhi.n	1cfb6 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1cf82:	f1c5 0202 	rsb	r2, r5, #2
   1cf86:	4294      	cmp	r4, r2
   1cf88:	bfa8      	it	ge
   1cf8a:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1cf8c:	4622      	mov	r2, r4
   1cf8e:	f10d 0306 	add.w	r3, sp, #6
   1cf92:	1959      	adds	r1, r3, r5
   1cf94:	f7fe feb0 	bl	1bcf8 <memcpy>
}
   1cf98:	4620      	mov	r0, r4
   1cf9a:	b003      	add	sp, #12
   1cf9c:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1cf9e:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1cfa0:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1cfa4:	d807      	bhi.n	1cfb6 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1cfa6:	f1c5 0210 	rsb	r2, r5, #16
   1cfaa:	4294      	cmp	r4, r2
   1cfac:	bfa8      	it	ge
   1cfae:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1cfb0:	4429      	add	r1, r5
   1cfb2:	4622      	mov	r2, r4
   1cfb4:	e7ee      	b.n	1cf94 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cfb6:	f06f 0406 	mvn.w	r4, #6
   1cfba:	e7ed      	b.n	1cf98 <bt_gatt_attr_read_service+0x30>

0001cfbc <bt_gatt_attr_read_ccc>:
{
   1cfbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1cfbe:	68c9      	ldr	r1, [r1, #12]
{
   1cfc0:	4615      	mov	r5, r2
   1cfc2:	461f      	mov	r7, r3
   1cfc4:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	cfg = find_ccc_cfg(conn, ccc);
   1cfc8:	f7ff fe54 	bl	1cc74 <find_ccc_cfg>
	if (cfg) {
   1cfcc:	b100      	cbz	r0, 1cfd0 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1cfce:	8900      	ldrh	r0, [r0, #8]
	if (offset > value_len) {
   1cfd0:	2e02      	cmp	r6, #2
   1cfd2:	f8ad 0006 	strh.w	r0, [sp, #6]
   1cfd6:	d80e      	bhi.n	1cff6 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1cfd8:	f1c6 0402 	rsb	r4, r6, #2
   1cfdc:	42bc      	cmp	r4, r7
   1cfde:	bfa8      	it	ge
   1cfe0:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1cfe2:	f10d 0306 	add.w	r3, sp, #6
   1cfe6:	4622      	mov	r2, r4
   1cfe8:	4628      	mov	r0, r5
   1cfea:	1999      	adds	r1, r3, r6
   1cfec:	f7fe fe84 	bl	1bcf8 <memcpy>
}
   1cff0:	4620      	mov	r0, r4
   1cff2:	b003      	add	sp, #12
   1cff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cff6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1cffa:	e7f9      	b.n	1cff0 <bt_gatt_attr_read_ccc+0x34>

0001cffc <sc_restore_rsp>:
{
   1cffc:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1cffe:	f7f6 f921 	bl	13244 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1d002:	b140      	cbz	r0, 1d016 <sc_restore_rsp+0x1a>
   1d004:	7a03      	ldrb	r3, [r0, #8]
   1d006:	07db      	lsls	r3, r3, #31
   1d008:	d505      	bpl.n	1d016 <sc_restore_rsp+0x1a>
}
   1d00a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1d00e:	2101      	movs	r1, #1
   1d010:	300c      	adds	r0, #12
   1d012:	f7ff be79 	b.w	1cd08 <atomic_or>
   1d016:	bd08      	pop	{r3, pc}

0001d018 <bt_gatt_attr_read>:
{
   1d018:	b538      	push	{r3, r4, r5, lr}
   1d01a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1d01e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1d022:	4610      	mov	r0, r2
	if (offset > value_len) {
   1d024:	42a9      	cmp	r1, r5
   1d026:	d80b      	bhi.n	1d040 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   1d028:	1a6d      	subs	r5, r5, r1
   1d02a:	429d      	cmp	r5, r3
   1d02c:	bfa8      	it	ge
   1d02e:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1d030:	9b05      	ldr	r3, [sp, #20]
   1d032:	b2ad      	uxth	r5, r5
   1d034:	462a      	mov	r2, r5
   1d036:	4419      	add	r1, r3
   1d038:	f7fe fe5e 	bl	1bcf8 <memcpy>
}
   1d03c:	4628      	mov	r0, r5
   1d03e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d040:	f06f 0506 	mvn.w	r5, #6
   1d044:	e7fa      	b.n	1d03c <bt_gatt_attr_read+0x24>

0001d046 <bt_gatt_attr_value_handle>:
{
   1d046:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1d048:	4604      	mov	r4, r0
   1d04a:	b910      	cbnz	r0, 1d052 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1d04c:	2000      	movs	r0, #0
}
   1d04e:	b002      	add	sp, #8
   1d050:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1d052:	2300      	movs	r3, #0
   1d054:	f88d 3004 	strb.w	r3, [sp, #4]
   1d058:	f642 0303 	movw	r3, #10243	; 0x2803
   1d05c:	6800      	ldr	r0, [r0, #0]
   1d05e:	a901      	add	r1, sp, #4
   1d060:	f8ad 3006 	strh.w	r3, [sp, #6]
   1d064:	f7fe febd 	bl	1bde2 <bt_uuid_cmp>
   1d068:	2800      	cmp	r0, #0
   1d06a:	d1ef      	bne.n	1d04c <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1d06c:	68e3      	ldr	r3, [r4, #12]
   1d06e:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1d070:	2800      	cmp	r0, #0
   1d072:	d1ec      	bne.n	1d04e <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1d074:	4620      	mov	r0, r4
   1d076:	f7f6 fe3d 	bl	13cf4 <bt_gatt_attr_get_handle>
   1d07a:	3001      	adds	r0, #1
   1d07c:	b280      	uxth	r0, r0
	return handle;
   1d07e:	e7e6      	b.n	1d04e <bt_gatt_attr_value_handle+0x8>

0001d080 <bt_gatt_attr_read_chrc>:
{
   1d080:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1d082:	68cf      	ldr	r7, [r1, #12]
{
   1d084:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1d086:	79bb      	ldrb	r3, [r7, #6]
{
   1d088:	b087      	sub	sp, #28
   1d08a:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   1d08c:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1d090:	4615      	mov	r5, r2
   1d092:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1d096:	f7ff ffd6 	bl	1d046 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1d09a:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1d09c:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1d0a0:	780b      	ldrb	r3, [r1, #0]
   1d0a2:	b99b      	cbnz	r3, 1d0cc <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1d0a4:	884b      	ldrh	r3, [r1, #2]
		value_len += 2U;
   1d0a6:	2105      	movs	r1, #5
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1d0a8:	f8ad 3007 	strh.w	r3, [sp, #7]
	if (offset > value_len) {
   1d0ac:	42b1      	cmp	r1, r6
   1d0ae:	d315      	bcc.n	1d0dc <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1d0b0:	1b89      	subs	r1, r1, r6
   1d0b2:	42a1      	cmp	r1, r4
   1d0b4:	bfa8      	it	ge
   1d0b6:	4621      	movge	r1, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1d0b8:	ab01      	add	r3, sp, #4
   1d0ba:	b28c      	uxth	r4, r1
   1d0bc:	4622      	mov	r2, r4
   1d0be:	4628      	mov	r0, r5
   1d0c0:	1999      	adds	r1, r3, r6
   1d0c2:	f7fe fe19 	bl	1bcf8 <memcpy>
}
   1d0c6:	4620      	mov	r0, r4
   1d0c8:	b007      	add	sp, #28
   1d0ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1d0cc:	3101      	adds	r1, #1
   1d0ce:	2210      	movs	r2, #16
   1d0d0:	f10d 0007 	add.w	r0, sp, #7
   1d0d4:	f7fe fe10 	bl	1bcf8 <memcpy>
		value_len += 16U;
   1d0d8:	2113      	movs	r1, #19
   1d0da:	e7e7      	b.n	1d0ac <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d0dc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1d0e0:	e7f1      	b.n	1d0c6 <bt_gatt_attr_read_chrc+0x46>

0001d0e2 <bt_gatt_foreach_attr>:
{
   1d0e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1d0e4:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1d0e8:	2300      	movs	r3, #0
   1d0ea:	461a      	mov	r2, r3
   1d0ec:	9300      	str	r3, [sp, #0]
   1d0ee:	f7f6 fe45 	bl	13d7c <bt_gatt_foreach_attr_type>
}
   1d0f2:	b005      	add	sp, #20
   1d0f4:	f85d fb04 	ldr.w	pc, [sp], #4

0001d0f8 <db_hash_process>:
	db_hash_gen(true);
   1d0f8:	2001      	movs	r0, #1
   1d0fa:	f7f6 beab 	b.w	13e54 <db_hash_gen>

0001d0fe <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   1d0fe:	07d3      	lsls	r3, r2, #31
{
   1d100:	b510      	push	{r4, lr}
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1d102:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1d104:	d504      	bpl.n	1d110 <bt_gatt_check_perm+0x12>
   1d106:	f014 0f15 	tst.w	r4, #21
   1d10a:	d017      	beq.n	1d13c <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1d10c:	684b      	ldr	r3, [r1, #4]
   1d10e:	b1ab      	cbz	r3, 1d13c <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1d110:	0793      	lsls	r3, r2, #30
   1d112:	d504      	bpl.n	1d11e <bt_gatt_check_perm+0x20>
   1d114:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   1d118:	d012      	beq.n	1d140 <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1d11a:	688b      	ldr	r3, [r1, #8]
   1d11c:	b183      	cbz	r3, 1d140 <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   1d11e:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1d120:	f014 0f30 	tst.w	r4, #48	; 0x30
   1d124:	d104      	bne.n	1d130 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1d126:	f014 000c 	ands.w	r0, r4, #12
   1d12a:	bf18      	it	ne
   1d12c:	200f      	movne	r0, #15
}
   1d12e:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1d130:	f7ff f832 	bl	1c198 <bt_conn_get_security>
   1d134:	2802      	cmp	r0, #2
   1d136:	d8f6      	bhi.n	1d126 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   1d138:	2005      	movs	r0, #5
   1d13a:	e7f8      	b.n	1d12e <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1d13c:	2002      	movs	r0, #2
   1d13e:	e7f6      	b.n	1d12e <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1d140:	2003      	movs	r0, #3
   1d142:	e7f4      	b.n	1d12e <bt_gatt_check_perm+0x30>

0001d144 <gatt_discover_next>:
{
   1d144:	b570      	push	{r4, r5, r6, lr}
   1d146:	4605      	mov	r5, r0
   1d148:	4614      	mov	r4, r2
	if (!last_handle)
   1d14a:	b929      	cbnz	r1, 1d158 <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   1d14c:	4621      	mov	r1, r4
   1d14e:	4628      	mov	r0, r5
   1d150:	f7f7 f9d8 	bl	14504 <bt_gatt_discover>
   1d154:	b928      	cbnz	r0, 1d162 <gatt_discover_next+0x1e>
}
   1d156:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   1d158:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1d15c:	4291      	cmp	r1, r2
   1d15e:	d107      	bne.n	1d170 <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   1d160:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   1d162:	4622      	mov	r2, r4
   1d164:	4628      	mov	r0, r5
   1d166:	6863      	ldr	r3, [r4, #4]
   1d168:	2100      	movs	r1, #0
}
   1d16a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   1d16e:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   1d170:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   1d172:	1c4b      	adds	r3, r1, #1
   1d174:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   1d176:	429a      	cmp	r2, r3
		params->start_handle++;
   1d178:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   1d17a:	d2e7      	bcs.n	1d14c <gatt_discover_next+0x8>
   1d17c:	e7f1      	b.n	1d162 <gatt_discover_next+0x1e>

0001d17e <gatt_find_type_rsp>:
{
   1d17e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d182:	b088      	sub	sp, #32
   1d184:	4607      	mov	r7, r0
   1d186:	4614      	mov	r4, r2
   1d188:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   1d18c:	b911      	cbnz	r1, 1d194 <gatt_find_type_rsp+0x16>
   1d18e:	f013 0803 	ands.w	r8, r3, #3
   1d192:	d008      	beq.n	1d1a6 <gatt_find_type_rsp+0x28>
	params->func(conn, NULL, params);
   1d194:	464a      	mov	r2, r9
   1d196:	2100      	movs	r1, #0
   1d198:	4638      	mov	r0, r7
   1d19a:	f8d9 3004 	ldr.w	r3, [r9, #4]
}
   1d19e:	b008      	add	sp, #32
   1d1a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	params->func(conn, NULL, params);
   1d1a4:	4718      	bx	r3
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1d1a6:	4646      	mov	r6, r8
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1d1a8:	f642 0a01 	movw	sl, #10241	; 0x2801
   1d1ac:	f3c3 0387 	ubfx	r3, r3, #2, #8
   1d1b0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
	for (uint8_t i = 0U; i < count; i++) {
   1d1b4:	42ac      	cmp	r4, r5
   1d1b6:	d107      	bne.n	1d1c8 <gatt_find_type_rsp+0x4a>
	gatt_discover_next(conn, end_handle, params);
   1d1b8:	464a      	mov	r2, r9
   1d1ba:	4641      	mov	r1, r8
   1d1bc:	4638      	mov	r0, r7
}
   1d1be:	b008      	add	sp, #32
   1d1c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gatt_discover_next(conn, end_handle, params);
   1d1c4:	f7ff bfbe 	b.w	1d144 <gatt_discover_next>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   1d1c8:	f899 1010 	ldrb.w	r1, [r9, #16]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   1d1cc:	8863      	ldrh	r3, [r4, #2]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1d1ce:	2900      	cmp	r1, #0
   1d1d0:	bf0c      	ite	eq
   1d1d2:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
   1d1d6:	4651      	movne	r1, sl
		value.end_handle = end_handle;
   1d1d8:	f8ad 3008 	strh.w	r3, [sp, #8]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   1d1dc:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   1d1e0:	f8d9 3000 	ldr.w	r3, [r9]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   1d1e4:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   1d1e6:	9301      	str	r3, [sp, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1d1e8:	ab01      	add	r3, sp, #4
   1d1ea:	f8ad 1002 	strh.w	r1, [sp, #2]
   1d1ee:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   1d1f0:	f8ad 201c 	strh.w	r2, [sp, #28]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d1f4:	4638      	mov	r0, r7
   1d1f6:	464a      	mov	r2, r9
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1d1f8:	e9cd 6604 	strd	r6, r6, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d1fc:	f8d9 3004 	ldr.w	r3, [r9, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1d200:	f88d 6000 	strb.w	r6, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1d204:	f8cd d00c 	str.w	sp, [sp, #12]
   1d208:	f88d 601e 	strb.w	r6, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d20c:	a903      	add	r1, sp, #12
   1d20e:	4798      	blx	r3
   1d210:	3404      	adds	r4, #4
   1d212:	2800      	cmp	r0, #0
   1d214:	d1ce      	bne.n	1d1b4 <gatt_find_type_rsp+0x36>
}
   1d216:	b008      	add	sp, #32
   1d218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001d21c <bt_gatt_notification>:
{
   1d21c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d220:	4607      	mov	r7, r0
   1d222:	4688      	mov	r8, r1
   1d224:	4691      	mov	r9, r2
   1d226:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   1d228:	f7f6 f84a 	bl	132c0 <gatt_sub_find>
	if (!sub) {
   1d22c:	b1f8      	cbz	r0, 1d26e <bt_gatt_notification+0x52>
	return list->head;
   1d22e:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1d230:	b1eb      	cbz	r3, 1d26e <bt_gatt_notification+0x52>
   1d232:	f1b3 0614 	subs.w	r6, r3, #20
   1d236:	d01a      	beq.n	1d26e <bt_gatt_notification+0x52>
	return node->next;
   1d238:	681c      	ldr	r4, [r3, #0]
   1d23a:	b104      	cbz	r4, 1d23e <bt_gatt_notification+0x22>
   1d23c:	3c14      	subs	r4, #20
		if (handle != params->value_handle) {
   1d23e:	8933      	ldrh	r3, [r6, #8]
   1d240:	4543      	cmp	r3, r8
   1d242:	d10a      	bne.n	1d25a <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
   1d244:	4653      	mov	r3, sl
   1d246:	464a      	mov	r2, r9
   1d248:	4631      	mov	r1, r6
   1d24a:	4638      	mov	r0, r7
   1d24c:	6835      	ldr	r5, [r6, #0]
   1d24e:	47a8      	blx	r5
   1d250:	b918      	cbnz	r0, 1d25a <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
   1d252:	4631      	mov	r1, r6
   1d254:	4638      	mov	r0, r7
   1d256:	f7f7 fea5 	bl	14fa4 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1d25a:	b144      	cbz	r4, 1d26e <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d25c:	f114 0514 	adds.w	r5, r4, #20
   1d260:	d002      	beq.n	1d268 <bt_gatt_notification+0x4c>
	return node->next;
   1d262:	6965      	ldr	r5, [r4, #20]
   1d264:	b105      	cbz	r5, 1d268 <bt_gatt_notification+0x4c>
   1d266:	3d14      	subs	r5, #20
{
   1d268:	4626      	mov	r6, r4
   1d26a:	462c      	mov	r4, r5
   1d26c:	e7e7      	b.n	1d23e <bt_gatt_notification+0x22>
}
   1d26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001d272 <bt_gatt_change_aware>:
{
   1d272:	b510      	push	{r4, lr}
   1d274:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1d276:	f7f5 ffe5 	bl	13244 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1d27a:	b910      	cbnz	r0, 1d282 <bt_gatt_change_aware+0x10>
		return true;
   1d27c:	2401      	movs	r4, #1
}
   1d27e:	4620      	mov	r0, r4
   1d280:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1d282:	7a03      	ldrb	r3, [r0, #8]
   1d284:	07db      	lsls	r3, r3, #31
   1d286:	d5f9      	bpl.n	1d27c <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1d288:	f100 030c 	add.w	r3, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1d28c:	4618      	mov	r0, r3
   1d28e:	f7ff fd46 	bl	1cd1e <atomic_get>
   1d292:	07c1      	lsls	r1, r0, #31
   1d294:	d4f2      	bmi.n	1d27c <bt_gatt_change_aware+0xa>
	if (!req) {
   1d296:	2c00      	cmp	r4, #0
   1d298:	d0f1      	beq.n	1d27e <bt_gatt_change_aware+0xc>
   1d29a:	4618      	mov	r0, r3
   1d29c:	f7ff fd3f 	bl	1cd1e <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1d2a0:	0782      	lsls	r2, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1d2a2:	f3c0 0440 	ubfx	r4, r0, #1, #1
   1d2a6:	d50c      	bpl.n	1d2c2 <bt_gatt_change_aware+0x50>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d2a8:	e8d3 2fef 	ldaex	r2, [r3]
   1d2ac:	f022 0202 	bic.w	r2, r2, #2
   1d2b0:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1d2b4:	2900      	cmp	r1, #0
   1d2b6:	d1f7      	bne.n	1d2a8 <bt_gatt_change_aware+0x36>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1d2b8:	2101      	movs	r1, #1
   1d2ba:	4618      	mov	r0, r3
   1d2bc:	f7ff fd24 	bl	1cd08 <atomic_or>
}
   1d2c0:	e7dd      	b.n	1d27e <bt_gatt_change_aware+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1d2c2:	2102      	movs	r1, #2
   1d2c4:	e7f9      	b.n	1d2ba <bt_gatt_change_aware+0x48>

0001d2c6 <bt_smp_recv>:
{
   1d2c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1d2c8:	2100      	movs	r1, #0
   1d2ca:	f04f 32ff 	mov.w	r2, #4294967295
   1d2ce:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   1d2d2:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1d2d4:	4608      	mov	r0, r1
   1d2d6:	f7ff f83b 	bl	1c350 <bt_l2cap_create_pdu_timeout>
	return net_buf_simple_add(&buf->b, len);
   1d2da:	f100 0608 	add.w	r6, r0, #8
   1d2de:	4604      	mov	r4, r0
   1d2e0:	2101      	movs	r1, #1
   1d2e2:	4630      	mov	r0, r6
   1d2e4:	f7f8 fb64 	bl	159b0 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1d2e8:	2505      	movs	r5, #5
   1d2ea:	2101      	movs	r1, #1
   1d2ec:	7005      	strb	r5, [r0, #0]
   1d2ee:	4630      	mov	r0, r6
   1d2f0:	f7f8 fb5e 	bl	159b0 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1d2f4:	7005      	strb	r5, [r0, #0]
   1d2f6:	2500      	movs	r5, #0
   1d2f8:	4622      	mov	r2, r4
   1d2fa:	462b      	mov	r3, r5
   1d2fc:	2106      	movs	r1, #6
   1d2fe:	4638      	mov	r0, r7
   1d300:	9500      	str	r5, [sp, #0]
   1d302:	f7ff f828 	bl	1c356 <bt_l2cap_send_cb>
}
   1d306:	4628      	mov	r0, r5
   1d308:	b003      	add	sp, #12
   1d30a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d30c <bt_smp_sign>:
   1d30c:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1d310:	4770      	bx	lr

0001d312 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1d312:	2000      	movs	r0, #0
   1d314:	4770      	bx	lr

0001d316 <fixed_data_unref>:
}
   1d316:	4770      	bx	lr

0001d318 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d318:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1d31a:	6849      	ldr	r1, [r1, #4]
   1d31c:	6809      	ldr	r1, [r1, #0]
   1d31e:	f7f8 b903 	b.w	15528 <net_buf_alloc_len>

0001d322 <net_buf_simple_init_with_data>:
	buf->size  = size;
   1d322:	b292      	uxth	r2, r2
	buf->__buf = data;
   1d324:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   1d326:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   1d328:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   1d32a:	8082      	strh	r2, [r0, #4]
}
   1d32c:	4770      	bx	lr

0001d32e <net_buf_simple_push_u8>:
{
   1d32e:	b510      	push	{r4, lr}
   1d330:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   1d332:	2101      	movs	r1, #1
   1d334:	f7f8 fae4 	bl	15900 <net_buf_simple_push>
	*data = val;
   1d338:	7004      	strb	r4, [r0, #0]
}
   1d33a:	bd10      	pop	{r4, pc}

0001d33c <net_buf_simple_pull_u8>:
{
   1d33c:	b510      	push	{r4, lr}
	val = buf->data[0];
   1d33e:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   1d340:	2101      	movs	r1, #1
	val = buf->data[0];
   1d342:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1d344:	f7f8 fafa 	bl	1593c <net_buf_simple_pull>
}
   1d348:	4620      	mov	r0, r4
   1d34a:	bd10      	pop	{r4, pc}

0001d34c <net_buf_simple_pull_le16>:
{
   1d34c:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1d34e:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1d350:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1d352:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1d354:	f7f8 faf2 	bl	1593c <net_buf_simple_pull>
}
   1d358:	4620      	mov	r0, r4
   1d35a:	bd10      	pop	{r4, pc}

0001d35c <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   1d35c:	6802      	ldr	r2, [r0, #0]
   1d35e:	6880      	ldr	r0, [r0, #8]
}
   1d360:	1a10      	subs	r0, r2, r0
   1d362:	4770      	bx	lr

0001d364 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1d364:	8883      	ldrh	r3, [r0, #4]
   1d366:	88c2      	ldrh	r2, [r0, #6]
   1d368:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1d36a:	6803      	ldr	r3, [r0, #0]
   1d36c:	6880      	ldr	r0, [r0, #8]
   1d36e:	1a18      	subs	r0, r3, r0
}
   1d370:	1a10      	subs	r0, r2, r0
   1d372:	4770      	bx	lr

0001d374 <net_buf_simple_add_mem>:
{
   1d374:	b538      	push	{r3, r4, r5, lr}
   1d376:	460d      	mov	r5, r1
   1d378:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1d37a:	4611      	mov	r1, r2
   1d37c:	f7f8 fb18 	bl	159b0 <net_buf_simple_add>
   1d380:	4622      	mov	r2, r4
   1d382:	4629      	mov	r1, r5
}
   1d384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1d388:	f7fe bcb6 	b.w	1bcf8 <memcpy>

0001d38c <net_buf_simple_add_u8>:
{
   1d38c:	b510      	push	{r4, lr}
   1d38e:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   1d390:	2101      	movs	r1, #1
   1d392:	f7f8 fb0d 	bl	159b0 <net_buf_simple_add>
	*u8 = val;
   1d396:	7004      	strb	r4, [r0, #0]
}
   1d398:	bd10      	pop	{r4, pc}

0001d39a <net_buf_simple_add_le16>:
{
   1d39a:	b510      	push	{r4, lr}
   1d39c:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   1d39e:	2102      	movs	r1, #2
   1d3a0:	f7f8 fb06 	bl	159b0 <net_buf_simple_add>
	dst[0] = val;
   1d3a4:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   1d3a6:	0a24      	lsrs	r4, r4, #8
   1d3a8:	7044      	strb	r4, [r0, #1]
}
   1d3aa:	bd10      	pop	{r4, pc}

0001d3ac <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d3ac:	6843      	ldr	r3, [r0, #4]
}
   1d3ae:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d3b0:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1d3b2:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   1d3b4:	600b      	str	r3, [r1, #0]
}
   1d3b6:	4770      	bx	lr

0001d3b8 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d3b8:	6843      	ldr	r3, [r0, #4]
   1d3ba:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1d3bc:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1d3be:	4042      	eors	r2, r0
   1d3c0:	400a      	ands	r2, r1
   1d3c2:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1d3c4:	605a      	str	r2, [r3, #4]
}
   1d3c6:	2000      	movs	r0, #0
   1d3c8:	4770      	bx	lr

0001d3ca <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d3ca:	6843      	ldr	r3, [r0, #4]
}
   1d3cc:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d3ce:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1d3d0:	6099      	str	r1, [r3, #8]
}
   1d3d2:	4770      	bx	lr

0001d3d4 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d3d4:	6843      	ldr	r3, [r0, #4]
}
   1d3d6:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d3d8:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1d3da:	60d9      	str	r1, [r3, #12]
}
   1d3dc:	4770      	bx	lr

0001d3de <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d3de:	6843      	ldr	r3, [r0, #4]
}
   1d3e0:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d3e2:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1d3e4:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   1d3e6:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1d3e8:	6053      	str	r3, [r2, #4]
}
   1d3ea:	4770      	bx	lr

0001d3ec <nrf_gpio_cfg_sense_set>:
{
   1d3ec:	b513      	push	{r0, r1, r4, lr}
   1d3ee:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d3f0:	a801      	add	r0, sp, #4
{
   1d3f2:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d3f4:	f7f8 fb40 	bl	15a78 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1d3f8:	9b01      	ldr	r3, [sp, #4]
   1d3fa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1d3fe:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   1d402:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1d406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   1d40a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   1d40e:	b002      	add	sp, #8
   1d410:	bd10      	pop	{r4, pc}

0001d412 <cfg_level_pins>:
{
   1d412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   1d416:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1d418:	2500      	movs	r5, #0
	return port->data;
   1d41a:	68c7      	ldr	r7, [r0, #12]
	return port->config;
   1d41c:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   1d420:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1d422:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   1d426:	4313      	orrs	r3, r2
   1d428:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   1d42c:	b90c      	cbnz	r4, 1d432 <cfg_level_pins+0x20>
}
   1d42e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1d432:	4226      	tst	r6, r4
   1d434:	d010      	beq.n	1d458 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1d436:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d438:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1d43c:	40e9      	lsrs	r1, r5
   1d43e:	f001 0101 	and.w	r1, r1, #1
   1d442:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d446:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1d44a:	b2c9      	uxtb	r1, r1
   1d44c:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   1d450:	f7ff ffcc 	bl	1d3ec <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1d454:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1d458:	3501      	adds	r5, #1
		bit <<= 1;
   1d45a:	0076      	lsls	r6, r6, #1
   1d45c:	e7e6      	b.n	1d42c <cfg_level_pins+0x1a>

0001d45e <check_level_trigger_pins>:
{
   1d45e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   1d462:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1d464:	2700      	movs	r7, #0
	return port->data;
   1d466:	68c3      	ldr	r3, [r0, #12]
	return port->config;
   1d468:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   1d46c:	68dc      	ldr	r4, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1d46e:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   1d472:	430a      	orrs	r2, r1
   1d474:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1d478:	f8d8 2004 	ldr.w	r2, [r8, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1d47c:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
   1d47e:	6915      	ldr	r5, [r2, #16]
   1d480:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   1d482:	ea24 0505 	bic.w	r5, r4, r5
	while (level_pins) {
   1d486:	b914      	cbnz	r4, 1d48e <check_level_trigger_pins+0x30>
}
   1d488:	4628      	mov	r0, r5
   1d48a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1d48e:	4234      	tst	r4, r6
   1d490:	d00a      	beq.n	1d4a8 <check_level_trigger_pins+0x4a>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d492:	f898 0008 	ldrb.w	r0, [r8, #8]
   1d496:	f007 031f 	and.w	r3, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1d49a:	2100      	movs	r1, #0
   1d49c:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   1d4a0:	f7ff ffa4 	bl	1d3ec <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1d4a4:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1d4a8:	3701      	adds	r7, #1
		bit <<= 1;
   1d4aa:	0076      	lsls	r6, r6, #1
   1d4ac:	e7eb      	b.n	1d486 <check_level_trigger_pins+0x28>

0001d4ae <vipm_nrf_max_data_size_get>:
static inline int z_impl_ipm_max_data_size_get(const struct device *ipmdev)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->max_data_size_get(ipmdev);
   1d4ae:	6883      	ldr	r3, [r0, #8]
   1d4b0:	689b      	ldr	r3, [r3, #8]
   1d4b2:	4718      	bx	r3

0001d4b4 <vipm_nrf_max_id_val_get>:
}
   1d4b4:	2000      	movs	r0, #0
   1d4b6:	4770      	bx	lr

0001d4b8 <vipm_nrf_1_set_enabled>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   1d4b8:	b508      	push	{r3, lr}
   1d4ba:	b139      	cbz	r1, 1d4cc <vipm_nrf_1_set_enabled+0x14>
   1d4bc:	202a      	movs	r0, #42	; 0x2a
   1d4be:	f7f0 fa89 	bl	d9d4 <arch_irq_enable>
   1d4c2:	2001      	movs	r0, #1
   1d4c4:	f7f9 fe0a 	bl	170dc <nrfx_ipc_receive_event_enable>
   1d4c8:	2000      	movs	r0, #0
   1d4ca:	bd08      	pop	{r3, pc}
   1d4cc:	2001      	movs	r0, #1
   1d4ce:	f7f9 fe23 	bl	17118 <nrfx_ipc_receive_event_disable>
   1d4d2:	e7f9      	b.n	1d4c8 <vipm_nrf_1_set_enabled+0x10>

0001d4d4 <uarte_nrfx_config_get>:
{
   1d4d4:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1d4d6:	68c2      	ldr	r2, [r0, #12]
   1d4d8:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1d4dc:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1d4e0:	2000      	movs	r0, #0
   1d4e2:	4770      	bx	lr

0001d4e4 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1d4e4:	6843      	ldr	r3, [r0, #4]
   1d4e6:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1d4e8:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1d4ec:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1d4f0:	4770      	bx	lr

0001d4f2 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1d4f2:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1d4f4:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   1d4f6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d4f8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1d4fc:	b148      	cbz	r0, 1d512 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d4fe:	2000      	movs	r0, #0
	*c = data->rx_data;
   1d500:	7d52      	ldrb	r2, [r2, #21]
   1d502:	700a      	strb	r2, [r1, #0]
   1d504:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1d508:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d50c:	2201      	movs	r2, #1
   1d50e:	601a      	str	r2, [r3, #0]
	return 0;
   1d510:	4770      	bx	lr
		return -1;
   1d512:	f04f 30ff 	mov.w	r0, #4294967295
}
   1d516:	4770      	bx	lr

0001d518 <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   1d518:	6843      	ldr	r3, [r0, #4]
{
   1d51a:	4602      	mov	r2, r0
	return config->uarte_regs;
   1d51c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d51e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1d522:	b148      	cbz	r0, 1d538 <uarte_nrfx_fifo_read+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d524:	2000      	movs	r0, #0
	return dev->data;
   1d526:	68d2      	ldr	r2, [r2, #12]
   1d528:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1d52c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d530:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   1d532:	7d52      	ldrb	r2, [r2, #21]
   1d534:	700a      	strb	r2, [r1, #0]
   1d536:	6018      	str	r0, [r3, #0]
}
   1d538:	4770      	bx	lr

0001d53a <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   1d53a:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1d53c:	68c1      	ldr	r1, [r0, #12]
	return config->uarte_regs;
   1d53e:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   1d540:	f04f 0020 	mov.w	r0, #32
   1d544:	f3ef 8311 	mrs	r3, BASEPRI
   1d548:	f380 8811 	msr	BASEPRI, r0
   1d54c:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   1d550:	2000      	movs	r0, #0
   1d552:	68c9      	ldr	r1, [r1, #12]
   1d554:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   1d556:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1d55a:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   1d55e:	f383 8811 	msr	BASEPRI, r3
   1d562:	f3bf 8f6f 	isb	sy
}
   1d566:	4770      	bx	lr

0001d568 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   1d568:	2201      	movs	r2, #1
   1d56a:	68c3      	ldr	r3, [r0, #12]
   1d56c:	68db      	ldr	r3, [r3, #12]
   1d56e:	739a      	strb	r2, [r3, #14]
}
   1d570:	4770      	bx	lr

0001d572 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   1d572:	68c3      	ldr	r3, [r0, #12]
   1d574:	68db      	ldr	r3, [r3, #12]
   1d576:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1d578:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   1d57c:	b962      	cbnz	r2, 1d598 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   1d57e:	6842      	ldr	r2, [r0, #4]
   1d580:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d582:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   1d586:	b140      	cbz	r0, 1d59a <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   1d588:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   1d58c:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   1d590:	d003      	beq.n	1d59a <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1d592:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   1d594:	6119      	str	r1, [r3, #16]
   1d596:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1d598:	2000      	movs	r0, #0
}
   1d59a:	4770      	bx	lr

0001d59c <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   1d59c:	6843      	ldr	r3, [r0, #4]
   1d59e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d5a0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1d5a4:	3800      	subs	r0, #0
   1d5a6:	bf18      	it	ne
   1d5a8:	2001      	movne	r0, #1
   1d5aa:	4770      	bx	lr

0001d5ac <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   1d5ac:	2210      	movs	r2, #16
	return config->uarte_regs;
   1d5ae:	6843      	ldr	r3, [r0, #4]
   1d5b0:	681b      	ldr	r3, [r3, #0]
   1d5b2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1d5b6:	4770      	bx	lr

0001d5b8 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   1d5b8:	2210      	movs	r2, #16
	return config->uarte_regs;
   1d5ba:	6843      	ldr	r3, [r0, #4]
   1d5bc:	681b      	ldr	r3, [r3, #0]
   1d5be:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1d5c2:	4770      	bx	lr

0001d5c4 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   1d5c4:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   1d5c8:	6843      	ldr	r3, [r0, #4]
   1d5ca:	681b      	ldr	r3, [r3, #0]
   1d5cc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1d5d0:	4770      	bx	lr

0001d5d2 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   1d5d2:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   1d5d6:	6843      	ldr	r3, [r0, #4]
   1d5d8:	681b      	ldr	r3, [r3, #0]
   1d5da:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1d5de:	4770      	bx	lr

0001d5e0 <uarte_nrfx_irq_update>:
}
   1d5e0:	2001      	movs	r0, #1
   1d5e2:	4770      	bx	lr

0001d5e4 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   1d5e4:	68c3      	ldr	r3, [r0, #12]
   1d5e6:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   1d5e8:	e9c3 1200 	strd	r1, r2, [r3]
}
   1d5ec:	4770      	bx	lr

0001d5ee <uarte_nrfx_irq_is_pending>:
{
   1d5ee:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   1d5f0:	6843      	ldr	r3, [r0, #4]
{
   1d5f2:	4604      	mov	r4, r0
	return config->uarte_regs;
   1d5f4:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   1d5f6:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   1d5fa:	025b      	lsls	r3, r3, #9
   1d5fc:	d405      	bmi.n	1d60a <uarte_nrfx_irq_is_pending+0x1c>
   1d5fe:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   1d602:	f010 0010 	ands.w	r0, r0, #16
   1d606:	d106      	bne.n	1d616 <uarte_nrfx_irq_is_pending+0x28>
}
   1d608:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1d60a:	f7ff ffb2 	bl	1d572 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   1d60e:	2800      	cmp	r0, #0
   1d610:	d0f5      	beq.n	1d5fe <uarte_nrfx_irq_is_pending+0x10>
		||
   1d612:	2001      	movs	r0, #1
   1d614:	e7f8      	b.n	1d608 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   1d616:	4620      	mov	r0, r4
   1d618:	f7ff ffc0 	bl	1d59c <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1d61c:	3800      	subs	r0, #0
   1d61e:	bf18      	it	ne
   1d620:	2001      	movne	r0, #1
   1d622:	e7f1      	b.n	1d608 <uarte_nrfx_irq_is_pending+0x1a>

0001d624 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   1d624:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   1d626:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d628:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1d62c:	b938      	cbnz	r0, 1d63e <is_tx_ready.isra.0+0x1a>
   1d62e:	799b      	ldrb	r3, [r3, #6]
   1d630:	b933      	cbnz	r3, 1d640 <is_tx_ready.isra.0+0x1c>
   1d632:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   1d636:	3800      	subs	r0, #0
   1d638:	bf18      	it	ne
   1d63a:	2001      	movne	r0, #1
   1d63c:	4770      	bx	lr
   1d63e:	2001      	movs	r0, #1
}
   1d640:	4770      	bx	lr

0001d642 <uarte_nrfx_fifo_fill>:
{
   1d642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return config->uarte_regs;
   1d644:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1d646:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
   1d648:	681d      	ldr	r5, [r3, #0]
	len = MIN(len, data->int_driven->tx_buff_size);
   1d64a:	68f3      	ldr	r3, [r6, #12]
   1d64c:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1d64e:	3310      	adds	r3, #16
   1d650:	4294      	cmp	r4, r2
   1d652:	bfa8      	it	ge
   1d654:	4614      	movge	r4, r2
   1d656:	2201      	movs	r2, #1
   1d658:	e8d3 7fef 	ldaex	r7, [r3]
   1d65c:	2f00      	cmp	r7, #0
   1d65e:	d104      	bne.n	1d66a <uarte_nrfx_fifo_fill+0x28>
   1d660:	e8c3 2fec 	stlex	ip, r2, [r3]
   1d664:	f1bc 0f00 	cmp.w	ip, #0
   1d668:	d1f6      	bne.n	1d658 <uarte_nrfx_fifo_fill+0x16>
   1d66a:	bf0c      	ite	eq
   1d66c:	4613      	moveq	r3, r2
   1d66e:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   1d670:	d01d      	beq.n	1d6ae <uarte_nrfx_fifo_fill+0x6c>
		return 0;
   1d672:	461c      	mov	r4, r3
}
   1d674:	4620      	mov	r0, r4
   1d676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   1d678:	68f2      	ldr	r2, [r6, #12]
   1d67a:	5ccf      	ldrb	r7, [r1, r3]
   1d67c:	6892      	ldr	r2, [r2, #8]
   1d67e:	54d7      	strb	r7, [r2, r3]
	for (int i = 0; i < len; i++) {
   1d680:	3301      	adds	r3, #1
   1d682:	42a3      	cmp	r3, r4
   1d684:	dbf8      	blt.n	1d678 <uarte_nrfx_fifo_fill+0x36>
	__asm__ volatile(
   1d686:	f04f 0320 	mov.w	r3, #32
   1d68a:	f3ef 8111 	mrs	r1, BASEPRI
   1d68e:	f383 8811 	msr	BASEPRI, r3
   1d692:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   1d696:	6840      	ldr	r0, [r0, #4]
   1d698:	f7ff ffc4 	bl	1d624 <is_tx_ready.isra.0>
   1d69c:	68f3      	ldr	r3, [r6, #12]
   1d69e:	b940      	cbnz	r0, 1d6b2 <uarte_nrfx_fifo_fill+0x70>
		len = 0;
   1d6a0:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   1d6a2:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   1d6a4:	f381 8811 	msr	BASEPRI, r1
   1d6a8:	f3bf 8f6f 	isb	sy
	return len;
   1d6ac:	e7e2      	b.n	1d674 <uarte_nrfx_fifo_fill+0x32>
	for (int i = 0; i < len; i++) {
   1d6ae:	2300      	movs	r3, #0
   1d6b0:	e7e7      	b.n	1d682 <uarte_nrfx_fifo_fill+0x40>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d6b2:	689b      	ldr	r3, [r3, #8]
   1d6b4:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d6b8:	2300      	movs	r3, #0
    p_reg->TXD.MAXCNT = length;
   1d6ba:	f8c5 4548 	str.w	r4, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d6be:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
   1d6c2:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
   1d6c6:	f8c5 3158 	str.w	r3, [r5, #344]	; 0x158
   1d6ca:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d6ce:	2301      	movs	r3, #1
   1d6d0:	60ab      	str	r3, [r5, #8]
}
   1d6d2:	e7e7      	b.n	1d6a4 <uarte_nrfx_fifo_fill+0x62>

0001d6d4 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   1d6d4:	6843      	ldr	r3, [r0, #4]
{
   1d6d6:	b410      	push	{r4}
	return config->uarte_regs;
   1d6d8:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   1d6da:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1d6de:	05d2      	lsls	r2, r2, #23
   1d6e0:	d518      	bpl.n	1d714 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d6e2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   1d6e6:	b1aa      	cbz	r2, 1d714 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   1d6e8:	f04f 0120 	mov.w	r1, #32
   1d6ec:	f3ef 8211 	mrs	r2, BASEPRI
   1d6f0:	f381 8811 	msr	BASEPRI, r1
   1d6f4:	f3bf 8f6f 	isb	sy
   1d6f8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1d6fc:	b131      	cbz	r1, 1d70c <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d6fe:	2100      	movs	r1, #0
   1d700:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1d704:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d708:	2101      	movs	r1, #1
   1d70a:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1d70c:	f382 8811 	msr	BASEPRI, r2
   1d710:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   1d714:	68c2      	ldr	r2, [r0, #12]
   1d716:	68d2      	ldr	r2, [r2, #12]
   1d718:	b15a      	cbz	r2, 1d732 <uarte_nrfx_isr_int+0x5e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d71a:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1d71e:	b151      	cbz	r1, 1d736 <uarte_nrfx_isr_int+0x62>
		data->int_driven->fifo_fill_lock = 0;
   1d720:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
   1d722:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   1d724:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   1d726:	b134      	cbz	r4, 1d736 <uarte_nrfx_isr_int+0x62>
    p_reg->INTENCLR = mask;
   1d728:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   1d72c:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   1d730:	7391      	strb	r1, [r2, #14]
}
   1d732:	bc10      	pop	{r4}
   1d734:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d736:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1d73a:	b121      	cbz	r1, 1d746 <uarte_nrfx_isr_int+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d73c:	2100      	movs	r1, #0
   1d73e:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   1d742:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   1d746:	6813      	ldr	r3, [r2, #0]
   1d748:	2b00      	cmp	r3, #0
   1d74a:	d0f2      	beq.n	1d732 <uarte_nrfx_isr_int+0x5e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1d74c:	6851      	ldr	r1, [r2, #4]
}
   1d74e:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1d750:	4718      	bx	r3

0001d752 <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   1d752:	2101      	movs	r1, #1
   1d754:	f7f9 b9c6 	b.w	16ae4 <dk_set_led>

0001d758 <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   1d758:	2100      	movs	r1, #0
   1d75a:	f7f9 b9c3 	b.w	16ae4 <dk_set_led>

0001d75e <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   1d75e:	f7f9 ba41 	b.w	16be4 <SystemCoreClockUpdate>

0001d762 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1d762:	4700      	bx	r0

0001d764 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1d764:	f000 bcaf 	b.w	1e0c6 <z_impl_k_busy_wait>

0001d768 <metal_device_open>:
{
   1d768:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d76a:	460c      	mov	r4, r1
   1d76c:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   1d76e:	4606      	mov	r6, r0
   1d770:	b918      	cbnz	r0, 1d77a <metal_device_open+0x12>
		return -EINVAL;
   1d772:	f06f 0015 	mvn.w	r0, #21
}
   1d776:	b002      	add	sp, #8
   1d778:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   1d77a:	f7fe fa7f 	bl	1bc7c <strlen>
   1d77e:	2800      	cmp	r0, #0
   1d780:	d0f7      	beq.n	1d772 <metal_device_open+0xa>
   1d782:	2c00      	cmp	r4, #0
   1d784:	d0f5      	beq.n	1d772 <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   1d786:	4620      	mov	r0, r4
   1d788:	f7fe fa78 	bl	1bc7c <strlen>
   1d78c:	2800      	cmp	r0, #0
   1d78e:	d0f0      	beq.n	1d772 <metal_device_open+0xa>
   1d790:	2d00      	cmp	r5, #0
   1d792:	d0ee      	beq.n	1d772 <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   1d794:	4630      	mov	r0, r6
   1d796:	a901      	add	r1, sp, #4
   1d798:	f7f9 fd32 	bl	17200 <metal_bus_find>
	if (error)
   1d79c:	2800      	cmp	r0, #0
   1d79e:	d1ea      	bne.n	1d776 <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   1d7a0:	9801      	ldr	r0, [sp, #4]
   1d7a2:	6883      	ldr	r3, [r0, #8]
   1d7a4:	b11b      	cbz	r3, 1d7ae <metal_device_open+0x46>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   1d7a6:	462a      	mov	r2, r5
   1d7a8:	4621      	mov	r1, r4
   1d7aa:	4798      	blx	r3
	if (error)
   1d7ac:	e7e3      	b.n	1d776 <metal_device_open+0xe>
		return -ENODEV;
   1d7ae:	f06f 0012 	mvn.w	r0, #18
   1d7b2:	e7e0      	b.n	1d776 <metal_device_open+0xe>

0001d7b4 <metal_io_block_read>:
	metal_sys_io_mem_map(io);
}

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   1d7b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d7b6:	6804      	ldr	r4, [r0, #0]
   1d7b8:	6885      	ldr	r5, [r0, #8]
		: NULL);
   1d7ba:	1c66      	adds	r6, r4, #1
   1d7bc:	d00f      	beq.n	1d7de <metal_io_block_read+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d7be:	42a9      	cmp	r1, r5
   1d7c0:	d232      	bcs.n	1d828 <metal_io_block_read+0x74>
		: NULL);
   1d7c2:	440c      	add	r4, r1
	unsigned char *dest = dst;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1d7c4:	185e      	adds	r6, r3, r1
   1d7c6:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1d7c8:	bf88      	it	hi
   1d7ca:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   1d7cc:	6a05      	ldr	r5, [r0, #32]
   1d7ce:	b155      	cbz	r5, 1d7e6 <metal_io_block_read+0x32>
		retlen = (*io->ops.block_read)(
   1d7d0:	9300      	str	r3, [sp, #0]
   1d7d2:	2305      	movs	r3, #5
   1d7d4:	47a8      	blx	r5
   1d7d6:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   1d7d8:	4618      	mov	r0, r3
   1d7da:	b002      	add	sp, #8
   1d7dc:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   1d7de:	42a9      	cmp	r1, r5
   1d7e0:	d222      	bcs.n	1d828 <metal_io_block_read+0x74>
   1d7e2:	2400      	movs	r4, #0
   1d7e4:	e7ee      	b.n	1d7c4 <metal_io_block_read+0x10>
		atomic_thread_fence(memory_order_seq_cst);
   1d7e6:	f3bf 8f5b 	dmb	ish
		while ( len && (
   1d7ea:	4621      	mov	r1, r4
   1d7ec:	4618      	mov	r0, r3
   1d7ee:	2800      	cmp	r0, #0
   1d7f0:	d0f2      	beq.n	1d7d8 <metal_io_block_read+0x24>
			((uintptr_t)dest % sizeof(int)) ||
   1d7f2:	ea42 0401 	orr.w	r4, r2, r1
   1d7f6:	07a4      	lsls	r4, r4, #30
   1d7f8:	d10a      	bne.n	1d810 <metal_io_block_read+0x5c>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   1d7fa:	2803      	cmp	r0, #3
   1d7fc:	dc0e      	bgt.n	1d81c <metal_io_block_read+0x68>
   1d7fe:	3901      	subs	r1, #1
   1d800:	4410      	add	r0, r2
		for (; len != 0; dest++, ptr++, len--)
   1d802:	4282      	cmp	r2, r0
   1d804:	d0e8      	beq.n	1d7d8 <metal_io_block_read+0x24>
				*(const unsigned char *)ptr;
   1d806:	f811 4f01 	ldrb.w	r4, [r1, #1]!
			*(unsigned char *)dest =
   1d80a:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   1d80e:	e7f8      	b.n	1d802 <metal_io_block_read+0x4e>
				*(const unsigned char *)ptr;
   1d810:	f811 4b01 	ldrb.w	r4, [r1], #1
			len--;
   1d814:	3801      	subs	r0, #1
			*(unsigned char *)dest =
   1d816:	f802 4b01 	strb.w	r4, [r2], #1
			len--;
   1d81a:	e7e8      	b.n	1d7ee <metal_io_block_read+0x3a>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   1d81c:	f851 4b04 	ldr.w	r4, [r1], #4
   1d820:	3804      	subs	r0, #4
   1d822:	f842 4b04 	str.w	r4, [r2], #4
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   1d826:	e7e8      	b.n	1d7fa <metal_io_block_read+0x46>
		return -ERANGE;
   1d828:	f06f 0325 	mvn.w	r3, #37	; 0x25
   1d82c:	e7d4      	b.n	1d7d8 <metal_io_block_read+0x24>

0001d82e <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   1d82e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d830:	6804      	ldr	r4, [r0, #0]
   1d832:	6885      	ldr	r5, [r0, #8]
		: NULL);
   1d834:	1c66      	adds	r6, r4, #1
   1d836:	d00e      	beq.n	1d856 <metal_io_block_write+0x28>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d838:	42a9      	cmp	r1, r5
   1d83a:	d230      	bcs.n	1d89e <metal_io_block_write+0x70>
		: NULL);
   1d83c:	440c      	add	r4, r1
	const unsigned char *source = src;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1d83e:	185e      	adds	r6, r3, r1
   1d840:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1d842:	bf88      	it	hi
   1d844:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   1d846:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1d848:	b94d      	cbnz	r5, 1d85e <metal_io_block_write+0x30>
   1d84a:	4619      	mov	r1, r3
		retlen = (*io->ops.block_write)(
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
   1d84c:	b991      	cbnz	r1, 1d874 <metal_io_block_write+0x46>
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
		for (; len != 0; ptr++, source++, len--)
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
   1d84e:	f3bf 8f5b 	dmb	ish
	retlen = len;
   1d852:	4618      	mov	r0, r3
   1d854:	e006      	b.n	1d864 <metal_io_block_write+0x36>
	if (offset >= io->size)
   1d856:	42a9      	cmp	r1, r5
   1d858:	d221      	bcs.n	1d89e <metal_io_block_write+0x70>
   1d85a:	2400      	movs	r4, #0
   1d85c:	e7ef      	b.n	1d83e <metal_io_block_write+0x10>
		retlen = (*io->ops.block_write)(
   1d85e:	9300      	str	r3, [sp, #0]
   1d860:	2305      	movs	r3, #5
   1d862:	47a8      	blx	r5
	}
	return retlen;
}
   1d864:	b002      	add	sp, #8
   1d866:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   1d868:	f812 0b01 	ldrb.w	r0, [r2], #1
			len--;
   1d86c:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   1d86e:	f804 0b01 	strb.w	r0, [r4], #1
			len--;
   1d872:	e7eb      	b.n	1d84c <metal_io_block_write+0x1e>
			((uintptr_t)ptr % sizeof(int)) ||
   1d874:	ea44 0002 	orr.w	r0, r4, r2
   1d878:	0780      	lsls	r0, r0, #30
   1d87a:	d1f5      	bne.n	1d868 <metal_io_block_write+0x3a>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1d87c:	2903      	cmp	r1, #3
   1d87e:	dc08      	bgt.n	1d892 <metal_io_block_write+0x64>
   1d880:	3a01      	subs	r2, #1
   1d882:	4421      	add	r1, r4
		for (; len != 0; ptr++, source++, len--)
   1d884:	428c      	cmp	r4, r1
   1d886:	d0e2      	beq.n	1d84e <metal_io_block_write+0x20>
				*(const unsigned char *)source;
   1d888:	f812 0f01 	ldrb.w	r0, [r2, #1]!
			*(unsigned char *)ptr =
   1d88c:	f804 0b01 	strb.w	r0, [r4], #1
		for (; len != 0; ptr++, source++, len--)
   1d890:	e7f8      	b.n	1d884 <metal_io_block_write+0x56>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   1d892:	f852 0b04 	ldr.w	r0, [r2], #4
   1d896:	3904      	subs	r1, #4
   1d898:	f844 0b04 	str.w	r0, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1d89c:	e7ee      	b.n	1d87c <metal_io_block_write+0x4e>
		return -ERANGE;
   1d89e:	f06f 0025 	mvn.w	r0, #37	; 0x25
   1d8a2:	e7df      	b.n	1d864 <metal_io_block_write+0x36>

0001d8a4 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   1d8a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d8a6:	6804      	ldr	r4, [r0, #0]
   1d8a8:	461d      	mov	r5, r3
		: NULL);
   1d8aa:	1c66      	adds	r6, r4, #1
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d8ac:	6883      	ldr	r3, [r0, #8]
		: NULL);
   1d8ae:	d00e      	beq.n	1d8ce <metal_io_block_set+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d8b0:	4299      	cmp	r1, r3
   1d8b2:	d22d      	bcs.n	1d910 <metal_io_block_set+0x6c>
		: NULL);
   1d8b4:	440c      	add	r4, r1
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1d8b6:	186e      	adds	r6, r5, r1
   1d8b8:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   1d8ba:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   1d8bc:	bf88      	it	hi
   1d8be:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   1d8c0:	b186      	cbz	r6, 1d8e4 <metal_io_block_set+0x40>
		(*io->ops.block_set)(
   1d8c2:	2305      	movs	r3, #5
   1d8c4:	9500      	str	r5, [sp, #0]
   1d8c6:	47b0      	blx	r6
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   1d8c8:	4628      	mov	r0, r5
   1d8ca:	b002      	add	sp, #8
   1d8cc:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   1d8ce:	4299      	cmp	r1, r3
   1d8d0:	d21e      	bcs.n	1d910 <metal_io_block_set+0x6c>
   1d8d2:	2400      	movs	r4, #0
   1d8d4:	e7ef      	b.n	1d8b6 <metal_io_block_set+0x12>
			*(unsigned char *)ptr = (unsigned char) value;
   1d8d6:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1d8da:	3b01      	subs	r3, #1
   1d8dc:	b923      	cbnz	r3, 1d8e8 <metal_io_block_set+0x44>
		atomic_thread_fence(memory_order_seq_cst);
   1d8de:	f3bf 8f5b 	dmb	ish
   1d8e2:	e7f1      	b.n	1d8c8 <metal_io_block_set+0x24>
   1d8e4:	462b      	mov	r3, r5
   1d8e6:	e7f9      	b.n	1d8dc <metal_io_block_set+0x38>
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1d8e8:	07a1      	lsls	r1, r4, #30
   1d8ea:	d1f4      	bne.n	1d8d6 <metal_io_block_set+0x32>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   1d8ec:	0611      	lsls	r1, r2, #24
   1d8ee:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   1d8f2:	4311      	orrs	r1, r2
   1d8f4:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1d8f8:	2b03      	cmp	r3, #3
   1d8fa:	dc05      	bgt.n	1d908 <metal_io_block_set+0x64>
   1d8fc:	4423      	add	r3, r4
		for (; len != 0; ptr++, len--)
   1d8fe:	429c      	cmp	r4, r3
   1d900:	d0ed      	beq.n	1d8de <metal_io_block_set+0x3a>
			*(unsigned char *)ptr = (unsigned char) value;
   1d902:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len != 0; ptr++, len--)
   1d906:	e7fa      	b.n	1d8fe <metal_io_block_set+0x5a>
			*(unsigned int *)ptr = cint;
   1d908:	f844 1b04 	str.w	r1, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1d90c:	3b04      	subs	r3, #4
   1d90e:	e7f3      	b.n	1d8f8 <metal_io_block_set+0x54>
		return -ERANGE;
   1d910:	f06f 0525 	mvn.w	r5, #37	; 0x25
   1d914:	e7d8      	b.n	1d8c8 <metal_io_block_set+0x24>

0001d916 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   1d916:	2000      	movs	r0, #0
   1d918:	4770      	bx	lr

0001d91a <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   1d91a:	b430      	push	{r4, r5}
	if (!io->ops.offset_to_phys) {
   1d91c:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   1d91e:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   1d920:	b984      	cbnz	r4, 1d944 <metal_io_phys+0x2a>
		unsigned long page = (io->page_shift >=
   1d922:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap && offset < io->size
   1d924:	6845      	ldr	r5, [r0, #4]
				     0 : offset >> io->page_shift);
   1d926:	291f      	cmp	r1, #31
   1d928:	bf98      	it	ls
   1d92a:	fa23 f401 	lsrls.w	r4, r3, r1
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   1d92e:	b165      	cbz	r5, 1d94a <metal_io_phys+0x30>
		return (io->physmap && offset < io->size
   1d930:	6881      	ldr	r1, [r0, #8]
   1d932:	428b      	cmp	r3, r1
   1d934:	d209      	bcs.n	1d94a <metal_io_phys+0x30>
			? io->physmap[page] + (offset & io->page_mask)
   1d936:	6900      	ldr	r0, [r0, #16]
   1d938:	4003      	ands	r3, r0
			: METAL_BAD_PHYS);
   1d93a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1d93e:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   1d940:	bc30      	pop	{r4, r5}
   1d942:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   1d944:	4623      	mov	r3, r4
}
   1d946:	bc30      	pop	{r4, r5}
	return io->ops.offset_to_phys(io, offset);
   1d948:	4718      	bx	r3
			: METAL_BAD_PHYS);
   1d94a:	f04f 30ff 	mov.w	r0, #4294967295
   1d94e:	e7f7      	b.n	1d940 <metal_io_phys+0x26>

0001d950 <virtqueue_create>:
{
   1d950:	b570      	push	{r4, r5, r6, lr}
   1d952:	9c06      	ldr	r4, [sp, #24]
		vq->vq_queue_index = id;
   1d954:	8121      	strh	r1, [r4, #8]
		vq->callback = callback;
   1d956:	9904      	ldr	r1, [sp, #16]
		vq->vq_name = name;
   1d958:	e9c4 0200 	strd	r0, r2, [r4]
		vq->vq_nentries = ring->num_descs;
   1d95c:	891a      	ldrh	r2, [r3, #8]
		vq->callback = callback;
   1d95e:	60e1      	str	r1, [r4, #12]
		vq->notify = notify;
   1d960:	9905      	ldr	r1, [sp, #20]
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1d962:	1c96      	adds	r6, r2, #2
   1d964:	6121      	str	r1, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   1d966:	e9d3 1500 	ldrd	r1, r5, [r3]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   1d96a:	eb01 1302 	add.w	r3, r1, r2, lsl #4
   1d96e:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1d970:	eb03 0346 	add.w	r3, r3, r6, lsl #1
	      align - 1) & ~(align - 1));
   1d974:	1c6e      	adds	r6, r5, #1
   1d976:	4433      	add	r3, r6
   1d978:	426d      	negs	r5, r5
   1d97a:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   1d97c:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_SLAVE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1d97e:	6983      	ldr	r3, [r0, #24]
	vr->desc = (struct vring_desc *)p;
   1d980:	e9c4 2105 	strd	r2, r1, [r4, #20]
		vq->vq_nentries = ring->num_descs;
   1d984:	8162      	strh	r2, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   1d986:	84a2      	strh	r2, [r4, #36]	; 0x24
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1d988:	b96b      	cbnz	r3, 1d9a6 <virtqueue_create+0x56>
		int i;

		for (i = 0; i < size - 1; i++)
   1d98a:	3a01      	subs	r2, #1
   1d98c:	4293      	cmp	r3, r2
   1d98e:	eb01 1003 	add.w	r0, r1, r3, lsl #4
   1d992:	db0a      	blt.n	1d9aa <virtqueue_create+0x5a>
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   1d994:	2300      	movs	r3, #0
			vr->desc[i].next = i + 1;
   1d996:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   1d99a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   1d99e:	7393      	strb	r3, [r2, #14]
   1d9a0:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1d9a4:	73d3      	strb	r3, [r2, #15]
}
   1d9a6:	2000      	movs	r0, #0
   1d9a8:	bd70      	pop	{r4, r5, r6, pc}
			vr->desc[i].next = i + 1;
   1d9aa:	3301      	adds	r3, #1
   1d9ac:	81c3      	strh	r3, [r0, #14]
		for (i = 0; i < size - 1; i++)
   1d9ae:	e7ed      	b.n	1d98c <virtqueue_create+0x3c>

0001d9b0 <virtqueue_add_buffer>:
{
   1d9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1d9b4:	2700      	movs	r7, #0
		head_idx = vq->vq_desc_head_idx;
   1d9b6:	f8b0 b02c 	ldrh.w	fp, [r0, #44]	; 0x2c
{
   1d9ba:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1d9bc:	465d      	mov	r5, fp
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1d9be:	46ba      	mov	sl, r7
{
   1d9c0:	b085      	sub	sp, #20
	needed = readable + writable;
   1d9c2:	18d6      	adds	r6, r2, r3
{
   1d9c4:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   1d9c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1d9c8:	eb00 03cb 	add.w	r3, r0, fp, lsl #3
   1d9cc:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   1d9ce:	871e      	strh	r6, [r3, #56]	; 0x38
		if (i < needed - 1)
   1d9d0:	1e72      	subs	r2, r6, #1
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   1d9d2:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1d9d4:	f101 0804 	add.w	r8, r1, #4
		if (i < needed - 1)
   1d9d8:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1d9da:	42be      	cmp	r6, r7
   1d9dc:	dc19      	bgt.n	1da12 <virtqueue_add_buffer+0x62>
		vq->vq_free_cnt -= needed;
   1d9de:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1d9e0:	8962      	ldrh	r2, [r4, #10]
		vq->vq_free_cnt -= needed;
   1d9e2:	1b9e      	subs	r6, r3, r6
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1d9e4:	69e3      	ldr	r3, [r4, #28]
		vq->vq_desc_head_idx = idx;
   1d9e6:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   1d9e8:	84a6      	strh	r6, [r4, #36]	; 0x24
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1d9ea:	1e51      	subs	r1, r2, #1
   1d9ec:	885a      	ldrh	r2, [r3, #2]
}
   1d9ee:	2000      	movs	r0, #0
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   1d9f0:	400a      	ands	r2, r1
   1d9f2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   1d9f6:	f8a3 b004 	strh.w	fp, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   1d9fa:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
   1d9fe:	69e2      	ldr	r2, [r4, #28]
   1da00:	8853      	ldrh	r3, [r2, #2]
   1da02:	3301      	adds	r3, #1
   1da04:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   1da06:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1da08:	3301      	adds	r3, #1
   1da0a:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1da0c:	b005      	add	sp, #20
   1da0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   1da12:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1da14:	012a      	lsls	r2, r5, #4
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1da16:	f858 1c04 	ldr.w	r1, [r8, #-4]
   1da1a:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   1da1e:	9302      	str	r3, [sp, #8]
   1da20:	6803      	ldr	r3, [r0, #0]
   1da22:	9203      	str	r2, [sp, #12]
   1da24:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   1da26:	6883      	ldr	r3, [r0, #8]
   1da28:	f108 0808 	add.w	r8, r8, #8
   1da2c:	4299      	cmp	r1, r3
   1da2e:	bf28      	it	cs
   1da30:	f04f 31ff 	movcs.w	r1, #4294967295
   1da34:	f7ff ff71 	bl	1d91a <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1da38:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1da3c:	5098      	str	r0, [r3, r2]
		dp->len = buf_list[i].len;
   1da3e:	f858 2c08 	ldr.w	r2, [r8, #-8]
			dp->flags |= VRING_DESC_F_NEXT;
   1da42:	f885 a00d 	strb.w	sl, [r5, #13]
		dp->len = buf_list[i].len;
   1da46:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   1da48:	9a01      	ldr	r2, [sp, #4]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1da4a:	f8c5 a004 	str.w	sl, [r5, #4]
		if (i < needed - 1)
   1da4e:	4297      	cmp	r7, r2
			dp->flags |= VRING_DESC_F_NEXT;
   1da50:	bfb6      	itet	lt
   1da52:	2201      	movlt	r2, #1
		dp->flags = 0;
   1da54:	f885 a00c 	strbge.w	sl, [r5, #12]
			dp->flags |= VRING_DESC_F_NEXT;
   1da58:	732a      	strblt	r2, [r5, #12]
		if (i >= readable)
   1da5a:	45b9      	cmp	r9, r7
			dp->flags |= VRING_DESC_F_WRITE;
   1da5c:	bfd8      	it	le
   1da5e:	89aa      	ldrhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1da60:	f107 0701 	add.w	r7, r7, #1
			dp->flags |= VRING_DESC_F_WRITE;
   1da64:	bfdc      	itt	le
   1da66:	f042 0202 	orrle.w	r2, r2, #2
   1da6a:	81aa      	strhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1da6c:	89ed      	ldrh	r5, [r5, #14]
   1da6e:	e7b4      	b.n	1d9da <virtqueue_add_buffer+0x2a>

0001da70 <virtqueue_get_buffer>:
{
   1da70:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   1da72:	b350      	cbz	r0, 1daca <virtqueue_get_buffer+0x5a>
   1da74:	6a05      	ldr	r5, [r0, #32]
   1da76:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   1da78:	886c      	ldrh	r4, [r5, #2]
   1da7a:	429c      	cmp	r4, r3
   1da7c:	d030      	beq.n	1dae0 <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1da7e:	1c5c      	adds	r4, r3, #1
   1da80:	85c4      	strh	r4, [r0, #46]	; 0x2e
   1da82:	8944      	ldrh	r4, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   1da84:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1da88:	3c01      	subs	r4, #1
   1da8a:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   1da8c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1da90:	686b      	ldr	r3, [r5, #4]
   1da92:	b29e      	uxth	r6, r3
	if (len)
   1da94:	b109      	cbz	r1, 1da9a <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   1da96:	68ad      	ldr	r5, [r5, #8]
   1da98:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   1da9a:	f8d0 c018 	ldr.w	ip, [r0, #24]
   1da9e:	b29b      	uxth	r3, r3
   1daa0:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   1daa4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   1daa8:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   1daaa:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   1daac:	442f      	add	r7, r5
	dxp->ndescs--;
   1daae:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   1dab0:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   1dab2:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   1dab4:	898d      	ldrh	r5, [r1, #12]
   1dab6:	076f      	lsls	r7, r5, #29
   1dab8:	d50e      	bpl.n	1dad8 <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   1daba:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   1dabc:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   1dabe:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   1dac0:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   1dac2:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   1dac4:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   1dac6:	b102      	cbz	r2, 1daca <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   1dac8:	8014      	strh	r4, [r2, #0]
}
   1daca:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   1dacc:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   1dace:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   1dad0:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   1dad2:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   1dad6:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   1dad8:	898d      	ldrh	r5, [r1, #12]
   1dada:	07ed      	lsls	r5, r5, #31
   1dadc:	d4f6      	bmi.n	1dacc <virtqueue_get_buffer+0x5c>
   1dade:	e7ec      	b.n	1daba <virtqueue_get_buffer+0x4a>
		return NULL;
   1dae0:	2000      	movs	r0, #0
   1dae2:	e7f2      	b.n	1daca <virtqueue_get_buffer+0x5a>

0001dae4 <virtqueue_get_available_buffer>:
{
   1dae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1dae8:	f3bf 8f5b 	dmb	ish
{
   1daec:	4617      	mov	r7, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1daee:	69c2      	ldr	r2, [r0, #28]
{
   1daf0:	460e      	mov	r6, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1daf2:	8853      	ldrh	r3, [r2, #2]
   1daf4:	8e01      	ldrh	r1, [r0, #48]	; 0x30
{
   1daf6:	4605      	mov	r5, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1daf8:	428b      	cmp	r3, r1
   1dafa:	d045      	beq.n	1db88 <virtqueue_get_available_buffer+0xa4>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   1dafc:	1c4b      	adds	r3, r1, #1
   1dafe:	8603      	strh	r3, [r0, #48]	; 0x30
   1db00:	8943      	ldrh	r3, [r0, #10]
   1db02:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
   1db06:	3b01      	subs	r3, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   1db08:	400b      	ands	r3, r1
   1db0a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   1db0e:	889a      	ldrh	r2, [r3, #4]
   1db10:	b293      	uxth	r3, r2
   1db12:	8032      	strh	r2, [r6, #0]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   1db14:	6982      	ldr	r2, [r0, #24]
   1db16:	011b      	lsls	r3, r3, #4
   1db18:	f852 9003 	ldr.w	r9, [r2, r3]
	if (!io->ops.phys_to_offset) {
   1db1c:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
   1db20:	bb5b      	cbnz	r3, 1db7a <virtqueue_get_available_buffer+0x96>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   1db22:	f8d8 4010 	ldr.w	r4, [r8, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   1db26:	1c62      	adds	r2, r4, #1
   1db28:	bf09      	itett	eq
   1db2a:	f8d8 3004 	ldreq.w	r3, [r8, #4]
   1db2e:	ea09 0404 	andne.w	r4, r9, r4
   1db32:	681c      	ldreq	r4, [r3, #0]
   1db34:	eba9 0404 	subeq.w	r4, r9, r4
			if (metal_io_phys(io, offset) == phys)
   1db38:	4621      	mov	r1, r4
   1db3a:	4640      	mov	r0, r8
   1db3c:	f7ff feed 	bl	1d91a <metal_io_phys>
   1db40:	4581      	cmp	r9, r0
   1db42:	d009      	beq.n	1db58 <virtqueue_get_available_buffer+0x74>
			offset += io->page_mask + 1;
   1db44:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1db48:	3301      	adds	r3, #1
   1db4a:	441c      	add	r4, r3
		} while (offset < io->size);
   1db4c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1db50:	429c      	cmp	r4, r3
   1db52:	d3f1      	bcc.n	1db38 <virtqueue_get_available_buffer+0x54>
		return METAL_BAD_OFFSET;
   1db54:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   1db58:	f8d8 0000 	ldr.w	r0, [r8]
		: NULL);
   1db5c:	1c43      	adds	r3, r0, #1
   1db5e:	d011      	beq.n	1db84 <virtqueue_get_available_buffer+0xa0>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1db60:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1db64:	42a3      	cmp	r3, r4
   1db66:	d90d      	bls.n	1db84 <virtqueue_get_available_buffer+0xa0>
		: NULL);
   1db68:	4420      	add	r0, r4
	*len = vq->vq_ring.desc[*avail_idx].len;
   1db6a:	8832      	ldrh	r2, [r6, #0]
   1db6c:	69ab      	ldr	r3, [r5, #24]
   1db6e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1db72:	689b      	ldr	r3, [r3, #8]
   1db74:	603b      	str	r3, [r7, #0]
}
   1db76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   1db7a:	4649      	mov	r1, r9
   1db7c:	4640      	mov	r0, r8
   1db7e:	4798      	blx	r3
   1db80:	4604      	mov	r4, r0
   1db82:	e7e9      	b.n	1db58 <virtqueue_get_available_buffer+0x74>
		: NULL);
   1db84:	2000      	movs	r0, #0
   1db86:	e7f0      	b.n	1db6a <virtqueue_get_available_buffer+0x86>
		return NULL;
   1db88:	2000      	movs	r0, #0
   1db8a:	e7f4      	b.n	1db76 <virtqueue_get_available_buffer+0x92>

0001db8c <virtqueue_disable_cb>:
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1db8c:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1db8e:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1db90:	6912      	ldr	r2, [r2, #16]
   1db92:	0092      	lsls	r2, r2, #2
   1db94:	d515      	bpl.n	1dbc2 <virtqueue_disable_cb+0x36>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1db96:	b94b      	cbnz	r3, 1dbac <virtqueue_disable_cb+0x20>
			vring_used_event(&vq->vq_ring) =
   1db98:	69c2      	ldr	r2, [r0, #28]
   1db9a:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1db9c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   1db9e:	8940      	ldrh	r0, [r0, #10]
			vring_used_event(&vq->vq_ring) =
   1dba0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1dba4:	1a1b      	subs	r3, r3, r0
   1dba6:	3b01      	subs	r3, #1
			vring_avail_event(&vq->vq_ring) =
   1dba8:	8093      	strh	r3, [r2, #4]
   1dbaa:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   1dbac:	2b01      	cmp	r3, #1
   1dbae:	d10e      	bne.n	1dbce <virtqueue_disable_cb+0x42>
			vring_avail_event(&vq->vq_ring) =
   1dbb0:	6a02      	ldr	r2, [r0, #32]
   1dbb2:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1dbb4:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   1dbb6:	8940      	ldrh	r0, [r0, #10]
			vring_avail_event(&vq->vq_ring) =
   1dbb8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1dbbc:	1a1b      	subs	r3, r3, r0
   1dbbe:	3b01      	subs	r3, #1
   1dbc0:	e7f2      	b.n	1dba8 <virtqueue_disable_cb+0x1c>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   1dbc2:	b92b      	cbnz	r3, 1dbd0 <virtqueue_disable_cb+0x44>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   1dbc4:	69c2      	ldr	r2, [r0, #28]
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   1dbc6:	8813      	ldrh	r3, [r2, #0]
   1dbc8:	f043 0301 	orr.w	r3, r3, #1
   1dbcc:	8013      	strh	r3, [r2, #0]
}
   1dbce:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   1dbd0:	2b01      	cmp	r3, #1
   1dbd2:	d1fc      	bne.n	1dbce <virtqueue_disable_cb+0x42>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   1dbd4:	6a02      	ldr	r2, [r0, #32]
   1dbd6:	e7f6      	b.n	1dbc6 <virtqueue_disable_cb+0x3a>

0001dbd8 <virtqueue_kick>:
{
   1dbd8:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1dbda:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1dbde:	6803      	ldr	r3, [r0, #0]
{
   1dbe0:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1dbe2:	691a      	ldr	r2, [r3, #16]
   1dbe4:	699b      	ldr	r3, [r3, #24]
   1dbe6:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   1dbea:	d019      	beq.n	1dc20 <virtqueue_kick+0x48>
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1dbec:	b97b      	cbnz	r3, 1dc0e <virtqueue_kick+0x36>
			new_idx = vq->vq_ring.avail->idx;
   1dbee:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_avail_event(&vq->vq_ring);
   1dbf0:	6a02      	ldr	r2, [r0, #32]
   1dbf2:	6941      	ldr	r1, [r0, #20]
			new_idx = vq->vq_ring.avail->idx;
   1dbf4:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   1dbf6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_used_event(&vq->vq_ring);
   1dbfa:	8892      	ldrh	r2, [r2, #4]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   1dbfc:	1a9b      	subs	r3, r3, r2
   1dbfe:	3b01      	subs	r3, #1
	if (vq_ring_must_notify(vq))
   1dc00:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   1dc02:	b29b      	uxth	r3, r3
   1dc04:	429a      	cmp	r2, r3
   1dc06:	d813      	bhi.n	1dc30 <virtqueue_kick+0x58>
	vq->vq_queued_cnt = 0;
   1dc08:	2300      	movs	r3, #0
   1dc0a:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1dc0c:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   1dc0e:	2b01      	cmp	r3, #1
   1dc10:	d1fa      	bne.n	1dc08 <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   1dc12:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   1dc14:	69c2      	ldr	r2, [r0, #28]
   1dc16:	6941      	ldr	r1, [r0, #20]
			new_idx = vq->vq_ring.used->idx;
   1dc18:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   1dc1a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   1dc1e:	e7ec      	b.n	1dbfa <virtqueue_kick+0x22>
						prev_idx) != 0;
		}
#endif /*VIRTIO_MASTER_ONLY*/
	} else {
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   1dc20:	b963      	cbnz	r3, 1dc3c <virtqueue_kick+0x64>
			return (vq->vq_ring.used->flags &
   1dc22:	6a03      	ldr	r3, [r0, #32]
				VRING_USED_F_NO_NOTIFY) == 0;
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
			return (vq->vq_ring.avail->flags &
   1dc24:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   1dc26:	43db      	mvns	r3, r3
   1dc28:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   1dc2c:	2b00      	cmp	r3, #0
   1dc2e:	d0eb      	beq.n	1dc08 <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   1dc30:	6923      	ldr	r3, [r4, #16]
   1dc32:	2b00      	cmp	r3, #0
   1dc34:	d0e8      	beq.n	1dc08 <virtqueue_kick+0x30>
		vq->notify(vq);
   1dc36:	4620      	mov	r0, r4
   1dc38:	4798      	blx	r3
   1dc3a:	e7e5      	b.n	1dc08 <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   1dc3c:	2b01      	cmp	r3, #1
   1dc3e:	d1e3      	bne.n	1dc08 <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   1dc40:	69c3      	ldr	r3, [r0, #28]
   1dc42:	e7ef      	b.n	1dc24 <virtqueue_kick+0x4c>

0001dc44 <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1dc44:	69c2      	ldr	r2, [r0, #28]
   1dc46:	8e01      	ldrh	r1, [r0, #48]	; 0x30
   1dc48:	8853      	ldrh	r3, [r2, #2]
   1dc4a:	428b      	cmp	r3, r1
   1dc4c:	d00a      	beq.n	1dc64 <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   1dc4e:	8943      	ldrh	r3, [r0, #10]
   1dc50:	3b01      	subs	r3, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   1dc52:	400b      	ands	r3, r1
   1dc54:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   1dc58:	889a      	ldrh	r2, [r3, #4]
   1dc5a:	6983      	ldr	r3, [r0, #24]
   1dc5c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1dc60:	6898      	ldr	r0, [r3, #8]
	return len;
   1dc62:	4770      	bx	lr
		return 0;
   1dc64:	2000      	movs	r0, #0
}
   1dc66:	4770      	bx	lr

0001dc68 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   1dc68:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   1dc6c:	68c3      	ldr	r3, [r0, #12]
   1dc6e:	b103      	cbz	r3, 1dc72 <virtqueue_notification+0xa>
		vq->callback(vq);
   1dc70:	4718      	bx	r3
}
   1dc72:	4770      	bx	lr

0001dc74 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1dc74:	f04f 32ff 	mov.w	r2, #4294967295
   1dc78:	f04f 33ff 	mov.w	r3, #4294967295
   1dc7c:	f7fb bc5c 	b.w	19538 <z_impl_k_sem_take>

0001dc80 <rpmsg_unregister_endpoint>:
{
   1dc80:	b570      	push	{r4, r5, r6, lr}
   1dc82:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   1dc84:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   1dc86:	f105 0658 	add.w	r6, r5, #88	; 0x58
   1dc8a:	4630      	mov	r0, r6
   1dc8c:	f7ff fff2 	bl	1dc74 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   1dc90:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1dc92:	1c5a      	adds	r2, r3, #1
   1dc94:	d010      	beq.n	1dcb8 <rpmsg_unregister_endpoint+0x38>
	addr -= RPMSG_RESERVED_ADDRESSES;
   1dc96:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
	if (addr >= 0 && addr < size)
   1dc9a:	2b7f      	cmp	r3, #127	; 0x7f
   1dc9c:	d80c      	bhi.n	1dcb8 <rpmsg_unregister_endpoint+0x38>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1dc9e:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1dca0:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   1dca2:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1dca4:	f003 031f 	and.w	r3, r3, #31
   1dca8:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1dcac:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
   1dcb0:	ea22 0203 	bic.w	r2, r2, r3
   1dcb4:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
	metal_list_del(&ept->node);
   1dcb8:	f104 0334 	add.w	r3, r4, #52	; 0x34
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   1dcbc:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   1dcc0:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   1dcc2:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   1dcc4:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   1dcc8:	2300      	movs	r3, #0
   1dcca:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   1dccc:	4630      	mov	r0, r6
}
   1dcce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1dcd2:	f7fb bbf5 	b.w	194c0 <z_impl_k_sem_give>

0001dcd6 <rpmsg_send_ns_message>:
{
   1dcd6:	b510      	push	{r4, lr}
	ns_msg.addr = ept->addr;
   1dcd8:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   1dcda:	b08c      	sub	sp, #48	; 0x30
   1dcdc:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   1dcde:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1dce0:	2220      	movs	r2, #32
   1dce2:	4601      	mov	r1, r0
   1dce4:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   1dce6:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1dce8:	f7fd ffb6 	bl	1bc58 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   1dcec:	2328      	movs	r3, #40	; 0x28
   1dcee:	2201      	movs	r2, #1
   1dcf0:	4620      	mov	r0, r4
   1dcf2:	e9cd 3200 	strd	r3, r2, [sp]
   1dcf6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1dcf8:	2235      	movs	r2, #53	; 0x35
   1dcfa:	ab02      	add	r3, sp, #8
   1dcfc:	f7f9 fbac 	bl	17458 <rpmsg_send_offchannel_raw>
}
   1dd00:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   1dd04:	b00c      	add	sp, #48	; 0x30
   1dd06:	bd10      	pop	{r4, pc}

0001dd08 <rpmsg_get_endpoint>:
{
   1dd08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1dd0c:	4680      	mov	r8, r0
   1dd0e:	4689      	mov	r9, r1
   1dd10:	4615      	mov	r5, r2
   1dd12:	461e      	mov	r6, r3
	metal_list_for_each(&rdev->endpoints, node) {
   1dd14:	6807      	ldr	r7, [r0, #0]
   1dd16:	45b8      	cmp	r8, r7
   1dd18:	d101      	bne.n	1dd1e <rpmsg_get_endpoint+0x16>
	return NULL;
   1dd1a:	2400      	movs	r4, #0
   1dd1c:	e021      	b.n	1dd62 <rpmsg_get_endpoint+0x5a>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1dd1e:	1c69      	adds	r1, r5, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   1dd20:	f1a7 0434 	sub.w	r4, r7, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1dd24:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1dd26:	d006      	beq.n	1dd36 <rpmsg_get_endpoint+0x2e>
   1dd28:	429d      	cmp	r5, r3
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   1dd2a:	d01a      	beq.n	1dd62 <rpmsg_get_endpoint+0x5a>
		if (name)
   1dd2c:	f1b9 0f00 	cmp.w	r9, #0
   1dd30:	d106      	bne.n	1dd40 <rpmsg_get_endpoint+0x38>
	metal_list_for_each(&rdev->endpoints, node) {
   1dd32:	683f      	ldr	r7, [r7, #0]
   1dd34:	e7ef      	b.n	1dd16 <rpmsg_get_endpoint+0xe>
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   1dd36:	3301      	adds	r3, #1
   1dd38:	d1f8      	bne.n	1dd2c <rpmsg_get_endpoint+0x24>
   1dd3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1dd3c:	42b3      	cmp	r3, r6
   1dd3e:	e7f4      	b.n	1dd2a <rpmsg_get_endpoint+0x22>
			name_match = !strncmp(ept->name, name,
   1dd40:	2220      	movs	r2, #32
   1dd42:	4649      	mov	r1, r9
   1dd44:	4620      	mov	r0, r4
   1dd46:	f7fd ffb5 	bl	1bcb4 <strncmp>
		if (!name || !name_match)
   1dd4a:	2800      	cmp	r0, #0
   1dd4c:	d1f1      	bne.n	1dd32 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   1dd4e:	1c72      	adds	r2, r6, #1
   1dd50:	d002      	beq.n	1dd58 <rpmsg_get_endpoint+0x50>
   1dd52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1dd54:	42b3      	cmp	r3, r6
   1dd56:	d004      	beq.n	1dd62 <rpmsg_get_endpoint+0x5a>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   1dd58:	1c6b      	adds	r3, r5, #1
   1dd5a:	d1ea      	bne.n	1dd32 <rpmsg_get_endpoint+0x2a>
   1dd5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1dd5e:	3301      	adds	r3, #1
   1dd60:	d1e7      	bne.n	1dd32 <rpmsg_get_endpoint+0x2a>
}
   1dd62:	4620      	mov	r0, r4
   1dd64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001dd68 <rpmsg_register_endpoint>:
	new_node->prev = node->prev;
   1dd68:	6842      	ldr	r2, [r0, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   1dd6a:	f101 0334 	add.w	r3, r1, #52	; 0x34
	new_node->next = node;
   1dd6e:	e9c1 020d 	strd	r0, r2, [r1, #52]	; 0x34
	ept->rdev = rdev;
   1dd72:	6208      	str	r0, [r1, #32]
	new_node->next->prev = new_node;
   1dd74:	6043      	str	r3, [r0, #4]
	new_node->prev->next = new_node;
   1dd76:	6b8a      	ldr	r2, [r1, #56]	; 0x38
   1dd78:	6013      	str	r3, [r2, #0]
}
   1dd7a:	4770      	bx	lr

0001dd7c <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   1dd7c:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept)
   1dd7e:	4604      	mov	r4, r0
   1dd80:	b190      	cbz	r0, 1dda8 <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;
   1dd82:	6a03      	ldr	r3, [r0, #32]
	if (!rdev)
   1dd84:	b183      	cbz	r3, 1dda8 <rpmsg_destroy_ept+0x2c>
		return;

	if (ept->name[0] && rdev->support_ns &&
   1dd86:	7802      	ldrb	r2, [r0, #0]
   1dd88:	b14a      	cbz	r2, 1dd9e <rpmsg_destroy_ept+0x22>
   1dd8a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   1dd8e:	b133      	cbz	r3, 1dd9e <rpmsg_destroy_ept+0x22>
   1dd90:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1dd92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1dd96:	d302      	bcc.n	1dd9e <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   1dd98:	2101      	movs	r1, #1
   1dd9a:	f7ff ff9c 	bl	1dcd6 <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   1dd9e:	4620      	mov	r0, r4
}
   1dda0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   1dda4:	f7ff bf6c 	b.w	1dc80 <rpmsg_unregister_endpoint>
}
   1dda8:	bd10      	pop	{r4, pc}

0001ddaa <rpmsg_virtio_tx_callback>:
}
   1ddaa:	4770      	bx	lr

0001ddac <k_sem_give>:
   1ddac:	f7fb bb88 	b.w	194c0 <z_impl_k_sem_give>

0001ddb0 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1ddb0:	f04f 32ff 	mov.w	r2, #4294967295
   1ddb4:	f04f 33ff 	mov.w	r3, #4294967295
   1ddb8:	f7fb bbbe 	b.w	19538 <z_impl_k_sem_take>

0001ddbc <rpmsg_virtio_ns_callback>:
{
   1ddbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (len != sizeof(*ns_msg))
   1ddc0:	2a28      	cmp	r2, #40	; 0x28
{
   1ddc2:	4680      	mov	r8, r0
   1ddc4:	460e      	mov	r6, r1
   1ddc6:	b089      	sub	sp, #36	; 0x24
	if (len != sizeof(*ns_msg))
   1ddc8:	d12b      	bne.n	1de22 <rpmsg_virtio_ns_callback+0x66>
	struct rpmsg_device *rdev = ept->rdev;
   1ddca:	6a05      	ldr	r5, [r0, #32]
	metal_io_block_read(io,
   1ddcc:	2320      	movs	r3, #32
	struct metal_io_region *io = rvdev->shbuf_io;
   1ddce:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
	metal_io_block_read(io,
   1ddd2:	466a      	mov	r2, sp
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1ddd4:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1ddd6:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1ddd8:	1a71      	subs	r1, r6, r1
   1ddda:	42a1      	cmp	r1, r4
   1dddc:	bf28      	it	cs
   1ddde:	f04f 31ff 	movcs.w	r1, #4294967295
   1dde2:	f7ff fce7 	bl	1d7b4 <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   1dde6:	f105 0758 	add.w	r7, r5, #88	; 0x58
	dest = ns_msg->addr;
   1ddea:	f8d6 9020 	ldr.w	r9, [r6, #32]
   1ddee:	4638      	mov	r0, r7
   1ddf0:	f7ff ffde 	bl	1ddb0 <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1ddf4:	464b      	mov	r3, r9
   1ddf6:	f04f 32ff 	mov.w	r2, #4294967295
   1ddfa:	4669      	mov	r1, sp
   1ddfc:	4628      	mov	r0, r5
   1ddfe:	f7ff ff83 	bl	1dd08 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1de02:	6a73      	ldr	r3, [r6, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1de04:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1de06:	07db      	lsls	r3, r3, #31
   1de08:	d50f      	bpl.n	1de2a <rpmsg_virtio_ns_callback+0x6e>
		if (_ept)
   1de0a:	b110      	cbz	r0, 1de12 <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = RPMSG_ADDR_ANY;
   1de0c:	f04f 33ff 	mov.w	r3, #4294967295
   1de10:	6283      	str	r3, [r0, #40]	; 0x28
   1de12:	4638      	mov	r0, r7
   1de14:	f7ff ffca 	bl	1ddac <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   1de18:	b11c      	cbz	r4, 1de22 <rpmsg_virtio_ns_callback+0x66>
   1de1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1de1c:	b10b      	cbz	r3, 1de22 <rpmsg_virtio_ns_callback+0x66>
			_ept->ns_unbind_cb(ept);
   1de1e:	4640      	mov	r0, r8
   1de20:	4798      	blx	r3
}
   1de22:	2000      	movs	r0, #0
   1de24:	b009      	add	sp, #36	; 0x24
   1de26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!_ept) {
   1de2a:	b950      	cbnz	r0, 1de42 <rpmsg_virtio_ns_callback+0x86>
   1de2c:	4638      	mov	r0, r7
   1de2e:	f7ff ffbd 	bl	1ddac <k_sem_give>
			if (rdev->ns_bind_cb)
   1de32:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   1de34:	2b00      	cmp	r3, #0
   1de36:	d0f4      	beq.n	1de22 <rpmsg_virtio_ns_callback+0x66>
				rdev->ns_bind_cb(rdev, name, dest);
   1de38:	464a      	mov	r2, r9
   1de3a:	4669      	mov	r1, sp
   1de3c:	4628      	mov	r0, r5
   1de3e:	4798      	blx	r3
   1de40:	e7ef      	b.n	1de22 <rpmsg_virtio_ns_callback+0x66>
			_ept->dest_addr = dest;
   1de42:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
   1de46:	4638      	mov	r0, r7
   1de48:	f7ff ffb0 	bl	1ddac <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   1de4c:	e7e9      	b.n	1de22 <rpmsg_virtio_ns_callback+0x66>

0001de4e <rpmsg_virtio_get_rx_buffer>:
{
   1de4e:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   1de50:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
   1de52:	4613      	mov	r3, r2
   1de54:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_MASTER) {
   1de56:	b925      	cbnz	r5, 1de62 <rpmsg_virtio_get_rx_buffer+0x14>
}
   1de58:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   1de5a:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   1de5e:	f7ff be07 	b.w	1da70 <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   1de62:	2d01      	cmp	r5, #1
   1de64:	d106      	bne.n	1de74 <rpmsg_virtio_get_rx_buffer+0x26>
}
   1de66:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   1de68:	460a      	mov	r2, r1
   1de6a:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   1de6e:	4619      	mov	r1, r3
   1de70:	f7ff be38 	b.w	1dae4 <virtqueue_get_available_buffer>
}
   1de74:	2000      	movs	r0, #0
   1de76:	bc30      	pop	{r4, r5}
   1de78:	4770      	bx	lr

0001de7a <rpmsg_virtio_rx_callback>:
{
   1de7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   1de7e:	6803      	ldr	r3, [r0, #0]
{
   1de80:	b086      	sub	sp, #24
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   1de82:	6a5e      	ldr	r6, [r3, #36]	; 0x24
	metal_mutex_acquire(&rdev->lock);
   1de84:	f106 0758 	add.w	r7, r6, #88	; 0x58
	__metal_mutex_acquire(mutex);
   1de88:	4638      	mov	r0, r7
   1de8a:	f7ff ff91 	bl	1ddb0 <__metal_mutex_acquire>
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1de8e:	4630      	mov	r0, r6
   1de90:	f10d 020a 	add.w	r2, sp, #10
   1de94:	a903      	add	r1, sp, #12
   1de96:	f7ff ffda 	bl	1de4e <rpmsg_virtio_get_rx_buffer>
   1de9a:	4604      	mov	r4, r0
   1de9c:	4638      	mov	r0, r7
   1de9e:	f7ff ff85 	bl	1ddac <k_sem_give>
	while (rp_hdr) {
   1dea2:	b914      	cbnz	r4, 1deaa <rpmsg_virtio_rx_callback+0x30>
}
   1dea4:	b006      	add	sp, #24
   1dea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1deaa:	4638      	mov	r0, r7
   1deac:	f7ff ff80 	bl	1ddb0 <__metal_mutex_acquire>
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   1deb0:	f04f 33ff 	mov.w	r3, #4294967295
   1deb4:	2100      	movs	r1, #0
   1deb6:	4630      	mov	r0, r6
   1deb8:	6862      	ldr	r2, [r4, #4]
   1deba:	f7ff ff25 	bl	1dd08 <rpmsg_get_endpoint>
   1debe:	4605      	mov	r5, r0
   1dec0:	4638      	mov	r0, r7
   1dec2:	f7ff ff73 	bl	1ddac <k_sem_give>
		if (ept) {
   1dec6:	b185      	cbz	r5, 1deea <rpmsg_virtio_rx_callback+0x70>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1dec8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
				ept->dest_addr = rp_hdr->src;
   1deca:	6823      	ldr	r3, [r4, #0]
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1decc:	3201      	adds	r2, #1
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1dece:	6be9      	ldr	r1, [r5, #60]	; 0x3c
				ept->dest_addr = rp_hdr->src;
   1ded0:	bf08      	it	eq
   1ded2:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1ded4:	89a2      	ldrh	r2, [r4, #12]
   1ded6:	9100      	str	r1, [sp, #0]
   1ded8:	4628      	mov	r0, r5
   1deda:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   1dede:	f104 0110 	add.w	r1, r4, #16
   1dee2:	47c0      	blx	r8
			RPMSG_ASSERT(status >= 0,
   1dee4:	2800      	cmp	r0, #0
   1dee6:	da00      	bge.n	1deea <rpmsg_virtio_rx_callback+0x70>
   1dee8:	e7fe      	b.n	1dee8 <rpmsg_virtio_rx_callback+0x6e>
   1deea:	4638      	mov	r0, r7
   1deec:	f7ff ff60 	bl	1ddb0 <__metal_mutex_acquire>
   1def0:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1def2:	9b03      	ldr	r3, [sp, #12]
   1def4:	6992      	ldr	r2, [r2, #24]
	if (role == RPMSG_MASTER) {
   1def6:	b9b2      	cbnz	r2, 1df26 <rpmsg_virtio_rx_callback+0xac>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1def8:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   1defa:	e9cd 4304 	strd	r4, r3, [sp, #16]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1defe:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   1df02:	2301      	movs	r3, #1
   1df04:	a904      	add	r1, sp, #16
   1df06:	f7ff fd53 	bl	1d9b0 <virtqueue_add_buffer>
		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1df0a:	4630      	mov	r0, r6
   1df0c:	f10d 020a 	add.w	r2, sp, #10
   1df10:	a903      	add	r1, sp, #12
   1df12:	f7ff ff9c 	bl	1de4e <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   1df16:	4604      	mov	r4, r0
   1df18:	2800      	cmp	r0, #0
   1df1a:	d1bf      	bne.n	1de9c <rpmsg_virtio_rx_callback+0x22>
			virtqueue_kick(rvdev->rvq);
   1df1c:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   1df20:	f7ff fe5a 	bl	1dbd8 <virtqueue_kick>
   1df24:	e7ba      	b.n	1de9c <rpmsg_virtio_rx_callback+0x22>
	if (role == RPMSG_REMOTE) {
   1df26:	2a01      	cmp	r2, #1
   1df28:	d1ef      	bne.n	1df0a <rpmsg_virtio_rx_callback+0x90>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   1df2a:	461a      	mov	r2, r3
   1df2c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   1df30:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   1df34:	f7f9 fa74 	bl	17420 <virtqueue_add_consumed_buffer>
   1df38:	e7e7      	b.n	1df0a <rpmsg_virtio_rx_callback+0x90>

0001df3a <_rpmsg_virtio_get_buffer_size>:
{
   1df3a:	b508      	push	{r3, lr}
   1df3c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   1df3e:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   1df40:	b14b      	cbz	r3, 1df56 <_rpmsg_virtio_get_buffer_size+0x1c>
	if (role == RPMSG_REMOTE) {
   1df42:	2b01      	cmp	r3, #1
   1df44:	d10a      	bne.n	1df5c <_rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   1df46:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   1df4a:	f7ff fe7b 	bl	1dc44 <virtqueue_get_desc_size>
   1df4e:	3810      	subs	r0, #16
   1df50:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1df54:	bd08      	pop	{r3, pc}
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
   1df56:	f44f 70f8 	mov.w	r0, #496	; 0x1f0
   1df5a:	e7fb      	b.n	1df54 <_rpmsg_virtio_get_buffer_size+0x1a>
	int length = 0;
   1df5c:	2000      	movs	r0, #0
	return length;
   1df5e:	e7f9      	b.n	1df54 <_rpmsg_virtio_get_buffer_size+0x1a>

0001df60 <rpmsg_virtio_shm_pool_get_buffer>:
{
   1df60:	4603      	mov	r3, r0
	if (shpool->avail < size)
   1df62:	6842      	ldr	r2, [r0, #4]
{
   1df64:	b510      	push	{r4, lr}
	if (shpool->avail < size)
   1df66:	428a      	cmp	r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1df68:	bf29      	itett	cs
   1df6a:	6880      	ldrcs	r0, [r0, #8]
		return NULL;
   1df6c:	2000      	movcc	r0, #0
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1df6e:	1a84      	subcs	r4, r0, r2
   1df70:	6818      	ldrcs	r0, [r3, #0]
	shpool->avail -= size;
   1df72:	bf22      	ittt	cs
   1df74:	1a52      	subcs	r2, r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1df76:	1900      	addcs	r0, r0, r4
	shpool->avail -= size;
   1df78:	605a      	strcs	r2, [r3, #4]
}
   1df7a:	bd10      	pop	{r4, pc}

0001df7c <rpmsg_virtio_init_shm_pool>:
	if (!shpool)
   1df7c:	b110      	cbz	r0, 1df84 <rpmsg_virtio_init_shm_pool+0x8>
	shpool->avail = size;
   1df7e:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   1df82:	6001      	str	r1, [r0, #0]
}
   1df84:	4770      	bx	lr

0001df86 <z_pm_save_idle_exit>:
	z_clock_idle_exit();
   1df86:	f7fd b826 	b.w	1afd6 <z_clock_idle_exit>

0001df8a <k_heap_init>:
{
   1df8a:	b410      	push	{r4}
   1df8c:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1df90:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1df94:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1df96:	f7ec bf03 	b.w	ada0 <sys_heap_init>

0001df9a <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   1df9a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1df9e:	428b      	cmp	r3, r1
   1dfa0:	d001      	beq.n	1dfa6 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   1dfa2:	f7fb b85b 	b.w	1905c <z_set_prio>
}
   1dfa6:	2000      	movs	r0, #0
   1dfa8:	4770      	bx	lr

0001dfaa <z_impl_k_mutex_init>:
{
   1dfaa:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1dfac:	2000      	movs	r0, #0
   1dfae:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   1dfb2:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   1dfb6:	4770      	bx	lr

0001dfb8 <z_queue_node_peek>:
{
   1dfb8:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1dfba:	4604      	mov	r4, r0
   1dfbc:	b130      	cbz	r0, 1dfcc <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1dfbe:	6802      	ldr	r2, [r0, #0]
   1dfc0:	0793      	lsls	r3, r2, #30
   1dfc2:	d003      	beq.n	1dfcc <z_queue_node_peek+0x14>
		ret = anode->data;
   1dfc4:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1dfc6:	b109      	cbz	r1, 1dfcc <z_queue_node_peek+0x14>
			k_free(anode);
   1dfc8:	f000 f982 	bl	1e2d0 <k_free>
}
   1dfcc:	4620      	mov	r0, r4
   1dfce:	bd10      	pop	{r4, pc}

0001dfd0 <z_impl_k_queue_init>:
	list->head = NULL;
   1dfd0:	2300      	movs	r3, #0
	list->tail = NULL;
   1dfd2:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   1dfd6:	6083      	str	r3, [r0, #8]
   1dfd8:	f100 030c 	add.w	r3, r0, #12
   1dfdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   1dfe0:	f100 0314 	add.w	r3, r0, #20
   1dfe4:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   1dfe8:	4770      	bx	lr

0001dfea <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   1dfea:	2301      	movs	r3, #1
{
   1dfec:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1dfee:	9300      	str	r3, [sp, #0]
   1dff0:	2300      	movs	r3, #0
{
   1dff2:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1dff4:	4619      	mov	r1, r3
   1dff6:	f7fa f919 	bl	1822c <queue_insert>
}
   1dffa:	b003      	add	sp, #12
   1dffc:	f85d fb04 	ldr.w	pc, [sp], #4

0001e000 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   1e000:	2300      	movs	r3, #0
{
   1e002:	b507      	push	{r0, r1, r2, lr}
   1e004:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1e006:	9300      	str	r3, [sp, #0]
   1e008:	4619      	mov	r1, r3
   1e00a:	f7fa f90f 	bl	1822c <queue_insert>
}
   1e00e:	b003      	add	sp, #12
   1e010:	f85d fb04 	ldr.w	pc, [sp], #4

0001e014 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   1e014:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1e018:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   1e01c:	4298      	cmp	r0, r3
   1e01e:	bfac      	ite	ge
   1e020:	2000      	movge	r0, #0
   1e022:	2001      	movlt	r0, #1
   1e024:	4770      	bx	lr

0001e026 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1e026:	4603      	mov	r3, r0
   1e028:	b920      	cbnz	r0, 1e034 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1e02a:	f3ef 8205 	mrs	r2, IPSR
   1e02e:	b90a      	cbnz	r2, 1e034 <z_reschedule_irqlock+0xe>
   1e030:	f7ef bc76 	b.w	d920 <arch_swap>
   1e034:	f383 8811 	msr	BASEPRI, r3
   1e038:	f3bf 8f6f 	isb	sy
}
   1e03c:	4770      	bx	lr

0001e03e <z_reschedule_unlocked>:
	__asm__ volatile(
   1e03e:	f04f 0320 	mov.w	r3, #32
   1e042:	f3ef 8011 	mrs	r0, BASEPRI
   1e046:	f383 8811 	msr	BASEPRI, r3
   1e04a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1e04e:	f7ff bfea 	b.w	1e026 <z_reschedule_irqlock>

0001e052 <unpend_thread_no_timeout>:
{
   1e052:	b510      	push	{r4, lr}
   1e054:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1e056:	f7fa fa23 	bl	184a0 <pended_on>
   1e05a:	4621      	mov	r1, r4
   1e05c:	f7fa fb28 	bl	186b0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1e060:	7b63      	ldrb	r3, [r4, #13]
   1e062:	f023 0302 	bic.w	r3, r3, #2
   1e066:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1e068:	2300      	movs	r3, #0
   1e06a:	60a3      	str	r3, [r4, #8]
}
   1e06c:	bd10      	pop	{r4, pc}

0001e06e <z_priq_dumb_best>:
{
   1e06e:	4603      	mov	r3, r0
	return list->head == list;
   1e070:	6800      	ldr	r0, [r0, #0]
}
   1e072:	4283      	cmp	r3, r0
   1e074:	bf08      	it	eq
   1e076:	2000      	moveq	r0, #0
   1e078:	4770      	bx	lr

0001e07a <z_unpend_all>:
{
   1e07a:	b538      	push	{r3, r4, r5, lr}
   1e07c:	4605      	mov	r5, r0
	int need_sched = 0;
   1e07e:	2000      	movs	r0, #0
   1e080:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e082:	42a5      	cmp	r5, r4
   1e084:	d000      	beq.n	1e088 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1e086:	b904      	cbnz	r4, 1e08a <z_unpend_all+0x10>
}
   1e088:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1e08a:	4620      	mov	r0, r4
   1e08c:	f7fa fb3c 	bl	18708 <z_unpend_thread>
		z_ready_thread(thread);
   1e090:	4620      	mov	r0, r4
   1e092:	f7fa fc53 	bl	1893c <z_ready_thread>
		need_sched = 1;
   1e096:	2001      	movs	r0, #1
   1e098:	e7f2      	b.n	1e080 <z_unpend_all+0x6>

0001e09a <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   1e09a:	b15a      	cbz	r2, 1e0b4 <z_impl_k_sem_init+0x1a>
   1e09c:	428a      	cmp	r2, r1
   1e09e:	d309      	bcc.n	1e0b4 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1e0a0:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1e0a4:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1e0a8:	e9c0 0000 	strd	r0, r0, [r0]
   1e0ac:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1e0b0:	2000      	movs	r0, #0
   1e0b2:	4770      	bx	lr
		return -EINVAL;
   1e0b4:	f06f 0015 	mvn.w	r0, #21
}
   1e0b8:	4770      	bx	lr

0001e0ba <k_is_in_isr>:
   1e0ba:	f3ef 8005 	mrs	r0, IPSR
}
   1e0be:	3800      	subs	r0, #0
   1e0c0:	bf18      	it	ne
   1e0c2:	2001      	movne	r0, #1
   1e0c4:	4770      	bx	lr

0001e0c6 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   1e0c6:	b108      	cbz	r0, 1e0cc <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   1e0c8:	f7ed bab4 	b.w	b634 <arch_busy_wait>
}
   1e0cc:	4770      	bx	lr

0001e0ce <z_impl_k_thread_name_set>:
}
   1e0ce:	f06f 0046 	mvn.w	r0, #70	; 0x46
   1e0d2:	4770      	bx	lr

0001e0d4 <k_thread_name_get>:
}
   1e0d4:	2000      	movs	r0, #0
   1e0d6:	4770      	bx	lr

0001e0d8 <k_work_submit_to_queue>:
{
   1e0d8:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e0da:	f101 0308 	add.w	r3, r1, #8
   1e0de:	e8d3 2fef 	ldaex	r2, [r3]
   1e0e2:	f042 0c01 	orr.w	ip, r2, #1
   1e0e6:	e8c3 cfee 	stlex	lr, ip, [r3]
   1e0ea:	f1be 0f00 	cmp.w	lr, #0
   1e0ee:	d1f6      	bne.n	1e0de <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1e0f0:	07d3      	lsls	r3, r2, #31
   1e0f2:	d403      	bmi.n	1e0fc <k_work_submit_to_queue+0x24>
}
   1e0f4:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1e0f8:	f7ff bf77 	b.w	1dfea <k_queue_append>
}
   1e0fc:	f85d fb04 	ldr.w	pc, [sp], #4

0001e100 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   1e100:	f1a0 0110 	sub.w	r1, r0, #16
   1e104:	6980      	ldr	r0, [r0, #24]
   1e106:	f7ff bfe7 	b.w	1e0d8 <k_work_submit_to_queue>

0001e10a <work_cancel>:
{
   1e10a:	b570      	push	{r4, r5, r6, lr}
   1e10c:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   1e10e:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e112:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   1e116:	07db      	lsls	r3, r3, #31
   1e118:	d52f      	bpl.n	1e17a <work_cancel+0x70>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1e11a:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   1e11c:	6a82      	ldr	r2, [r0, #40]	; 0x28
	return list->head;
   1e11e:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1e120:	b913      	cbnz	r3, 1e128 <work_cancel+0x1e>
			return -EINVAL;
   1e122:	f06f 0015 	mvn.w	r0, #21
}
   1e126:	bd70      	pop	{r4, r5, r6, pc}
   1e128:	429c      	cmp	r4, r3
   1e12a:	d121      	bne.n	1e170 <work_cancel+0x66>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e12c:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   1e12e:	6856      	ldr	r6, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e130:	f023 0003 	bic.w	r0, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode)
   1e134:	b991      	cbnz	r1, 1e15c <work_cancel+0x52>
   1e136:	42b4      	cmp	r4, r6
	list->head = node;
   1e138:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1e13a:	d100      	bne.n	1e13e <work_cancel+0x34>
	list->tail = node;
   1e13c:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e13e:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e140:	f003 0303 	and.w	r3, r3, #3
   1e144:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   1e146:	2000      	movs	r0, #0
   1e148:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e14a:	e8d5 3fef 	ldaex	r3, [r5]
   1e14e:	f023 0301 	bic.w	r3, r3, #1
   1e152:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1e156:	2a00      	cmp	r2, #0
   1e158:	d0e5      	beq.n	1e126 <work_cancel+0x1c>
   1e15a:	e7f6      	b.n	1e14a <work_cancel+0x40>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e15c:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1e15e:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e160:	f003 0303 	and.w	r3, r3, #3
   1e164:	ea43 0300 	orr.w	r3, r3, r0
   1e168:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1e16a:	bf08      	it	eq
   1e16c:	6051      	streq	r1, [r2, #4]
}
   1e16e:	e7e6      	b.n	1e13e <work_cancel+0x34>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e170:	6818      	ldr	r0, [r3, #0]
   1e172:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1e174:	f020 0303 	bic.w	r3, r0, #3
   1e178:	e7d2      	b.n	1e120 <work_cancel+0x16>
		int err = z_abort_timeout(&work->timeout);
   1e17a:	3010      	adds	r0, #16
   1e17c:	f7fb fdd0 	bl	19d20 <z_abort_timeout>
		if (err) {
   1e180:	2800      	cmp	r0, #0
   1e182:	d0e0      	beq.n	1e146 <work_cancel+0x3c>
			return -EALREADY;
   1e184:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1e188:	e7cd      	b.n	1e126 <work_cancel+0x1c>

0001e18a <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   1e18a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   1e18c:	f7fb ff16 	bl	19fbc <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1e190:	bd08      	pop	{r3, pc}

0001e192 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   1e192:	f7fb bf13 	b.w	19fbc <z_tick_get>

0001e196 <z_timeout_end_calc>:
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e196:	f1b1 3fff 	cmp.w	r1, #4294967295
   1e19a:	bf08      	it	eq
   1e19c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1e1a0:	b538      	push	{r3, r4, r5, lr}
   1e1a2:	4605      	mov	r5, r0
   1e1a4:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e1a6:	d01d      	beq.n	1e1e4 <z_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1e1a8:	ea51 0300 	orrs.w	r3, r1, r0
   1e1ac:	d103      	bne.n	1e1b6 <z_timeout_end_calc+0x20>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
   1e1ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   1e1b2:	f7fb bf03 	b.w	19fbc <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1e1b6:	f06f 0301 	mvn.w	r3, #1
   1e1ba:	1a18      	subs	r0, r3, r0
   1e1bc:	f04f 33ff 	mov.w	r3, #4294967295
   1e1c0:	eb63 0101 	sbc.w	r1, r3, r1
   1e1c4:	2900      	cmp	r1, #0
   1e1c6:	da0c      	bge.n	1e1e2 <z_timeout_end_calc+0x4c>
	return z_tick_get() + MAX(1, dt);
   1e1c8:	f7fb fef8 	bl	19fbc <z_tick_get>
   1e1cc:	2d01      	cmp	r5, #1
   1e1ce:	4622      	mov	r2, r4
   1e1d0:	f174 0400 	sbcs.w	r4, r4, #0
   1e1d4:	462b      	mov	r3, r5
   1e1d6:	bfbc      	itt	lt
   1e1d8:	2301      	movlt	r3, #1
   1e1da:	2200      	movlt	r2, #0
   1e1dc:	1818      	adds	r0, r3, r0
   1e1de:	eb41 0102 	adc.w	r1, r1, r2
}
   1e1e2:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   1e1e4:	f04f 30ff 	mov.w	r0, #4294967295
   1e1e8:	4601      	mov	r1, r0
   1e1ea:	e7fa      	b.n	1e1e2 <z_timeout_end_calc+0x4c>

0001e1ec <k_work_submit_to_queue>:
{
   1e1ec:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e1ee:	f101 0308 	add.w	r3, r1, #8
   1e1f2:	e8d3 2fef 	ldaex	r2, [r3]
   1e1f6:	f042 0c01 	orr.w	ip, r2, #1
   1e1fa:	e8c3 cfee 	stlex	lr, ip, [r3]
   1e1fe:	f1be 0f00 	cmp.w	lr, #0
   1e202:	d1f6      	bne.n	1e1f2 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1e204:	07d3      	lsls	r3, r2, #31
   1e206:	d403      	bmi.n	1e210 <k_work_submit_to_queue+0x24>
}
   1e208:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1e20c:	f7ff beed 	b.w	1dfea <k_queue_append>
}
   1e210:	f85d fb04 	ldr.w	pc, [sp], #4

0001e214 <add_event>:
{
   1e214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e216:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1e218:	e9d0 2300 	ldrd	r2, r3, [r0]
   1e21c:	4290      	cmp	r0, r2
   1e21e:	4604      	mov	r4, r0
   1e220:	460d      	mov	r5, r1
   1e222:	d106      	bne.n	1e232 <add_event+0x1e>
	node->prev = list->tail;
   1e224:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   1e226:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   1e228:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   1e22a:	6863      	ldr	r3, [r4, #4]
   1e22c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1e22e:	6065      	str	r5, [r4, #4]
}
   1e230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1e232:	2b00      	cmp	r3, #0
   1e234:	d0f6      	beq.n	1e224 <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   1e236:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1e238:	b100      	cbz	r0, 1e23c <add_event+0x28>
   1e23a:	386c      	subs	r0, #108	; 0x6c
   1e23c:	b107      	cbz	r7, 1e240 <add_event+0x2c>
   1e23e:	3f6c      	subs	r7, #108	; 0x6c
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   1e240:	4639      	mov	r1, r7
   1e242:	f7ff fee7 	bl	1e014 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   1e246:	2800      	cmp	r0, #0
   1e248:	d1ec      	bne.n	1e224 <add_event+0x10>
	return list->head == list;
   1e24a:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e24c:	42b4      	cmp	r4, r6
   1e24e:	d0e9      	beq.n	1e224 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e250:	2e00      	cmp	r6, #0
   1e252:	d0e7      	beq.n	1e224 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   1e254:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1e256:	b101      	cbz	r1, 1e25a <add_event+0x46>
   1e258:	396c      	subs	r1, #108	; 0x6c
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   1e25a:	4638      	mov	r0, r7
   1e25c:	f7ff feda 	bl	1e014 <z_is_t1_higher_prio_than_t2>
   1e260:	b128      	cbz	r0, 1e26e <add_event+0x5a>
	node->prev = successor->prev;
   1e262:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1e264:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   1e268:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1e26a:	6075      	str	r5, [r6, #4]
			return;
   1e26c:	e7e0      	b.n	1e230 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   1e26e:	6863      	ldr	r3, [r4, #4]
   1e270:	429e      	cmp	r6, r3
   1e272:	d0d7      	beq.n	1e224 <add_event+0x10>
   1e274:	6836      	ldr	r6, [r6, #0]
   1e276:	e7eb      	b.n	1e250 <add_event+0x3c>

0001e278 <z_handle_obj_poll_events>:
{
   1e278:	4603      	mov	r3, r0
	return list->head == list;
   1e27a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1e27c:	4283      	cmp	r3, r0
   1e27e:	d008      	beq.n	1e292 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   1e280:	e9d0 3200 	ldrd	r3, r2, [r0]
   1e284:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1e286:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e288:	2300      	movs	r3, #0
	node->prev = NULL;
   1e28a:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1e28e:	f7fb bed3 	b.w	1a038 <signal_poll_event>
}
   1e292:	4770      	bx	lr

0001e294 <z_heap_aligned_alloc>:
	size_t excess = MAX(sizeof(struct k_heap *), align);
   1e294:	2904      	cmp	r1, #4
{
   1e296:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
	size_t excess = MAX(sizeof(struct k_heap *), align);
   1e29a:	460d      	mov	r5, r1
   1e29c:	bf38      	it	cc
   1e29e:	2504      	movcc	r5, #4
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1e2a0:	1952      	adds	r2, r2, r5
{
   1e2a2:	4606      	mov	r6, r0
   1e2a4:	d209      	bcs.n	1e2ba <z_heap_aligned_alloc+0x26>
	mem = k_heap_aligned_alloc(heap, align, size, K_NO_WAIT);
   1e2a6:	f04f 0800 	mov.w	r8, #0
   1e2aa:	f04f 0900 	mov.w	r9, #0
   1e2ae:	e9cd 8900 	strd	r8, r9, [sp]
   1e2b2:	f7f9 fcad 	bl	17c10 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1e2b6:	4604      	mov	r4, r0
   1e2b8:	b918      	cbnz	r0, 1e2c2 <z_heap_aligned_alloc+0x2e>
		return NULL;
   1e2ba:	2000      	movs	r0, #0
}
   1e2bc:	b002      	add	sp, #8
   1e2be:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	memset(mem, 0xff, excess);
   1e2c2:	462a      	mov	r2, r5
   1e2c4:	21ff      	movs	r1, #255	; 0xff
   1e2c6:	f7fd fd42 	bl	1bd4e <memset>
	*heap_ref = heap;
   1e2ca:	6026      	str	r6, [r4, #0]
	return mem + excess;
   1e2cc:	1960      	adds	r0, r4, r5
   1e2ce:	e7f5      	b.n	1e2bc <z_heap_aligned_alloc+0x28>

0001e2d0 <k_free>:
	if (ptr != NULL) {
   1e2d0:	b138      	cbz	r0, 1e2e2 <k_free+0x12>
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   1e2d2:	1f03      	subs	r3, r0, #4
   1e2d4:	4619      	mov	r1, r3
			*heap_ref == (struct k_heap *)-1; --heap_ref) {
   1e2d6:	f853 0904 	ldr.w	r0, [r3], #-4
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   1e2da:	1c42      	adds	r2, r0, #1
   1e2dc:	d0fa      	beq.n	1e2d4 <k_free+0x4>
		k_heap_free(*heap_ref, ptr);
   1e2de:	f7f9 bd1f 	b.w	17d20 <k_heap_free>
}
   1e2e2:	4770      	bx	lr

0001e2e4 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   1e2e4:	4770      	bx	lr
